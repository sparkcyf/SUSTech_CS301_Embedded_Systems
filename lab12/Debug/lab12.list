
lab12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051e0  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  080053d0  080053d0  000153d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054c0  080054c0  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080054c0  080054c0  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080054c0  080054c0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054c0  080054c0  000154c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080054c4  080054c4  000154c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080054c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000106c  20000074  0800553c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200010e0  0800553c  000210e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013a14  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002f02  00000000  00000000  00033ab1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011b8  00000000  00000000  000369b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001040  00000000  00000000  00037b70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001aee7  00000000  00000000  00038bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fade  00000000  00000000  00053a97  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a0048  00000000  00000000  00063575  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001035bd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bd4  00000000  00000000  00103638  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000074 	.word	0x20000074
 800020c:	00000000 	.word	0x00000000
 8000210:	080053b8 	.word	0x080053b8

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000078 	.word	0x20000078
 800022c:	080053b8 	.word	0x080053b8

08000230 <strlen>:
 8000230:	4603      	mov	r3, r0
 8000232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000236:	2a00      	cmp	r2, #0
 8000238:	d1fb      	bne.n	8000232 <strlen+0x2>
 800023a:	1a18      	subs	r0, r3, r0
 800023c:	3801      	subs	r0, #1
 800023e:	4770      	bx	lr

08000240 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000240:	b480      	push	{r7}
 8000242:	b085      	sub	sp, #20
 8000244:	af00      	add	r7, sp, #0
 8000246:	60f8      	str	r0, [r7, #12]
 8000248:	60b9      	str	r1, [r7, #8]
 800024a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800024c:	68fb      	ldr	r3, [r7, #12]
 800024e:	4a06      	ldr	r2, [pc, #24]	; (8000268 <vApplicationGetIdleTaskMemory+0x28>)
 8000250:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000252:	68bb      	ldr	r3, [r7, #8]
 8000254:	4a05      	ldr	r2, [pc, #20]	; (800026c <vApplicationGetIdleTaskMemory+0x2c>)
 8000256:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	2280      	movs	r2, #128	; 0x80
 800025c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800025e:	bf00      	nop
 8000260:	3714      	adds	r7, #20
 8000262:	46bd      	mov	sp, r7
 8000264:	bc80      	pop	{r7}
 8000266:	4770      	bx	lr
 8000268:	20000094 	.word	0x20000094
 800026c:	200000e8 	.word	0x200000e8

08000270 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000270:	b5b0      	push	{r4, r5, r7, lr}
 8000272:	b096      	sub	sp, #88	; 0x58
 8000274:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myQueue01 */
  osMessageQDef(myQueue01, 16, uint16_t);
 8000276:	4b23      	ldr	r3, [pc, #140]	; (8000304 <MX_FREERTOS_Init+0x94>)
 8000278:	f107 0448 	add.w	r4, r7, #72	; 0x48
 800027c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800027e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 8000282:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000286:	2100      	movs	r1, #0
 8000288:	4618      	mov	r0, r3
 800028a:	f002 faa5 	bl	80027d8 <osMessageCreate>
 800028e:	4602      	mov	r2, r0
 8000290:	4b1d      	ldr	r3, [pc, #116]	; (8000308 <MX_FREERTOS_Init+0x98>)
 8000292:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
   osMailQDef(mail01, 4, mailStruct);
 8000294:	2304      	movs	r3, #4
 8000296:	63bb      	str	r3, [r7, #56]	; 0x38
 8000298:	2302      	movs	r3, #2
 800029a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800029c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80002a0:	643b      	str	r3, [r7, #64]	; 0x40
   mail01Handle = osMailCreate(osMailQ(mail01), NULL);
 80002a2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80002a6:	2100      	movs	r1, #0
 80002a8:	4618      	mov	r0, r3
 80002aa:	f002 fabe 	bl	800282a <osMailCreate>
 80002ae:	4602      	mov	r2, r0
 80002b0:	4b16      	ldr	r3, [pc, #88]	; (800030c <MX_FREERTOS_Init+0x9c>)
 80002b2:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of MsgProducer */
  osThreadDef(MsgProducer, MsgProducerTask, osPriorityNormal, 0, 128);
 80002b4:	4b16      	ldr	r3, [pc, #88]	; (8000310 <MX_FREERTOS_Init+0xa0>)
 80002b6:	f107 041c 	add.w	r4, r7, #28
 80002ba:	461d      	mov	r5, r3
 80002bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002c0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MsgProducerHandle = osThreadCreate(osThread(MsgProducer), NULL);
 80002c8:	f107 031c 	add.w	r3, r7, #28
 80002cc:	2100      	movs	r1, #0
 80002ce:	4618      	mov	r0, r3
 80002d0:	f002 f923 	bl	800251a <osThreadCreate>
 80002d4:	4602      	mov	r2, r0
 80002d6:	4b0f      	ldr	r3, [pc, #60]	; (8000314 <MX_FREERTOS_Init+0xa4>)
 80002d8:	601a      	str	r2, [r3, #0]

  /* definition and creation of MsgConsumer */
  osThreadDef(MsgConsumer, MsgConsumerTask, osPriorityNormal, 0, 128);
 80002da:	4b0f      	ldr	r3, [pc, #60]	; (8000318 <MX_FREERTOS_Init+0xa8>)
 80002dc:	463c      	mov	r4, r7
 80002de:	461d      	mov	r5, r3
 80002e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MsgConsumerHandle = osThreadCreate(osThread(MsgConsumer), NULL);
 80002ec:	463b      	mov	r3, r7
 80002ee:	2100      	movs	r1, #0
 80002f0:	4618      	mov	r0, r3
 80002f2:	f002 f912 	bl	800251a <osThreadCreate>
 80002f6:	4602      	mov	r2, r0
 80002f8:	4b08      	ldr	r3, [pc, #32]	; (800031c <MX_FREERTOS_Init+0xac>)
 80002fa:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80002fc:	bf00      	nop
 80002fe:	3758      	adds	r7, #88	; 0x58
 8000300:	46bd      	mov	sp, r7
 8000302:	bdb0      	pop	{r4, r5, r7, pc}
 8000304:	080053d0 	.word	0x080053d0
 8000308:	2000108c 	.word	0x2000108c
 800030c:	20001088 	.word	0x20001088
 8000310:	080053ec 	.word	0x080053ec
 8000314:	20001044 	.word	0x20001044
 8000318:	08005414 	.word	0x08005414
 800031c:	20001040 	.word	0x20001040

08000320 <MsgProducerTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_MsgProducerTask */
void MsgProducerTask(void const * argument)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b088      	sub	sp, #32
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
	char msgs[20];
  /* Infinite loop */
  for(;;)
  {

	  mail = (mailStruct *)osMailAlloc(mail01Handle, osWaitForever);
 8000328:	4b1d      	ldr	r3, [pc, #116]	; (80003a0 <MsgProducerTask+0x80>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000330:	4618      	mov	r0, r3
 8000332:	f002 fad2 	bl	80028da <osMailAlloc>
 8000336:	61f8      	str	r0, [r7, #28]
	  if (mail == NULL){
 8000338:	69fb      	ldr	r3, [r7, #28]
 800033a:	2b00      	cmp	r3, #0
 800033c:	d02d      	beq.n	800039a <MsgProducerTask+0x7a>
		  continue;
	  }
	  mail->var = buffer+1;
 800033e:	4b19      	ldr	r3, [pc, #100]	; (80003a4 <MsgProducerTask+0x84>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	b29b      	uxth	r3, r3
 8000344:	3301      	adds	r3, #1
 8000346:	b29a      	uxth	r2, r3
 8000348:	69fb      	ldr	r3, [r7, #28]
 800034a:	801a      	strh	r2, [r3, #0]
	  osMailPut(mail01Handle, mail);
 800034c:	4b14      	ldr	r3, [pc, #80]	; (80003a0 <MsgProducerTask+0x80>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	69f9      	ldr	r1, [r7, #28]
 8000352:	4618      	mov	r0, r3
 8000354:	f002 fad6 	bl	8002904 <osMailPut>
	  sprintf(msgs, "Produce value: %d\r\n", buffer+1);
 8000358:	4b12      	ldr	r3, [pc, #72]	; (80003a4 <MsgProducerTask+0x84>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	1c5a      	adds	r2, r3, #1
 800035e:	f107 0308 	add.w	r3, r7, #8
 8000362:	4911      	ldr	r1, [pc, #68]	; (80003a8 <MsgProducerTask+0x88>)
 8000364:	4618      	mov	r0, r3
 8000366:	f004 fc1f 	bl	8004ba8 <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*)msgs, strlen(msgs), HAL_MAX_DELAY);
 800036a:	f107 0308 	add.w	r3, r7, #8
 800036e:	4618      	mov	r0, r3
 8000370:	f7ff ff5e 	bl	8000230 <strlen>
 8000374:	4603      	mov	r3, r0
 8000376:	b29a      	uxth	r2, r3
 8000378:	f107 0108 	add.w	r1, r7, #8
 800037c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000380:	480a      	ldr	r0, [pc, #40]	; (80003ac <MsgProducerTask+0x8c>)
 8000382:	f001 fcfc 	bl	8001d7e <HAL_UART_Transmit>
	  buffer++;
 8000386:	4b07      	ldr	r3, [pc, #28]	; (80003a4 <MsgProducerTask+0x84>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	3301      	adds	r3, #1
 800038c:	4a05      	ldr	r2, [pc, #20]	; (80003a4 <MsgProducerTask+0x84>)
 800038e:	6013      	str	r3, [r2, #0]
	  osDelay(1000);
 8000390:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000394:	f002 f90d 	bl	80025b2 <osDelay>
 8000398:	e7c6      	b.n	8000328 <MsgProducerTask+0x8>
		  continue;
 800039a:	bf00      	nop
  {
 800039c:	e7c4      	b.n	8000328 <MsgProducerTask+0x8>
 800039e:	bf00      	nop
 80003a0:	20001088 	.word	0x20001088
 80003a4:	20000090 	.word	0x20000090
 80003a8:	08005430 	.word	0x08005430
 80003ac:	20001048 	.word	0x20001048

080003b0 <MsgConsumerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_MsgConsumerTask */
void MsgConsumerTask(void const * argument)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b08c      	sub	sp, #48	; 0x30
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
	char msg[20];
  /* Infinite loop */
  for(;;)
  {

	  event = osMailGet(mail01Handle, osWaitForever);
 80003b8:	4b1a      	ldr	r3, [pc, #104]	; (8000424 <MsgConsumerTask+0x74>)
 80003ba:	6819      	ldr	r1, [r3, #0]
 80003bc:	f107 0320 	add.w	r3, r7, #32
 80003c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80003c4:	4618      	mov	r0, r3
 80003c6:	f002 fadb 	bl	8002980 <osMailGet>
	  if (event.status == osEventMail)
 80003ca:	6a3b      	ldr	r3, [r7, #32]
 80003cc:	2b20      	cmp	r3, #32
 80003ce:	d1f3      	bne.n	80003b8 <MsgConsumerTask+0x8>
	  {
		  buffer--;
 80003d0:	4b15      	ldr	r3, [pc, #84]	; (8000428 <MsgConsumerTask+0x78>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	3b01      	subs	r3, #1
 80003d6:	4a14      	ldr	r2, [pc, #80]	; (8000428 <MsgConsumerTask+0x78>)
 80003d8:	6013      	str	r3, [r2, #0]
		  pMail = event.value.p;
 80003da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003dc:	62fb      	str	r3, [r7, #44]	; 0x2c
		  sprintf(msg, "Consume value: %d\r\n", pMail->var);
 80003de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80003e0:	881b      	ldrh	r3, [r3, #0]
 80003e2:	461a      	mov	r2, r3
 80003e4:	f107 030c 	add.w	r3, r7, #12
 80003e8:	4910      	ldr	r1, [pc, #64]	; (800042c <MsgConsumerTask+0x7c>)
 80003ea:	4618      	mov	r0, r3
 80003ec:	f004 fbdc 	bl	8004ba8 <siprintf>
	      HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80003f0:	f107 030c 	add.w	r3, r7, #12
 80003f4:	4618      	mov	r0, r3
 80003f6:	f7ff ff1b 	bl	8000230 <strlen>
 80003fa:	4603      	mov	r3, r0
 80003fc:	b29a      	uxth	r2, r3
 80003fe:	f107 010c 	add.w	r1, r7, #12
 8000402:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000406:	480a      	ldr	r0, [pc, #40]	; (8000430 <MsgConsumerTask+0x80>)
 8000408:	f001 fcb9 	bl	8001d7e <HAL_UART_Transmit>
	      osMailFree(mail01Handle, pMail);
 800040c:	4b05      	ldr	r3, [pc, #20]	; (8000424 <MsgConsumerTask+0x74>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000412:	4618      	mov	r0, r3
 8000414:	f002 fb28 	bl	8002a68 <osMailFree>
	      osDelay(2000);
 8000418:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800041c:	f002 f8c9 	bl	80025b2 <osDelay>
	  event = osMailGet(mail01Handle, osWaitForever);
 8000420:	e7ca      	b.n	80003b8 <MsgConsumerTask+0x8>
 8000422:	bf00      	nop
 8000424:	20001088 	.word	0x20001088
 8000428:	20000090 	.word	0x20000090
 800042c:	08005444 	.word	0x08005444
 8000430:	20001048 	.word	0x20001048

08000434 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000434:	b480      	push	{r7}
 8000436:	b083      	sub	sp, #12
 8000438:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800043a:	4b0e      	ldr	r3, [pc, #56]	; (8000474 <MX_GPIO_Init+0x40>)
 800043c:	699b      	ldr	r3, [r3, #24]
 800043e:	4a0d      	ldr	r2, [pc, #52]	; (8000474 <MX_GPIO_Init+0x40>)
 8000440:	f043 0320 	orr.w	r3, r3, #32
 8000444:	6193      	str	r3, [r2, #24]
 8000446:	4b0b      	ldr	r3, [pc, #44]	; (8000474 <MX_GPIO_Init+0x40>)
 8000448:	699b      	ldr	r3, [r3, #24]
 800044a:	f003 0320 	and.w	r3, r3, #32
 800044e:	607b      	str	r3, [r7, #4]
 8000450:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000452:	4b08      	ldr	r3, [pc, #32]	; (8000474 <MX_GPIO_Init+0x40>)
 8000454:	699b      	ldr	r3, [r3, #24]
 8000456:	4a07      	ldr	r2, [pc, #28]	; (8000474 <MX_GPIO_Init+0x40>)
 8000458:	f043 0304 	orr.w	r3, r3, #4
 800045c:	6193      	str	r3, [r2, #24]
 800045e:	4b05      	ldr	r3, [pc, #20]	; (8000474 <MX_GPIO_Init+0x40>)
 8000460:	699b      	ldr	r3, [r3, #24]
 8000462:	f003 0304 	and.w	r3, r3, #4
 8000466:	603b      	str	r3, [r7, #0]
 8000468:	683b      	ldr	r3, [r7, #0]

}
 800046a:	bf00      	nop
 800046c:	370c      	adds	r7, #12
 800046e:	46bd      	mov	sp, r7
 8000470:	bc80      	pop	{r7}
 8000472:	4770      	bx	lr
 8000474:	40021000 	.word	0x40021000

08000478 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800047c:	f000 f9f2 	bl	8000864 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000480:	f000 f809 	bl	8000496 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000484:	f7ff ffd6 	bl	8000434 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000488:	f000 f948 	bl	800071c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800048c:	f7ff fef0 	bl	8000270 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000490:	f002 f83c 	bl	800250c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000494:	e7fe      	b.n	8000494 <main+0x1c>

08000496 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000496:	b580      	push	{r7, lr}
 8000498:	b090      	sub	sp, #64	; 0x40
 800049a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800049c:	f107 0318 	add.w	r3, r7, #24
 80004a0:	2228      	movs	r2, #40	; 0x28
 80004a2:	2100      	movs	r1, #0
 80004a4:	4618      	mov	r0, r3
 80004a6:	f004 fb76 	bl	8004b96 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004aa:	1d3b      	adds	r3, r7, #4
 80004ac:	2200      	movs	r2, #0
 80004ae:	601a      	str	r2, [r3, #0]
 80004b0:	605a      	str	r2, [r3, #4]
 80004b2:	609a      	str	r2, [r3, #8]
 80004b4:	60da      	str	r2, [r3, #12]
 80004b6:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004b8:	2302      	movs	r3, #2
 80004ba:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004bc:	2301      	movs	r3, #1
 80004be:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004c0:	2310      	movs	r3, #16
 80004c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004c4:	2300      	movs	r3, #0
 80004c6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004c8:	f107 0318 	add.w	r3, r7, #24
 80004cc:	4618      	mov	r0, r3
 80004ce:	f000 fd4d 	bl	8000f6c <HAL_RCC_OscConfig>
 80004d2:	4603      	mov	r3, r0
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d001      	beq.n	80004dc <SystemClock_Config+0x46>
  {
    Error_Handler();
 80004d8:	f000 f82a 	bl	8000530 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004dc:	230f      	movs	r3, #15
 80004de:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004e0:	2300      	movs	r3, #0
 80004e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004e4:	2300      	movs	r3, #0
 80004e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004e8:	2300      	movs	r3, #0
 80004ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004ec:	2300      	movs	r3, #0
 80004ee:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004f0:	1d3b      	adds	r3, r7, #4
 80004f2:	2100      	movs	r1, #0
 80004f4:	4618      	mov	r0, r3
 80004f6:	f000 ffb9 	bl	800146c <HAL_RCC_ClockConfig>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d001      	beq.n	8000504 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000500:	f000 f816 	bl	8000530 <Error_Handler>
  }
}
 8000504:	bf00      	nop
 8000506:	3740      	adds	r7, #64	; 0x40
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}

0800050c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a04      	ldr	r2, [pc, #16]	; (800052c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800051a:	4293      	cmp	r3, r2
 800051c:	d101      	bne.n	8000522 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800051e:	f000 f9b7 	bl	8000890 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000522:	bf00      	nop
 8000524:	3708      	adds	r7, #8
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	40000400 	.word	0x40000400

08000530 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000534:	bf00      	nop
 8000536:	46bd      	mov	sp, r7
 8000538:	bc80      	pop	{r7}
 800053a:	4770      	bx	lr

0800053c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800053c:	b480      	push	{r7}
 800053e:	b085      	sub	sp, #20
 8000540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000542:	4b15      	ldr	r3, [pc, #84]	; (8000598 <HAL_MspInit+0x5c>)
 8000544:	699b      	ldr	r3, [r3, #24]
 8000546:	4a14      	ldr	r2, [pc, #80]	; (8000598 <HAL_MspInit+0x5c>)
 8000548:	f043 0301 	orr.w	r3, r3, #1
 800054c:	6193      	str	r3, [r2, #24]
 800054e:	4b12      	ldr	r3, [pc, #72]	; (8000598 <HAL_MspInit+0x5c>)
 8000550:	699b      	ldr	r3, [r3, #24]
 8000552:	f003 0301 	and.w	r3, r3, #1
 8000556:	60bb      	str	r3, [r7, #8]
 8000558:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800055a:	4b0f      	ldr	r3, [pc, #60]	; (8000598 <HAL_MspInit+0x5c>)
 800055c:	69db      	ldr	r3, [r3, #28]
 800055e:	4a0e      	ldr	r2, [pc, #56]	; (8000598 <HAL_MspInit+0x5c>)
 8000560:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000564:	61d3      	str	r3, [r2, #28]
 8000566:	4b0c      	ldr	r3, [pc, #48]	; (8000598 <HAL_MspInit+0x5c>)
 8000568:	69db      	ldr	r3, [r3, #28]
 800056a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000572:	4b0a      	ldr	r3, [pc, #40]	; (800059c <HAL_MspInit+0x60>)
 8000574:	685b      	ldr	r3, [r3, #4]
 8000576:	60fb      	str	r3, [r7, #12]
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800057e:	60fb      	str	r3, [r7, #12]
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000586:	60fb      	str	r3, [r7, #12]
 8000588:	4a04      	ldr	r2, [pc, #16]	; (800059c <HAL_MspInit+0x60>)
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800058e:	bf00      	nop
 8000590:	3714      	adds	r7, #20
 8000592:	46bd      	mov	sp, r7
 8000594:	bc80      	pop	{r7}
 8000596:	4770      	bx	lr
 8000598:	40021000 	.word	0x40021000
 800059c:	40010000 	.word	0x40010000

080005a0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b08c      	sub	sp, #48	; 0x30
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80005a8:	2300      	movs	r3, #0
 80005aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80005ac:	2300      	movs	r3, #0
 80005ae:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 80005b0:	2200      	movs	r2, #0
 80005b2:	6879      	ldr	r1, [r7, #4]
 80005b4:	201d      	movs	r0, #29
 80005b6:	f000 fa3c 	bl	8000a32 <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80005ba:	201d      	movs	r0, #29
 80005bc:	f000 fa55 	bl	8000a6a <HAL_NVIC_EnableIRQ>
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 80005c0:	4b1e      	ldr	r3, [pc, #120]	; (800063c <HAL_InitTick+0x9c>)
 80005c2:	69db      	ldr	r3, [r3, #28]
 80005c4:	4a1d      	ldr	r2, [pc, #116]	; (800063c <HAL_InitTick+0x9c>)
 80005c6:	f043 0302 	orr.w	r3, r3, #2
 80005ca:	61d3      	str	r3, [r2, #28]
 80005cc:	4b1b      	ldr	r3, [pc, #108]	; (800063c <HAL_InitTick+0x9c>)
 80005ce:	69db      	ldr	r3, [r3, #28]
 80005d0:	f003 0302 	and.w	r3, r3, #2
 80005d4:	60fb      	str	r3, [r7, #12]
 80005d6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80005d8:	f107 0210 	add.w	r2, r7, #16
 80005dc:	f107 0314 	add.w	r3, r7, #20
 80005e0:	4611      	mov	r1, r2
 80005e2:	4618      	mov	r0, r3
 80005e4:	f001 f8c0 	bl	8001768 <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80005e8:	f001 f896 	bl	8001718 <HAL_RCC_GetPCLK1Freq>
 80005ec:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80005ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005f0:	4a13      	ldr	r2, [pc, #76]	; (8000640 <HAL_InitTick+0xa0>)
 80005f2:	fba2 2303 	umull	r2, r3, r2, r3
 80005f6:	0c9b      	lsrs	r3, r3, #18
 80005f8:	3b01      	subs	r3, #1
 80005fa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 80005fc:	4b11      	ldr	r3, [pc, #68]	; (8000644 <HAL_InitTick+0xa4>)
 80005fe:	4a12      	ldr	r2, [pc, #72]	; (8000648 <HAL_InitTick+0xa8>)
 8000600:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000 / 1000) - 1;
 8000602:	4b10      	ldr	r3, [pc, #64]	; (8000644 <HAL_InitTick+0xa4>)
 8000604:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000608:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 800060a:	4a0e      	ldr	r2, [pc, #56]	; (8000644 <HAL_InitTick+0xa4>)
 800060c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800060e:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8000610:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <HAL_InitTick+0xa4>)
 8000612:	2200      	movs	r2, #0
 8000614:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000616:	4b0b      	ldr	r3, [pc, #44]	; (8000644 <HAL_InitTick+0xa4>)
 8000618:	2200      	movs	r2, #0
 800061a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 800061c:	4809      	ldr	r0, [pc, #36]	; (8000644 <HAL_InitTick+0xa4>)
 800061e:	f001 f8f1 	bl	8001804 <HAL_TIM_Base_Init>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d104      	bne.n	8000632 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8000628:	4806      	ldr	r0, [pc, #24]	; (8000644 <HAL_InitTick+0xa4>)
 800062a:	f001 f943 	bl	80018b4 <HAL_TIM_Base_Start_IT>
 800062e:	4603      	mov	r3, r0
 8000630:	e000      	b.n	8000634 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000632:	2301      	movs	r3, #1
}
 8000634:	4618      	mov	r0, r3
 8000636:	3730      	adds	r7, #48	; 0x30
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	40021000 	.word	0x40021000
 8000640:	431bde83 	.word	0x431bde83
 8000644:	20001090 	.word	0x20001090
 8000648:	40000400 	.word	0x40000400

0800064c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000650:	bf00      	nop
 8000652:	46bd      	mov	sp, r7
 8000654:	bc80      	pop	{r7}
 8000656:	4770      	bx	lr

08000658 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800065c:	e7fe      	b.n	800065c <HardFault_Handler+0x4>

0800065e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800065e:	b480      	push	{r7}
 8000660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000662:	e7fe      	b.n	8000662 <MemManage_Handler+0x4>

08000664 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000668:	e7fe      	b.n	8000668 <BusFault_Handler+0x4>

0800066a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800066a:	b480      	push	{r7}
 800066c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800066e:	e7fe      	b.n	800066e <UsageFault_Handler+0x4>

08000670 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000674:	bf00      	nop
 8000676:	46bd      	mov	sp, r7
 8000678:	bc80      	pop	{r7}
 800067a:	4770      	bx	lr

0800067c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000680:	4802      	ldr	r0, [pc, #8]	; (800068c <TIM3_IRQHandler+0x10>)
 8000682:	f001 f977 	bl	8001974 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000686:	bf00      	nop
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	20001090 	.word	0x20001090

08000690 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000694:	4802      	ldr	r0, [pc, #8]	; (80006a0 <USART1_IRQHandler+0x10>)
 8000696:	f001 fc05 	bl	8001ea4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800069a:	bf00      	nop
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	20001048 	.word	0x20001048

080006a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b086      	sub	sp, #24
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006ac:	4a14      	ldr	r2, [pc, #80]	; (8000700 <_sbrk+0x5c>)
 80006ae:	4b15      	ldr	r3, [pc, #84]	; (8000704 <_sbrk+0x60>)
 80006b0:	1ad3      	subs	r3, r2, r3
 80006b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006b4:	697b      	ldr	r3, [r7, #20]
 80006b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006b8:	4b13      	ldr	r3, [pc, #76]	; (8000708 <_sbrk+0x64>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d102      	bne.n	80006c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006c0:	4b11      	ldr	r3, [pc, #68]	; (8000708 <_sbrk+0x64>)
 80006c2:	4a12      	ldr	r2, [pc, #72]	; (800070c <_sbrk+0x68>)
 80006c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006c6:	4b10      	ldr	r3, [pc, #64]	; (8000708 <_sbrk+0x64>)
 80006c8:	681a      	ldr	r2, [r3, #0]
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	4413      	add	r3, r2
 80006ce:	693a      	ldr	r2, [r7, #16]
 80006d0:	429a      	cmp	r2, r3
 80006d2:	d207      	bcs.n	80006e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006d4:	f004 fa2a 	bl	8004b2c <__errno>
 80006d8:	4602      	mov	r2, r0
 80006da:	230c      	movs	r3, #12
 80006dc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80006de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006e2:	e009      	b.n	80006f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006e4:	4b08      	ldr	r3, [pc, #32]	; (8000708 <_sbrk+0x64>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006ea:	4b07      	ldr	r3, [pc, #28]	; (8000708 <_sbrk+0x64>)
 80006ec:	681a      	ldr	r2, [r3, #0]
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	4413      	add	r3, r2
 80006f2:	4a05      	ldr	r2, [pc, #20]	; (8000708 <_sbrk+0x64>)
 80006f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006f6:	68fb      	ldr	r3, [r7, #12]
}
 80006f8:	4618      	mov	r0, r3
 80006fa:	3718      	adds	r7, #24
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	2000c000 	.word	0x2000c000
 8000704:	00000400 	.word	0x00000400
 8000708:	200002e8 	.word	0x200002e8
 800070c:	200010e0 	.word	0x200010e0

08000710 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000714:	bf00      	nop
 8000716:	46bd      	mov	sp, r7
 8000718:	bc80      	pop	{r7}
 800071a:	4770      	bx	lr

0800071c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000720:	4b11      	ldr	r3, [pc, #68]	; (8000768 <MX_USART1_UART_Init+0x4c>)
 8000722:	4a12      	ldr	r2, [pc, #72]	; (800076c <MX_USART1_UART_Init+0x50>)
 8000724:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000726:	4b10      	ldr	r3, [pc, #64]	; (8000768 <MX_USART1_UART_Init+0x4c>)
 8000728:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800072c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800072e:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <MX_USART1_UART_Init+0x4c>)
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000734:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <MX_USART1_UART_Init+0x4c>)
 8000736:	2200      	movs	r2, #0
 8000738:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800073a:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <MX_USART1_UART_Init+0x4c>)
 800073c:	2200      	movs	r2, #0
 800073e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000740:	4b09      	ldr	r3, [pc, #36]	; (8000768 <MX_USART1_UART_Init+0x4c>)
 8000742:	220c      	movs	r2, #12
 8000744:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000746:	4b08      	ldr	r3, [pc, #32]	; (8000768 <MX_USART1_UART_Init+0x4c>)
 8000748:	2200      	movs	r2, #0
 800074a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800074c:	4b06      	ldr	r3, [pc, #24]	; (8000768 <MX_USART1_UART_Init+0x4c>)
 800074e:	2200      	movs	r2, #0
 8000750:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000752:	4805      	ldr	r0, [pc, #20]	; (8000768 <MX_USART1_UART_Init+0x4c>)
 8000754:	f001 fac6 	bl	8001ce4 <HAL_UART_Init>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800075e:	f7ff fee7 	bl	8000530 <Error_Handler>
  }

}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	20001048 	.word	0x20001048
 800076c:	40013800 	.word	0x40013800

08000770 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b088      	sub	sp, #32
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000778:	f107 0310 	add.w	r3, r7, #16
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	605a      	str	r2, [r3, #4]
 8000782:	609a      	str	r2, [r3, #8]
 8000784:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4a20      	ldr	r2, [pc, #128]	; (800080c <HAL_UART_MspInit+0x9c>)
 800078c:	4293      	cmp	r3, r2
 800078e:	d139      	bne.n	8000804 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000790:	4b1f      	ldr	r3, [pc, #124]	; (8000810 <HAL_UART_MspInit+0xa0>)
 8000792:	699b      	ldr	r3, [r3, #24]
 8000794:	4a1e      	ldr	r2, [pc, #120]	; (8000810 <HAL_UART_MspInit+0xa0>)
 8000796:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800079a:	6193      	str	r3, [r2, #24]
 800079c:	4b1c      	ldr	r3, [pc, #112]	; (8000810 <HAL_UART_MspInit+0xa0>)
 800079e:	699b      	ldr	r3, [r3, #24]
 80007a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007a4:	60fb      	str	r3, [r7, #12]
 80007a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a8:	4b19      	ldr	r3, [pc, #100]	; (8000810 <HAL_UART_MspInit+0xa0>)
 80007aa:	699b      	ldr	r3, [r3, #24]
 80007ac:	4a18      	ldr	r2, [pc, #96]	; (8000810 <HAL_UART_MspInit+0xa0>)
 80007ae:	f043 0304 	orr.w	r3, r3, #4
 80007b2:	6193      	str	r3, [r2, #24]
 80007b4:	4b16      	ldr	r3, [pc, #88]	; (8000810 <HAL_UART_MspInit+0xa0>)
 80007b6:	699b      	ldr	r3, [r3, #24]
 80007b8:	f003 0304 	and.w	r3, r3, #4
 80007bc:	60bb      	str	r3, [r7, #8]
 80007be:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80007c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c6:	2302      	movs	r3, #2
 80007c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007ca:	2303      	movs	r3, #3
 80007cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ce:	f107 0310 	add.w	r3, r7, #16
 80007d2:	4619      	mov	r1, r3
 80007d4:	480f      	ldr	r0, [pc, #60]	; (8000814 <HAL_UART_MspInit+0xa4>)
 80007d6:	f000 fa5f 	bl	8000c98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007e0:	2300      	movs	r3, #0
 80007e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e4:	2300      	movs	r3, #0
 80007e6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e8:	f107 0310 	add.w	r3, r7, #16
 80007ec:	4619      	mov	r1, r3
 80007ee:	4809      	ldr	r0, [pc, #36]	; (8000814 <HAL_UART_MspInit+0xa4>)
 80007f0:	f000 fa52 	bl	8000c98 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80007f4:	2200      	movs	r2, #0
 80007f6:	2100      	movs	r1, #0
 80007f8:	2025      	movs	r0, #37	; 0x25
 80007fa:	f000 f91a 	bl	8000a32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80007fe:	2025      	movs	r0, #37	; 0x25
 8000800:	f000 f933 	bl	8000a6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000804:	bf00      	nop
 8000806:	3720      	adds	r7, #32
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	40013800 	.word	0x40013800
 8000810:	40021000 	.word	0x40021000
 8000814:	40010800 	.word	0x40010800

08000818 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000818:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800081a:	e003      	b.n	8000824 <LoopCopyDataInit>

0800081c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800081c:	4b0b      	ldr	r3, [pc, #44]	; (800084c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800081e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000820:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000822:	3104      	adds	r1, #4

08000824 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000824:	480a      	ldr	r0, [pc, #40]	; (8000850 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000826:	4b0b      	ldr	r3, [pc, #44]	; (8000854 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000828:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800082a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800082c:	d3f6      	bcc.n	800081c <CopyDataInit>
  ldr r2, =_sbss
 800082e:	4a0a      	ldr	r2, [pc, #40]	; (8000858 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000830:	e002      	b.n	8000838 <LoopFillZerobss>

08000832 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000832:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000834:	f842 3b04 	str.w	r3, [r2], #4

08000838 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000838:	4b08      	ldr	r3, [pc, #32]	; (800085c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800083a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800083c:	d3f9      	bcc.n	8000832 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800083e:	f7ff ff67 	bl	8000710 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000842:	f004 f979 	bl	8004b38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000846:	f7ff fe17 	bl	8000478 <main>
  bx lr
 800084a:	4770      	bx	lr
  ldr r3, =_sidata
 800084c:	080054c8 	.word	0x080054c8
  ldr r0, =_sdata
 8000850:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000854:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 8000858:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 800085c:	200010e0 	.word	0x200010e0

08000860 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000860:	e7fe      	b.n	8000860 <ADC1_2_IRQHandler>
	...

08000864 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000868:	4b08      	ldr	r3, [pc, #32]	; (800088c <HAL_Init+0x28>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a07      	ldr	r2, [pc, #28]	; (800088c <HAL_Init+0x28>)
 800086e:	f043 0310 	orr.w	r3, r3, #16
 8000872:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000874:	2003      	movs	r0, #3
 8000876:	f000 f8d1 	bl	8000a1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800087a:	2000      	movs	r0, #0
 800087c:	f7ff fe90 	bl	80005a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000880:	f7ff fe5c 	bl	800053c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000884:	2300      	movs	r3, #0
}
 8000886:	4618      	mov	r0, r3
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40022000 	.word	0x40022000

08000890 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000894:	4b05      	ldr	r3, [pc, #20]	; (80008ac <HAL_IncTick+0x1c>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	461a      	mov	r2, r3
 800089a:	4b05      	ldr	r3, [pc, #20]	; (80008b0 <HAL_IncTick+0x20>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4413      	add	r3, r2
 80008a0:	4a03      	ldr	r2, [pc, #12]	; (80008b0 <HAL_IncTick+0x20>)
 80008a2:	6013      	str	r3, [r2, #0]
}
 80008a4:	bf00      	nop
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bc80      	pop	{r7}
 80008aa:	4770      	bx	lr
 80008ac:	20000008 	.word	0x20000008
 80008b0:	200010d8 	.word	0x200010d8

080008b4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  return uwTick;
 80008b8:	4b02      	ldr	r3, [pc, #8]	; (80008c4 <HAL_GetTick+0x10>)
 80008ba:	681b      	ldr	r3, [r3, #0]
}
 80008bc:	4618      	mov	r0, r3
 80008be:	46bd      	mov	sp, r7
 80008c0:	bc80      	pop	{r7}
 80008c2:	4770      	bx	lr
 80008c4:	200010d8 	.word	0x200010d8

080008c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b085      	sub	sp, #20
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	f003 0307 	and.w	r3, r3, #7
 80008d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008d8:	4b0c      	ldr	r3, [pc, #48]	; (800090c <__NVIC_SetPriorityGrouping+0x44>)
 80008da:	68db      	ldr	r3, [r3, #12]
 80008dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008de:	68ba      	ldr	r2, [r7, #8]
 80008e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008e4:	4013      	ands	r3, r2
 80008e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008ec:	68bb      	ldr	r3, [r7, #8]
 80008ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008fa:	4a04      	ldr	r2, [pc, #16]	; (800090c <__NVIC_SetPriorityGrouping+0x44>)
 80008fc:	68bb      	ldr	r3, [r7, #8]
 80008fe:	60d3      	str	r3, [r2, #12]
}
 8000900:	bf00      	nop
 8000902:	3714      	adds	r7, #20
 8000904:	46bd      	mov	sp, r7
 8000906:	bc80      	pop	{r7}
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	e000ed00 	.word	0xe000ed00

08000910 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000914:	4b04      	ldr	r3, [pc, #16]	; (8000928 <__NVIC_GetPriorityGrouping+0x18>)
 8000916:	68db      	ldr	r3, [r3, #12]
 8000918:	0a1b      	lsrs	r3, r3, #8
 800091a:	f003 0307 	and.w	r3, r3, #7
}
 800091e:	4618      	mov	r0, r3
 8000920:	46bd      	mov	sp, r7
 8000922:	bc80      	pop	{r7}
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	e000ed00 	.word	0xe000ed00

0800092c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	4603      	mov	r3, r0
 8000934:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800093a:	2b00      	cmp	r3, #0
 800093c:	db0b      	blt.n	8000956 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800093e:	79fb      	ldrb	r3, [r7, #7]
 8000940:	f003 021f 	and.w	r2, r3, #31
 8000944:	4906      	ldr	r1, [pc, #24]	; (8000960 <__NVIC_EnableIRQ+0x34>)
 8000946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800094a:	095b      	lsrs	r3, r3, #5
 800094c:	2001      	movs	r0, #1
 800094e:	fa00 f202 	lsl.w	r2, r0, r2
 8000952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000956:	bf00      	nop
 8000958:	370c      	adds	r7, #12
 800095a:	46bd      	mov	sp, r7
 800095c:	bc80      	pop	{r7}
 800095e:	4770      	bx	lr
 8000960:	e000e100 	.word	0xe000e100

08000964 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	6039      	str	r1, [r7, #0]
 800096e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000974:	2b00      	cmp	r3, #0
 8000976:	db0a      	blt.n	800098e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	b2da      	uxtb	r2, r3
 800097c:	490c      	ldr	r1, [pc, #48]	; (80009b0 <__NVIC_SetPriority+0x4c>)
 800097e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000982:	0112      	lsls	r2, r2, #4
 8000984:	b2d2      	uxtb	r2, r2
 8000986:	440b      	add	r3, r1
 8000988:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800098c:	e00a      	b.n	80009a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	b2da      	uxtb	r2, r3
 8000992:	4908      	ldr	r1, [pc, #32]	; (80009b4 <__NVIC_SetPriority+0x50>)
 8000994:	79fb      	ldrb	r3, [r7, #7]
 8000996:	f003 030f 	and.w	r3, r3, #15
 800099a:	3b04      	subs	r3, #4
 800099c:	0112      	lsls	r2, r2, #4
 800099e:	b2d2      	uxtb	r2, r2
 80009a0:	440b      	add	r3, r1
 80009a2:	761a      	strb	r2, [r3, #24]
}
 80009a4:	bf00      	nop
 80009a6:	370c      	adds	r7, #12
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bc80      	pop	{r7}
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	e000e100 	.word	0xe000e100
 80009b4:	e000ed00 	.word	0xe000ed00

080009b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b089      	sub	sp, #36	; 0x24
 80009bc:	af00      	add	r7, sp, #0
 80009be:	60f8      	str	r0, [r7, #12]
 80009c0:	60b9      	str	r1, [r7, #8]
 80009c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	f003 0307 	and.w	r3, r3, #7
 80009ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009cc:	69fb      	ldr	r3, [r7, #28]
 80009ce:	f1c3 0307 	rsb	r3, r3, #7
 80009d2:	2b04      	cmp	r3, #4
 80009d4:	bf28      	it	cs
 80009d6:	2304      	movcs	r3, #4
 80009d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009da:	69fb      	ldr	r3, [r7, #28]
 80009dc:	3304      	adds	r3, #4
 80009de:	2b06      	cmp	r3, #6
 80009e0:	d902      	bls.n	80009e8 <NVIC_EncodePriority+0x30>
 80009e2:	69fb      	ldr	r3, [r7, #28]
 80009e4:	3b03      	subs	r3, #3
 80009e6:	e000      	b.n	80009ea <NVIC_EncodePriority+0x32>
 80009e8:	2300      	movs	r3, #0
 80009ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80009f0:	69bb      	ldr	r3, [r7, #24]
 80009f2:	fa02 f303 	lsl.w	r3, r2, r3
 80009f6:	43da      	mvns	r2, r3
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	401a      	ands	r2, r3
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a00:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	fa01 f303 	lsl.w	r3, r1, r3
 8000a0a:	43d9      	mvns	r1, r3
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a10:	4313      	orrs	r3, r2
         );
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	3724      	adds	r7, #36	; 0x24
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bc80      	pop	{r7}
 8000a1a:	4770      	bx	lr

08000a1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a24:	6878      	ldr	r0, [r7, #4]
 8000a26:	f7ff ff4f 	bl	80008c8 <__NVIC_SetPriorityGrouping>
}
 8000a2a:	bf00      	nop
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}

08000a32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a32:	b580      	push	{r7, lr}
 8000a34:	b086      	sub	sp, #24
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	4603      	mov	r3, r0
 8000a3a:	60b9      	str	r1, [r7, #8]
 8000a3c:	607a      	str	r2, [r7, #4]
 8000a3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a40:	2300      	movs	r3, #0
 8000a42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a44:	f7ff ff64 	bl	8000910 <__NVIC_GetPriorityGrouping>
 8000a48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a4a:	687a      	ldr	r2, [r7, #4]
 8000a4c:	68b9      	ldr	r1, [r7, #8]
 8000a4e:	6978      	ldr	r0, [r7, #20]
 8000a50:	f7ff ffb2 	bl	80009b8 <NVIC_EncodePriority>
 8000a54:	4602      	mov	r2, r0
 8000a56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a5a:	4611      	mov	r1, r2
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff ff81 	bl	8000964 <__NVIC_SetPriority>
}
 8000a62:	bf00      	nop
 8000a64:	3718      	adds	r7, #24
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}

08000a6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a6a:	b580      	push	{r7, lr}
 8000a6c:	b082      	sub	sp, #8
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	4603      	mov	r3, r0
 8000a72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f7ff ff57 	bl	800092c <__NVIC_EnableIRQ>
}
 8000a7e:	bf00      	nop
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
	...

08000a88 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a90:	2300      	movs	r3, #0
 8000a92:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a9a:	2b02      	cmp	r3, #2
 8000a9c:	d005      	beq.n	8000aaa <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	2204      	movs	r2, #4
 8000aa2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	73fb      	strb	r3, [r7, #15]
 8000aa8:	e0d6      	b.n	8000c58 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	681a      	ldr	r2, [r3, #0]
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	f022 020e 	bic.w	r2, r2, #14
 8000ab8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f022 0201 	bic.w	r2, r2, #1
 8000ac8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	461a      	mov	r2, r3
 8000ad0:	4b64      	ldr	r3, [pc, #400]	; (8000c64 <HAL_DMA_Abort_IT+0x1dc>)
 8000ad2:	429a      	cmp	r2, r3
 8000ad4:	d958      	bls.n	8000b88 <HAL_DMA_Abort_IT+0x100>
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4a63      	ldr	r2, [pc, #396]	; (8000c68 <HAL_DMA_Abort_IT+0x1e0>)
 8000adc:	4293      	cmp	r3, r2
 8000ade:	d04f      	beq.n	8000b80 <HAL_DMA_Abort_IT+0xf8>
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a61      	ldr	r2, [pc, #388]	; (8000c6c <HAL_DMA_Abort_IT+0x1e4>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d048      	beq.n	8000b7c <HAL_DMA_Abort_IT+0xf4>
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4a60      	ldr	r2, [pc, #384]	; (8000c70 <HAL_DMA_Abort_IT+0x1e8>)
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d040      	beq.n	8000b76 <HAL_DMA_Abort_IT+0xee>
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a5e      	ldr	r2, [pc, #376]	; (8000c74 <HAL_DMA_Abort_IT+0x1ec>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d038      	beq.n	8000b70 <HAL_DMA_Abort_IT+0xe8>
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4a5d      	ldr	r2, [pc, #372]	; (8000c78 <HAL_DMA_Abort_IT+0x1f0>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d030      	beq.n	8000b6a <HAL_DMA_Abort_IT+0xe2>
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a5b      	ldr	r2, [pc, #364]	; (8000c7c <HAL_DMA_Abort_IT+0x1f4>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d028      	beq.n	8000b64 <HAL_DMA_Abort_IT+0xdc>
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4a53      	ldr	r2, [pc, #332]	; (8000c64 <HAL_DMA_Abort_IT+0x1dc>)
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d020      	beq.n	8000b5e <HAL_DMA_Abort_IT+0xd6>
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a57      	ldr	r2, [pc, #348]	; (8000c80 <HAL_DMA_Abort_IT+0x1f8>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d019      	beq.n	8000b5a <HAL_DMA_Abort_IT+0xd2>
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4a56      	ldr	r2, [pc, #344]	; (8000c84 <HAL_DMA_Abort_IT+0x1fc>)
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	d012      	beq.n	8000b56 <HAL_DMA_Abort_IT+0xce>
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a54      	ldr	r2, [pc, #336]	; (8000c88 <HAL_DMA_Abort_IT+0x200>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d00a      	beq.n	8000b50 <HAL_DMA_Abort_IT+0xc8>
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4a53      	ldr	r2, [pc, #332]	; (8000c8c <HAL_DMA_Abort_IT+0x204>)
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d102      	bne.n	8000b4a <HAL_DMA_Abort_IT+0xc2>
 8000b44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b48:	e01b      	b.n	8000b82 <HAL_DMA_Abort_IT+0xfa>
 8000b4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b4e:	e018      	b.n	8000b82 <HAL_DMA_Abort_IT+0xfa>
 8000b50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b54:	e015      	b.n	8000b82 <HAL_DMA_Abort_IT+0xfa>
 8000b56:	2310      	movs	r3, #16
 8000b58:	e013      	b.n	8000b82 <HAL_DMA_Abort_IT+0xfa>
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	e011      	b.n	8000b82 <HAL_DMA_Abort_IT+0xfa>
 8000b5e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b62:	e00e      	b.n	8000b82 <HAL_DMA_Abort_IT+0xfa>
 8000b64:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000b68:	e00b      	b.n	8000b82 <HAL_DMA_Abort_IT+0xfa>
 8000b6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b6e:	e008      	b.n	8000b82 <HAL_DMA_Abort_IT+0xfa>
 8000b70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b74:	e005      	b.n	8000b82 <HAL_DMA_Abort_IT+0xfa>
 8000b76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b7a:	e002      	b.n	8000b82 <HAL_DMA_Abort_IT+0xfa>
 8000b7c:	2310      	movs	r3, #16
 8000b7e:	e000      	b.n	8000b82 <HAL_DMA_Abort_IT+0xfa>
 8000b80:	2301      	movs	r3, #1
 8000b82:	4a43      	ldr	r2, [pc, #268]	; (8000c90 <HAL_DMA_Abort_IT+0x208>)
 8000b84:	6053      	str	r3, [r2, #4]
 8000b86:	e057      	b.n	8000c38 <HAL_DMA_Abort_IT+0x1b0>
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a36      	ldr	r2, [pc, #216]	; (8000c68 <HAL_DMA_Abort_IT+0x1e0>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d04f      	beq.n	8000c32 <HAL_DMA_Abort_IT+0x1aa>
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4a35      	ldr	r2, [pc, #212]	; (8000c6c <HAL_DMA_Abort_IT+0x1e4>)
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d048      	beq.n	8000c2e <HAL_DMA_Abort_IT+0x1a6>
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a33      	ldr	r2, [pc, #204]	; (8000c70 <HAL_DMA_Abort_IT+0x1e8>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d040      	beq.n	8000c28 <HAL_DMA_Abort_IT+0x1a0>
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4a32      	ldr	r2, [pc, #200]	; (8000c74 <HAL_DMA_Abort_IT+0x1ec>)
 8000bac:	4293      	cmp	r3, r2
 8000bae:	d038      	beq.n	8000c22 <HAL_DMA_Abort_IT+0x19a>
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a30      	ldr	r2, [pc, #192]	; (8000c78 <HAL_DMA_Abort_IT+0x1f0>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d030      	beq.n	8000c1c <HAL_DMA_Abort_IT+0x194>
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4a2f      	ldr	r2, [pc, #188]	; (8000c7c <HAL_DMA_Abort_IT+0x1f4>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d028      	beq.n	8000c16 <HAL_DMA_Abort_IT+0x18e>
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a26      	ldr	r2, [pc, #152]	; (8000c64 <HAL_DMA_Abort_IT+0x1dc>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d020      	beq.n	8000c10 <HAL_DMA_Abort_IT+0x188>
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4a2b      	ldr	r2, [pc, #172]	; (8000c80 <HAL_DMA_Abort_IT+0x1f8>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d019      	beq.n	8000c0c <HAL_DMA_Abort_IT+0x184>
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a29      	ldr	r2, [pc, #164]	; (8000c84 <HAL_DMA_Abort_IT+0x1fc>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d012      	beq.n	8000c08 <HAL_DMA_Abort_IT+0x180>
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4a28      	ldr	r2, [pc, #160]	; (8000c88 <HAL_DMA_Abort_IT+0x200>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d00a      	beq.n	8000c02 <HAL_DMA_Abort_IT+0x17a>
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a26      	ldr	r2, [pc, #152]	; (8000c8c <HAL_DMA_Abort_IT+0x204>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d102      	bne.n	8000bfc <HAL_DMA_Abort_IT+0x174>
 8000bf6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bfa:	e01b      	b.n	8000c34 <HAL_DMA_Abort_IT+0x1ac>
 8000bfc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c00:	e018      	b.n	8000c34 <HAL_DMA_Abort_IT+0x1ac>
 8000c02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c06:	e015      	b.n	8000c34 <HAL_DMA_Abort_IT+0x1ac>
 8000c08:	2310      	movs	r3, #16
 8000c0a:	e013      	b.n	8000c34 <HAL_DMA_Abort_IT+0x1ac>
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	e011      	b.n	8000c34 <HAL_DMA_Abort_IT+0x1ac>
 8000c10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c14:	e00e      	b.n	8000c34 <HAL_DMA_Abort_IT+0x1ac>
 8000c16:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000c1a:	e00b      	b.n	8000c34 <HAL_DMA_Abort_IT+0x1ac>
 8000c1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c20:	e008      	b.n	8000c34 <HAL_DMA_Abort_IT+0x1ac>
 8000c22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c26:	e005      	b.n	8000c34 <HAL_DMA_Abort_IT+0x1ac>
 8000c28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c2c:	e002      	b.n	8000c34 <HAL_DMA_Abort_IT+0x1ac>
 8000c2e:	2310      	movs	r3, #16
 8000c30:	e000      	b.n	8000c34 <HAL_DMA_Abort_IT+0x1ac>
 8000c32:	2301      	movs	r3, #1
 8000c34:	4a17      	ldr	r2, [pc, #92]	; (8000c94 <HAL_DMA_Abort_IT+0x20c>)
 8000c36:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2200      	movs	r2, #0
 8000c44:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d003      	beq.n	8000c58 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c54:	6878      	ldr	r0, [r7, #4]
 8000c56:	4798      	blx	r3
    } 
  }
  return status;
 8000c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3710      	adds	r7, #16
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40020080 	.word	0x40020080
 8000c68:	40020008 	.word	0x40020008
 8000c6c:	4002001c 	.word	0x4002001c
 8000c70:	40020030 	.word	0x40020030
 8000c74:	40020044 	.word	0x40020044
 8000c78:	40020058 	.word	0x40020058
 8000c7c:	4002006c 	.word	0x4002006c
 8000c80:	40020408 	.word	0x40020408
 8000c84:	4002041c 	.word	0x4002041c
 8000c88:	40020430 	.word	0x40020430
 8000c8c:	40020444 	.word	0x40020444
 8000c90:	40020400 	.word	0x40020400
 8000c94:	40020000 	.word	0x40020000

08000c98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b08b      	sub	sp, #44	; 0x2c
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000caa:	e133      	b.n	8000f14 <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000cac:	2201      	movs	r2, #1
 8000cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	69fa      	ldr	r2, [r7, #28]
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000cc0:	69ba      	ldr	r2, [r7, #24]
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	f040 8122 	bne.w	8000f0e <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	2b12      	cmp	r3, #18
 8000cd0:	d034      	beq.n	8000d3c <HAL_GPIO_Init+0xa4>
 8000cd2:	2b12      	cmp	r3, #18
 8000cd4:	d80d      	bhi.n	8000cf2 <HAL_GPIO_Init+0x5a>
 8000cd6:	2b02      	cmp	r3, #2
 8000cd8:	d02b      	beq.n	8000d32 <HAL_GPIO_Init+0x9a>
 8000cda:	2b02      	cmp	r3, #2
 8000cdc:	d804      	bhi.n	8000ce8 <HAL_GPIO_Init+0x50>
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d031      	beq.n	8000d46 <HAL_GPIO_Init+0xae>
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d01c      	beq.n	8000d20 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ce6:	e048      	b.n	8000d7a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000ce8:	2b03      	cmp	r3, #3
 8000cea:	d043      	beq.n	8000d74 <HAL_GPIO_Init+0xdc>
 8000cec:	2b11      	cmp	r3, #17
 8000cee:	d01b      	beq.n	8000d28 <HAL_GPIO_Init+0x90>
          break;
 8000cf0:	e043      	b.n	8000d7a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000cf2:	4a8f      	ldr	r2, [pc, #572]	; (8000f30 <HAL_GPIO_Init+0x298>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d026      	beq.n	8000d46 <HAL_GPIO_Init+0xae>
 8000cf8:	4a8d      	ldr	r2, [pc, #564]	; (8000f30 <HAL_GPIO_Init+0x298>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d806      	bhi.n	8000d0c <HAL_GPIO_Init+0x74>
 8000cfe:	4a8d      	ldr	r2, [pc, #564]	; (8000f34 <HAL_GPIO_Init+0x29c>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d020      	beq.n	8000d46 <HAL_GPIO_Init+0xae>
 8000d04:	4a8c      	ldr	r2, [pc, #560]	; (8000f38 <HAL_GPIO_Init+0x2a0>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d01d      	beq.n	8000d46 <HAL_GPIO_Init+0xae>
          break;
 8000d0a:	e036      	b.n	8000d7a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d0c:	4a8b      	ldr	r2, [pc, #556]	; (8000f3c <HAL_GPIO_Init+0x2a4>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d019      	beq.n	8000d46 <HAL_GPIO_Init+0xae>
 8000d12:	4a8b      	ldr	r2, [pc, #556]	; (8000f40 <HAL_GPIO_Init+0x2a8>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d016      	beq.n	8000d46 <HAL_GPIO_Init+0xae>
 8000d18:	4a8a      	ldr	r2, [pc, #552]	; (8000f44 <HAL_GPIO_Init+0x2ac>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d013      	beq.n	8000d46 <HAL_GPIO_Init+0xae>
          break;
 8000d1e:	e02c      	b.n	8000d7a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	68db      	ldr	r3, [r3, #12]
 8000d24:	623b      	str	r3, [r7, #32]
          break;
 8000d26:	e028      	b.n	8000d7a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	3304      	adds	r3, #4
 8000d2e:	623b      	str	r3, [r7, #32]
          break;
 8000d30:	e023      	b.n	8000d7a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	68db      	ldr	r3, [r3, #12]
 8000d36:	3308      	adds	r3, #8
 8000d38:	623b      	str	r3, [r7, #32]
          break;
 8000d3a:	e01e      	b.n	8000d7a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	330c      	adds	r3, #12
 8000d42:	623b      	str	r3, [r7, #32]
          break;
 8000d44:	e019      	b.n	8000d7a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	689b      	ldr	r3, [r3, #8]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d102      	bne.n	8000d54 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d4e:	2304      	movs	r3, #4
 8000d50:	623b      	str	r3, [r7, #32]
          break;
 8000d52:	e012      	b.n	8000d7a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	689b      	ldr	r3, [r3, #8]
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d105      	bne.n	8000d68 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d5c:	2308      	movs	r3, #8
 8000d5e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	69fa      	ldr	r2, [r7, #28]
 8000d64:	611a      	str	r2, [r3, #16]
          break;
 8000d66:	e008      	b.n	8000d7a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d68:	2308      	movs	r3, #8
 8000d6a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	69fa      	ldr	r2, [r7, #28]
 8000d70:	615a      	str	r2, [r3, #20]
          break;
 8000d72:	e002      	b.n	8000d7a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d74:	2300      	movs	r3, #0
 8000d76:	623b      	str	r3, [r7, #32]
          break;
 8000d78:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d7a:	69bb      	ldr	r3, [r7, #24]
 8000d7c:	2bff      	cmp	r3, #255	; 0xff
 8000d7e:	d801      	bhi.n	8000d84 <HAL_GPIO_Init+0xec>
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	e001      	b.n	8000d88 <HAL_GPIO_Init+0xf0>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	3304      	adds	r3, #4
 8000d88:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d8a:	69bb      	ldr	r3, [r7, #24]
 8000d8c:	2bff      	cmp	r3, #255	; 0xff
 8000d8e:	d802      	bhi.n	8000d96 <HAL_GPIO_Init+0xfe>
 8000d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d92:	009b      	lsls	r3, r3, #2
 8000d94:	e002      	b.n	8000d9c <HAL_GPIO_Init+0x104>
 8000d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d98:	3b08      	subs	r3, #8
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	210f      	movs	r1, #15
 8000da4:	693b      	ldr	r3, [r7, #16]
 8000da6:	fa01 f303 	lsl.w	r3, r1, r3
 8000daa:	43db      	mvns	r3, r3
 8000dac:	401a      	ands	r2, r3
 8000dae:	6a39      	ldr	r1, [r7, #32]
 8000db0:	693b      	ldr	r3, [r7, #16]
 8000db2:	fa01 f303 	lsl.w	r3, r1, r3
 8000db6:	431a      	orrs	r2, r3
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	f000 80a2 	beq.w	8000f0e <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000dca:	4b5f      	ldr	r3, [pc, #380]	; (8000f48 <HAL_GPIO_Init+0x2b0>)
 8000dcc:	699b      	ldr	r3, [r3, #24]
 8000dce:	4a5e      	ldr	r2, [pc, #376]	; (8000f48 <HAL_GPIO_Init+0x2b0>)
 8000dd0:	f043 0301 	orr.w	r3, r3, #1
 8000dd4:	6193      	str	r3, [r2, #24]
 8000dd6:	4b5c      	ldr	r3, [pc, #368]	; (8000f48 <HAL_GPIO_Init+0x2b0>)
 8000dd8:	699b      	ldr	r3, [r3, #24]
 8000dda:	f003 0301 	and.w	r3, r3, #1
 8000dde:	60bb      	str	r3, [r7, #8]
 8000de0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000de2:	4a5a      	ldr	r2, [pc, #360]	; (8000f4c <HAL_GPIO_Init+0x2b4>)
 8000de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de6:	089b      	lsrs	r3, r3, #2
 8000de8:	3302      	adds	r3, #2
 8000dea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dee:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df2:	f003 0303 	and.w	r3, r3, #3
 8000df6:	009b      	lsls	r3, r3, #2
 8000df8:	220f      	movs	r2, #15
 8000dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfe:	43db      	mvns	r3, r3
 8000e00:	68fa      	ldr	r2, [r7, #12]
 8000e02:	4013      	ands	r3, r2
 8000e04:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4a51      	ldr	r2, [pc, #324]	; (8000f50 <HAL_GPIO_Init+0x2b8>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d01f      	beq.n	8000e4e <HAL_GPIO_Init+0x1b6>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4a50      	ldr	r2, [pc, #320]	; (8000f54 <HAL_GPIO_Init+0x2bc>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d019      	beq.n	8000e4a <HAL_GPIO_Init+0x1b2>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4a4f      	ldr	r2, [pc, #316]	; (8000f58 <HAL_GPIO_Init+0x2c0>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d013      	beq.n	8000e46 <HAL_GPIO_Init+0x1ae>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4a4e      	ldr	r2, [pc, #312]	; (8000f5c <HAL_GPIO_Init+0x2c4>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d00d      	beq.n	8000e42 <HAL_GPIO_Init+0x1aa>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4a4d      	ldr	r2, [pc, #308]	; (8000f60 <HAL_GPIO_Init+0x2c8>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d007      	beq.n	8000e3e <HAL_GPIO_Init+0x1a6>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4a4c      	ldr	r2, [pc, #304]	; (8000f64 <HAL_GPIO_Init+0x2cc>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d101      	bne.n	8000e3a <HAL_GPIO_Init+0x1a2>
 8000e36:	2305      	movs	r3, #5
 8000e38:	e00a      	b.n	8000e50 <HAL_GPIO_Init+0x1b8>
 8000e3a:	2306      	movs	r3, #6
 8000e3c:	e008      	b.n	8000e50 <HAL_GPIO_Init+0x1b8>
 8000e3e:	2304      	movs	r3, #4
 8000e40:	e006      	b.n	8000e50 <HAL_GPIO_Init+0x1b8>
 8000e42:	2303      	movs	r3, #3
 8000e44:	e004      	b.n	8000e50 <HAL_GPIO_Init+0x1b8>
 8000e46:	2302      	movs	r3, #2
 8000e48:	e002      	b.n	8000e50 <HAL_GPIO_Init+0x1b8>
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e000      	b.n	8000e50 <HAL_GPIO_Init+0x1b8>
 8000e4e:	2300      	movs	r3, #0
 8000e50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e52:	f002 0203 	and.w	r2, r2, #3
 8000e56:	0092      	lsls	r2, r2, #2
 8000e58:	4093      	lsls	r3, r2
 8000e5a:	68fa      	ldr	r2, [r7, #12]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e60:	493a      	ldr	r1, [pc, #232]	; (8000f4c <HAL_GPIO_Init+0x2b4>)
 8000e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e64:	089b      	lsrs	r3, r3, #2
 8000e66:	3302      	adds	r3, #2
 8000e68:	68fa      	ldr	r2, [r7, #12]
 8000e6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d006      	beq.n	8000e88 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e7a:	4b3b      	ldr	r3, [pc, #236]	; (8000f68 <HAL_GPIO_Init+0x2d0>)
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	493a      	ldr	r1, [pc, #232]	; (8000f68 <HAL_GPIO_Init+0x2d0>)
 8000e80:	69bb      	ldr	r3, [r7, #24]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	600b      	str	r3, [r1, #0]
 8000e86:	e006      	b.n	8000e96 <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e88:	4b37      	ldr	r3, [pc, #220]	; (8000f68 <HAL_GPIO_Init+0x2d0>)
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	69bb      	ldr	r3, [r7, #24]
 8000e8e:	43db      	mvns	r3, r3
 8000e90:	4935      	ldr	r1, [pc, #212]	; (8000f68 <HAL_GPIO_Init+0x2d0>)
 8000e92:	4013      	ands	r3, r2
 8000e94:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d006      	beq.n	8000eb0 <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ea2:	4b31      	ldr	r3, [pc, #196]	; (8000f68 <HAL_GPIO_Init+0x2d0>)
 8000ea4:	685a      	ldr	r2, [r3, #4]
 8000ea6:	4930      	ldr	r1, [pc, #192]	; (8000f68 <HAL_GPIO_Init+0x2d0>)
 8000ea8:	69bb      	ldr	r3, [r7, #24]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	604b      	str	r3, [r1, #4]
 8000eae:	e006      	b.n	8000ebe <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000eb0:	4b2d      	ldr	r3, [pc, #180]	; (8000f68 <HAL_GPIO_Init+0x2d0>)
 8000eb2:	685a      	ldr	r2, [r3, #4]
 8000eb4:	69bb      	ldr	r3, [r7, #24]
 8000eb6:	43db      	mvns	r3, r3
 8000eb8:	492b      	ldr	r1, [pc, #172]	; (8000f68 <HAL_GPIO_Init+0x2d0>)
 8000eba:	4013      	ands	r3, r2
 8000ebc:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d006      	beq.n	8000ed8 <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000eca:	4b27      	ldr	r3, [pc, #156]	; (8000f68 <HAL_GPIO_Init+0x2d0>)
 8000ecc:	689a      	ldr	r2, [r3, #8]
 8000ece:	4926      	ldr	r1, [pc, #152]	; (8000f68 <HAL_GPIO_Init+0x2d0>)
 8000ed0:	69bb      	ldr	r3, [r7, #24]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	608b      	str	r3, [r1, #8]
 8000ed6:	e006      	b.n	8000ee6 <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ed8:	4b23      	ldr	r3, [pc, #140]	; (8000f68 <HAL_GPIO_Init+0x2d0>)
 8000eda:	689a      	ldr	r2, [r3, #8]
 8000edc:	69bb      	ldr	r3, [r7, #24]
 8000ede:	43db      	mvns	r3, r3
 8000ee0:	4921      	ldr	r1, [pc, #132]	; (8000f68 <HAL_GPIO_Init+0x2d0>)
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d006      	beq.n	8000f00 <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ef2:	4b1d      	ldr	r3, [pc, #116]	; (8000f68 <HAL_GPIO_Init+0x2d0>)
 8000ef4:	68da      	ldr	r2, [r3, #12]
 8000ef6:	491c      	ldr	r1, [pc, #112]	; (8000f68 <HAL_GPIO_Init+0x2d0>)
 8000ef8:	69bb      	ldr	r3, [r7, #24]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	60cb      	str	r3, [r1, #12]
 8000efe:	e006      	b.n	8000f0e <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f00:	4b19      	ldr	r3, [pc, #100]	; (8000f68 <HAL_GPIO_Init+0x2d0>)
 8000f02:	68da      	ldr	r2, [r3, #12]
 8000f04:	69bb      	ldr	r3, [r7, #24]
 8000f06:	43db      	mvns	r3, r3
 8000f08:	4917      	ldr	r1, [pc, #92]	; (8000f68 <HAL_GPIO_Init+0x2d0>)
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f10:	3301      	adds	r3, #1
 8000f12:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f1a:	fa22 f303 	lsr.w	r3, r2, r3
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	f47f aec4 	bne.w	8000cac <HAL_GPIO_Init+0x14>
  }
}
 8000f24:	bf00      	nop
 8000f26:	372c      	adds	r7, #44	; 0x2c
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bc80      	pop	{r7}
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	10210000 	.word	0x10210000
 8000f34:	10110000 	.word	0x10110000
 8000f38:	10120000 	.word	0x10120000
 8000f3c:	10310000 	.word	0x10310000
 8000f40:	10320000 	.word	0x10320000
 8000f44:	10220000 	.word	0x10220000
 8000f48:	40021000 	.word	0x40021000
 8000f4c:	40010000 	.word	0x40010000
 8000f50:	40010800 	.word	0x40010800
 8000f54:	40010c00 	.word	0x40010c00
 8000f58:	40011000 	.word	0x40011000
 8000f5c:	40011400 	.word	0x40011400
 8000f60:	40011800 	.word	0x40011800
 8000f64:	40011c00 	.word	0x40011c00
 8000f68:	40010400 	.word	0x40010400

08000f6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b086      	sub	sp, #24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d101      	bne.n	8000f7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e26c      	b.n	8001458 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	f000 8087 	beq.w	800109a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f8c:	4b92      	ldr	r3, [pc, #584]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f003 030c 	and.w	r3, r3, #12
 8000f94:	2b04      	cmp	r3, #4
 8000f96:	d00c      	beq.n	8000fb2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f98:	4b8f      	ldr	r3, [pc, #572]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f003 030c 	and.w	r3, r3, #12
 8000fa0:	2b08      	cmp	r3, #8
 8000fa2:	d112      	bne.n	8000fca <HAL_RCC_OscConfig+0x5e>
 8000fa4:	4b8c      	ldr	r3, [pc, #560]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fb0:	d10b      	bne.n	8000fca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fb2:	4b89      	ldr	r3, [pc, #548]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d06c      	beq.n	8001098 <HAL_RCC_OscConfig+0x12c>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d168      	bne.n	8001098 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e246      	b.n	8001458 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fd2:	d106      	bne.n	8000fe2 <HAL_RCC_OscConfig+0x76>
 8000fd4:	4b80      	ldr	r3, [pc, #512]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a7f      	ldr	r2, [pc, #508]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 8000fda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fde:	6013      	str	r3, [r2, #0]
 8000fe0:	e02e      	b.n	8001040 <HAL_RCC_OscConfig+0xd4>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d10c      	bne.n	8001004 <HAL_RCC_OscConfig+0x98>
 8000fea:	4b7b      	ldr	r3, [pc, #492]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a7a      	ldr	r2, [pc, #488]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 8000ff0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ff4:	6013      	str	r3, [r2, #0]
 8000ff6:	4b78      	ldr	r3, [pc, #480]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a77      	ldr	r2, [pc, #476]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 8000ffc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001000:	6013      	str	r3, [r2, #0]
 8001002:	e01d      	b.n	8001040 <HAL_RCC_OscConfig+0xd4>
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800100c:	d10c      	bne.n	8001028 <HAL_RCC_OscConfig+0xbc>
 800100e:	4b72      	ldr	r3, [pc, #456]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a71      	ldr	r2, [pc, #452]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 8001014:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001018:	6013      	str	r3, [r2, #0]
 800101a:	4b6f      	ldr	r3, [pc, #444]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a6e      	ldr	r2, [pc, #440]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 8001020:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001024:	6013      	str	r3, [r2, #0]
 8001026:	e00b      	b.n	8001040 <HAL_RCC_OscConfig+0xd4>
 8001028:	4b6b      	ldr	r3, [pc, #428]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a6a      	ldr	r2, [pc, #424]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 800102e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001032:	6013      	str	r3, [r2, #0]
 8001034:	4b68      	ldr	r3, [pc, #416]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a67      	ldr	r2, [pc, #412]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 800103a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800103e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d013      	beq.n	8001070 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001048:	f7ff fc34 	bl	80008b4 <HAL_GetTick>
 800104c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800104e:	e008      	b.n	8001062 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001050:	f7ff fc30 	bl	80008b4 <HAL_GetTick>
 8001054:	4602      	mov	r2, r0
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	2b64      	cmp	r3, #100	; 0x64
 800105c:	d901      	bls.n	8001062 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800105e:	2303      	movs	r3, #3
 8001060:	e1fa      	b.n	8001458 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001062:	4b5d      	ldr	r3, [pc, #372]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800106a:	2b00      	cmp	r3, #0
 800106c:	d0f0      	beq.n	8001050 <HAL_RCC_OscConfig+0xe4>
 800106e:	e014      	b.n	800109a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001070:	f7ff fc20 	bl	80008b4 <HAL_GetTick>
 8001074:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001076:	e008      	b.n	800108a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001078:	f7ff fc1c 	bl	80008b4 <HAL_GetTick>
 800107c:	4602      	mov	r2, r0
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	2b64      	cmp	r3, #100	; 0x64
 8001084:	d901      	bls.n	800108a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001086:	2303      	movs	r3, #3
 8001088:	e1e6      	b.n	8001458 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800108a:	4b53      	ldr	r3, [pc, #332]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001092:	2b00      	cmp	r3, #0
 8001094:	d1f0      	bne.n	8001078 <HAL_RCC_OscConfig+0x10c>
 8001096:	e000      	b.n	800109a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001098:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f003 0302 	and.w	r3, r3, #2
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d063      	beq.n	800116e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80010a6:	4b4c      	ldr	r3, [pc, #304]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f003 030c 	and.w	r3, r3, #12
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d00b      	beq.n	80010ca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80010b2:	4b49      	ldr	r3, [pc, #292]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f003 030c 	and.w	r3, r3, #12
 80010ba:	2b08      	cmp	r3, #8
 80010bc:	d11c      	bne.n	80010f8 <HAL_RCC_OscConfig+0x18c>
 80010be:	4b46      	ldr	r3, [pc, #280]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d116      	bne.n	80010f8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010ca:	4b43      	ldr	r3, [pc, #268]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f003 0302 	and.w	r3, r3, #2
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d005      	beq.n	80010e2 <HAL_RCC_OscConfig+0x176>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	691b      	ldr	r3, [r3, #16]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d001      	beq.n	80010e2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	e1ba      	b.n	8001458 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010e2:	4b3d      	ldr	r3, [pc, #244]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	695b      	ldr	r3, [r3, #20]
 80010ee:	00db      	lsls	r3, r3, #3
 80010f0:	4939      	ldr	r1, [pc, #228]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 80010f2:	4313      	orrs	r3, r2
 80010f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010f6:	e03a      	b.n	800116e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	691b      	ldr	r3, [r3, #16]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d020      	beq.n	8001142 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001100:	4b36      	ldr	r3, [pc, #216]	; (80011dc <HAL_RCC_OscConfig+0x270>)
 8001102:	2201      	movs	r2, #1
 8001104:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001106:	f7ff fbd5 	bl	80008b4 <HAL_GetTick>
 800110a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800110c:	e008      	b.n	8001120 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800110e:	f7ff fbd1 	bl	80008b4 <HAL_GetTick>
 8001112:	4602      	mov	r2, r0
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	1ad3      	subs	r3, r2, r3
 8001118:	2b02      	cmp	r3, #2
 800111a:	d901      	bls.n	8001120 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800111c:	2303      	movs	r3, #3
 800111e:	e19b      	b.n	8001458 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001120:	4b2d      	ldr	r3, [pc, #180]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f003 0302 	and.w	r3, r3, #2
 8001128:	2b00      	cmp	r3, #0
 800112a:	d0f0      	beq.n	800110e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800112c:	4b2a      	ldr	r3, [pc, #168]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	695b      	ldr	r3, [r3, #20]
 8001138:	00db      	lsls	r3, r3, #3
 800113a:	4927      	ldr	r1, [pc, #156]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 800113c:	4313      	orrs	r3, r2
 800113e:	600b      	str	r3, [r1, #0]
 8001140:	e015      	b.n	800116e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001142:	4b26      	ldr	r3, [pc, #152]	; (80011dc <HAL_RCC_OscConfig+0x270>)
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001148:	f7ff fbb4 	bl	80008b4 <HAL_GetTick>
 800114c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800114e:	e008      	b.n	8001162 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001150:	f7ff fbb0 	bl	80008b4 <HAL_GetTick>
 8001154:	4602      	mov	r2, r0
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	2b02      	cmp	r3, #2
 800115c:	d901      	bls.n	8001162 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800115e:	2303      	movs	r3, #3
 8001160:	e17a      	b.n	8001458 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001162:	4b1d      	ldr	r3, [pc, #116]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f003 0302 	and.w	r3, r3, #2
 800116a:	2b00      	cmp	r3, #0
 800116c:	d1f0      	bne.n	8001150 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f003 0308 	and.w	r3, r3, #8
 8001176:	2b00      	cmp	r3, #0
 8001178:	d03a      	beq.n	80011f0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	699b      	ldr	r3, [r3, #24]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d019      	beq.n	80011b6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001182:	4b17      	ldr	r3, [pc, #92]	; (80011e0 <HAL_RCC_OscConfig+0x274>)
 8001184:	2201      	movs	r2, #1
 8001186:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001188:	f7ff fb94 	bl	80008b4 <HAL_GetTick>
 800118c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800118e:	e008      	b.n	80011a2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001190:	f7ff fb90 	bl	80008b4 <HAL_GetTick>
 8001194:	4602      	mov	r2, r0
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	2b02      	cmp	r3, #2
 800119c:	d901      	bls.n	80011a2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800119e:	2303      	movs	r3, #3
 80011a0:	e15a      	b.n	8001458 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011a2:	4b0d      	ldr	r3, [pc, #52]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 80011a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d0f0      	beq.n	8001190 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80011ae:	2001      	movs	r0, #1
 80011b0:	f000 fb0a 	bl	80017c8 <RCC_Delay>
 80011b4:	e01c      	b.n	80011f0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011b6:	4b0a      	ldr	r3, [pc, #40]	; (80011e0 <HAL_RCC_OscConfig+0x274>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011bc:	f7ff fb7a 	bl	80008b4 <HAL_GetTick>
 80011c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011c2:	e00f      	b.n	80011e4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011c4:	f7ff fb76 	bl	80008b4 <HAL_GetTick>
 80011c8:	4602      	mov	r2, r0
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	d908      	bls.n	80011e4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80011d2:	2303      	movs	r3, #3
 80011d4:	e140      	b.n	8001458 <HAL_RCC_OscConfig+0x4ec>
 80011d6:	bf00      	nop
 80011d8:	40021000 	.word	0x40021000
 80011dc:	42420000 	.word	0x42420000
 80011e0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011e4:	4b9e      	ldr	r3, [pc, #632]	; (8001460 <HAL_RCC_OscConfig+0x4f4>)
 80011e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e8:	f003 0302 	and.w	r3, r3, #2
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d1e9      	bne.n	80011c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f003 0304 	and.w	r3, r3, #4
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	f000 80a6 	beq.w	800134a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011fe:	2300      	movs	r3, #0
 8001200:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001202:	4b97      	ldr	r3, [pc, #604]	; (8001460 <HAL_RCC_OscConfig+0x4f4>)
 8001204:	69db      	ldr	r3, [r3, #28]
 8001206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d10d      	bne.n	800122a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800120e:	4b94      	ldr	r3, [pc, #592]	; (8001460 <HAL_RCC_OscConfig+0x4f4>)
 8001210:	69db      	ldr	r3, [r3, #28]
 8001212:	4a93      	ldr	r2, [pc, #588]	; (8001460 <HAL_RCC_OscConfig+0x4f4>)
 8001214:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001218:	61d3      	str	r3, [r2, #28]
 800121a:	4b91      	ldr	r3, [pc, #580]	; (8001460 <HAL_RCC_OscConfig+0x4f4>)
 800121c:	69db      	ldr	r3, [r3, #28]
 800121e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001222:	60bb      	str	r3, [r7, #8]
 8001224:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001226:	2301      	movs	r3, #1
 8001228:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800122a:	4b8e      	ldr	r3, [pc, #568]	; (8001464 <HAL_RCC_OscConfig+0x4f8>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001232:	2b00      	cmp	r3, #0
 8001234:	d118      	bne.n	8001268 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001236:	4b8b      	ldr	r3, [pc, #556]	; (8001464 <HAL_RCC_OscConfig+0x4f8>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a8a      	ldr	r2, [pc, #552]	; (8001464 <HAL_RCC_OscConfig+0x4f8>)
 800123c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001240:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001242:	f7ff fb37 	bl	80008b4 <HAL_GetTick>
 8001246:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001248:	e008      	b.n	800125c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800124a:	f7ff fb33 	bl	80008b4 <HAL_GetTick>
 800124e:	4602      	mov	r2, r0
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	2b64      	cmp	r3, #100	; 0x64
 8001256:	d901      	bls.n	800125c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001258:	2303      	movs	r3, #3
 800125a:	e0fd      	b.n	8001458 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800125c:	4b81      	ldr	r3, [pc, #516]	; (8001464 <HAL_RCC_OscConfig+0x4f8>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001264:	2b00      	cmp	r3, #0
 8001266:	d0f0      	beq.n	800124a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	2b01      	cmp	r3, #1
 800126e:	d106      	bne.n	800127e <HAL_RCC_OscConfig+0x312>
 8001270:	4b7b      	ldr	r3, [pc, #492]	; (8001460 <HAL_RCC_OscConfig+0x4f4>)
 8001272:	6a1b      	ldr	r3, [r3, #32]
 8001274:	4a7a      	ldr	r2, [pc, #488]	; (8001460 <HAL_RCC_OscConfig+0x4f4>)
 8001276:	f043 0301 	orr.w	r3, r3, #1
 800127a:	6213      	str	r3, [r2, #32]
 800127c:	e02d      	b.n	80012da <HAL_RCC_OscConfig+0x36e>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	68db      	ldr	r3, [r3, #12]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d10c      	bne.n	80012a0 <HAL_RCC_OscConfig+0x334>
 8001286:	4b76      	ldr	r3, [pc, #472]	; (8001460 <HAL_RCC_OscConfig+0x4f4>)
 8001288:	6a1b      	ldr	r3, [r3, #32]
 800128a:	4a75      	ldr	r2, [pc, #468]	; (8001460 <HAL_RCC_OscConfig+0x4f4>)
 800128c:	f023 0301 	bic.w	r3, r3, #1
 8001290:	6213      	str	r3, [r2, #32]
 8001292:	4b73      	ldr	r3, [pc, #460]	; (8001460 <HAL_RCC_OscConfig+0x4f4>)
 8001294:	6a1b      	ldr	r3, [r3, #32]
 8001296:	4a72      	ldr	r2, [pc, #456]	; (8001460 <HAL_RCC_OscConfig+0x4f4>)
 8001298:	f023 0304 	bic.w	r3, r3, #4
 800129c:	6213      	str	r3, [r2, #32]
 800129e:	e01c      	b.n	80012da <HAL_RCC_OscConfig+0x36e>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	2b05      	cmp	r3, #5
 80012a6:	d10c      	bne.n	80012c2 <HAL_RCC_OscConfig+0x356>
 80012a8:	4b6d      	ldr	r3, [pc, #436]	; (8001460 <HAL_RCC_OscConfig+0x4f4>)
 80012aa:	6a1b      	ldr	r3, [r3, #32]
 80012ac:	4a6c      	ldr	r2, [pc, #432]	; (8001460 <HAL_RCC_OscConfig+0x4f4>)
 80012ae:	f043 0304 	orr.w	r3, r3, #4
 80012b2:	6213      	str	r3, [r2, #32]
 80012b4:	4b6a      	ldr	r3, [pc, #424]	; (8001460 <HAL_RCC_OscConfig+0x4f4>)
 80012b6:	6a1b      	ldr	r3, [r3, #32]
 80012b8:	4a69      	ldr	r2, [pc, #420]	; (8001460 <HAL_RCC_OscConfig+0x4f4>)
 80012ba:	f043 0301 	orr.w	r3, r3, #1
 80012be:	6213      	str	r3, [r2, #32]
 80012c0:	e00b      	b.n	80012da <HAL_RCC_OscConfig+0x36e>
 80012c2:	4b67      	ldr	r3, [pc, #412]	; (8001460 <HAL_RCC_OscConfig+0x4f4>)
 80012c4:	6a1b      	ldr	r3, [r3, #32]
 80012c6:	4a66      	ldr	r2, [pc, #408]	; (8001460 <HAL_RCC_OscConfig+0x4f4>)
 80012c8:	f023 0301 	bic.w	r3, r3, #1
 80012cc:	6213      	str	r3, [r2, #32]
 80012ce:	4b64      	ldr	r3, [pc, #400]	; (8001460 <HAL_RCC_OscConfig+0x4f4>)
 80012d0:	6a1b      	ldr	r3, [r3, #32]
 80012d2:	4a63      	ldr	r2, [pc, #396]	; (8001460 <HAL_RCC_OscConfig+0x4f4>)
 80012d4:	f023 0304 	bic.w	r3, r3, #4
 80012d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	68db      	ldr	r3, [r3, #12]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d015      	beq.n	800130e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012e2:	f7ff fae7 	bl	80008b4 <HAL_GetTick>
 80012e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012e8:	e00a      	b.n	8001300 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012ea:	f7ff fae3 	bl	80008b4 <HAL_GetTick>
 80012ee:	4602      	mov	r2, r0
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	1ad3      	subs	r3, r2, r3
 80012f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d901      	bls.n	8001300 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80012fc:	2303      	movs	r3, #3
 80012fe:	e0ab      	b.n	8001458 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001300:	4b57      	ldr	r3, [pc, #348]	; (8001460 <HAL_RCC_OscConfig+0x4f4>)
 8001302:	6a1b      	ldr	r3, [r3, #32]
 8001304:	f003 0302 	and.w	r3, r3, #2
 8001308:	2b00      	cmp	r3, #0
 800130a:	d0ee      	beq.n	80012ea <HAL_RCC_OscConfig+0x37e>
 800130c:	e014      	b.n	8001338 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800130e:	f7ff fad1 	bl	80008b4 <HAL_GetTick>
 8001312:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001314:	e00a      	b.n	800132c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001316:	f7ff facd 	bl	80008b4 <HAL_GetTick>
 800131a:	4602      	mov	r2, r0
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	f241 3288 	movw	r2, #5000	; 0x1388
 8001324:	4293      	cmp	r3, r2
 8001326:	d901      	bls.n	800132c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001328:	2303      	movs	r3, #3
 800132a:	e095      	b.n	8001458 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800132c:	4b4c      	ldr	r3, [pc, #304]	; (8001460 <HAL_RCC_OscConfig+0x4f4>)
 800132e:	6a1b      	ldr	r3, [r3, #32]
 8001330:	f003 0302 	and.w	r3, r3, #2
 8001334:	2b00      	cmp	r3, #0
 8001336:	d1ee      	bne.n	8001316 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001338:	7dfb      	ldrb	r3, [r7, #23]
 800133a:	2b01      	cmp	r3, #1
 800133c:	d105      	bne.n	800134a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800133e:	4b48      	ldr	r3, [pc, #288]	; (8001460 <HAL_RCC_OscConfig+0x4f4>)
 8001340:	69db      	ldr	r3, [r3, #28]
 8001342:	4a47      	ldr	r2, [pc, #284]	; (8001460 <HAL_RCC_OscConfig+0x4f4>)
 8001344:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001348:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	69db      	ldr	r3, [r3, #28]
 800134e:	2b00      	cmp	r3, #0
 8001350:	f000 8081 	beq.w	8001456 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001354:	4b42      	ldr	r3, [pc, #264]	; (8001460 <HAL_RCC_OscConfig+0x4f4>)
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f003 030c 	and.w	r3, r3, #12
 800135c:	2b08      	cmp	r3, #8
 800135e:	d061      	beq.n	8001424 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	69db      	ldr	r3, [r3, #28]
 8001364:	2b02      	cmp	r3, #2
 8001366:	d146      	bne.n	80013f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001368:	4b3f      	ldr	r3, [pc, #252]	; (8001468 <HAL_RCC_OscConfig+0x4fc>)
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800136e:	f7ff faa1 	bl	80008b4 <HAL_GetTick>
 8001372:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001374:	e008      	b.n	8001388 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001376:	f7ff fa9d 	bl	80008b4 <HAL_GetTick>
 800137a:	4602      	mov	r2, r0
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	2b02      	cmp	r3, #2
 8001382:	d901      	bls.n	8001388 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001384:	2303      	movs	r3, #3
 8001386:	e067      	b.n	8001458 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001388:	4b35      	ldr	r3, [pc, #212]	; (8001460 <HAL_RCC_OscConfig+0x4f4>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001390:	2b00      	cmp	r3, #0
 8001392:	d1f0      	bne.n	8001376 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6a1b      	ldr	r3, [r3, #32]
 8001398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800139c:	d108      	bne.n	80013b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800139e:	4b30      	ldr	r3, [pc, #192]	; (8001460 <HAL_RCC_OscConfig+0x4f4>)
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	492d      	ldr	r1, [pc, #180]	; (8001460 <HAL_RCC_OscConfig+0x4f4>)
 80013ac:	4313      	orrs	r3, r2
 80013ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013b0:	4b2b      	ldr	r3, [pc, #172]	; (8001460 <HAL_RCC_OscConfig+0x4f4>)
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6a19      	ldr	r1, [r3, #32]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c0:	430b      	orrs	r3, r1
 80013c2:	4927      	ldr	r1, [pc, #156]	; (8001460 <HAL_RCC_OscConfig+0x4f4>)
 80013c4:	4313      	orrs	r3, r2
 80013c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013c8:	4b27      	ldr	r3, [pc, #156]	; (8001468 <HAL_RCC_OscConfig+0x4fc>)
 80013ca:	2201      	movs	r2, #1
 80013cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ce:	f7ff fa71 	bl	80008b4 <HAL_GetTick>
 80013d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013d4:	e008      	b.n	80013e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013d6:	f7ff fa6d 	bl	80008b4 <HAL_GetTick>
 80013da:	4602      	mov	r2, r0
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d901      	bls.n	80013e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80013e4:	2303      	movs	r3, #3
 80013e6:	e037      	b.n	8001458 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013e8:	4b1d      	ldr	r3, [pc, #116]	; (8001460 <HAL_RCC_OscConfig+0x4f4>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d0f0      	beq.n	80013d6 <HAL_RCC_OscConfig+0x46a>
 80013f4:	e02f      	b.n	8001456 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013f6:	4b1c      	ldr	r3, [pc, #112]	; (8001468 <HAL_RCC_OscConfig+0x4fc>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013fc:	f7ff fa5a 	bl	80008b4 <HAL_GetTick>
 8001400:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001402:	e008      	b.n	8001416 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001404:	f7ff fa56 	bl	80008b4 <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	2b02      	cmp	r3, #2
 8001410:	d901      	bls.n	8001416 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	e020      	b.n	8001458 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001416:	4b12      	ldr	r3, [pc, #72]	; (8001460 <HAL_RCC_OscConfig+0x4f4>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d1f0      	bne.n	8001404 <HAL_RCC_OscConfig+0x498>
 8001422:	e018      	b.n	8001456 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	69db      	ldr	r3, [r3, #28]
 8001428:	2b01      	cmp	r3, #1
 800142a:	d101      	bne.n	8001430 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	e013      	b.n	8001458 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001430:	4b0b      	ldr	r3, [pc, #44]	; (8001460 <HAL_RCC_OscConfig+0x4f4>)
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6a1b      	ldr	r3, [r3, #32]
 8001440:	429a      	cmp	r2, r3
 8001442:	d106      	bne.n	8001452 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800144e:	429a      	cmp	r2, r3
 8001450:	d001      	beq.n	8001456 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e000      	b.n	8001458 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001456:	2300      	movs	r3, #0
}
 8001458:	4618      	mov	r0, r3
 800145a:	3718      	adds	r7, #24
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	40021000 	.word	0x40021000
 8001464:	40007000 	.word	0x40007000
 8001468:	42420060 	.word	0x42420060

0800146c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d101      	bne.n	8001480 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	e0d0      	b.n	8001622 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001480:	4b6a      	ldr	r3, [pc, #424]	; (800162c <HAL_RCC_ClockConfig+0x1c0>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 0307 	and.w	r3, r3, #7
 8001488:	683a      	ldr	r2, [r7, #0]
 800148a:	429a      	cmp	r2, r3
 800148c:	d910      	bls.n	80014b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800148e:	4b67      	ldr	r3, [pc, #412]	; (800162c <HAL_RCC_ClockConfig+0x1c0>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f023 0207 	bic.w	r2, r3, #7
 8001496:	4965      	ldr	r1, [pc, #404]	; (800162c <HAL_RCC_ClockConfig+0x1c0>)
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	4313      	orrs	r3, r2
 800149c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800149e:	4b63      	ldr	r3, [pc, #396]	; (800162c <HAL_RCC_ClockConfig+0x1c0>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 0307 	and.w	r3, r3, #7
 80014a6:	683a      	ldr	r2, [r7, #0]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d001      	beq.n	80014b0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	e0b8      	b.n	8001622 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 0302 	and.w	r3, r3, #2
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d020      	beq.n	80014fe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 0304 	and.w	r3, r3, #4
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d005      	beq.n	80014d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014c8:	4b59      	ldr	r3, [pc, #356]	; (8001630 <HAL_RCC_ClockConfig+0x1c4>)
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	4a58      	ldr	r2, [pc, #352]	; (8001630 <HAL_RCC_ClockConfig+0x1c4>)
 80014ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80014d2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 0308 	and.w	r3, r3, #8
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d005      	beq.n	80014ec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014e0:	4b53      	ldr	r3, [pc, #332]	; (8001630 <HAL_RCC_ClockConfig+0x1c4>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	4a52      	ldr	r2, [pc, #328]	; (8001630 <HAL_RCC_ClockConfig+0x1c4>)
 80014e6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80014ea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014ec:	4b50      	ldr	r3, [pc, #320]	; (8001630 <HAL_RCC_ClockConfig+0x1c4>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	494d      	ldr	r1, [pc, #308]	; (8001630 <HAL_RCC_ClockConfig+0x1c4>)
 80014fa:	4313      	orrs	r3, r2
 80014fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	2b00      	cmp	r3, #0
 8001508:	d040      	beq.n	800158c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	2b01      	cmp	r3, #1
 8001510:	d107      	bne.n	8001522 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001512:	4b47      	ldr	r3, [pc, #284]	; (8001630 <HAL_RCC_ClockConfig+0x1c4>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d115      	bne.n	800154a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e07f      	b.n	8001622 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	2b02      	cmp	r3, #2
 8001528:	d107      	bne.n	800153a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800152a:	4b41      	ldr	r3, [pc, #260]	; (8001630 <HAL_RCC_ClockConfig+0x1c4>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d109      	bne.n	800154a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e073      	b.n	8001622 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800153a:	4b3d      	ldr	r3, [pc, #244]	; (8001630 <HAL_RCC_ClockConfig+0x1c4>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0302 	and.w	r3, r3, #2
 8001542:	2b00      	cmp	r3, #0
 8001544:	d101      	bne.n	800154a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e06b      	b.n	8001622 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800154a:	4b39      	ldr	r3, [pc, #228]	; (8001630 <HAL_RCC_ClockConfig+0x1c4>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f023 0203 	bic.w	r2, r3, #3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	4936      	ldr	r1, [pc, #216]	; (8001630 <HAL_RCC_ClockConfig+0x1c4>)
 8001558:	4313      	orrs	r3, r2
 800155a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800155c:	f7ff f9aa 	bl	80008b4 <HAL_GetTick>
 8001560:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001562:	e00a      	b.n	800157a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001564:	f7ff f9a6 	bl	80008b4 <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001572:	4293      	cmp	r3, r2
 8001574:	d901      	bls.n	800157a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e053      	b.n	8001622 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800157a:	4b2d      	ldr	r3, [pc, #180]	; (8001630 <HAL_RCC_ClockConfig+0x1c4>)
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f003 020c 	and.w	r2, r3, #12
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	429a      	cmp	r2, r3
 800158a:	d1eb      	bne.n	8001564 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800158c:	4b27      	ldr	r3, [pc, #156]	; (800162c <HAL_RCC_ClockConfig+0x1c0>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 0307 	and.w	r3, r3, #7
 8001594:	683a      	ldr	r2, [r7, #0]
 8001596:	429a      	cmp	r2, r3
 8001598:	d210      	bcs.n	80015bc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800159a:	4b24      	ldr	r3, [pc, #144]	; (800162c <HAL_RCC_ClockConfig+0x1c0>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f023 0207 	bic.w	r2, r3, #7
 80015a2:	4922      	ldr	r1, [pc, #136]	; (800162c <HAL_RCC_ClockConfig+0x1c0>)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015aa:	4b20      	ldr	r3, [pc, #128]	; (800162c <HAL_RCC_ClockConfig+0x1c0>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0307 	and.w	r3, r3, #7
 80015b2:	683a      	ldr	r2, [r7, #0]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d001      	beq.n	80015bc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	e032      	b.n	8001622 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0304 	and.w	r3, r3, #4
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d008      	beq.n	80015da <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015c8:	4b19      	ldr	r3, [pc, #100]	; (8001630 <HAL_RCC_ClockConfig+0x1c4>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	4916      	ldr	r1, [pc, #88]	; (8001630 <HAL_RCC_ClockConfig+0x1c4>)
 80015d6:	4313      	orrs	r3, r2
 80015d8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0308 	and.w	r3, r3, #8
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d009      	beq.n	80015fa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80015e6:	4b12      	ldr	r3, [pc, #72]	; (8001630 <HAL_RCC_ClockConfig+0x1c4>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	691b      	ldr	r3, [r3, #16]
 80015f2:	00db      	lsls	r3, r3, #3
 80015f4:	490e      	ldr	r1, [pc, #56]	; (8001630 <HAL_RCC_ClockConfig+0x1c4>)
 80015f6:	4313      	orrs	r3, r2
 80015f8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80015fa:	f000 f821 	bl	8001640 <HAL_RCC_GetSysClockFreq>
 80015fe:	4601      	mov	r1, r0
 8001600:	4b0b      	ldr	r3, [pc, #44]	; (8001630 <HAL_RCC_ClockConfig+0x1c4>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	091b      	lsrs	r3, r3, #4
 8001606:	f003 030f 	and.w	r3, r3, #15
 800160a:	4a0a      	ldr	r2, [pc, #40]	; (8001634 <HAL_RCC_ClockConfig+0x1c8>)
 800160c:	5cd3      	ldrb	r3, [r2, r3]
 800160e:	fa21 f303 	lsr.w	r3, r1, r3
 8001612:	4a09      	ldr	r2, [pc, #36]	; (8001638 <HAL_RCC_ClockConfig+0x1cc>)
 8001614:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001616:	4b09      	ldr	r3, [pc, #36]	; (800163c <HAL_RCC_ClockConfig+0x1d0>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4618      	mov	r0, r3
 800161c:	f7fe ffc0 	bl	80005a0 <HAL_InitTick>

  return HAL_OK;
 8001620:	2300      	movs	r3, #0
}
 8001622:	4618      	mov	r0, r3
 8001624:	3710      	adds	r7, #16
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40022000 	.word	0x40022000
 8001630:	40021000 	.word	0x40021000
 8001634:	08005474 	.word	0x08005474
 8001638:	20000000 	.word	0x20000000
 800163c:	20000004 	.word	0x20000004

08001640 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001640:	b490      	push	{r4, r7}
 8001642:	b08a      	sub	sp, #40	; 0x28
 8001644:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001646:	4b2a      	ldr	r3, [pc, #168]	; (80016f0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001648:	1d3c      	adds	r4, r7, #4
 800164a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800164c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001650:	4b28      	ldr	r3, [pc, #160]	; (80016f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001652:	881b      	ldrh	r3, [r3, #0]
 8001654:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001656:	2300      	movs	r3, #0
 8001658:	61fb      	str	r3, [r7, #28]
 800165a:	2300      	movs	r3, #0
 800165c:	61bb      	str	r3, [r7, #24]
 800165e:	2300      	movs	r3, #0
 8001660:	627b      	str	r3, [r7, #36]	; 0x24
 8001662:	2300      	movs	r3, #0
 8001664:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001666:	2300      	movs	r3, #0
 8001668:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800166a:	4b23      	ldr	r3, [pc, #140]	; (80016f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	f003 030c 	and.w	r3, r3, #12
 8001676:	2b04      	cmp	r3, #4
 8001678:	d002      	beq.n	8001680 <HAL_RCC_GetSysClockFreq+0x40>
 800167a:	2b08      	cmp	r3, #8
 800167c:	d003      	beq.n	8001686 <HAL_RCC_GetSysClockFreq+0x46>
 800167e:	e02d      	b.n	80016dc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001680:	4b1e      	ldr	r3, [pc, #120]	; (80016fc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001682:	623b      	str	r3, [r7, #32]
      break;
 8001684:	e02d      	b.n	80016e2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	0c9b      	lsrs	r3, r3, #18
 800168a:	f003 030f 	and.w	r3, r3, #15
 800168e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001692:	4413      	add	r3, r2
 8001694:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001698:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d013      	beq.n	80016cc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80016a4:	4b14      	ldr	r3, [pc, #80]	; (80016f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	0c5b      	lsrs	r3, r3, #17
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80016b2:	4413      	add	r3, r2
 80016b4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80016b8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	4a0f      	ldr	r2, [pc, #60]	; (80016fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80016be:	fb02 f203 	mul.w	r2, r2, r3
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80016c8:	627b      	str	r3, [r7, #36]	; 0x24
 80016ca:	e004      	b.n	80016d6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	4a0c      	ldr	r2, [pc, #48]	; (8001700 <HAL_RCC_GetSysClockFreq+0xc0>)
 80016d0:	fb02 f303 	mul.w	r3, r2, r3
 80016d4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80016d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d8:	623b      	str	r3, [r7, #32]
      break;
 80016da:	e002      	b.n	80016e2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80016dc:	4b07      	ldr	r3, [pc, #28]	; (80016fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80016de:	623b      	str	r3, [r7, #32]
      break;
 80016e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016e2:	6a3b      	ldr	r3, [r7, #32]
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3728      	adds	r7, #40	; 0x28
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bc90      	pop	{r4, r7}
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	08005458 	.word	0x08005458
 80016f4:	08005468 	.word	0x08005468
 80016f8:	40021000 	.word	0x40021000
 80016fc:	007a1200 	.word	0x007a1200
 8001700:	003d0900 	.word	0x003d0900

08001704 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001708:	4b02      	ldr	r3, [pc, #8]	; (8001714 <HAL_RCC_GetHCLKFreq+0x10>)
 800170a:	681b      	ldr	r3, [r3, #0]
}
 800170c:	4618      	mov	r0, r3
 800170e:	46bd      	mov	sp, r7
 8001710:	bc80      	pop	{r7}
 8001712:	4770      	bx	lr
 8001714:	20000000 	.word	0x20000000

08001718 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800171c:	f7ff fff2 	bl	8001704 <HAL_RCC_GetHCLKFreq>
 8001720:	4601      	mov	r1, r0
 8001722:	4b05      	ldr	r3, [pc, #20]	; (8001738 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	0a1b      	lsrs	r3, r3, #8
 8001728:	f003 0307 	and.w	r3, r3, #7
 800172c:	4a03      	ldr	r2, [pc, #12]	; (800173c <HAL_RCC_GetPCLK1Freq+0x24>)
 800172e:	5cd3      	ldrb	r3, [r2, r3]
 8001730:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001734:	4618      	mov	r0, r3
 8001736:	bd80      	pop	{r7, pc}
 8001738:	40021000 	.word	0x40021000
 800173c:	08005484 	.word	0x08005484

08001740 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001744:	f7ff ffde 	bl	8001704 <HAL_RCC_GetHCLKFreq>
 8001748:	4601      	mov	r1, r0
 800174a:	4b05      	ldr	r3, [pc, #20]	; (8001760 <HAL_RCC_GetPCLK2Freq+0x20>)
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	0adb      	lsrs	r3, r3, #11
 8001750:	f003 0307 	and.w	r3, r3, #7
 8001754:	4a03      	ldr	r2, [pc, #12]	; (8001764 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001756:	5cd3      	ldrb	r3, [r2, r3]
 8001758:	fa21 f303 	lsr.w	r3, r1, r3
}
 800175c:	4618      	mov	r0, r3
 800175e:	bd80      	pop	{r7, pc}
 8001760:	40021000 	.word	0x40021000
 8001764:	08005484 	.word	0x08005484

08001768 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	220f      	movs	r2, #15
 8001776:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001778:	4b11      	ldr	r3, [pc, #68]	; (80017c0 <HAL_RCC_GetClockConfig+0x58>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f003 0203 	and.w	r2, r3, #3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001784:	4b0e      	ldr	r3, [pc, #56]	; (80017c0 <HAL_RCC_GetClockConfig+0x58>)
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001790:	4b0b      	ldr	r3, [pc, #44]	; (80017c0 <HAL_RCC_GetClockConfig+0x58>)
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800179c:	4b08      	ldr	r3, [pc, #32]	; (80017c0 <HAL_RCC_GetClockConfig+0x58>)
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	08db      	lsrs	r3, r3, #3
 80017a2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80017aa:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <HAL_RCC_GetClockConfig+0x5c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0207 	and.w	r2, r3, #7
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80017b6:	bf00      	nop
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bc80      	pop	{r7}
 80017be:	4770      	bx	lr
 80017c0:	40021000 	.word	0x40021000
 80017c4:	40022000 	.word	0x40022000

080017c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b085      	sub	sp, #20
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80017d0:	4b0a      	ldr	r3, [pc, #40]	; (80017fc <RCC_Delay+0x34>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a0a      	ldr	r2, [pc, #40]	; (8001800 <RCC_Delay+0x38>)
 80017d6:	fba2 2303 	umull	r2, r3, r2, r3
 80017da:	0a5b      	lsrs	r3, r3, #9
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	fb02 f303 	mul.w	r3, r2, r3
 80017e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80017e4:	bf00      	nop
  }
  while (Delay --);
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	1e5a      	subs	r2, r3, #1
 80017ea:	60fa      	str	r2, [r7, #12]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d1f9      	bne.n	80017e4 <RCC_Delay+0x1c>
}
 80017f0:	bf00      	nop
 80017f2:	3714      	adds	r7, #20
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bc80      	pop	{r7}
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	20000000 	.word	0x20000000
 8001800:	10624dd3 	.word	0x10624dd3

08001804 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d101      	bne.n	8001816 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e041      	b.n	800189a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800181c:	b2db      	uxtb	r3, r3
 800181e:	2b00      	cmp	r3, #0
 8001820:	d106      	bne.n	8001830 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2200      	movs	r2, #0
 8001826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f000 f839 	bl	80018a2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2202      	movs	r2, #2
 8001834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	3304      	adds	r3, #4
 8001840:	4619      	mov	r1, r3
 8001842:	4610      	mov	r0, r2
 8001844:	f000 f9c2 	bl	8001bcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2201      	movs	r2, #1
 800184c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2201      	movs	r2, #1
 8001854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2201      	movs	r2, #1
 800185c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2201      	movs	r2, #1
 8001864:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2201      	movs	r2, #1
 800186c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2201      	movs	r2, #1
 8001874:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2201      	movs	r2, #1
 800187c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2201      	movs	r2, #1
 8001884:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2201      	movs	r2, #1
 800188c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2201      	movs	r2, #1
 8001894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80018a2:	b480      	push	{r7}
 80018a4:	b083      	sub	sp, #12
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80018aa:	bf00      	nop
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bc80      	pop	{r7}
 80018b2:	4770      	bx	lr

080018b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b085      	sub	sp, #20
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d001      	beq.n	80018cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e044      	b.n	8001956 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2202      	movs	r2, #2
 80018d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	68da      	ldr	r2, [r3, #12]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f042 0201 	orr.w	r2, r2, #1
 80018e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a1d      	ldr	r2, [pc, #116]	; (8001960 <HAL_TIM_Base_Start_IT+0xac>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d018      	beq.n	8001920 <HAL_TIM_Base_Start_IT+0x6c>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a1c      	ldr	r2, [pc, #112]	; (8001964 <HAL_TIM_Base_Start_IT+0xb0>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d013      	beq.n	8001920 <HAL_TIM_Base_Start_IT+0x6c>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001900:	d00e      	beq.n	8001920 <HAL_TIM_Base_Start_IT+0x6c>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a18      	ldr	r2, [pc, #96]	; (8001968 <HAL_TIM_Base_Start_IT+0xb4>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d009      	beq.n	8001920 <HAL_TIM_Base_Start_IT+0x6c>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a16      	ldr	r2, [pc, #88]	; (800196c <HAL_TIM_Base_Start_IT+0xb8>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d004      	beq.n	8001920 <HAL_TIM_Base_Start_IT+0x6c>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a15      	ldr	r2, [pc, #84]	; (8001970 <HAL_TIM_Base_Start_IT+0xbc>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d111      	bne.n	8001944 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	f003 0307 	and.w	r3, r3, #7
 800192a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2b06      	cmp	r3, #6
 8001930:	d010      	beq.n	8001954 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f042 0201 	orr.w	r2, r2, #1
 8001940:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001942:	e007      	b.n	8001954 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f042 0201 	orr.w	r2, r2, #1
 8001952:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001954:	2300      	movs	r3, #0
}
 8001956:	4618      	mov	r0, r3
 8001958:	3714      	adds	r7, #20
 800195a:	46bd      	mov	sp, r7
 800195c:	bc80      	pop	{r7}
 800195e:	4770      	bx	lr
 8001960:	40012c00 	.word	0x40012c00
 8001964:	40013400 	.word	0x40013400
 8001968:	40000400 	.word	0x40000400
 800196c:	40000800 	.word	0x40000800
 8001970:	40000c00 	.word	0x40000c00

08001974 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	691b      	ldr	r3, [r3, #16]
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	2b02      	cmp	r3, #2
 8001988:	d122      	bne.n	80019d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	f003 0302 	and.w	r3, r3, #2
 8001994:	2b02      	cmp	r3, #2
 8001996:	d11b      	bne.n	80019d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f06f 0202 	mvn.w	r2, #2
 80019a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2201      	movs	r2, #1
 80019a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	699b      	ldr	r3, [r3, #24]
 80019ae:	f003 0303 	and.w	r3, r3, #3
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d003      	beq.n	80019be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f000 f8ed 	bl	8001b96 <HAL_TIM_IC_CaptureCallback>
 80019bc:	e005      	b.n	80019ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f000 f8e0 	bl	8001b84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f000 f8ef 	bl	8001ba8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	691b      	ldr	r3, [r3, #16]
 80019d6:	f003 0304 	and.w	r3, r3, #4
 80019da:	2b04      	cmp	r3, #4
 80019dc:	d122      	bne.n	8001a24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	f003 0304 	and.w	r3, r3, #4
 80019e8:	2b04      	cmp	r3, #4
 80019ea:	d11b      	bne.n	8001a24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f06f 0204 	mvn.w	r2, #4
 80019f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2202      	movs	r2, #2
 80019fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	699b      	ldr	r3, [r3, #24]
 8001a02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d003      	beq.n	8001a12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f000 f8c3 	bl	8001b96 <HAL_TIM_IC_CaptureCallback>
 8001a10:	e005      	b.n	8001a1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f000 f8b6 	bl	8001b84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f000 f8c5 	bl	8001ba8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	691b      	ldr	r3, [r3, #16]
 8001a2a:	f003 0308 	and.w	r3, r3, #8
 8001a2e:	2b08      	cmp	r3, #8
 8001a30:	d122      	bne.n	8001a78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	f003 0308 	and.w	r3, r3, #8
 8001a3c:	2b08      	cmp	r3, #8
 8001a3e:	d11b      	bne.n	8001a78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f06f 0208 	mvn.w	r2, #8
 8001a48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2204      	movs	r2, #4
 8001a4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	69db      	ldr	r3, [r3, #28]
 8001a56:	f003 0303 	and.w	r3, r3, #3
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d003      	beq.n	8001a66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f000 f899 	bl	8001b96 <HAL_TIM_IC_CaptureCallback>
 8001a64:	e005      	b.n	8001a72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f000 f88c 	bl	8001b84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f000 f89b 	bl	8001ba8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	691b      	ldr	r3, [r3, #16]
 8001a7e:	f003 0310 	and.w	r3, r3, #16
 8001a82:	2b10      	cmp	r3, #16
 8001a84:	d122      	bne.n	8001acc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	f003 0310 	and.w	r3, r3, #16
 8001a90:	2b10      	cmp	r3, #16
 8001a92:	d11b      	bne.n	8001acc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f06f 0210 	mvn.w	r2, #16
 8001a9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2208      	movs	r2, #8
 8001aa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	69db      	ldr	r3, [r3, #28]
 8001aaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d003      	beq.n	8001aba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f000 f86f 	bl	8001b96 <HAL_TIM_IC_CaptureCallback>
 8001ab8:	e005      	b.n	8001ac6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f000 f862 	bl	8001b84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f000 f871 	bl	8001ba8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	691b      	ldr	r3, [r3, #16]
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d10e      	bne.n	8001af8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	f003 0301 	and.w	r3, r3, #1
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d107      	bne.n	8001af8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f06f 0201 	mvn.w	r2, #1
 8001af0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f7fe fd0a 	bl	800050c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	691b      	ldr	r3, [r3, #16]
 8001afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b02:	2b80      	cmp	r3, #128	; 0x80
 8001b04:	d10e      	bne.n	8001b24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b10:	2b80      	cmp	r3, #128	; 0x80
 8001b12:	d107      	bne.n	8001b24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001b1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f000 f8d7 	bl	8001cd2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	691b      	ldr	r3, [r3, #16]
 8001b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b2e:	2b40      	cmp	r3, #64	; 0x40
 8001b30:	d10e      	bne.n	8001b50 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b3c:	2b40      	cmp	r3, #64	; 0x40
 8001b3e:	d107      	bne.n	8001b50 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001b48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f000 f835 	bl	8001bba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	691b      	ldr	r3, [r3, #16]
 8001b56:	f003 0320 	and.w	r3, r3, #32
 8001b5a:	2b20      	cmp	r3, #32
 8001b5c:	d10e      	bne.n	8001b7c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	f003 0320 	and.w	r3, r3, #32
 8001b68:	2b20      	cmp	r3, #32
 8001b6a:	d107      	bne.n	8001b7c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f06f 0220 	mvn.w	r2, #32
 8001b74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f000 f8a2 	bl	8001cc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001b7c:	bf00      	nop
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001b8c:	bf00      	nop
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bc80      	pop	{r7}
 8001b94:	4770      	bx	lr

08001b96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001b96:	b480      	push	{r7}
 8001b98:	b083      	sub	sp, #12
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001b9e:	bf00      	nop
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bc80      	pop	{r7}
 8001ba6:	4770      	bx	lr

08001ba8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bc80      	pop	{r7}
 8001bb8:	4770      	bx	lr

08001bba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	b083      	sub	sp, #12
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001bc2:	bf00      	nop
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bc80      	pop	{r7}
 8001bca:	4770      	bx	lr

08001bcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b085      	sub	sp, #20
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	4a33      	ldr	r2, [pc, #204]	; (8001cac <TIM_Base_SetConfig+0xe0>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d013      	beq.n	8001c0c <TIM_Base_SetConfig+0x40>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	4a32      	ldr	r2, [pc, #200]	; (8001cb0 <TIM_Base_SetConfig+0xe4>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d00f      	beq.n	8001c0c <TIM_Base_SetConfig+0x40>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bf2:	d00b      	beq.n	8001c0c <TIM_Base_SetConfig+0x40>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	4a2f      	ldr	r2, [pc, #188]	; (8001cb4 <TIM_Base_SetConfig+0xe8>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d007      	beq.n	8001c0c <TIM_Base_SetConfig+0x40>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	4a2e      	ldr	r2, [pc, #184]	; (8001cb8 <TIM_Base_SetConfig+0xec>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d003      	beq.n	8001c0c <TIM_Base_SetConfig+0x40>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	4a2d      	ldr	r2, [pc, #180]	; (8001cbc <TIM_Base_SetConfig+0xf0>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d108      	bne.n	8001c1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	68fa      	ldr	r2, [r7, #12]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a22      	ldr	r2, [pc, #136]	; (8001cac <TIM_Base_SetConfig+0xe0>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d013      	beq.n	8001c4e <TIM_Base_SetConfig+0x82>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a21      	ldr	r2, [pc, #132]	; (8001cb0 <TIM_Base_SetConfig+0xe4>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d00f      	beq.n	8001c4e <TIM_Base_SetConfig+0x82>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c34:	d00b      	beq.n	8001c4e <TIM_Base_SetConfig+0x82>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a1e      	ldr	r2, [pc, #120]	; (8001cb4 <TIM_Base_SetConfig+0xe8>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d007      	beq.n	8001c4e <TIM_Base_SetConfig+0x82>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a1d      	ldr	r2, [pc, #116]	; (8001cb8 <TIM_Base_SetConfig+0xec>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d003      	beq.n	8001c4e <TIM_Base_SetConfig+0x82>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a1c      	ldr	r2, [pc, #112]	; (8001cbc <TIM_Base_SetConfig+0xf0>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d108      	bne.n	8001c60 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	68fa      	ldr	r2, [r7, #12]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	695b      	ldr	r3, [r3, #20]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	68fa      	ldr	r2, [r7, #12]
 8001c72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	689a      	ldr	r2, [r3, #8]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	4a09      	ldr	r2, [pc, #36]	; (8001cac <TIM_Base_SetConfig+0xe0>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d003      	beq.n	8001c94 <TIM_Base_SetConfig+0xc8>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	4a08      	ldr	r2, [pc, #32]	; (8001cb0 <TIM_Base_SetConfig+0xe4>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d103      	bne.n	8001c9c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	691a      	ldr	r2, [r3, #16]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	615a      	str	r2, [r3, #20]
}
 8001ca2:	bf00      	nop
 8001ca4:	3714      	adds	r7, #20
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bc80      	pop	{r7}
 8001caa:	4770      	bx	lr
 8001cac:	40012c00 	.word	0x40012c00
 8001cb0:	40013400 	.word	0x40013400
 8001cb4:	40000400 	.word	0x40000400
 8001cb8:	40000800 	.word	0x40000800
 8001cbc:	40000c00 	.word	0x40000c00

08001cc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001cc8:	bf00      	nop
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bc80      	pop	{r7}
 8001cd0:	4770      	bx	lr

08001cd2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	b083      	sub	sp, #12
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001cda:	bf00      	nop
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bc80      	pop	{r7}
 8001ce2:	4770      	bx	lr

08001ce4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d101      	bne.n	8001cf6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e03f      	b.n	8001d76 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d106      	bne.n	8001d10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f7fe fd30 	bl	8000770 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2224      	movs	r2, #36	; 0x24
 8001d14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	68da      	ldr	r2, [r3, #12]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f000 fb39 	bl	80023a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	691a      	ldr	r2, [r3, #16]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001d3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	695a      	ldr	r2, [r3, #20]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001d4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	68da      	ldr	r2, [r3, #12]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2220      	movs	r2, #32
 8001d68:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2220      	movs	r2, #32
 8001d70:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b08a      	sub	sp, #40	; 0x28
 8001d82:	af02      	add	r7, sp, #8
 8001d84:	60f8      	str	r0, [r7, #12]
 8001d86:	60b9      	str	r1, [r7, #8]
 8001d88:	603b      	str	r3, [r7, #0]
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	2b20      	cmp	r3, #32
 8001d9c:	d17c      	bne.n	8001e98 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d002      	beq.n	8001daa <HAL_UART_Transmit+0x2c>
 8001da4:	88fb      	ldrh	r3, [r7, #6]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d101      	bne.n	8001dae <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e075      	b.n	8001e9a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d101      	bne.n	8001dbc <HAL_UART_Transmit+0x3e>
 8001db8:	2302      	movs	r3, #2
 8001dba:	e06e      	b.n	8001e9a <HAL_UART_Transmit+0x11c>
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2221      	movs	r2, #33	; 0x21
 8001dce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001dd2:	f7fe fd6f 	bl	80008b4 <HAL_GetTick>
 8001dd6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	88fa      	ldrh	r2, [r7, #6]
 8001ddc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	88fa      	ldrh	r2, [r7, #6]
 8001de2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dec:	d108      	bne.n	8001e00 <HAL_UART_Transmit+0x82>
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	691b      	ldr	r3, [r3, #16]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d104      	bne.n	8001e00 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001df6:	2300      	movs	r3, #0
 8001df8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	61bb      	str	r3, [r7, #24]
 8001dfe:	e003      	b.n	8001e08 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001e04:	2300      	movs	r3, #0
 8001e06:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001e10:	e02a      	b.n	8001e68 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	9300      	str	r3, [sp, #0]
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	2180      	movs	r1, #128	; 0x80
 8001e1c:	68f8      	ldr	r0, [r7, #12]
 8001e1e:	f000 f95c 	bl	80020da <UART_WaitOnFlagUntilTimeout>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e036      	b.n	8001e9a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d10b      	bne.n	8001e4a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	881b      	ldrh	r3, [r3, #0]
 8001e36:	461a      	mov	r2, r3
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001e40:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	3302      	adds	r3, #2
 8001e46:	61bb      	str	r3, [r7, #24]
 8001e48:	e007      	b.n	8001e5a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	781a      	ldrb	r2, [r3, #0]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	3301      	adds	r3, #1
 8001e58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	3b01      	subs	r3, #1
 8001e62:	b29a      	uxth	r2, r3
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d1cf      	bne.n	8001e12 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	9300      	str	r3, [sp, #0]
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	2140      	movs	r1, #64	; 0x40
 8001e7c:	68f8      	ldr	r0, [r7, #12]
 8001e7e:	f000 f92c 	bl	80020da <UART_WaitOnFlagUntilTimeout>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e006      	b.n	8001e9a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2220      	movs	r2, #32
 8001e90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001e94:	2300      	movs	r3, #0
 8001e96:	e000      	b.n	8001e9a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001e98:	2302      	movs	r3, #2
  }
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3720      	adds	r7, #32
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
	...

08001ea4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b088      	sub	sp, #32
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	695b      	ldr	r3, [r3, #20]
 8001ec2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	f003 030f 	and.w	r3, r3, #15
 8001ed2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d10d      	bne.n	8001ef6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	f003 0320 	and.w	r3, r3, #32
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d008      	beq.n	8001ef6 <HAL_UART_IRQHandler+0x52>
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	f003 0320 	and.w	r3, r3, #32
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d003      	beq.n	8001ef6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f000 f9d5 	bl	800229e <UART_Receive_IT>
      return;
 8001ef4:	e0d1      	b.n	800209a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	f000 80b0 	beq.w	800205e <HAL_UART_IRQHandler+0x1ba>
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	f003 0301 	and.w	r3, r3, #1
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d105      	bne.n	8001f14 <HAL_UART_IRQHandler+0x70>
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	f000 80a5 	beq.w	800205e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d00a      	beq.n	8001f34 <HAL_UART_IRQHandler+0x90>
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d005      	beq.n	8001f34 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f2c:	f043 0201 	orr.w	r2, r3, #1
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	f003 0304 	and.w	r3, r3, #4
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d00a      	beq.n	8001f54 <HAL_UART_IRQHandler+0xb0>
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	f003 0301 	and.w	r3, r3, #1
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d005      	beq.n	8001f54 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f4c:	f043 0202 	orr.w	r2, r3, #2
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d00a      	beq.n	8001f74 <HAL_UART_IRQHandler+0xd0>
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	f003 0301 	and.w	r3, r3, #1
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d005      	beq.n	8001f74 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f6c:	f043 0204 	orr.w	r2, r3, #4
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	f003 0308 	and.w	r3, r3, #8
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d00f      	beq.n	8001f9e <HAL_UART_IRQHandler+0xfa>
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	f003 0320 	and.w	r3, r3, #32
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d104      	bne.n	8001f92 <HAL_UART_IRQHandler+0xee>
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d005      	beq.n	8001f9e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f96:	f043 0208 	orr.w	r2, r3, #8
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d078      	beq.n	8002098 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	f003 0320 	and.w	r3, r3, #32
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d007      	beq.n	8001fc0 <HAL_UART_IRQHandler+0x11c>
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	f003 0320 	and.w	r3, r3, #32
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d002      	beq.n	8001fc0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f000 f96f 	bl	800229e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	695b      	ldr	r3, [r3, #20]
 8001fc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	bf14      	ite	ne
 8001fce:	2301      	movne	r3, #1
 8001fd0:	2300      	moveq	r3, #0
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fda:	f003 0308 	and.w	r3, r3, #8
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d102      	bne.n	8001fe8 <HAL_UART_IRQHandler+0x144>
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d031      	beq.n	800204c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f000 f8c0 	bl	800216e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	695b      	ldr	r3, [r3, #20]
 8001ff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d023      	beq.n	8002044 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	695a      	ldr	r2, [r3, #20]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800200a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002010:	2b00      	cmp	r3, #0
 8002012:	d013      	beq.n	800203c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002018:	4a21      	ldr	r2, [pc, #132]	; (80020a0 <HAL_UART_IRQHandler+0x1fc>)
 800201a:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002020:	4618      	mov	r0, r3
 8002022:	f7fe fd31 	bl	8000a88 <HAL_DMA_Abort_IT>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d016      	beq.n	800205a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002036:	4610      	mov	r0, r2
 8002038:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800203a:	e00e      	b.n	800205a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f000 f843 	bl	80020c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002042:	e00a      	b.n	800205a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f000 f83f 	bl	80020c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800204a:	e006      	b.n	800205a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f000 f83b 	bl	80020c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002058:	e01e      	b.n	8002098 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800205a:	bf00      	nop
    return;
 800205c:	e01c      	b.n	8002098 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002064:	2b00      	cmp	r3, #0
 8002066:	d008      	beq.n	800207a <HAL_UART_IRQHandler+0x1d6>
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800206e:	2b00      	cmp	r3, #0
 8002070:	d003      	beq.n	800207a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f000 f8ac 	bl	80021d0 <UART_Transmit_IT>
    return;
 8002078:	e00f      	b.n	800209a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002080:	2b00      	cmp	r3, #0
 8002082:	d00a      	beq.n	800209a <HAL_UART_IRQHandler+0x1f6>
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800208a:	2b00      	cmp	r3, #0
 800208c:	d005      	beq.n	800209a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f000 f8ed 	bl	800226e <UART_EndTransmit_IT>
    return;
 8002094:	bf00      	nop
 8002096:	e000      	b.n	800209a <HAL_UART_IRQHandler+0x1f6>
    return;
 8002098:	bf00      	nop
  }
}
 800209a:	3720      	adds	r7, #32
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	080021a9 	.word	0x080021a9

080020a4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80020ac:	bf00      	nop
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bc80      	pop	{r7}
 80020b4:	4770      	bx	lr

080020b6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80020b6:	b480      	push	{r7}
 80020b8:	b083      	sub	sp, #12
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80020be:	bf00      	nop
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bc80      	pop	{r7}
 80020c6:	4770      	bx	lr

080020c8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bc80      	pop	{r7}
 80020d8:	4770      	bx	lr

080020da <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	b084      	sub	sp, #16
 80020de:	af00      	add	r7, sp, #0
 80020e0:	60f8      	str	r0, [r7, #12]
 80020e2:	60b9      	str	r1, [r7, #8]
 80020e4:	603b      	str	r3, [r7, #0]
 80020e6:	4613      	mov	r3, r2
 80020e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020ea:	e02c      	b.n	8002146 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020f2:	d028      	beq.n	8002146 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d007      	beq.n	800210a <UART_WaitOnFlagUntilTimeout+0x30>
 80020fa:	f7fe fbdb 	bl	80008b4 <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	429a      	cmp	r2, r3
 8002108:	d21d      	bcs.n	8002146 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	68da      	ldr	r2, [r3, #12]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002118:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	695a      	ldr	r2, [r3, #20]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f022 0201 	bic.w	r2, r2, #1
 8002128:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2220      	movs	r2, #32
 800212e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2220      	movs	r2, #32
 8002136:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e00f      	b.n	8002166 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	4013      	ands	r3, r2
 8002150:	68ba      	ldr	r2, [r7, #8]
 8002152:	429a      	cmp	r2, r3
 8002154:	bf0c      	ite	eq
 8002156:	2301      	moveq	r3, #1
 8002158:	2300      	movne	r3, #0
 800215a:	b2db      	uxtb	r3, r3
 800215c:	461a      	mov	r2, r3
 800215e:	79fb      	ldrb	r3, [r7, #7]
 8002160:	429a      	cmp	r2, r3
 8002162:	d0c3      	beq.n	80020ec <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3710      	adds	r7, #16
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800216e:	b480      	push	{r7}
 8002170:	b083      	sub	sp, #12
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	68da      	ldr	r2, [r3, #12]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002184:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	695a      	ldr	r2, [r3, #20]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f022 0201 	bic.w	r2, r2, #1
 8002194:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2220      	movs	r2, #32
 800219a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800219e:	bf00      	nop
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bc80      	pop	{r7}
 80021a6:	4770      	bx	lr

080021a8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2200      	movs	r2, #0
 80021ba:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2200      	movs	r2, #0
 80021c0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80021c2:	68f8      	ldr	r0, [r7, #12]
 80021c4:	f7ff ff80 	bl	80020c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80021c8:	bf00      	nop
 80021ca:	3710      	adds	r7, #16
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	2b21      	cmp	r3, #33	; 0x21
 80021e2:	d13e      	bne.n	8002262 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021ec:	d114      	bne.n	8002218 <UART_Transmit_IT+0x48>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d110      	bne.n	8002218 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6a1b      	ldr	r3, [r3, #32]
 80021fa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	881b      	ldrh	r3, [r3, #0]
 8002200:	461a      	mov	r2, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800220a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a1b      	ldr	r3, [r3, #32]
 8002210:	1c9a      	adds	r2, r3, #2
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	621a      	str	r2, [r3, #32]
 8002216:	e008      	b.n	800222a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a1b      	ldr	r3, [r3, #32]
 800221c:	1c59      	adds	r1, r3, #1
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	6211      	str	r1, [r2, #32]
 8002222:	781a      	ldrb	r2, [r3, #0]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800222e:	b29b      	uxth	r3, r3
 8002230:	3b01      	subs	r3, #1
 8002232:	b29b      	uxth	r3, r3
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	4619      	mov	r1, r3
 8002238:	84d1      	strh	r1, [r2, #38]	; 0x26
 800223a:	2b00      	cmp	r3, #0
 800223c:	d10f      	bne.n	800225e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	68da      	ldr	r2, [r3, #12]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800224c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	68da      	ldr	r2, [r3, #12]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800225c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800225e:	2300      	movs	r3, #0
 8002260:	e000      	b.n	8002264 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002262:	2302      	movs	r3, #2
  }
}
 8002264:	4618      	mov	r0, r3
 8002266:	3714      	adds	r7, #20
 8002268:	46bd      	mov	sp, r7
 800226a:	bc80      	pop	{r7}
 800226c:	4770      	bx	lr

0800226e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800226e:	b580      	push	{r7, lr}
 8002270:	b082      	sub	sp, #8
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68da      	ldr	r2, [r3, #12]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002284:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2220      	movs	r2, #32
 800228a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f7ff ff08 	bl	80020a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}

0800229e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800229e:	b580      	push	{r7, lr}
 80022a0:	b084      	sub	sp, #16
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b22      	cmp	r3, #34	; 0x22
 80022b0:	d170      	bne.n	8002394 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022ba:	d117      	bne.n	80022ec <UART_Receive_IT+0x4e>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	691b      	ldr	r3, [r3, #16]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d113      	bne.n	80022ec <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 80022c4:	2300      	movs	r3, #0
 80022c6:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022cc:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022da:	b29a      	uxth	r2, r3
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e4:	1c9a      	adds	r2, r3, #2
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	629a      	str	r2, [r3, #40]	; 0x28
 80022ea:	e026      	b.n	800233a <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f0:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80022f2:	2300      	movs	r3, #0
 80022f4:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022fe:	d007      	beq.n	8002310 <UART_Receive_IT+0x72>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d10a      	bne.n	800231e <UART_Receive_IT+0x80>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	691b      	ldr	r3, [r3, #16]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d106      	bne.n	800231e <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	b2da      	uxtb	r2, r3
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	701a      	strb	r2, [r3, #0]
 800231c:	e008      	b.n	8002330 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	b2db      	uxtb	r3, r3
 8002326:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800232a:	b2da      	uxtb	r2, r3
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002334:	1c5a      	adds	r2, r3, #1
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800233e:	b29b      	uxth	r3, r3
 8002340:	3b01      	subs	r3, #1
 8002342:	b29b      	uxth	r3, r3
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	4619      	mov	r1, r3
 8002348:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800234a:	2b00      	cmp	r3, #0
 800234c:	d120      	bne.n	8002390 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	68da      	ldr	r2, [r3, #12]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f022 0220 	bic.w	r2, r2, #32
 800235c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	68da      	ldr	r2, [r3, #12]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800236c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	695a      	ldr	r2, [r3, #20]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f022 0201 	bic.w	r2, r2, #1
 800237c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2220      	movs	r2, #32
 8002382:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f7ff fe95 	bl	80020b6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800238c:	2300      	movs	r3, #0
 800238e:	e002      	b.n	8002396 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8002390:	2300      	movs	r3, #0
 8002392:	e000      	b.n	8002396 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8002394:	2302      	movs	r3, #2
  }
}
 8002396:	4618      	mov	r0, r3
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
	...

080023a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	68da      	ldr	r2, [r3, #12]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	430a      	orrs	r2, r1
 80023bc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	689a      	ldr	r2, [r3, #8]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	431a      	orrs	r2, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	695b      	ldr	r3, [r3, #20]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80023da:	f023 030c 	bic.w	r3, r3, #12
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	6812      	ldr	r2, [r2, #0]
 80023e2:	68b9      	ldr	r1, [r7, #8]
 80023e4:	430b      	orrs	r3, r1
 80023e6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	695b      	ldr	r3, [r3, #20]
 80023ee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	699a      	ldr	r2, [r3, #24]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	430a      	orrs	r2, r1
 80023fc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a2c      	ldr	r2, [pc, #176]	; (80024b4 <UART_SetConfig+0x114>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d103      	bne.n	8002410 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002408:	f7ff f99a 	bl	8001740 <HAL_RCC_GetPCLK2Freq>
 800240c:	60f8      	str	r0, [r7, #12]
 800240e:	e002      	b.n	8002416 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002410:	f7ff f982 	bl	8001718 <HAL_RCC_GetPCLK1Freq>
 8002414:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002416:	68fa      	ldr	r2, [r7, #12]
 8002418:	4613      	mov	r3, r2
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	4413      	add	r3, r2
 800241e:	009a      	lsls	r2, r3, #2
 8002420:	441a      	add	r2, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	fbb2 f3f3 	udiv	r3, r2, r3
 800242c:	4a22      	ldr	r2, [pc, #136]	; (80024b8 <UART_SetConfig+0x118>)
 800242e:	fba2 2303 	umull	r2, r3, r2, r3
 8002432:	095b      	lsrs	r3, r3, #5
 8002434:	0119      	lsls	r1, r3, #4
 8002436:	68fa      	ldr	r2, [r7, #12]
 8002438:	4613      	mov	r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	4413      	add	r3, r2
 800243e:	009a      	lsls	r2, r3, #2
 8002440:	441a      	add	r2, r3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	fbb2 f2f3 	udiv	r2, r2, r3
 800244c:	4b1a      	ldr	r3, [pc, #104]	; (80024b8 <UART_SetConfig+0x118>)
 800244e:	fba3 0302 	umull	r0, r3, r3, r2
 8002452:	095b      	lsrs	r3, r3, #5
 8002454:	2064      	movs	r0, #100	; 0x64
 8002456:	fb00 f303 	mul.w	r3, r0, r3
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	011b      	lsls	r3, r3, #4
 800245e:	3332      	adds	r3, #50	; 0x32
 8002460:	4a15      	ldr	r2, [pc, #84]	; (80024b8 <UART_SetConfig+0x118>)
 8002462:	fba2 2303 	umull	r2, r3, r2, r3
 8002466:	095b      	lsrs	r3, r3, #5
 8002468:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800246c:	4419      	add	r1, r3
 800246e:	68fa      	ldr	r2, [r7, #12]
 8002470:	4613      	mov	r3, r2
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	4413      	add	r3, r2
 8002476:	009a      	lsls	r2, r3, #2
 8002478:	441a      	add	r2, r3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	fbb2 f2f3 	udiv	r2, r2, r3
 8002484:	4b0c      	ldr	r3, [pc, #48]	; (80024b8 <UART_SetConfig+0x118>)
 8002486:	fba3 0302 	umull	r0, r3, r3, r2
 800248a:	095b      	lsrs	r3, r3, #5
 800248c:	2064      	movs	r0, #100	; 0x64
 800248e:	fb00 f303 	mul.w	r3, r0, r3
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	011b      	lsls	r3, r3, #4
 8002496:	3332      	adds	r3, #50	; 0x32
 8002498:	4a07      	ldr	r2, [pc, #28]	; (80024b8 <UART_SetConfig+0x118>)
 800249a:	fba2 2303 	umull	r2, r3, r2, r3
 800249e:	095b      	lsrs	r3, r3, #5
 80024a0:	f003 020f 	and.w	r2, r3, #15
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	440a      	add	r2, r1
 80024aa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80024ac:	bf00      	nop
 80024ae:	3710      	adds	r7, #16
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	40013800 	.word	0x40013800
 80024b8:	51eb851f 	.word	0x51eb851f

080024bc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80024bc:	b480      	push	{r7}
 80024be:	b085      	sub	sp, #20
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	4603      	mov	r3, r0
 80024c4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80024c6:	2300      	movs	r3, #0
 80024c8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80024ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024ce:	2b84      	cmp	r3, #132	; 0x84
 80024d0:	d005      	beq.n	80024de <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80024d2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	4413      	add	r3, r2
 80024da:	3303      	adds	r3, #3
 80024dc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80024de:	68fb      	ldr	r3, [r7, #12]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3714      	adds	r7, #20
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bc80      	pop	{r7}
 80024e8:	4770      	bx	lr

080024ea <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80024ea:	b480      	push	{r7}
 80024ec:	b083      	sub	sp, #12
 80024ee:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80024f0:	f3ef 8305 	mrs	r3, IPSR
 80024f4:	607b      	str	r3, [r7, #4]
  return(result);
 80024f6:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	bf14      	ite	ne
 80024fc:	2301      	movne	r3, #1
 80024fe:	2300      	moveq	r3, #0
 8002500:	b2db      	uxtb	r3, r3
}
 8002502:	4618      	mov	r0, r3
 8002504:	370c      	adds	r7, #12
 8002506:	46bd      	mov	sp, r7
 8002508:	bc80      	pop	{r7}
 800250a:	4770      	bx	lr

0800250c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002510:	f001 fa56 	bl	80039c0 <vTaskStartScheduler>
  
  return osOK;
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	bd80      	pop	{r7, pc}

0800251a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800251a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800251c:	b089      	sub	sp, #36	; 0x24
 800251e:	af04      	add	r7, sp, #16
 8002520:	6078      	str	r0, [r7, #4]
 8002522:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	695b      	ldr	r3, [r3, #20]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d020      	beq.n	800256e <osThreadCreate+0x54>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	699b      	ldr	r3, [r3, #24]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d01c      	beq.n	800256e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685c      	ldr	r4, [r3, #4]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681d      	ldr	r5, [r3, #0]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	691e      	ldr	r6, [r3, #16]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002546:	4618      	mov	r0, r3
 8002548:	f7ff ffb8 	bl	80024bc <makeFreeRtosPriority>
 800254c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002556:	9202      	str	r2, [sp, #8]
 8002558:	9301      	str	r3, [sp, #4]
 800255a:	9100      	str	r1, [sp, #0]
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	4632      	mov	r2, r6
 8002560:	4629      	mov	r1, r5
 8002562:	4620      	mov	r0, r4
 8002564:	f001 f871 	bl	800364a <xTaskCreateStatic>
 8002568:	4603      	mov	r3, r0
 800256a:	60fb      	str	r3, [r7, #12]
 800256c:	e01c      	b.n	80025a8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685c      	ldr	r4, [r3, #4]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800257a:	b29e      	uxth	r6, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002582:	4618      	mov	r0, r3
 8002584:	f7ff ff9a 	bl	80024bc <makeFreeRtosPriority>
 8002588:	4602      	mov	r2, r0
 800258a:	f107 030c 	add.w	r3, r7, #12
 800258e:	9301      	str	r3, [sp, #4]
 8002590:	9200      	str	r2, [sp, #0]
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	4632      	mov	r2, r6
 8002596:	4629      	mov	r1, r5
 8002598:	4620      	mov	r0, r4
 800259a:	f001 f8af 	bl	80036fc <xTaskCreate>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d001      	beq.n	80025a8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80025a4:	2300      	movs	r3, #0
 80025a6:	e000      	b.n	80025aa <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80025a8:	68fb      	ldr	r3, [r7, #12]
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3714      	adds	r7, #20
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080025b2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b084      	sub	sp, #16
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <osDelay+0x16>
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	e000      	b.n	80025ca <osDelay+0x18>
 80025c8:	2301      	movs	r3, #1
 80025ca:	4618      	mov	r0, r3
 80025cc:	f001 f9c4 	bl	8003958 <vTaskDelay>
  
  return osOK;
 80025d0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3710      	adds	r7, #16
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 80025da:	b580      	push	{r7, lr}
 80025dc:	b086      	sub	sp, #24
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	3303      	adds	r3, #3
 80025e8:	f023 0303 	bic.w	r3, r3, #3
 80025ec:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 80025ee:	2014      	movs	r0, #20
 80025f0:	f002 f8c8 	bl	8004784 <pvPortMalloc>
 80025f4:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d046      	beq.n	800268a <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 8002604:	68fa      	ldr	r2, [r7, #12]
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	2200      	movs	r2, #0
 800260e:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4618      	mov	r0, r3
 8002616:	f002 f8b5 	bl	8004784 <pvPortMalloc>
 800261a:	4602      	mov	r2, r0
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d02b      	beq.n	8002680 <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	68fa      	ldr	r2, [r7, #12]
 800262e:	fb02 f303 	mul.w	r3, r2, r3
 8002632:	4618      	mov	r0, r3
 8002634:	f002 f8a6 	bl	8004784 <pvPortMalloc>
 8002638:	4602      	mov	r2, r0
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d011      	beq.n	800266a <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 8002646:	2300      	movs	r3, #0
 8002648:	613b      	str	r3, [r7, #16]
 800264a:	e008      	b.n	800265e <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	685a      	ldr	r2, [r3, #4]
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	4413      	add	r3, r2
 8002654:	2200      	movs	r2, #0
 8002656:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	3301      	adds	r3, #1
 800265c:	613b      	str	r3, [r7, #16]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	693a      	ldr	r2, [r7, #16]
 8002664:	429a      	cmp	r2, r3
 8002666:	d3f1      	bcc.n	800264c <osPoolCreate+0x72>
 8002668:	e00f      	b.n	800268a <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	4618      	mov	r0, r3
 8002670:	f002 f94a 	bl	8004908 <vPortFree>
        vPortFree(thePool);
 8002674:	6978      	ldr	r0, [r7, #20]
 8002676:	f002 f947 	bl	8004908 <vPortFree>
        thePool = NULL;
 800267a:	2300      	movs	r3, #0
 800267c:	617b      	str	r3, [r7, #20]
 800267e:	e004      	b.n	800268a <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 8002680:	6978      	ldr	r0, [r7, #20]
 8002682:	f002 f941 	bl	8004908 <vPortFree>
      thePool = NULL;
 8002686:	2300      	movs	r3, #0
 8002688:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 800268a:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 800268c:	4618      	mov	r0, r3
 800268e:	3718      	adds	r7, #24
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}

08002694 <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b08a      	sub	sp, #40	; 0x28
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 800269c:	2300      	movs	r3, #0
 800269e:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 80026a0:	2300      	movs	r3, #0
 80026a2:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 80026a4:	f7ff ff21 	bl	80024ea <inHandlerMode>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d00e      	beq.n	80026cc <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80026ae:	f3ef 8211 	mrs	r2, BASEPRI
 80026b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026b6:	f383 8811 	msr	BASEPRI, r3
 80026ba:	f3bf 8f6f 	isb	sy
 80026be:	f3bf 8f4f 	dsb	sy
 80026c2:	617a      	str	r2, [r7, #20]
 80026c4:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80026c6:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 80026c8:	627b      	str	r3, [r7, #36]	; 0x24
 80026ca:	e001      	b.n	80026d0 <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 80026cc:	f001 ff64 	bl	8004598 <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 80026d0:	2300      	movs	r3, #0
 80026d2:	61fb      	str	r3, [r7, #28]
 80026d4:	e029      	b.n	800272a <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	691a      	ldr	r2, [r3, #16]
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	4413      	add	r3, r2
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	6892      	ldr	r2, [r2, #8]
 80026e2:	fbb3 f1f2 	udiv	r1, r3, r2
 80026e6:	fb02 f201 	mul.w	r2, r2, r1
 80026ea:	1a9b      	subs	r3, r3, r2
 80026ec:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685a      	ldr	r2, [r3, #4]
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	4413      	add	r3, r2
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d113      	bne.n	8002724 <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685a      	ldr	r2, [r3, #4]
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	4413      	add	r3, r2
 8002704:	2201      	movs	r2, #1
 8002706:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4619      	mov	r1, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	69ba      	ldr	r2, [r7, #24]
 8002714:	fb02 f303 	mul.w	r3, r2, r3
 8002718:	440b      	add	r3, r1
 800271a:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	69ba      	ldr	r2, [r7, #24]
 8002720:	611a      	str	r2, [r3, #16]
      break;
 8002722:	e007      	b.n	8002734 <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	3301      	adds	r3, #1
 8002728:	61fb      	str	r3, [r7, #28]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	69fa      	ldr	r2, [r7, #28]
 8002730:	429a      	cmp	r2, r3
 8002732:	d3d0      	bcc.n	80026d6 <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 8002734:	f7ff fed9 	bl	80024ea <inHandlerMode>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d005      	beq.n	800274a <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 800273e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002740:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f383 8811 	msr	BASEPRI, r3
 8002748:	e001      	b.n	800274e <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 800274a:	f001 ff53 	bl	80045f4 <vPortExitCritical>
  }
  
  return p;
 800274e:	6a3b      	ldr	r3, [r7, #32]
}
 8002750:	4618      	mov	r0, r3
 8002752:	3728      	adds	r7, #40	; 0x28
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}

08002758 <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 8002758:	b480      	push	{r7}
 800275a:	b085      	sub	sp, #20
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d101      	bne.n	800276c <osPoolFree+0x14>
    return osErrorParameter;
 8002768:	2380      	movs	r3, #128	; 0x80
 800276a:	e030      	b.n	80027ce <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d101      	bne.n	8002776 <osPoolFree+0x1e>
    return osErrorParameter;
 8002772:	2380      	movs	r3, #128	; 0x80
 8002774:	e02b      	b.n	80027ce <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	683a      	ldr	r2, [r7, #0]
 800277c:	429a      	cmp	r2, r3
 800277e:	d201      	bcs.n	8002784 <osPoolFree+0x2c>
    return osErrorParameter;
 8002780:	2380      	movs	r3, #128	; 0x80
 8002782:	e024      	b.n	80027ce <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	6812      	ldr	r2, [r2, #0]
 800278a:	1a9b      	subs	r3, r3, r2
 800278c:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	68da      	ldr	r2, [r3, #12]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	fbb3 f1f2 	udiv	r1, r3, r2
 8002798:	fb02 f201 	mul.w	r2, r2, r1
 800279c:	1a9b      	subs	r3, r3, r2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <osPoolFree+0x4e>
    return osErrorParameter;
 80027a2:	2380      	movs	r3, #128	; 0x80
 80027a4:	e013      	b.n	80027ce <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80027b0:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	68fa      	ldr	r2, [r7, #12]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d301      	bcc.n	80027c0 <osPoolFree+0x68>
    return osErrorParameter;
 80027bc:	2380      	movs	r3, #128	; 0x80
 80027be:	e006      	b.n	80027ce <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685a      	ldr	r2, [r3, #4]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	4413      	add	r3, r2
 80027c8:	2200      	movs	r2, #0
 80027ca:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3714      	adds	r7, #20
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bc80      	pop	{r7}
 80027d6:	4770      	bx	lr

080027d8 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80027d8:	b590      	push	{r4, r7, lr}
 80027da:	b085      	sub	sp, #20
 80027dc:	af02      	add	r7, sp, #8
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d012      	beq.n	8002810 <osMessageCreate+0x38>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d00e      	beq.n	8002810 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6818      	ldr	r0, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6859      	ldr	r1, [r3, #4]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	689a      	ldr	r2, [r3, #8]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	68dc      	ldr	r4, [r3, #12]
 8002802:	2300      	movs	r3, #0
 8002804:	9300      	str	r3, [sp, #0]
 8002806:	4623      	mov	r3, r4
 8002808:	f000 fa5a 	bl	8002cc0 <xQueueGenericCreateStatic>
 800280c:	4603      	mov	r3, r0
 800280e:	e008      	b.n	8002822 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6818      	ldr	r0, [r3, #0]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	4619      	mov	r1, r3
 800281c:	f000 fac2 	bl	8002da4 <xQueueGenericCreate>
 8002820:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8002822:	4618      	mov	r0, r3
 8002824:	370c      	adds	r7, #12
 8002826:	46bd      	mov	sp, r7
 8002828:	bd90      	pop	{r4, r7, pc}

0800282a <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 800282a:	b590      	push	{r4, r7, lr}
 800282c:	b087      	sub	sp, #28
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
 8002832:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	60fb      	str	r3, [r7, #12]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	613b      	str	r3, [r7, #16]
 8002840:	2300      	movs	r3, #0
 8002842:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	689c      	ldr	r4, [r3, #8]
 8002848:	200c      	movs	r0, #12
 800284a:	f001 ff9b 	bl	8004784 <pvPortMalloc>
 800284e:	4603      	mov	r3, r0
 8002850:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d101      	bne.n	8002860 <osMailCreate+0x36>
    return NULL;
 800285c:	2300      	movs	r3, #0
 800285e:	e038      	b.n	80028d2 <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6818      	ldr	r0, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	681c      	ldr	r4, [r3, #0]
 8002874:	2200      	movs	r2, #0
 8002876:	2104      	movs	r1, #4
 8002878:	f000 fa94 	bl	8002da4 <xQueueGenericCreate>
 800287c:	4603      	mov	r3, r0
 800287e:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d107      	bne.n	800289c <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4618      	mov	r0, r3
 8002894:	f002 f838 	bl	8004908 <vPortFree>
    return NULL;
 8002898:	2300      	movs	r3, #0
 800289a:	e01a      	b.n	80028d2 <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	681c      	ldr	r4, [r3, #0]
 80028a2:	f107 030c 	add.w	r3, r7, #12
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7ff fe97 	bl	80025da <osPoolCreate>
 80028ac:	4603      	mov	r3, r0
 80028ae:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d107      	bne.n	80028cc <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f002 f820 	bl	8004908 <vPortFree>
    return NULL;
 80028c8:	2300      	movs	r3, #0
 80028ca:	e002      	b.n	80028d2 <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	371c      	adds	r7, #28
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd90      	pop	{r4, r7, pc}

080028da <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 80028da:	b580      	push	{r7, lr}
 80028dc:	b084      	sub	sp, #16
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
 80028e2:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d101      	bne.n	80028ee <osMailAlloc+0x14>
    return NULL;
 80028ea:	2300      	movs	r3, #0
 80028ec:	e006      	b.n	80028fc <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7ff fece 	bl	8002694 <osPoolAlloc>
 80028f8:	60f8      	str	r0, [r7, #12]
  
  return p;
 80028fa:	68fb      	ldr	r3, [r7, #12]
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3710      	adds	r7, #16
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}

08002904 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d101      	bne.n	8002918 <osMailPut+0x14>
    return osErrorParameter;
 8002914:	2380      	movs	r3, #128	; 0x80
 8002916:	e02c      	b.n	8002972 <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 8002918:	2300      	movs	r3, #0
 800291a:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 800291c:	f7ff fde5 	bl	80024ea <inHandlerMode>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d018      	beq.n	8002958 <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6858      	ldr	r0, [r3, #4]
 800292a:	f107 020c 	add.w	r2, r7, #12
 800292e:	4639      	mov	r1, r7
 8002930:	2300      	movs	r3, #0
 8002932:	f000 fb8d 	bl	8003050 <xQueueGenericSendFromISR>
 8002936:	4603      	mov	r3, r0
 8002938:	2b01      	cmp	r3, #1
 800293a:	d001      	beq.n	8002940 <osMailPut+0x3c>
      return osErrorOS;
 800293c:	23ff      	movs	r3, #255	; 0xff
 800293e:	e018      	b.n	8002972 <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d014      	beq.n	8002970 <osMailPut+0x6c>
 8002946:	4b0d      	ldr	r3, [pc, #52]	; (800297c <osMailPut+0x78>)
 8002948:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800294c:	601a      	str	r2, [r3, #0]
 800294e:	f3bf 8f4f 	dsb	sy
 8002952:	f3bf 8f6f 	isb	sy
 8002956:	e00b      	b.n	8002970 <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6858      	ldr	r0, [r3, #4]
 800295c:	4639      	mov	r1, r7
 800295e:	2300      	movs	r3, #0
 8002960:	2200      	movs	r2, #0
 8002962:	f000 fa7b 	bl	8002e5c <xQueueGenericSend>
 8002966:	4603      	mov	r3, r0
 8002968:	2b01      	cmp	r3, #1
 800296a:	d001      	beq.n	8002970 <osMailPut+0x6c>
      return osErrorOS;
 800296c:	23ff      	movs	r3, #255	; 0xff
 800296e:	e000      	b.n	8002972 <osMailPut+0x6e>
    }
  }
  
  return osOK;
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	3710      	adds	r7, #16
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	e000ed04 	.word	0xe000ed04

08002980 <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 8002980:	b590      	push	{r4, r7, lr}
 8002982:	b08b      	sub	sp, #44	; 0x2c
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d10a      	bne.n	80029ac <osMailGet+0x2c>
    event.status = osErrorParameter;
 8002996:	2380      	movs	r3, #128	; 0x80
 8002998:	617b      	str	r3, [r7, #20]
    return event;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	461c      	mov	r4, r3
 800299e:	f107 0314 	add.w	r3, r7, #20
 80029a2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80029a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80029aa:	e056      	b.n	8002a5a <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80029ac:	2300      	movs	r3, #0
 80029ae:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80029b0:	2300      	movs	r3, #0
 80029b2:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029ba:	d103      	bne.n	80029c4 <osMailGet+0x44>
    ticks = portMAX_DELAY;
 80029bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029c0:	627b      	str	r3, [r7, #36]	; 0x24
 80029c2:	e009      	b.n	80029d8 <osMailGet+0x58>
  }
  else if (millisec != 0) {
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d006      	beq.n	80029d8 <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80029ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d101      	bne.n	80029d8 <osMailGet+0x58>
      ticks = 1;
 80029d4:	2301      	movs	r3, #1
 80029d6:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80029d8:	f7ff fd87 	bl	80024ea <inHandlerMode>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d01d      	beq.n	8002a1e <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	6858      	ldr	r0, [r3, #4]
 80029e6:	f107 0220 	add.w	r2, r7, #32
 80029ea:	f107 0314 	add.w	r3, r7, #20
 80029ee:	3304      	adds	r3, #4
 80029f0:	4619      	mov	r1, r3
 80029f2:	f000 fc9d 	bl	8003330 <xQueueReceiveFromISR>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d102      	bne.n	8002a02 <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 80029fc:	2320      	movs	r3, #32
 80029fe:	617b      	str	r3, [r7, #20]
 8002a00:	e001      	b.n	8002a06 <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 8002a02:	2300      	movs	r3, #0
 8002a04:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002a06:	6a3b      	ldr	r3, [r7, #32]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d01e      	beq.n	8002a4a <osMailGet+0xca>
 8002a0c:	4b15      	ldr	r3, [pc, #84]	; (8002a64 <osMailGet+0xe4>)
 8002a0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a12:	601a      	str	r2, [r3, #0]
 8002a14:	f3bf 8f4f 	dsb	sy
 8002a18:	f3bf 8f6f 	isb	sy
 8002a1c:	e015      	b.n	8002a4a <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	6858      	ldr	r0, [r3, #4]
 8002a22:	f107 0314 	add.w	r3, r7, #20
 8002a26:	3304      	adds	r3, #4
 8002a28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	f000 fba4 	bl	8003178 <xQueueReceive>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d102      	bne.n	8002a3c <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 8002a36:	2320      	movs	r3, #32
 8002a38:	617b      	str	r3, [r7, #20]
 8002a3a:	e006      	b.n	8002a4a <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8002a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d101      	bne.n	8002a46 <osMailGet+0xc6>
 8002a42:	2300      	movs	r3, #0
 8002a44:	e000      	b.n	8002a48 <osMailGet+0xc8>
 8002a46:	2340      	movs	r3, #64	; 0x40
 8002a48:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	461c      	mov	r4, r3
 8002a4e:	f107 0314 	add.w	r3, r7, #20
 8002a52:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002a56:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8002a5a:	68f8      	ldr	r0, [r7, #12]
 8002a5c:	372c      	adds	r7, #44	; 0x2c
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd90      	pop	{r4, r7, pc}
 8002a62:	bf00      	nop
 8002a64:	e000ed04 	.word	0xe000ed04

08002a68 <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d101      	bne.n	8002a7c <osMailFree+0x14>
    return osErrorParameter;
 8002a78:	2380      	movs	r3, #128	; 0x80
 8002a7a:	e006      	b.n	8002a8a <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	6839      	ldr	r1, [r7, #0]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7ff fe68 	bl	8002758 <osPoolFree>
 8002a88:	4603      	mov	r3, r0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3708      	adds	r7, #8
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002a92:	b480      	push	{r7}
 8002a94:	b083      	sub	sp, #12
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f103 0208 	add.w	r2, r3, #8
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002aaa:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f103 0208 	add.w	r2, r3, #8
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f103 0208 	add.w	r2, r3, #8
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002ac6:	bf00      	nop
 8002ac8:	370c      	adds	r7, #12
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bc80      	pop	{r7}
 8002ace:	4770      	bx	lr

08002ad0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002ade:	bf00      	nop
 8002ae0:	370c      	adds	r7, #12
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bc80      	pop	{r7}
 8002ae6:	4770      	bx	lr

08002ae8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b085      	sub	sp, #20
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	689a      	ldr	r2, [r3, #8]
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	683a      	ldr	r2, [r7, #0]
 8002b0c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	683a      	ldr	r2, [r7, #0]
 8002b12:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	1c5a      	adds	r2, r3, #1
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	601a      	str	r2, [r3, #0]
}
 8002b24:	bf00      	nop
 8002b26:	3714      	adds	r7, #20
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bc80      	pop	{r7}
 8002b2c:	4770      	bx	lr

08002b2e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002b2e:	b480      	push	{r7}
 8002b30:	b085      	sub	sp, #20
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
 8002b36:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b44:	d103      	bne.n	8002b4e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	60fb      	str	r3, [r7, #12]
 8002b4c:	e00c      	b.n	8002b68 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	3308      	adds	r3, #8
 8002b52:	60fb      	str	r3, [r7, #12]
 8002b54:	e002      	b.n	8002b5c <vListInsert+0x2e>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	60fb      	str	r3, [r7, #12]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	68ba      	ldr	r2, [r7, #8]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d2f6      	bcs.n	8002b56 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	685a      	ldr	r2, [r3, #4]
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	683a      	ldr	r2, [r7, #0]
 8002b76:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	683a      	ldr	r2, [r7, #0]
 8002b82:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	1c5a      	adds	r2, r3, #1
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	601a      	str	r2, [r3, #0]
}
 8002b94:	bf00      	nop
 8002b96:	3714      	adds	r7, #20
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bc80      	pop	{r7}
 8002b9c:	4770      	bx	lr

08002b9e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	b085      	sub	sp, #20
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	6892      	ldr	r2, [r2, #8]
 8002bb4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	6852      	ldr	r2, [r2, #4]
 8002bbe:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d103      	bne.n	8002bd2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	689a      	ldr	r2, [r3, #8]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	1e5a      	subs	r2, r3, #1
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3714      	adds	r7, #20
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bc80      	pop	{r7}
 8002bee:	4770      	bx	lr

08002bf0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d109      	bne.n	8002c18 <xQueueGenericReset+0x28>
	__asm volatile
 8002c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c08:	f383 8811 	msr	BASEPRI, r3
 8002c0c:	f3bf 8f6f 	isb	sy
 8002c10:	f3bf 8f4f 	dsb	sy
 8002c14:	60bb      	str	r3, [r7, #8]
 8002c16:	e7fe      	b.n	8002c16 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8002c18:	f001 fcbe 	bl	8004598 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c24:	68f9      	ldr	r1, [r7, #12]
 8002c26:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002c28:	fb01 f303 	mul.w	r3, r1, r3
 8002c2c:	441a      	add	r2, r3
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2200      	movs	r2, #0
 8002c36:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c48:	3b01      	subs	r3, #1
 8002c4a:	68f9      	ldr	r1, [r7, #12]
 8002c4c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002c4e:	fb01 f303 	mul.w	r3, r1, r3
 8002c52:	441a      	add	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	22ff      	movs	r2, #255	; 0xff
 8002c5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	22ff      	movs	r2, #255	; 0xff
 8002c64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d114      	bne.n	8002c98 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	691b      	ldr	r3, [r3, #16]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d01a      	beq.n	8002cac <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	3310      	adds	r3, #16
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f001 f8e2 	bl	8003e44 <xTaskRemoveFromEventList>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d012      	beq.n	8002cac <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002c86:	4b0d      	ldr	r3, [pc, #52]	; (8002cbc <xQueueGenericReset+0xcc>)
 8002c88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c8c:	601a      	str	r2, [r3, #0]
 8002c8e:	f3bf 8f4f 	dsb	sy
 8002c92:	f3bf 8f6f 	isb	sy
 8002c96:	e009      	b.n	8002cac <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	3310      	adds	r3, #16
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7ff fef8 	bl	8002a92 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	3324      	adds	r3, #36	; 0x24
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7ff fef3 	bl	8002a92 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002cac:	f001 fca2 	bl	80045f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002cb0:	2301      	movs	r3, #1
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3710      	adds	r7, #16
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	e000ed04 	.word	0xe000ed04

08002cc0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b08e      	sub	sp, #56	; 0x38
 8002cc4:	af02      	add	r7, sp, #8
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	607a      	str	r2, [r7, #4]
 8002ccc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d109      	bne.n	8002ce8 <xQueueGenericCreateStatic+0x28>
 8002cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cd8:	f383 8811 	msr	BASEPRI, r3
 8002cdc:	f3bf 8f6f 	isb	sy
 8002ce0:	f3bf 8f4f 	dsb	sy
 8002ce4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ce6:	e7fe      	b.n	8002ce6 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d109      	bne.n	8002d02 <xQueueGenericCreateStatic+0x42>
 8002cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cf2:	f383 8811 	msr	BASEPRI, r3
 8002cf6:	f3bf 8f6f 	isb	sy
 8002cfa:	f3bf 8f4f 	dsb	sy
 8002cfe:	627b      	str	r3, [r7, #36]	; 0x24
 8002d00:	e7fe      	b.n	8002d00 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d002      	beq.n	8002d0e <xQueueGenericCreateStatic+0x4e>
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d001      	beq.n	8002d12 <xQueueGenericCreateStatic+0x52>
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e000      	b.n	8002d14 <xQueueGenericCreateStatic+0x54>
 8002d12:	2300      	movs	r3, #0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d109      	bne.n	8002d2c <xQueueGenericCreateStatic+0x6c>
 8002d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d1c:	f383 8811 	msr	BASEPRI, r3
 8002d20:	f3bf 8f6f 	isb	sy
 8002d24:	f3bf 8f4f 	dsb	sy
 8002d28:	623b      	str	r3, [r7, #32]
 8002d2a:	e7fe      	b.n	8002d2a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d102      	bne.n	8002d38 <xQueueGenericCreateStatic+0x78>
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d101      	bne.n	8002d3c <xQueueGenericCreateStatic+0x7c>
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e000      	b.n	8002d3e <xQueueGenericCreateStatic+0x7e>
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d109      	bne.n	8002d56 <xQueueGenericCreateStatic+0x96>
 8002d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d46:	f383 8811 	msr	BASEPRI, r3
 8002d4a:	f3bf 8f6f 	isb	sy
 8002d4e:	f3bf 8f4f 	dsb	sy
 8002d52:	61fb      	str	r3, [r7, #28]
 8002d54:	e7fe      	b.n	8002d54 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002d56:	2348      	movs	r3, #72	; 0x48
 8002d58:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	2b48      	cmp	r3, #72	; 0x48
 8002d5e:	d009      	beq.n	8002d74 <xQueueGenericCreateStatic+0xb4>
 8002d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d64:	f383 8811 	msr	BASEPRI, r3
 8002d68:	f3bf 8f6f 	isb	sy
 8002d6c:	f3bf 8f4f 	dsb	sy
 8002d70:	61bb      	str	r3, [r7, #24]
 8002d72:	e7fe      	b.n	8002d72 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d00d      	beq.n	8002d9a <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d80:	2201      	movs	r2, #1
 8002d82:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002d86:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d8c:	9300      	str	r3, [sp, #0]
 8002d8e:	4613      	mov	r3, r2
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	68b9      	ldr	r1, [r7, #8]
 8002d94:	68f8      	ldr	r0, [r7, #12]
 8002d96:	f000 f842 	bl	8002e1e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3730      	adds	r7, #48	; 0x30
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b08a      	sub	sp, #40	; 0x28
 8002da8:	af02      	add	r7, sp, #8
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	4613      	mov	r3, r2
 8002db0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d109      	bne.n	8002dcc <xQueueGenericCreate+0x28>
 8002db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dbc:	f383 8811 	msr	BASEPRI, r3
 8002dc0:	f3bf 8f6f 	isb	sy
 8002dc4:	f3bf 8f4f 	dsb	sy
 8002dc8:	613b      	str	r3, [r7, #16]
 8002dca:	e7fe      	b.n	8002dca <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d102      	bne.n	8002dd8 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	61fb      	str	r3, [r7, #28]
 8002dd6:	e004      	b.n	8002de2 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	68ba      	ldr	r2, [r7, #8]
 8002ddc:	fb02 f303 	mul.w	r3, r2, r3
 8002de0:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	3348      	adds	r3, #72	; 0x48
 8002de6:	4618      	mov	r0, r3
 8002de8:	f001 fccc 	bl	8004784 <pvPortMalloc>
 8002dec:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d00f      	beq.n	8002e14 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	3348      	adds	r3, #72	; 0x48
 8002df8:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002e02:	79fa      	ldrb	r2, [r7, #7]
 8002e04:	69bb      	ldr	r3, [r7, #24]
 8002e06:	9300      	str	r3, [sp, #0]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	697a      	ldr	r2, [r7, #20]
 8002e0c:	68b9      	ldr	r1, [r7, #8]
 8002e0e:	68f8      	ldr	r0, [r7, #12]
 8002e10:	f000 f805 	bl	8002e1e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002e14:	69bb      	ldr	r3, [r7, #24]
	}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3720      	adds	r7, #32
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002e1e:	b580      	push	{r7, lr}
 8002e20:	b084      	sub	sp, #16
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	60f8      	str	r0, [r7, #12]
 8002e26:	60b9      	str	r1, [r7, #8]
 8002e28:	607a      	str	r2, [r7, #4]
 8002e2a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d103      	bne.n	8002e3a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	601a      	str	r2, [r3, #0]
 8002e38:	e002      	b.n	8002e40 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	68fa      	ldr	r2, [r7, #12]
 8002e44:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	68ba      	ldr	r2, [r7, #8]
 8002e4a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002e4c:	2101      	movs	r1, #1
 8002e4e:	69b8      	ldr	r0, [r7, #24]
 8002e50:	f7ff fece 	bl	8002bf0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002e54:	bf00      	nop
 8002e56:	3710      	adds	r7, #16
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b08e      	sub	sp, #56	; 0x38
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	60b9      	str	r1, [r7, #8]
 8002e66:	607a      	str	r2, [r7, #4]
 8002e68:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d109      	bne.n	8002e8c <xQueueGenericSend+0x30>
 8002e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e7c:	f383 8811 	msr	BASEPRI, r3
 8002e80:	f3bf 8f6f 	isb	sy
 8002e84:	f3bf 8f4f 	dsb	sy
 8002e88:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e8a:	e7fe      	b.n	8002e8a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d103      	bne.n	8002e9a <xQueueGenericSend+0x3e>
 8002e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d101      	bne.n	8002e9e <xQueueGenericSend+0x42>
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e000      	b.n	8002ea0 <xQueueGenericSend+0x44>
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d109      	bne.n	8002eb8 <xQueueGenericSend+0x5c>
 8002ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ea8:	f383 8811 	msr	BASEPRI, r3
 8002eac:	f3bf 8f6f 	isb	sy
 8002eb0:	f3bf 8f4f 	dsb	sy
 8002eb4:	627b      	str	r3, [r7, #36]	; 0x24
 8002eb6:	e7fe      	b.n	8002eb6 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d103      	bne.n	8002ec6 <xQueueGenericSend+0x6a>
 8002ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d101      	bne.n	8002eca <xQueueGenericSend+0x6e>
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e000      	b.n	8002ecc <xQueueGenericSend+0x70>
 8002eca:	2300      	movs	r3, #0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d109      	bne.n	8002ee4 <xQueueGenericSend+0x88>
 8002ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ed4:	f383 8811 	msr	BASEPRI, r3
 8002ed8:	f3bf 8f6f 	isb	sy
 8002edc:	f3bf 8f4f 	dsb	sy
 8002ee0:	623b      	str	r3, [r7, #32]
 8002ee2:	e7fe      	b.n	8002ee2 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002ee4:	f001 f968 	bl	80041b8 <xTaskGetSchedulerState>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d102      	bne.n	8002ef4 <xQueueGenericSend+0x98>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d101      	bne.n	8002ef8 <xQueueGenericSend+0x9c>
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e000      	b.n	8002efa <xQueueGenericSend+0x9e>
 8002ef8:	2300      	movs	r3, #0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d109      	bne.n	8002f12 <xQueueGenericSend+0xb6>
 8002efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f02:	f383 8811 	msr	BASEPRI, r3
 8002f06:	f3bf 8f6f 	isb	sy
 8002f0a:	f3bf 8f4f 	dsb	sy
 8002f0e:	61fb      	str	r3, [r7, #28]
 8002f10:	e7fe      	b.n	8002f10 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002f12:	f001 fb41 	bl	8004598 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d302      	bcc.n	8002f28 <xQueueGenericSend+0xcc>
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d129      	bne.n	8002f7c <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002f28:	683a      	ldr	r2, [r7, #0]
 8002f2a:	68b9      	ldr	r1, [r7, #8]
 8002f2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f2e:	f000 fa7c 	bl	800342a <prvCopyDataToQueue>
 8002f32:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d010      	beq.n	8002f5e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f3e:	3324      	adds	r3, #36	; 0x24
 8002f40:	4618      	mov	r0, r3
 8002f42:	f000 ff7f 	bl	8003e44 <xTaskRemoveFromEventList>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d013      	beq.n	8002f74 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002f4c:	4b3f      	ldr	r3, [pc, #252]	; (800304c <xQueueGenericSend+0x1f0>)
 8002f4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f52:	601a      	str	r2, [r3, #0]
 8002f54:	f3bf 8f4f 	dsb	sy
 8002f58:	f3bf 8f6f 	isb	sy
 8002f5c:	e00a      	b.n	8002f74 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d007      	beq.n	8002f74 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002f64:	4b39      	ldr	r3, [pc, #228]	; (800304c <xQueueGenericSend+0x1f0>)
 8002f66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f6a:	601a      	str	r2, [r3, #0]
 8002f6c:	f3bf 8f4f 	dsb	sy
 8002f70:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002f74:	f001 fb3e 	bl	80045f4 <vPortExitCritical>
				return pdPASS;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e063      	b.n	8003044 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d103      	bne.n	8002f8a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002f82:	f001 fb37 	bl	80045f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002f86:	2300      	movs	r3, #0
 8002f88:	e05c      	b.n	8003044 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d106      	bne.n	8002f9e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002f90:	f107 0314 	add.w	r3, r7, #20
 8002f94:	4618      	mov	r0, r3
 8002f96:	f000 ffb7 	bl	8003f08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002f9e:	f001 fb29 	bl	80045f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002fa2:	f000 fd6b 	bl	8003a7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002fa6:	f001 faf7 	bl	8004598 <vPortEnterCritical>
 8002faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002fb0:	b25b      	sxtb	r3, r3
 8002fb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fb6:	d103      	bne.n	8002fc0 <xQueueGenericSend+0x164>
 8002fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002fc6:	b25b      	sxtb	r3, r3
 8002fc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fcc:	d103      	bne.n	8002fd6 <xQueueGenericSend+0x17a>
 8002fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002fd6:	f001 fb0d 	bl	80045f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002fda:	1d3a      	adds	r2, r7, #4
 8002fdc:	f107 0314 	add.w	r3, r7, #20
 8002fe0:	4611      	mov	r1, r2
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f000 ffa6 	bl	8003f34 <xTaskCheckForTimeOut>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d124      	bne.n	8003038 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002fee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ff0:	f000 fb13 	bl	800361a <prvIsQueueFull>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d018      	beq.n	800302c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ffc:	3310      	adds	r3, #16
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	4611      	mov	r1, r2
 8003002:	4618      	mov	r0, r3
 8003004:	f000 fefa 	bl	8003dfc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003008:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800300a:	f000 fa9e 	bl	800354a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800300e:	f000 fd43 	bl	8003a98 <xTaskResumeAll>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	f47f af7c 	bne.w	8002f12 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800301a:	4b0c      	ldr	r3, [pc, #48]	; (800304c <xQueueGenericSend+0x1f0>)
 800301c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003020:	601a      	str	r2, [r3, #0]
 8003022:	f3bf 8f4f 	dsb	sy
 8003026:	f3bf 8f6f 	isb	sy
 800302a:	e772      	b.n	8002f12 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800302c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800302e:	f000 fa8c 	bl	800354a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003032:	f000 fd31 	bl	8003a98 <xTaskResumeAll>
 8003036:	e76c      	b.n	8002f12 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003038:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800303a:	f000 fa86 	bl	800354a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800303e:	f000 fd2b 	bl	8003a98 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003042:	2300      	movs	r3, #0
		}
	}
}
 8003044:	4618      	mov	r0, r3
 8003046:	3738      	adds	r7, #56	; 0x38
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	e000ed04 	.word	0xe000ed04

08003050 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b08e      	sub	sp, #56	; 0x38
 8003054:	af00      	add	r7, sp, #0
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	607a      	str	r2, [r7, #4]
 800305c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003064:	2b00      	cmp	r3, #0
 8003066:	d109      	bne.n	800307c <xQueueGenericSendFromISR+0x2c>
 8003068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800306c:	f383 8811 	msr	BASEPRI, r3
 8003070:	f3bf 8f6f 	isb	sy
 8003074:	f3bf 8f4f 	dsb	sy
 8003078:	627b      	str	r3, [r7, #36]	; 0x24
 800307a:	e7fe      	b.n	800307a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d103      	bne.n	800308a <xQueueGenericSendFromISR+0x3a>
 8003082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003086:	2b00      	cmp	r3, #0
 8003088:	d101      	bne.n	800308e <xQueueGenericSendFromISR+0x3e>
 800308a:	2301      	movs	r3, #1
 800308c:	e000      	b.n	8003090 <xQueueGenericSendFromISR+0x40>
 800308e:	2300      	movs	r3, #0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d109      	bne.n	80030a8 <xQueueGenericSendFromISR+0x58>
 8003094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003098:	f383 8811 	msr	BASEPRI, r3
 800309c:	f3bf 8f6f 	isb	sy
 80030a0:	f3bf 8f4f 	dsb	sy
 80030a4:	623b      	str	r3, [r7, #32]
 80030a6:	e7fe      	b.n	80030a6 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d103      	bne.n	80030b6 <xQueueGenericSendFromISR+0x66>
 80030ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d101      	bne.n	80030ba <xQueueGenericSendFromISR+0x6a>
 80030b6:	2301      	movs	r3, #1
 80030b8:	e000      	b.n	80030bc <xQueueGenericSendFromISR+0x6c>
 80030ba:	2300      	movs	r3, #0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d109      	bne.n	80030d4 <xQueueGenericSendFromISR+0x84>
 80030c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030c4:	f383 8811 	msr	BASEPRI, r3
 80030c8:	f3bf 8f6f 	isb	sy
 80030cc:	f3bf 8f4f 	dsb	sy
 80030d0:	61fb      	str	r3, [r7, #28]
 80030d2:	e7fe      	b.n	80030d2 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80030d4:	f001 fb1a 	bl	800470c <vPortValidateInterruptPriority>
	__asm volatile
 80030d8:	f3ef 8211 	mrs	r2, BASEPRI
 80030dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e0:	f383 8811 	msr	BASEPRI, r3
 80030e4:	f3bf 8f6f 	isb	sy
 80030e8:	f3bf 8f4f 	dsb	sy
 80030ec:	61ba      	str	r2, [r7, #24]
 80030ee:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80030f0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80030f2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80030f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d302      	bcc.n	8003106 <xQueueGenericSendFromISR+0xb6>
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	2b02      	cmp	r3, #2
 8003104:	d12c      	bne.n	8003160 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003108:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800310c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003110:	683a      	ldr	r2, [r7, #0]
 8003112:	68b9      	ldr	r1, [r7, #8]
 8003114:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003116:	f000 f988 	bl	800342a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800311a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800311e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003122:	d112      	bne.n	800314a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003128:	2b00      	cmp	r3, #0
 800312a:	d016      	beq.n	800315a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800312c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800312e:	3324      	adds	r3, #36	; 0x24
 8003130:	4618      	mov	r0, r3
 8003132:	f000 fe87 	bl	8003e44 <xTaskRemoveFromEventList>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d00e      	beq.n	800315a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d00b      	beq.n	800315a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2201      	movs	r2, #1
 8003146:	601a      	str	r2, [r3, #0]
 8003148:	e007      	b.n	800315a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800314a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800314e:	3301      	adds	r3, #1
 8003150:	b2db      	uxtb	r3, r3
 8003152:	b25a      	sxtb	r2, r3
 8003154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003156:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800315a:	2301      	movs	r3, #1
 800315c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800315e:	e001      	b.n	8003164 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003160:	2300      	movs	r3, #0
 8003162:	637b      	str	r3, [r7, #52]	; 0x34
 8003164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003166:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800316e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003170:	4618      	mov	r0, r3
 8003172:	3738      	adds	r7, #56	; 0x38
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b08c      	sub	sp, #48	; 0x30
 800317c:	af00      	add	r7, sp, #0
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	60b9      	str	r1, [r7, #8]
 8003182:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003184:	2300      	movs	r3, #0
 8003186:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800318c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800318e:	2b00      	cmp	r3, #0
 8003190:	d109      	bne.n	80031a6 <xQueueReceive+0x2e>
	__asm volatile
 8003192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003196:	f383 8811 	msr	BASEPRI, r3
 800319a:	f3bf 8f6f 	isb	sy
 800319e:	f3bf 8f4f 	dsb	sy
 80031a2:	623b      	str	r3, [r7, #32]
 80031a4:	e7fe      	b.n	80031a4 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d103      	bne.n	80031b4 <xQueueReceive+0x3c>
 80031ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d101      	bne.n	80031b8 <xQueueReceive+0x40>
 80031b4:	2301      	movs	r3, #1
 80031b6:	e000      	b.n	80031ba <xQueueReceive+0x42>
 80031b8:	2300      	movs	r3, #0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d109      	bne.n	80031d2 <xQueueReceive+0x5a>
 80031be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031c2:	f383 8811 	msr	BASEPRI, r3
 80031c6:	f3bf 8f6f 	isb	sy
 80031ca:	f3bf 8f4f 	dsb	sy
 80031ce:	61fb      	str	r3, [r7, #28]
 80031d0:	e7fe      	b.n	80031d0 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80031d2:	f000 fff1 	bl	80041b8 <xTaskGetSchedulerState>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d102      	bne.n	80031e2 <xQueueReceive+0x6a>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d101      	bne.n	80031e6 <xQueueReceive+0x6e>
 80031e2:	2301      	movs	r3, #1
 80031e4:	e000      	b.n	80031e8 <xQueueReceive+0x70>
 80031e6:	2300      	movs	r3, #0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d109      	bne.n	8003200 <xQueueReceive+0x88>
 80031ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031f0:	f383 8811 	msr	BASEPRI, r3
 80031f4:	f3bf 8f6f 	isb	sy
 80031f8:	f3bf 8f4f 	dsb	sy
 80031fc:	61bb      	str	r3, [r7, #24]
 80031fe:	e7fe      	b.n	80031fe <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003200:	f001 f9ca 	bl	8004598 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003208:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800320a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320c:	2b00      	cmp	r3, #0
 800320e:	d01f      	beq.n	8003250 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003210:	68b9      	ldr	r1, [r7, #8]
 8003212:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003214:	f000 f973 	bl	80034fe <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321a:	1e5a      	subs	r2, r3, #1
 800321c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800321e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003222:	691b      	ldr	r3, [r3, #16]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d00f      	beq.n	8003248 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800322a:	3310      	adds	r3, #16
 800322c:	4618      	mov	r0, r3
 800322e:	f000 fe09 	bl	8003e44 <xTaskRemoveFromEventList>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d007      	beq.n	8003248 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003238:	4b3c      	ldr	r3, [pc, #240]	; (800332c <xQueueReceive+0x1b4>)
 800323a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800323e:	601a      	str	r2, [r3, #0]
 8003240:	f3bf 8f4f 	dsb	sy
 8003244:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003248:	f001 f9d4 	bl	80045f4 <vPortExitCritical>
				return pdPASS;
 800324c:	2301      	movs	r3, #1
 800324e:	e069      	b.n	8003324 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d103      	bne.n	800325e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003256:	f001 f9cd 	bl	80045f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800325a:	2300      	movs	r3, #0
 800325c:	e062      	b.n	8003324 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800325e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003260:	2b00      	cmp	r3, #0
 8003262:	d106      	bne.n	8003272 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003264:	f107 0310 	add.w	r3, r7, #16
 8003268:	4618      	mov	r0, r3
 800326a:	f000 fe4d 	bl	8003f08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800326e:	2301      	movs	r3, #1
 8003270:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003272:	f001 f9bf 	bl	80045f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003276:	f000 fc01 	bl	8003a7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800327a:	f001 f98d 	bl	8004598 <vPortEnterCritical>
 800327e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003280:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003284:	b25b      	sxtb	r3, r3
 8003286:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800328a:	d103      	bne.n	8003294 <xQueueReceive+0x11c>
 800328c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800328e:	2200      	movs	r2, #0
 8003290:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003296:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800329a:	b25b      	sxtb	r3, r3
 800329c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032a0:	d103      	bne.n	80032aa <xQueueReceive+0x132>
 80032a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032aa:	f001 f9a3 	bl	80045f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80032ae:	1d3a      	adds	r2, r7, #4
 80032b0:	f107 0310 	add.w	r3, r7, #16
 80032b4:	4611      	mov	r1, r2
 80032b6:	4618      	mov	r0, r3
 80032b8:	f000 fe3c 	bl	8003f34 <xTaskCheckForTimeOut>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d123      	bne.n	800330a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80032c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032c4:	f000 f993 	bl	80035ee <prvIsQueueEmpty>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d017      	beq.n	80032fe <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80032ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032d0:	3324      	adds	r3, #36	; 0x24
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	4611      	mov	r1, r2
 80032d6:	4618      	mov	r0, r3
 80032d8:	f000 fd90 	bl	8003dfc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80032dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032de:	f000 f934 	bl	800354a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80032e2:	f000 fbd9 	bl	8003a98 <xTaskResumeAll>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d189      	bne.n	8003200 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80032ec:	4b0f      	ldr	r3, [pc, #60]	; (800332c <xQueueReceive+0x1b4>)
 80032ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032f2:	601a      	str	r2, [r3, #0]
 80032f4:	f3bf 8f4f 	dsb	sy
 80032f8:	f3bf 8f6f 	isb	sy
 80032fc:	e780      	b.n	8003200 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80032fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003300:	f000 f923 	bl	800354a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003304:	f000 fbc8 	bl	8003a98 <xTaskResumeAll>
 8003308:	e77a      	b.n	8003200 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800330a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800330c:	f000 f91d 	bl	800354a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003310:	f000 fbc2 	bl	8003a98 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003314:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003316:	f000 f96a 	bl	80035ee <prvIsQueueEmpty>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	f43f af6f 	beq.w	8003200 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003322:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003324:	4618      	mov	r0, r3
 8003326:	3730      	adds	r7, #48	; 0x30
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	e000ed04 	.word	0xe000ed04

08003330 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b08e      	sub	sp, #56	; 0x38
 8003334:	af00      	add	r7, sp, #0
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	60b9      	str	r1, [r7, #8]
 800333a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003342:	2b00      	cmp	r3, #0
 8003344:	d109      	bne.n	800335a <xQueueReceiveFromISR+0x2a>
 8003346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800334a:	f383 8811 	msr	BASEPRI, r3
 800334e:	f3bf 8f6f 	isb	sy
 8003352:	f3bf 8f4f 	dsb	sy
 8003356:	623b      	str	r3, [r7, #32]
 8003358:	e7fe      	b.n	8003358 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d103      	bne.n	8003368 <xQueueReceiveFromISR+0x38>
 8003360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003364:	2b00      	cmp	r3, #0
 8003366:	d101      	bne.n	800336c <xQueueReceiveFromISR+0x3c>
 8003368:	2301      	movs	r3, #1
 800336a:	e000      	b.n	800336e <xQueueReceiveFromISR+0x3e>
 800336c:	2300      	movs	r3, #0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d109      	bne.n	8003386 <xQueueReceiveFromISR+0x56>
 8003372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003376:	f383 8811 	msr	BASEPRI, r3
 800337a:	f3bf 8f6f 	isb	sy
 800337e:	f3bf 8f4f 	dsb	sy
 8003382:	61fb      	str	r3, [r7, #28]
 8003384:	e7fe      	b.n	8003384 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003386:	f001 f9c1 	bl	800470c <vPortValidateInterruptPriority>
	__asm volatile
 800338a:	f3ef 8211 	mrs	r2, BASEPRI
 800338e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003392:	f383 8811 	msr	BASEPRI, r3
 8003396:	f3bf 8f6f 	isb	sy
 800339a:	f3bf 8f4f 	dsb	sy
 800339e:	61ba      	str	r2, [r7, #24]
 80033a0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80033a2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80033a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80033a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033aa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80033ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d02f      	beq.n	8003412 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80033b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80033b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80033bc:	68b9      	ldr	r1, [r7, #8]
 80033be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80033c0:	f000 f89d 	bl	80034fe <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80033c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c6:	1e5a      	subs	r2, r3, #1
 80033c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ca:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80033cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80033d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033d4:	d112      	bne.n	80033fc <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80033d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d8:	691b      	ldr	r3, [r3, #16]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d016      	beq.n	800340c <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80033de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e0:	3310      	adds	r3, #16
 80033e2:	4618      	mov	r0, r3
 80033e4:	f000 fd2e 	bl	8003e44 <xTaskRemoveFromEventList>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d00e      	beq.n	800340c <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00b      	beq.n	800340c <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	601a      	str	r2, [r3, #0]
 80033fa:	e007      	b.n	800340c <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80033fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003400:	3301      	adds	r3, #1
 8003402:	b2db      	uxtb	r3, r3
 8003404:	b25a      	sxtb	r2, r3
 8003406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003408:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800340c:	2301      	movs	r3, #1
 800340e:	637b      	str	r3, [r7, #52]	; 0x34
 8003410:	e001      	b.n	8003416 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8003412:	2300      	movs	r3, #0
 8003414:	637b      	str	r3, [r7, #52]	; 0x34
 8003416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003418:	613b      	str	r3, [r7, #16]
	__asm volatile
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003422:	4618      	mov	r0, r3
 8003424:	3738      	adds	r7, #56	; 0x38
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}

0800342a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800342a:	b580      	push	{r7, lr}
 800342c:	b086      	sub	sp, #24
 800342e:	af00      	add	r7, sp, #0
 8003430:	60f8      	str	r0, [r7, #12]
 8003432:	60b9      	str	r1, [r7, #8]
 8003434:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003436:	2300      	movs	r3, #0
 8003438:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800343e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003444:	2b00      	cmp	r3, #0
 8003446:	d10d      	bne.n	8003464 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d14d      	bne.n	80034ec <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	4618      	mov	r0, r3
 8003456:	f000 fecd 	bl	80041f4 <xTaskPriorityDisinherit>
 800345a:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2200      	movs	r2, #0
 8003460:	605a      	str	r2, [r3, #4]
 8003462:	e043      	b.n	80034ec <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d119      	bne.n	800349e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6898      	ldr	r0, [r3, #8]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003472:	461a      	mov	r2, r3
 8003474:	68b9      	ldr	r1, [r7, #8]
 8003476:	f001 fb83 	bl	8004b80 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	689a      	ldr	r2, [r3, #8]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003482:	441a      	add	r2, r3
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	689a      	ldr	r2, [r3, #8]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	429a      	cmp	r2, r3
 8003492:	d32b      	bcc.n	80034ec <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	609a      	str	r2, [r3, #8]
 800349c:	e026      	b.n	80034ec <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	68d8      	ldr	r0, [r3, #12]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a6:	461a      	mov	r2, r3
 80034a8:	68b9      	ldr	r1, [r7, #8]
 80034aa:	f001 fb69 	bl	8004b80 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	68da      	ldr	r2, [r3, #12]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b6:	425b      	negs	r3, r3
 80034b8:	441a      	add	r2, r3
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	68da      	ldr	r2, [r3, #12]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d207      	bcs.n	80034da <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	685a      	ldr	r2, [r3, #4]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d2:	425b      	negs	r3, r3
 80034d4:	441a      	add	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d105      	bne.n	80034ec <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d002      	beq.n	80034ec <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	3b01      	subs	r3, #1
 80034ea:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	1c5a      	adds	r2, r3, #1
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80034f4:	697b      	ldr	r3, [r7, #20]
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3718      	adds	r7, #24
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}

080034fe <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80034fe:	b580      	push	{r7, lr}
 8003500:	b082      	sub	sp, #8
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
 8003506:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350c:	2b00      	cmp	r3, #0
 800350e:	d018      	beq.n	8003542 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	68da      	ldr	r2, [r3, #12]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003518:	441a      	add	r2, r3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	68da      	ldr	r2, [r3, #12]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	429a      	cmp	r2, r3
 8003528:	d303      	bcc.n	8003532 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	68d9      	ldr	r1, [r3, #12]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353a:	461a      	mov	r2, r3
 800353c:	6838      	ldr	r0, [r7, #0]
 800353e:	f001 fb1f 	bl	8004b80 <memcpy>
	}
}
 8003542:	bf00      	nop
 8003544:	3708      	adds	r7, #8
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}

0800354a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800354a:	b580      	push	{r7, lr}
 800354c:	b084      	sub	sp, #16
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003552:	f001 f821 	bl	8004598 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800355c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800355e:	e011      	b.n	8003584 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003564:	2b00      	cmp	r3, #0
 8003566:	d012      	beq.n	800358e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	3324      	adds	r3, #36	; 0x24
 800356c:	4618      	mov	r0, r3
 800356e:	f000 fc69 	bl	8003e44 <xTaskRemoveFromEventList>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d001      	beq.n	800357c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003578:	f000 fd3c 	bl	8003ff4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800357c:	7bfb      	ldrb	r3, [r7, #15]
 800357e:	3b01      	subs	r3, #1
 8003580:	b2db      	uxtb	r3, r3
 8003582:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003584:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003588:	2b00      	cmp	r3, #0
 800358a:	dce9      	bgt.n	8003560 <prvUnlockQueue+0x16>
 800358c:	e000      	b.n	8003590 <prvUnlockQueue+0x46>
					break;
 800358e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	22ff      	movs	r2, #255	; 0xff
 8003594:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003598:	f001 f82c 	bl	80045f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800359c:	f000 fffc 	bl	8004598 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035a6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80035a8:	e011      	b.n	80035ce <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d012      	beq.n	80035d8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	3310      	adds	r3, #16
 80035b6:	4618      	mov	r0, r3
 80035b8:	f000 fc44 	bl	8003e44 <xTaskRemoveFromEventList>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d001      	beq.n	80035c6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80035c2:	f000 fd17 	bl	8003ff4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80035c6:	7bbb      	ldrb	r3, [r7, #14]
 80035c8:	3b01      	subs	r3, #1
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80035ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	dce9      	bgt.n	80035aa <prvUnlockQueue+0x60>
 80035d6:	e000      	b.n	80035da <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80035d8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	22ff      	movs	r2, #255	; 0xff
 80035de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80035e2:	f001 f807 	bl	80045f4 <vPortExitCritical>
}
 80035e6:	bf00      	nop
 80035e8:	3710      	adds	r7, #16
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}

080035ee <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80035ee:	b580      	push	{r7, lr}
 80035f0:	b084      	sub	sp, #16
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80035f6:	f000 ffcf 	bl	8004598 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d102      	bne.n	8003608 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003602:	2301      	movs	r3, #1
 8003604:	60fb      	str	r3, [r7, #12]
 8003606:	e001      	b.n	800360c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003608:	2300      	movs	r3, #0
 800360a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800360c:	f000 fff2 	bl	80045f4 <vPortExitCritical>

	return xReturn;
 8003610:	68fb      	ldr	r3, [r7, #12]
}
 8003612:	4618      	mov	r0, r3
 8003614:	3710      	adds	r7, #16
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}

0800361a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800361a:	b580      	push	{r7, lr}
 800361c:	b084      	sub	sp, #16
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003622:	f000 ffb9 	bl	8004598 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800362e:	429a      	cmp	r2, r3
 8003630:	d102      	bne.n	8003638 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003632:	2301      	movs	r3, #1
 8003634:	60fb      	str	r3, [r7, #12]
 8003636:	e001      	b.n	800363c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003638:	2300      	movs	r3, #0
 800363a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800363c:	f000 ffda 	bl	80045f4 <vPortExitCritical>

	return xReturn;
 8003640:	68fb      	ldr	r3, [r7, #12]
}
 8003642:	4618      	mov	r0, r3
 8003644:	3710      	adds	r7, #16
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}

0800364a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800364a:	b580      	push	{r7, lr}
 800364c:	b08e      	sub	sp, #56	; 0x38
 800364e:	af04      	add	r7, sp, #16
 8003650:	60f8      	str	r0, [r7, #12]
 8003652:	60b9      	str	r1, [r7, #8]
 8003654:	607a      	str	r2, [r7, #4]
 8003656:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800365a:	2b00      	cmp	r3, #0
 800365c:	d109      	bne.n	8003672 <xTaskCreateStatic+0x28>
	__asm volatile
 800365e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003662:	f383 8811 	msr	BASEPRI, r3
 8003666:	f3bf 8f6f 	isb	sy
 800366a:	f3bf 8f4f 	dsb	sy
 800366e:	623b      	str	r3, [r7, #32]
 8003670:	e7fe      	b.n	8003670 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8003672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003674:	2b00      	cmp	r3, #0
 8003676:	d109      	bne.n	800368c <xTaskCreateStatic+0x42>
 8003678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800367c:	f383 8811 	msr	BASEPRI, r3
 8003680:	f3bf 8f6f 	isb	sy
 8003684:	f3bf 8f4f 	dsb	sy
 8003688:	61fb      	str	r3, [r7, #28]
 800368a:	e7fe      	b.n	800368a <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800368c:	2354      	movs	r3, #84	; 0x54
 800368e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	2b54      	cmp	r3, #84	; 0x54
 8003694:	d009      	beq.n	80036aa <xTaskCreateStatic+0x60>
 8003696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800369a:	f383 8811 	msr	BASEPRI, r3
 800369e:	f3bf 8f6f 	isb	sy
 80036a2:	f3bf 8f4f 	dsb	sy
 80036a6:	61bb      	str	r3, [r7, #24]
 80036a8:	e7fe      	b.n	80036a8 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80036aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d01e      	beq.n	80036ee <xTaskCreateStatic+0xa4>
 80036b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d01b      	beq.n	80036ee <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80036b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036b8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80036ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036be:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80036c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c2:	2202      	movs	r2, #2
 80036c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80036c8:	2300      	movs	r3, #0
 80036ca:	9303      	str	r3, [sp, #12]
 80036cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ce:	9302      	str	r3, [sp, #8]
 80036d0:	f107 0314 	add.w	r3, r7, #20
 80036d4:	9301      	str	r3, [sp, #4]
 80036d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d8:	9300      	str	r3, [sp, #0]
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	68b9      	ldr	r1, [r7, #8]
 80036e0:	68f8      	ldr	r0, [r7, #12]
 80036e2:	f000 f850 	bl	8003786 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80036e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80036e8:	f000 f8cc 	bl	8003884 <prvAddNewTaskToReadyList>
 80036ec:	e001      	b.n	80036f2 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80036ee:	2300      	movs	r3, #0
 80036f0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80036f2:	697b      	ldr	r3, [r7, #20]
	}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3728      	adds	r7, #40	; 0x28
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}

080036fc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b08c      	sub	sp, #48	; 0x30
 8003700:	af04      	add	r7, sp, #16
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	60b9      	str	r1, [r7, #8]
 8003706:	603b      	str	r3, [r7, #0]
 8003708:	4613      	mov	r3, r2
 800370a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800370c:	88fb      	ldrh	r3, [r7, #6]
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	4618      	mov	r0, r3
 8003712:	f001 f837 	bl	8004784 <pvPortMalloc>
 8003716:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d00e      	beq.n	800373c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800371e:	2054      	movs	r0, #84	; 0x54
 8003720:	f001 f830 	bl	8004784 <pvPortMalloc>
 8003724:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d003      	beq.n	8003734 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	697a      	ldr	r2, [r7, #20]
 8003730:	631a      	str	r2, [r3, #48]	; 0x30
 8003732:	e005      	b.n	8003740 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003734:	6978      	ldr	r0, [r7, #20]
 8003736:	f001 f8e7 	bl	8004908 <vPortFree>
 800373a:	e001      	b.n	8003740 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800373c:	2300      	movs	r3, #0
 800373e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d017      	beq.n	8003776 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	2200      	movs	r2, #0
 800374a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800374e:	88fa      	ldrh	r2, [r7, #6]
 8003750:	2300      	movs	r3, #0
 8003752:	9303      	str	r3, [sp, #12]
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	9302      	str	r3, [sp, #8]
 8003758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800375a:	9301      	str	r3, [sp, #4]
 800375c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800375e:	9300      	str	r3, [sp, #0]
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	68b9      	ldr	r1, [r7, #8]
 8003764:	68f8      	ldr	r0, [r7, #12]
 8003766:	f000 f80e 	bl	8003786 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800376a:	69f8      	ldr	r0, [r7, #28]
 800376c:	f000 f88a 	bl	8003884 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003770:	2301      	movs	r3, #1
 8003772:	61bb      	str	r3, [r7, #24]
 8003774:	e002      	b.n	800377c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003776:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800377a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800377c:	69bb      	ldr	r3, [r7, #24]
	}
 800377e:	4618      	mov	r0, r3
 8003780:	3720      	adds	r7, #32
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}

08003786 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003786:	b580      	push	{r7, lr}
 8003788:	b088      	sub	sp, #32
 800378a:	af00      	add	r7, sp, #0
 800378c:	60f8      	str	r0, [r7, #12]
 800378e:	60b9      	str	r1, [r7, #8]
 8003790:	607a      	str	r2, [r7, #4]
 8003792:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003796:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800379e:	3b01      	subs	r3, #1
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	4413      	add	r3, r2
 80037a4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	f023 0307 	bic.w	r3, r3, #7
 80037ac:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	f003 0307 	and.w	r3, r3, #7
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d009      	beq.n	80037cc <prvInitialiseNewTask+0x46>
 80037b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037bc:	f383 8811 	msr	BASEPRI, r3
 80037c0:	f3bf 8f6f 	isb	sy
 80037c4:	f3bf 8f4f 	dsb	sy
 80037c8:	617b      	str	r3, [r7, #20]
 80037ca:	e7fe      	b.n	80037ca <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80037cc:	2300      	movs	r3, #0
 80037ce:	61fb      	str	r3, [r7, #28]
 80037d0:	e012      	b.n	80037f8 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80037d2:	68ba      	ldr	r2, [r7, #8]
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	4413      	add	r3, r2
 80037d8:	7819      	ldrb	r1, [r3, #0]
 80037da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	4413      	add	r3, r2
 80037e0:	3334      	adds	r3, #52	; 0x34
 80037e2:	460a      	mov	r2, r1
 80037e4:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80037e6:	68ba      	ldr	r2, [r7, #8]
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	4413      	add	r3, r2
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d006      	beq.n	8003800 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	3301      	adds	r3, #1
 80037f6:	61fb      	str	r3, [r7, #28]
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	2b0f      	cmp	r3, #15
 80037fc:	d9e9      	bls.n	80037d2 <prvInitialiseNewTask+0x4c>
 80037fe:	e000      	b.n	8003802 <prvInitialiseNewTask+0x7c>
		{
			break;
 8003800:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003804:	2200      	movs	r2, #0
 8003806:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800380a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800380c:	2b06      	cmp	r3, #6
 800380e:	d901      	bls.n	8003814 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003810:	2306      	movs	r3, #6
 8003812:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003816:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003818:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800381a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800381c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800381e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003822:	2200      	movs	r2, #0
 8003824:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003828:	3304      	adds	r3, #4
 800382a:	4618      	mov	r0, r3
 800382c:	f7ff f950 	bl	8002ad0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003832:	3318      	adds	r3, #24
 8003834:	4618      	mov	r0, r3
 8003836:	f7ff f94b 	bl	8002ad0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800383a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800383c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800383e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003842:	f1c3 0207 	rsb	r2, r3, #7
 8003846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003848:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800384a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800384c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800384e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003852:	2200      	movs	r2, #0
 8003854:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003858:	2200      	movs	r2, #0
 800385a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800385e:	683a      	ldr	r2, [r7, #0]
 8003860:	68f9      	ldr	r1, [r7, #12]
 8003862:	69b8      	ldr	r0, [r7, #24]
 8003864:	f000 fdb0 	bl	80043c8 <pxPortInitialiseStack>
 8003868:	4602      	mov	r2, r0
 800386a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800386c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800386e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003870:	2b00      	cmp	r3, #0
 8003872:	d002      	beq.n	800387a <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003876:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003878:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800387a:	bf00      	nop
 800387c:	3720      	adds	r7, #32
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
	...

08003884 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b082      	sub	sp, #8
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800388c:	f000 fe84 	bl	8004598 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003890:	4b2a      	ldr	r3, [pc, #168]	; (800393c <prvAddNewTaskToReadyList+0xb8>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	3301      	adds	r3, #1
 8003896:	4a29      	ldr	r2, [pc, #164]	; (800393c <prvAddNewTaskToReadyList+0xb8>)
 8003898:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800389a:	4b29      	ldr	r3, [pc, #164]	; (8003940 <prvAddNewTaskToReadyList+0xbc>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d109      	bne.n	80038b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80038a2:	4a27      	ldr	r2, [pc, #156]	; (8003940 <prvAddNewTaskToReadyList+0xbc>)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80038a8:	4b24      	ldr	r3, [pc, #144]	; (800393c <prvAddNewTaskToReadyList+0xb8>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d110      	bne.n	80038d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80038b0:	f000 fbc4 	bl	800403c <prvInitialiseTaskLists>
 80038b4:	e00d      	b.n	80038d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80038b6:	4b23      	ldr	r3, [pc, #140]	; (8003944 <prvAddNewTaskToReadyList+0xc0>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d109      	bne.n	80038d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80038be:	4b20      	ldr	r3, [pc, #128]	; (8003940 <prvAddNewTaskToReadyList+0xbc>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d802      	bhi.n	80038d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80038cc:	4a1c      	ldr	r2, [pc, #112]	; (8003940 <prvAddNewTaskToReadyList+0xbc>)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80038d2:	4b1d      	ldr	r3, [pc, #116]	; (8003948 <prvAddNewTaskToReadyList+0xc4>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	3301      	adds	r3, #1
 80038d8:	4a1b      	ldr	r2, [pc, #108]	; (8003948 <prvAddNewTaskToReadyList+0xc4>)
 80038da:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e0:	2201      	movs	r2, #1
 80038e2:	409a      	lsls	r2, r3
 80038e4:	4b19      	ldr	r3, [pc, #100]	; (800394c <prvAddNewTaskToReadyList+0xc8>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	4a18      	ldr	r2, [pc, #96]	; (800394c <prvAddNewTaskToReadyList+0xc8>)
 80038ec:	6013      	str	r3, [r2, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038f2:	4613      	mov	r3, r2
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	4413      	add	r3, r2
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	4a15      	ldr	r2, [pc, #84]	; (8003950 <prvAddNewTaskToReadyList+0xcc>)
 80038fc:	441a      	add	r2, r3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	3304      	adds	r3, #4
 8003902:	4619      	mov	r1, r3
 8003904:	4610      	mov	r0, r2
 8003906:	f7ff f8ef 	bl	8002ae8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800390a:	f000 fe73 	bl	80045f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800390e:	4b0d      	ldr	r3, [pc, #52]	; (8003944 <prvAddNewTaskToReadyList+0xc0>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d00e      	beq.n	8003934 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003916:	4b0a      	ldr	r3, [pc, #40]	; (8003940 <prvAddNewTaskToReadyList+0xbc>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003920:	429a      	cmp	r2, r3
 8003922:	d207      	bcs.n	8003934 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003924:	4b0b      	ldr	r3, [pc, #44]	; (8003954 <prvAddNewTaskToReadyList+0xd0>)
 8003926:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800392a:	601a      	str	r2, [r3, #0]
 800392c:	f3bf 8f4f 	dsb	sy
 8003930:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003934:	bf00      	nop
 8003936:	3708      	adds	r7, #8
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}
 800393c:	200003ec 	.word	0x200003ec
 8003940:	200002ec 	.word	0x200002ec
 8003944:	200003f8 	.word	0x200003f8
 8003948:	20000408 	.word	0x20000408
 800394c:	200003f4 	.word	0x200003f4
 8003950:	200002f0 	.word	0x200002f0
 8003954:	e000ed04 	.word	0xe000ed04

08003958 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003960:	2300      	movs	r3, #0
 8003962:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d016      	beq.n	8003998 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800396a:	4b13      	ldr	r3, [pc, #76]	; (80039b8 <vTaskDelay+0x60>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d009      	beq.n	8003986 <vTaskDelay+0x2e>
 8003972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003976:	f383 8811 	msr	BASEPRI, r3
 800397a:	f3bf 8f6f 	isb	sy
 800397e:	f3bf 8f4f 	dsb	sy
 8003982:	60bb      	str	r3, [r7, #8]
 8003984:	e7fe      	b.n	8003984 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003986:	f000 f879 	bl	8003a7c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800398a:	2100      	movs	r1, #0
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f000 fcb5 	bl	80042fc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003992:	f000 f881 	bl	8003a98 <xTaskResumeAll>
 8003996:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d107      	bne.n	80039ae <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800399e:	4b07      	ldr	r3, [pc, #28]	; (80039bc <vTaskDelay+0x64>)
 80039a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039a4:	601a      	str	r2, [r3, #0]
 80039a6:	f3bf 8f4f 	dsb	sy
 80039aa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80039ae:	bf00      	nop
 80039b0:	3710      	adds	r7, #16
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	20000414 	.word	0x20000414
 80039bc:	e000ed04 	.word	0xe000ed04

080039c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b08a      	sub	sp, #40	; 0x28
 80039c4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80039c6:	2300      	movs	r3, #0
 80039c8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80039ca:	2300      	movs	r3, #0
 80039cc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80039ce:	463a      	mov	r2, r7
 80039d0:	1d39      	adds	r1, r7, #4
 80039d2:	f107 0308 	add.w	r3, r7, #8
 80039d6:	4618      	mov	r0, r3
 80039d8:	f7fc fc32 	bl	8000240 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80039dc:	6839      	ldr	r1, [r7, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	68ba      	ldr	r2, [r7, #8]
 80039e2:	9202      	str	r2, [sp, #8]
 80039e4:	9301      	str	r3, [sp, #4]
 80039e6:	2300      	movs	r3, #0
 80039e8:	9300      	str	r3, [sp, #0]
 80039ea:	2300      	movs	r3, #0
 80039ec:	460a      	mov	r2, r1
 80039ee:	491d      	ldr	r1, [pc, #116]	; (8003a64 <vTaskStartScheduler+0xa4>)
 80039f0:	481d      	ldr	r0, [pc, #116]	; (8003a68 <vTaskStartScheduler+0xa8>)
 80039f2:	f7ff fe2a 	bl	800364a <xTaskCreateStatic>
 80039f6:	4602      	mov	r2, r0
 80039f8:	4b1c      	ldr	r3, [pc, #112]	; (8003a6c <vTaskStartScheduler+0xac>)
 80039fa:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80039fc:	4b1b      	ldr	r3, [pc, #108]	; (8003a6c <vTaskStartScheduler+0xac>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d002      	beq.n	8003a0a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003a04:	2301      	movs	r3, #1
 8003a06:	617b      	str	r3, [r7, #20]
 8003a08:	e001      	b.n	8003a0e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d115      	bne.n	8003a40 <vTaskStartScheduler+0x80>
 8003a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a18:	f383 8811 	msr	BASEPRI, r3
 8003a1c:	f3bf 8f6f 	isb	sy
 8003a20:	f3bf 8f4f 	dsb	sy
 8003a24:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003a26:	4b12      	ldr	r3, [pc, #72]	; (8003a70 <vTaskStartScheduler+0xb0>)
 8003a28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a2c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003a2e:	4b11      	ldr	r3, [pc, #68]	; (8003a74 <vTaskStartScheduler+0xb4>)
 8003a30:	2201      	movs	r2, #1
 8003a32:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003a34:	4b10      	ldr	r3, [pc, #64]	; (8003a78 <vTaskStartScheduler+0xb8>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003a3a:	f000 fd3d 	bl	80044b8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003a3e:	e00d      	b.n	8003a5c <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a46:	d109      	bne.n	8003a5c <vTaskStartScheduler+0x9c>
 8003a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a4c:	f383 8811 	msr	BASEPRI, r3
 8003a50:	f3bf 8f6f 	isb	sy
 8003a54:	f3bf 8f4f 	dsb	sy
 8003a58:	60fb      	str	r3, [r7, #12]
 8003a5a:	e7fe      	b.n	8003a5a <vTaskStartScheduler+0x9a>
}
 8003a5c:	bf00      	nop
 8003a5e:	3718      	adds	r7, #24
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	0800546c 	.word	0x0800546c
 8003a68:	0800400d 	.word	0x0800400d
 8003a6c:	20000410 	.word	0x20000410
 8003a70:	2000040c 	.word	0x2000040c
 8003a74:	200003f8 	.word	0x200003f8
 8003a78:	200003f0 	.word	0x200003f0

08003a7c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003a80:	4b04      	ldr	r3, [pc, #16]	; (8003a94 <vTaskSuspendAll+0x18>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	3301      	adds	r3, #1
 8003a86:	4a03      	ldr	r2, [pc, #12]	; (8003a94 <vTaskSuspendAll+0x18>)
 8003a88:	6013      	str	r3, [r2, #0]
}
 8003a8a:	bf00      	nop
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bc80      	pop	{r7}
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	20000414 	.word	0x20000414

08003a98 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003aa6:	4b41      	ldr	r3, [pc, #260]	; (8003bac <xTaskResumeAll+0x114>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d109      	bne.n	8003ac2 <xTaskResumeAll+0x2a>
 8003aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ab2:	f383 8811 	msr	BASEPRI, r3
 8003ab6:	f3bf 8f6f 	isb	sy
 8003aba:	f3bf 8f4f 	dsb	sy
 8003abe:	603b      	str	r3, [r7, #0]
 8003ac0:	e7fe      	b.n	8003ac0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003ac2:	f000 fd69 	bl	8004598 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003ac6:	4b39      	ldr	r3, [pc, #228]	; (8003bac <xTaskResumeAll+0x114>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	3b01      	subs	r3, #1
 8003acc:	4a37      	ldr	r2, [pc, #220]	; (8003bac <xTaskResumeAll+0x114>)
 8003ace:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ad0:	4b36      	ldr	r3, [pc, #216]	; (8003bac <xTaskResumeAll+0x114>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d161      	bne.n	8003b9c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003ad8:	4b35      	ldr	r3, [pc, #212]	; (8003bb0 <xTaskResumeAll+0x118>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d05d      	beq.n	8003b9c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ae0:	e02e      	b.n	8003b40 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003ae2:	4b34      	ldr	r3, [pc, #208]	; (8003bb4 <xTaskResumeAll+0x11c>)
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	3318      	adds	r3, #24
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7ff f855 	bl	8002b9e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	3304      	adds	r3, #4
 8003af8:	4618      	mov	r0, r3
 8003afa:	f7ff f850 	bl	8002b9e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b02:	2201      	movs	r2, #1
 8003b04:	409a      	lsls	r2, r3
 8003b06:	4b2c      	ldr	r3, [pc, #176]	; (8003bb8 <xTaskResumeAll+0x120>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	4a2a      	ldr	r2, [pc, #168]	; (8003bb8 <xTaskResumeAll+0x120>)
 8003b0e:	6013      	str	r3, [r2, #0]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b14:	4613      	mov	r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	4413      	add	r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	4a27      	ldr	r2, [pc, #156]	; (8003bbc <xTaskResumeAll+0x124>)
 8003b1e:	441a      	add	r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	3304      	adds	r3, #4
 8003b24:	4619      	mov	r1, r3
 8003b26:	4610      	mov	r0, r2
 8003b28:	f7fe ffde 	bl	8002ae8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b30:	4b23      	ldr	r3, [pc, #140]	; (8003bc0 <xTaskResumeAll+0x128>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d302      	bcc.n	8003b40 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8003b3a:	4b22      	ldr	r3, [pc, #136]	; (8003bc4 <xTaskResumeAll+0x12c>)
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b40:	4b1c      	ldr	r3, [pc, #112]	; (8003bb4 <xTaskResumeAll+0x11c>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d1cc      	bne.n	8003ae2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d001      	beq.n	8003b52 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003b4e:	f000 fb0f 	bl	8004170 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003b52:	4b1d      	ldr	r3, [pc, #116]	; (8003bc8 <xTaskResumeAll+0x130>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d010      	beq.n	8003b80 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003b5e:	f000 f837 	bl	8003bd0 <xTaskIncrementTick>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d002      	beq.n	8003b6e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8003b68:	4b16      	ldr	r3, [pc, #88]	; (8003bc4 <xTaskResumeAll+0x12c>)
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	3b01      	subs	r3, #1
 8003b72:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d1f1      	bne.n	8003b5e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8003b7a:	4b13      	ldr	r3, [pc, #76]	; (8003bc8 <xTaskResumeAll+0x130>)
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003b80:	4b10      	ldr	r3, [pc, #64]	; (8003bc4 <xTaskResumeAll+0x12c>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d009      	beq.n	8003b9c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003b8c:	4b0f      	ldr	r3, [pc, #60]	; (8003bcc <xTaskResumeAll+0x134>)
 8003b8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b92:	601a      	str	r2, [r3, #0]
 8003b94:	f3bf 8f4f 	dsb	sy
 8003b98:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003b9c:	f000 fd2a 	bl	80045f4 <vPortExitCritical>

	return xAlreadyYielded;
 8003ba0:	68bb      	ldr	r3, [r7, #8]
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3710      	adds	r7, #16
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	20000414 	.word	0x20000414
 8003bb0:	200003ec 	.word	0x200003ec
 8003bb4:	200003ac 	.word	0x200003ac
 8003bb8:	200003f4 	.word	0x200003f4
 8003bbc:	200002f0 	.word	0x200002f0
 8003bc0:	200002ec 	.word	0x200002ec
 8003bc4:	20000400 	.word	0x20000400
 8003bc8:	200003fc 	.word	0x200003fc
 8003bcc:	e000ed04 	.word	0xe000ed04

08003bd0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b086      	sub	sp, #24
 8003bd4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003bda:	4b50      	ldr	r3, [pc, #320]	; (8003d1c <xTaskIncrementTick+0x14c>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	f040 808c 	bne.w	8003cfc <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003be4:	4b4e      	ldr	r3, [pc, #312]	; (8003d20 <xTaskIncrementTick+0x150>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	3301      	adds	r3, #1
 8003bea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003bec:	4a4c      	ldr	r2, [pc, #304]	; (8003d20 <xTaskIncrementTick+0x150>)
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d11f      	bne.n	8003c38 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003bf8:	4b4a      	ldr	r3, [pc, #296]	; (8003d24 <xTaskIncrementTick+0x154>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d009      	beq.n	8003c16 <xTaskIncrementTick+0x46>
 8003c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c06:	f383 8811 	msr	BASEPRI, r3
 8003c0a:	f3bf 8f6f 	isb	sy
 8003c0e:	f3bf 8f4f 	dsb	sy
 8003c12:	603b      	str	r3, [r7, #0]
 8003c14:	e7fe      	b.n	8003c14 <xTaskIncrementTick+0x44>
 8003c16:	4b43      	ldr	r3, [pc, #268]	; (8003d24 <xTaskIncrementTick+0x154>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	60fb      	str	r3, [r7, #12]
 8003c1c:	4b42      	ldr	r3, [pc, #264]	; (8003d28 <xTaskIncrementTick+0x158>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a40      	ldr	r2, [pc, #256]	; (8003d24 <xTaskIncrementTick+0x154>)
 8003c22:	6013      	str	r3, [r2, #0]
 8003c24:	4a40      	ldr	r2, [pc, #256]	; (8003d28 <xTaskIncrementTick+0x158>)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	6013      	str	r3, [r2, #0]
 8003c2a:	4b40      	ldr	r3, [pc, #256]	; (8003d2c <xTaskIncrementTick+0x15c>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	3301      	adds	r3, #1
 8003c30:	4a3e      	ldr	r2, [pc, #248]	; (8003d2c <xTaskIncrementTick+0x15c>)
 8003c32:	6013      	str	r3, [r2, #0]
 8003c34:	f000 fa9c 	bl	8004170 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003c38:	4b3d      	ldr	r3, [pc, #244]	; (8003d30 <xTaskIncrementTick+0x160>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	693a      	ldr	r2, [r7, #16]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d34d      	bcc.n	8003cde <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c42:	4b38      	ldr	r3, [pc, #224]	; (8003d24 <xTaskIncrementTick+0x154>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d101      	bne.n	8003c50 <xTaskIncrementTick+0x80>
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e000      	b.n	8003c52 <xTaskIncrementTick+0x82>
 8003c50:	2300      	movs	r3, #0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d004      	beq.n	8003c60 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c56:	4b36      	ldr	r3, [pc, #216]	; (8003d30 <xTaskIncrementTick+0x160>)
 8003c58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c5c:	601a      	str	r2, [r3, #0]
					break;
 8003c5e:	e03e      	b.n	8003cde <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003c60:	4b30      	ldr	r3, [pc, #192]	; (8003d24 <xTaskIncrementTick+0x154>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003c70:	693a      	ldr	r2, [r7, #16]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d203      	bcs.n	8003c80 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003c78:	4a2d      	ldr	r2, [pc, #180]	; (8003d30 <xTaskIncrementTick+0x160>)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6013      	str	r3, [r2, #0]
						break;
 8003c7e:	e02e      	b.n	8003cde <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	3304      	adds	r3, #4
 8003c84:	4618      	mov	r0, r3
 8003c86:	f7fe ff8a 	bl	8002b9e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d004      	beq.n	8003c9c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	3318      	adds	r3, #24
 8003c96:	4618      	mov	r0, r3
 8003c98:	f7fe ff81 	bl	8002b9e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	409a      	lsls	r2, r3
 8003ca4:	4b23      	ldr	r3, [pc, #140]	; (8003d34 <xTaskIncrementTick+0x164>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	4a22      	ldr	r2, [pc, #136]	; (8003d34 <xTaskIncrementTick+0x164>)
 8003cac:	6013      	str	r3, [r2, #0]
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	4413      	add	r3, r2
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	4a1f      	ldr	r2, [pc, #124]	; (8003d38 <xTaskIncrementTick+0x168>)
 8003cbc:	441a      	add	r2, r3
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	3304      	adds	r3, #4
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	4610      	mov	r0, r2
 8003cc6:	f7fe ff0f 	bl	8002ae8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cce:	4b1b      	ldr	r3, [pc, #108]	; (8003d3c <xTaskIncrementTick+0x16c>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d3b4      	bcc.n	8003c42 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003cdc:	e7b1      	b.n	8003c42 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003cde:	4b17      	ldr	r3, [pc, #92]	; (8003d3c <xTaskIncrementTick+0x16c>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ce4:	4914      	ldr	r1, [pc, #80]	; (8003d38 <xTaskIncrementTick+0x168>)
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	4413      	add	r3, r2
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	440b      	add	r3, r1
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d907      	bls.n	8003d06 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	617b      	str	r3, [r7, #20]
 8003cfa:	e004      	b.n	8003d06 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003cfc:	4b10      	ldr	r3, [pc, #64]	; (8003d40 <xTaskIncrementTick+0x170>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	3301      	adds	r3, #1
 8003d02:	4a0f      	ldr	r2, [pc, #60]	; (8003d40 <xTaskIncrementTick+0x170>)
 8003d04:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003d06:	4b0f      	ldr	r3, [pc, #60]	; (8003d44 <xTaskIncrementTick+0x174>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d001      	beq.n	8003d12 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003d12:	697b      	ldr	r3, [r7, #20]
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3718      	adds	r7, #24
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	20000414 	.word	0x20000414
 8003d20:	200003f0 	.word	0x200003f0
 8003d24:	200003a4 	.word	0x200003a4
 8003d28:	200003a8 	.word	0x200003a8
 8003d2c:	20000404 	.word	0x20000404
 8003d30:	2000040c 	.word	0x2000040c
 8003d34:	200003f4 	.word	0x200003f4
 8003d38:	200002f0 	.word	0x200002f0
 8003d3c:	200002ec 	.word	0x200002ec
 8003d40:	200003fc 	.word	0x200003fc
 8003d44:	20000400 	.word	0x20000400

08003d48 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b087      	sub	sp, #28
 8003d4c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003d4e:	4b26      	ldr	r3, [pc, #152]	; (8003de8 <vTaskSwitchContext+0xa0>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d003      	beq.n	8003d5e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003d56:	4b25      	ldr	r3, [pc, #148]	; (8003dec <vTaskSwitchContext+0xa4>)
 8003d58:	2201      	movs	r2, #1
 8003d5a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003d5c:	e03e      	b.n	8003ddc <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8003d5e:	4b23      	ldr	r3, [pc, #140]	; (8003dec <vTaskSwitchContext+0xa4>)
 8003d60:	2200      	movs	r2, #0
 8003d62:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003d64:	4b22      	ldr	r3, [pc, #136]	; (8003df0 <vTaskSwitchContext+0xa8>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	fab3 f383 	clz	r3, r3
 8003d70:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003d72:	7afb      	ldrb	r3, [r7, #11]
 8003d74:	f1c3 031f 	rsb	r3, r3, #31
 8003d78:	617b      	str	r3, [r7, #20]
 8003d7a:	491e      	ldr	r1, [pc, #120]	; (8003df4 <vTaskSwitchContext+0xac>)
 8003d7c:	697a      	ldr	r2, [r7, #20]
 8003d7e:	4613      	mov	r3, r2
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	4413      	add	r3, r2
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	440b      	add	r3, r1
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d109      	bne.n	8003da2 <vTaskSwitchContext+0x5a>
	__asm volatile
 8003d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d92:	f383 8811 	msr	BASEPRI, r3
 8003d96:	f3bf 8f6f 	isb	sy
 8003d9a:	f3bf 8f4f 	dsb	sy
 8003d9e:	607b      	str	r3, [r7, #4]
 8003da0:	e7fe      	b.n	8003da0 <vTaskSwitchContext+0x58>
 8003da2:	697a      	ldr	r2, [r7, #20]
 8003da4:	4613      	mov	r3, r2
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	4413      	add	r3, r2
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	4a11      	ldr	r2, [pc, #68]	; (8003df4 <vTaskSwitchContext+0xac>)
 8003dae:	4413      	add	r3, r2
 8003db0:	613b      	str	r3, [r7, #16]
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	685a      	ldr	r2, [r3, #4]
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	605a      	str	r2, [r3, #4]
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	685a      	ldr	r2, [r3, #4]
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	3308      	adds	r3, #8
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d104      	bne.n	8003dd2 <vTaskSwitchContext+0x8a>
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	685a      	ldr	r2, [r3, #4]
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	605a      	str	r2, [r3, #4]
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	4a07      	ldr	r2, [pc, #28]	; (8003df8 <vTaskSwitchContext+0xb0>)
 8003dda:	6013      	str	r3, [r2, #0]
}
 8003ddc:	bf00      	nop
 8003dde:	371c      	adds	r7, #28
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bc80      	pop	{r7}
 8003de4:	4770      	bx	lr
 8003de6:	bf00      	nop
 8003de8:	20000414 	.word	0x20000414
 8003dec:	20000400 	.word	0x20000400
 8003df0:	200003f4 	.word	0x200003f4
 8003df4:	200002f0 	.word	0x200002f0
 8003df8:	200002ec 	.word	0x200002ec

08003dfc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b084      	sub	sp, #16
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d109      	bne.n	8003e20 <vTaskPlaceOnEventList+0x24>
 8003e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e10:	f383 8811 	msr	BASEPRI, r3
 8003e14:	f3bf 8f6f 	isb	sy
 8003e18:	f3bf 8f4f 	dsb	sy
 8003e1c:	60fb      	str	r3, [r7, #12]
 8003e1e:	e7fe      	b.n	8003e1e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003e20:	4b07      	ldr	r3, [pc, #28]	; (8003e40 <vTaskPlaceOnEventList+0x44>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	3318      	adds	r3, #24
 8003e26:	4619      	mov	r1, r3
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f7fe fe80 	bl	8002b2e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003e2e:	2101      	movs	r1, #1
 8003e30:	6838      	ldr	r0, [r7, #0]
 8003e32:	f000 fa63 	bl	80042fc <prvAddCurrentTaskToDelayedList>
}
 8003e36:	bf00      	nop
 8003e38:	3710      	adds	r7, #16
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	200002ec 	.word	0x200002ec

08003e44 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b086      	sub	sp, #24
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d109      	bne.n	8003e6e <xTaskRemoveFromEventList+0x2a>
 8003e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e5e:	f383 8811 	msr	BASEPRI, r3
 8003e62:	f3bf 8f6f 	isb	sy
 8003e66:	f3bf 8f4f 	dsb	sy
 8003e6a:	60fb      	str	r3, [r7, #12]
 8003e6c:	e7fe      	b.n	8003e6c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	3318      	adds	r3, #24
 8003e72:	4618      	mov	r0, r3
 8003e74:	f7fe fe93 	bl	8002b9e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e78:	4b1d      	ldr	r3, [pc, #116]	; (8003ef0 <xTaskRemoveFromEventList+0xac>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d11c      	bne.n	8003eba <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	3304      	adds	r3, #4
 8003e84:	4618      	mov	r0, r3
 8003e86:	f7fe fe8a 	bl	8002b9e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e8e:	2201      	movs	r2, #1
 8003e90:	409a      	lsls	r2, r3
 8003e92:	4b18      	ldr	r3, [pc, #96]	; (8003ef4 <xTaskRemoveFromEventList+0xb0>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	4a16      	ldr	r2, [pc, #88]	; (8003ef4 <xTaskRemoveFromEventList+0xb0>)
 8003e9a:	6013      	str	r3, [r2, #0]
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	4413      	add	r3, r2
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	4a13      	ldr	r2, [pc, #76]	; (8003ef8 <xTaskRemoveFromEventList+0xb4>)
 8003eaa:	441a      	add	r2, r3
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	3304      	adds	r3, #4
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	4610      	mov	r0, r2
 8003eb4:	f7fe fe18 	bl	8002ae8 <vListInsertEnd>
 8003eb8:	e005      	b.n	8003ec6 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	3318      	adds	r3, #24
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	480e      	ldr	r0, [pc, #56]	; (8003efc <xTaskRemoveFromEventList+0xb8>)
 8003ec2:	f7fe fe11 	bl	8002ae8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eca:	4b0d      	ldr	r3, [pc, #52]	; (8003f00 <xTaskRemoveFromEventList+0xbc>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d905      	bls.n	8003ee0 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003ed8:	4b0a      	ldr	r3, [pc, #40]	; (8003f04 <xTaskRemoveFromEventList+0xc0>)
 8003eda:	2201      	movs	r2, #1
 8003edc:	601a      	str	r2, [r3, #0]
 8003ede:	e001      	b.n	8003ee4 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003ee4:	697b      	ldr	r3, [r7, #20]
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3718      	adds	r7, #24
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	20000414 	.word	0x20000414
 8003ef4:	200003f4 	.word	0x200003f4
 8003ef8:	200002f0 	.word	0x200002f0
 8003efc:	200003ac 	.word	0x200003ac
 8003f00:	200002ec 	.word	0x200002ec
 8003f04:	20000400 	.word	0x20000400

08003f08 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003f10:	4b06      	ldr	r3, [pc, #24]	; (8003f2c <vTaskInternalSetTimeOutState+0x24>)
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003f18:	4b05      	ldr	r3, [pc, #20]	; (8003f30 <vTaskInternalSetTimeOutState+0x28>)
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	605a      	str	r2, [r3, #4]
}
 8003f20:	bf00      	nop
 8003f22:	370c      	adds	r7, #12
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bc80      	pop	{r7}
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	20000404 	.word	0x20000404
 8003f30:	200003f0 	.word	0x200003f0

08003f34 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b088      	sub	sp, #32
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d109      	bne.n	8003f58 <xTaskCheckForTimeOut+0x24>
 8003f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f48:	f383 8811 	msr	BASEPRI, r3
 8003f4c:	f3bf 8f6f 	isb	sy
 8003f50:	f3bf 8f4f 	dsb	sy
 8003f54:	613b      	str	r3, [r7, #16]
 8003f56:	e7fe      	b.n	8003f56 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d109      	bne.n	8003f72 <xTaskCheckForTimeOut+0x3e>
 8003f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f62:	f383 8811 	msr	BASEPRI, r3
 8003f66:	f3bf 8f6f 	isb	sy
 8003f6a:	f3bf 8f4f 	dsb	sy
 8003f6e:	60fb      	str	r3, [r7, #12]
 8003f70:	e7fe      	b.n	8003f70 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8003f72:	f000 fb11 	bl	8004598 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003f76:	4b1d      	ldr	r3, [pc, #116]	; (8003fec <xTaskCheckForTimeOut+0xb8>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	69ba      	ldr	r2, [r7, #24]
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f8e:	d102      	bne.n	8003f96 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003f90:	2300      	movs	r3, #0
 8003f92:	61fb      	str	r3, [r7, #28]
 8003f94:	e023      	b.n	8003fde <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	4b15      	ldr	r3, [pc, #84]	; (8003ff0 <xTaskCheckForTimeOut+0xbc>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d007      	beq.n	8003fb2 <xTaskCheckForTimeOut+0x7e>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	69ba      	ldr	r2, [r7, #24]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d302      	bcc.n	8003fb2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003fac:	2301      	movs	r3, #1
 8003fae:	61fb      	str	r3, [r7, #28]
 8003fb0:	e015      	b.n	8003fde <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	697a      	ldr	r2, [r7, #20]
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d20b      	bcs.n	8003fd4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	1ad2      	subs	r2, r2, r3
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f7ff ff9d 	bl	8003f08 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	61fb      	str	r3, [r7, #28]
 8003fd2:	e004      	b.n	8003fde <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003fde:	f000 fb09 	bl	80045f4 <vPortExitCritical>

	return xReturn;
 8003fe2:	69fb      	ldr	r3, [r7, #28]
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3720      	adds	r7, #32
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	200003f0 	.word	0x200003f0
 8003ff0:	20000404 	.word	0x20000404

08003ff4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003ff8:	4b03      	ldr	r3, [pc, #12]	; (8004008 <vTaskMissedYield+0x14>)
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	601a      	str	r2, [r3, #0]
}
 8003ffe:	bf00      	nop
 8004000:	46bd      	mov	sp, r7
 8004002:	bc80      	pop	{r7}
 8004004:	4770      	bx	lr
 8004006:	bf00      	nop
 8004008:	20000400 	.word	0x20000400

0800400c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b082      	sub	sp, #8
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004014:	f000 f852 	bl	80040bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004018:	4b06      	ldr	r3, [pc, #24]	; (8004034 <prvIdleTask+0x28>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2b01      	cmp	r3, #1
 800401e:	d9f9      	bls.n	8004014 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004020:	4b05      	ldr	r3, [pc, #20]	; (8004038 <prvIdleTask+0x2c>)
 8004022:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004026:	601a      	str	r2, [r3, #0]
 8004028:	f3bf 8f4f 	dsb	sy
 800402c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004030:	e7f0      	b.n	8004014 <prvIdleTask+0x8>
 8004032:	bf00      	nop
 8004034:	200002f0 	.word	0x200002f0
 8004038:	e000ed04 	.word	0xe000ed04

0800403c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b082      	sub	sp, #8
 8004040:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004042:	2300      	movs	r3, #0
 8004044:	607b      	str	r3, [r7, #4]
 8004046:	e00c      	b.n	8004062 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	4613      	mov	r3, r2
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	4413      	add	r3, r2
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	4a12      	ldr	r2, [pc, #72]	; (800409c <prvInitialiseTaskLists+0x60>)
 8004054:	4413      	add	r3, r2
 8004056:	4618      	mov	r0, r3
 8004058:	f7fe fd1b 	bl	8002a92 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	3301      	adds	r3, #1
 8004060:	607b      	str	r3, [r7, #4]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2b06      	cmp	r3, #6
 8004066:	d9ef      	bls.n	8004048 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004068:	480d      	ldr	r0, [pc, #52]	; (80040a0 <prvInitialiseTaskLists+0x64>)
 800406a:	f7fe fd12 	bl	8002a92 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800406e:	480d      	ldr	r0, [pc, #52]	; (80040a4 <prvInitialiseTaskLists+0x68>)
 8004070:	f7fe fd0f 	bl	8002a92 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004074:	480c      	ldr	r0, [pc, #48]	; (80040a8 <prvInitialiseTaskLists+0x6c>)
 8004076:	f7fe fd0c 	bl	8002a92 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800407a:	480c      	ldr	r0, [pc, #48]	; (80040ac <prvInitialiseTaskLists+0x70>)
 800407c:	f7fe fd09 	bl	8002a92 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004080:	480b      	ldr	r0, [pc, #44]	; (80040b0 <prvInitialiseTaskLists+0x74>)
 8004082:	f7fe fd06 	bl	8002a92 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004086:	4b0b      	ldr	r3, [pc, #44]	; (80040b4 <prvInitialiseTaskLists+0x78>)
 8004088:	4a05      	ldr	r2, [pc, #20]	; (80040a0 <prvInitialiseTaskLists+0x64>)
 800408a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800408c:	4b0a      	ldr	r3, [pc, #40]	; (80040b8 <prvInitialiseTaskLists+0x7c>)
 800408e:	4a05      	ldr	r2, [pc, #20]	; (80040a4 <prvInitialiseTaskLists+0x68>)
 8004090:	601a      	str	r2, [r3, #0]
}
 8004092:	bf00      	nop
 8004094:	3708      	adds	r7, #8
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	200002f0 	.word	0x200002f0
 80040a0:	2000037c 	.word	0x2000037c
 80040a4:	20000390 	.word	0x20000390
 80040a8:	200003ac 	.word	0x200003ac
 80040ac:	200003c0 	.word	0x200003c0
 80040b0:	200003d8 	.word	0x200003d8
 80040b4:	200003a4 	.word	0x200003a4
 80040b8:	200003a8 	.word	0x200003a8

080040bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b082      	sub	sp, #8
 80040c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80040c2:	e019      	b.n	80040f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80040c4:	f000 fa68 	bl	8004598 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80040c8:	4b0f      	ldr	r3, [pc, #60]	; (8004108 <prvCheckTasksWaitingTermination+0x4c>)
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	3304      	adds	r3, #4
 80040d4:	4618      	mov	r0, r3
 80040d6:	f7fe fd62 	bl	8002b9e <uxListRemove>
				--uxCurrentNumberOfTasks;
 80040da:	4b0c      	ldr	r3, [pc, #48]	; (800410c <prvCheckTasksWaitingTermination+0x50>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	3b01      	subs	r3, #1
 80040e0:	4a0a      	ldr	r2, [pc, #40]	; (800410c <prvCheckTasksWaitingTermination+0x50>)
 80040e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80040e4:	4b0a      	ldr	r3, [pc, #40]	; (8004110 <prvCheckTasksWaitingTermination+0x54>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	3b01      	subs	r3, #1
 80040ea:	4a09      	ldr	r2, [pc, #36]	; (8004110 <prvCheckTasksWaitingTermination+0x54>)
 80040ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80040ee:	f000 fa81 	bl	80045f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 f80e 	bl	8004114 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80040f8:	4b05      	ldr	r3, [pc, #20]	; (8004110 <prvCheckTasksWaitingTermination+0x54>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d1e1      	bne.n	80040c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004100:	bf00      	nop
 8004102:	3708      	adds	r7, #8
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}
 8004108:	200003c0 	.word	0x200003c0
 800410c:	200003ec 	.word	0x200003ec
 8004110:	200003d4 	.word	0x200003d4

08004114 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004122:	2b00      	cmp	r3, #0
 8004124:	d108      	bne.n	8004138 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800412a:	4618      	mov	r0, r3
 800412c:	f000 fbec 	bl	8004908 <vPortFree>
				vPortFree( pxTCB );
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f000 fbe9 	bl	8004908 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004136:	e017      	b.n	8004168 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800413e:	2b01      	cmp	r3, #1
 8004140:	d103      	bne.n	800414a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f000 fbe0 	bl	8004908 <vPortFree>
	}
 8004148:	e00e      	b.n	8004168 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004150:	2b02      	cmp	r3, #2
 8004152:	d009      	beq.n	8004168 <prvDeleteTCB+0x54>
 8004154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004158:	f383 8811 	msr	BASEPRI, r3
 800415c:	f3bf 8f6f 	isb	sy
 8004160:	f3bf 8f4f 	dsb	sy
 8004164:	60fb      	str	r3, [r7, #12]
 8004166:	e7fe      	b.n	8004166 <prvDeleteTCB+0x52>
	}
 8004168:	bf00      	nop
 800416a:	3710      	adds	r7, #16
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}

08004170 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004176:	4b0e      	ldr	r3, [pc, #56]	; (80041b0 <prvResetNextTaskUnblockTime+0x40>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d101      	bne.n	8004184 <prvResetNextTaskUnblockTime+0x14>
 8004180:	2301      	movs	r3, #1
 8004182:	e000      	b.n	8004186 <prvResetNextTaskUnblockTime+0x16>
 8004184:	2300      	movs	r3, #0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d004      	beq.n	8004194 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800418a:	4b0a      	ldr	r3, [pc, #40]	; (80041b4 <prvResetNextTaskUnblockTime+0x44>)
 800418c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004190:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004192:	e008      	b.n	80041a6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004194:	4b06      	ldr	r3, [pc, #24]	; (80041b0 <prvResetNextTaskUnblockTime+0x40>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	4a04      	ldr	r2, [pc, #16]	; (80041b4 <prvResetNextTaskUnblockTime+0x44>)
 80041a4:	6013      	str	r3, [r2, #0]
}
 80041a6:	bf00      	nop
 80041a8:	370c      	adds	r7, #12
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bc80      	pop	{r7}
 80041ae:	4770      	bx	lr
 80041b0:	200003a4 	.word	0x200003a4
 80041b4:	2000040c 	.word	0x2000040c

080041b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80041be:	4b0b      	ldr	r3, [pc, #44]	; (80041ec <xTaskGetSchedulerState+0x34>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d102      	bne.n	80041cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80041c6:	2301      	movs	r3, #1
 80041c8:	607b      	str	r3, [r7, #4]
 80041ca:	e008      	b.n	80041de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041cc:	4b08      	ldr	r3, [pc, #32]	; (80041f0 <xTaskGetSchedulerState+0x38>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d102      	bne.n	80041da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80041d4:	2302      	movs	r3, #2
 80041d6:	607b      	str	r3, [r7, #4]
 80041d8:	e001      	b.n	80041de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80041da:	2300      	movs	r3, #0
 80041dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80041de:	687b      	ldr	r3, [r7, #4]
	}
 80041e0:	4618      	mov	r0, r3
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bc80      	pop	{r7}
 80041e8:	4770      	bx	lr
 80041ea:	bf00      	nop
 80041ec:	200003f8 	.word	0x200003f8
 80041f0:	20000414 	.word	0x20000414

080041f4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b086      	sub	sp, #24
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004200:	2300      	movs	r3, #0
 8004202:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d06c      	beq.n	80042e4 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800420a:	4b39      	ldr	r3, [pc, #228]	; (80042f0 <xTaskPriorityDisinherit+0xfc>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	693a      	ldr	r2, [r7, #16]
 8004210:	429a      	cmp	r2, r3
 8004212:	d009      	beq.n	8004228 <xTaskPriorityDisinherit+0x34>
 8004214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004218:	f383 8811 	msr	BASEPRI, r3
 800421c:	f3bf 8f6f 	isb	sy
 8004220:	f3bf 8f4f 	dsb	sy
 8004224:	60fb      	str	r3, [r7, #12]
 8004226:	e7fe      	b.n	8004226 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800422c:	2b00      	cmp	r3, #0
 800422e:	d109      	bne.n	8004244 <xTaskPriorityDisinherit+0x50>
 8004230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004234:	f383 8811 	msr	BASEPRI, r3
 8004238:	f3bf 8f6f 	isb	sy
 800423c:	f3bf 8f4f 	dsb	sy
 8004240:	60bb      	str	r3, [r7, #8]
 8004242:	e7fe      	b.n	8004242 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004248:	1e5a      	subs	r2, r3, #1
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004256:	429a      	cmp	r2, r3
 8004258:	d044      	beq.n	80042e4 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800425e:	2b00      	cmp	r3, #0
 8004260:	d140      	bne.n	80042e4 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	3304      	adds	r3, #4
 8004266:	4618      	mov	r0, r3
 8004268:	f7fe fc99 	bl	8002b9e <uxListRemove>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	d115      	bne.n	800429e <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004276:	491f      	ldr	r1, [pc, #124]	; (80042f4 <xTaskPriorityDisinherit+0x100>)
 8004278:	4613      	mov	r3, r2
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	4413      	add	r3, r2
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	440b      	add	r3, r1
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d10a      	bne.n	800429e <xTaskPriorityDisinherit+0xaa>
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800428c:	2201      	movs	r2, #1
 800428e:	fa02 f303 	lsl.w	r3, r2, r3
 8004292:	43da      	mvns	r2, r3
 8004294:	4b18      	ldr	r3, [pc, #96]	; (80042f8 <xTaskPriorityDisinherit+0x104>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4013      	ands	r3, r2
 800429a:	4a17      	ldr	r2, [pc, #92]	; (80042f8 <xTaskPriorityDisinherit+0x104>)
 800429c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042aa:	f1c3 0207 	rsb	r2, r3, #7
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b6:	2201      	movs	r2, #1
 80042b8:	409a      	lsls	r2, r3
 80042ba:	4b0f      	ldr	r3, [pc, #60]	; (80042f8 <xTaskPriorityDisinherit+0x104>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4313      	orrs	r3, r2
 80042c0:	4a0d      	ldr	r2, [pc, #52]	; (80042f8 <xTaskPriorityDisinherit+0x104>)
 80042c2:	6013      	str	r3, [r2, #0]
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042c8:	4613      	mov	r3, r2
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	4413      	add	r3, r2
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	4a08      	ldr	r2, [pc, #32]	; (80042f4 <xTaskPriorityDisinherit+0x100>)
 80042d2:	441a      	add	r2, r3
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	3304      	adds	r3, #4
 80042d8:	4619      	mov	r1, r3
 80042da:	4610      	mov	r0, r2
 80042dc:	f7fe fc04 	bl	8002ae8 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80042e0:	2301      	movs	r3, #1
 80042e2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80042e4:	697b      	ldr	r3, [r7, #20]
	}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3718      	adds	r7, #24
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	200002ec 	.word	0x200002ec
 80042f4:	200002f0 	.word	0x200002f0
 80042f8:	200003f4 	.word	0x200003f4

080042fc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004306:	4b29      	ldr	r3, [pc, #164]	; (80043ac <prvAddCurrentTaskToDelayedList+0xb0>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800430c:	4b28      	ldr	r3, [pc, #160]	; (80043b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	3304      	adds	r3, #4
 8004312:	4618      	mov	r0, r3
 8004314:	f7fe fc43 	bl	8002b9e <uxListRemove>
 8004318:	4603      	mov	r3, r0
 800431a:	2b00      	cmp	r3, #0
 800431c:	d10b      	bne.n	8004336 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800431e:	4b24      	ldr	r3, [pc, #144]	; (80043b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004324:	2201      	movs	r2, #1
 8004326:	fa02 f303 	lsl.w	r3, r2, r3
 800432a:	43da      	mvns	r2, r3
 800432c:	4b21      	ldr	r3, [pc, #132]	; (80043b4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4013      	ands	r3, r2
 8004332:	4a20      	ldr	r2, [pc, #128]	; (80043b4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004334:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800433c:	d10a      	bne.n	8004354 <prvAddCurrentTaskToDelayedList+0x58>
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d007      	beq.n	8004354 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004344:	4b1a      	ldr	r3, [pc, #104]	; (80043b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	3304      	adds	r3, #4
 800434a:	4619      	mov	r1, r3
 800434c:	481a      	ldr	r0, [pc, #104]	; (80043b8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800434e:	f7fe fbcb 	bl	8002ae8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004352:	e026      	b.n	80043a2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004354:	68fa      	ldr	r2, [r7, #12]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4413      	add	r3, r2
 800435a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800435c:	4b14      	ldr	r3, [pc, #80]	; (80043b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68ba      	ldr	r2, [r7, #8]
 8004362:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004364:	68ba      	ldr	r2, [r7, #8]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	429a      	cmp	r2, r3
 800436a:	d209      	bcs.n	8004380 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800436c:	4b13      	ldr	r3, [pc, #76]	; (80043bc <prvAddCurrentTaskToDelayedList+0xc0>)
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	4b0f      	ldr	r3, [pc, #60]	; (80043b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	3304      	adds	r3, #4
 8004376:	4619      	mov	r1, r3
 8004378:	4610      	mov	r0, r2
 800437a:	f7fe fbd8 	bl	8002b2e <vListInsert>
}
 800437e:	e010      	b.n	80043a2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004380:	4b0f      	ldr	r3, [pc, #60]	; (80043c0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	4b0a      	ldr	r3, [pc, #40]	; (80043b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	3304      	adds	r3, #4
 800438a:	4619      	mov	r1, r3
 800438c:	4610      	mov	r0, r2
 800438e:	f7fe fbce 	bl	8002b2e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004392:	4b0c      	ldr	r3, [pc, #48]	; (80043c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	68ba      	ldr	r2, [r7, #8]
 8004398:	429a      	cmp	r2, r3
 800439a:	d202      	bcs.n	80043a2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800439c:	4a09      	ldr	r2, [pc, #36]	; (80043c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	6013      	str	r3, [r2, #0]
}
 80043a2:	bf00      	nop
 80043a4:	3710      	adds	r7, #16
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	200003f0 	.word	0x200003f0
 80043b0:	200002ec 	.word	0x200002ec
 80043b4:	200003f4 	.word	0x200003f4
 80043b8:	200003d8 	.word	0x200003d8
 80043bc:	200003a8 	.word	0x200003a8
 80043c0:	200003a4 	.word	0x200003a4
 80043c4:	2000040c 	.word	0x2000040c

080043c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80043c8:	b480      	push	{r7}
 80043ca:	b085      	sub	sp, #20
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	3b04      	subs	r3, #4
 80043d8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80043e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	3b04      	subs	r3, #4
 80043e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	f023 0201 	bic.w	r2, r3, #1
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	3b04      	subs	r3, #4
 80043f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80043f8:	4a08      	ldr	r2, [pc, #32]	; (800441c <pxPortInitialiseStack+0x54>)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	3b14      	subs	r3, #20
 8004402:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	3b20      	subs	r3, #32
 800440e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004410:	68fb      	ldr	r3, [r7, #12]
}
 8004412:	4618      	mov	r0, r3
 8004414:	3714      	adds	r7, #20
 8004416:	46bd      	mov	sp, r7
 8004418:	bc80      	pop	{r7}
 800441a:	4770      	bx	lr
 800441c:	08004421 	.word	0x08004421

08004420 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004420:	b480      	push	{r7}
 8004422:	b085      	sub	sp, #20
 8004424:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004426:	2300      	movs	r3, #0
 8004428:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800442a:	4b10      	ldr	r3, [pc, #64]	; (800446c <prvTaskExitError+0x4c>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004432:	d009      	beq.n	8004448 <prvTaskExitError+0x28>
 8004434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004438:	f383 8811 	msr	BASEPRI, r3
 800443c:	f3bf 8f6f 	isb	sy
 8004440:	f3bf 8f4f 	dsb	sy
 8004444:	60fb      	str	r3, [r7, #12]
 8004446:	e7fe      	b.n	8004446 <prvTaskExitError+0x26>
 8004448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800444c:	f383 8811 	msr	BASEPRI, r3
 8004450:	f3bf 8f6f 	isb	sy
 8004454:	f3bf 8f4f 	dsb	sy
 8004458:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800445a:	bf00      	nop
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d0fc      	beq.n	800445c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004462:	bf00      	nop
 8004464:	3714      	adds	r7, #20
 8004466:	46bd      	mov	sp, r7
 8004468:	bc80      	pop	{r7}
 800446a:	4770      	bx	lr
 800446c:	2000000c 	.word	0x2000000c

08004470 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004470:	4b07      	ldr	r3, [pc, #28]	; (8004490 <pxCurrentTCBConst2>)
 8004472:	6819      	ldr	r1, [r3, #0]
 8004474:	6808      	ldr	r0, [r1, #0]
 8004476:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800447a:	f380 8809 	msr	PSP, r0
 800447e:	f3bf 8f6f 	isb	sy
 8004482:	f04f 0000 	mov.w	r0, #0
 8004486:	f380 8811 	msr	BASEPRI, r0
 800448a:	f04e 0e0d 	orr.w	lr, lr, #13
 800448e:	4770      	bx	lr

08004490 <pxCurrentTCBConst2>:
 8004490:	200002ec 	.word	0x200002ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004494:	bf00      	nop
 8004496:	bf00      	nop

08004498 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004498:	4806      	ldr	r0, [pc, #24]	; (80044b4 <prvPortStartFirstTask+0x1c>)
 800449a:	6800      	ldr	r0, [r0, #0]
 800449c:	6800      	ldr	r0, [r0, #0]
 800449e:	f380 8808 	msr	MSP, r0
 80044a2:	b662      	cpsie	i
 80044a4:	b661      	cpsie	f
 80044a6:	f3bf 8f4f 	dsb	sy
 80044aa:	f3bf 8f6f 	isb	sy
 80044ae:	df00      	svc	0
 80044b0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80044b2:	bf00      	nop
 80044b4:	e000ed08 	.word	0xe000ed08

080044b8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80044be:	4b31      	ldr	r3, [pc, #196]	; (8004584 <xPortStartScheduler+0xcc>)
 80044c0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	22ff      	movs	r2, #255	; 0xff
 80044ce:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80044d8:	78fb      	ldrb	r3, [r7, #3]
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80044e0:	b2da      	uxtb	r2, r3
 80044e2:	4b29      	ldr	r3, [pc, #164]	; (8004588 <xPortStartScheduler+0xd0>)
 80044e4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80044e6:	4b29      	ldr	r3, [pc, #164]	; (800458c <xPortStartScheduler+0xd4>)
 80044e8:	2207      	movs	r2, #7
 80044ea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80044ec:	e009      	b.n	8004502 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80044ee:	4b27      	ldr	r3, [pc, #156]	; (800458c <xPortStartScheduler+0xd4>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	3b01      	subs	r3, #1
 80044f4:	4a25      	ldr	r2, [pc, #148]	; (800458c <xPortStartScheduler+0xd4>)
 80044f6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80044f8:	78fb      	ldrb	r3, [r7, #3]
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	005b      	lsls	r3, r3, #1
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004502:	78fb      	ldrb	r3, [r7, #3]
 8004504:	b2db      	uxtb	r3, r3
 8004506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800450a:	2b80      	cmp	r3, #128	; 0x80
 800450c:	d0ef      	beq.n	80044ee <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800450e:	4b1f      	ldr	r3, [pc, #124]	; (800458c <xPortStartScheduler+0xd4>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f1c3 0307 	rsb	r3, r3, #7
 8004516:	2b04      	cmp	r3, #4
 8004518:	d009      	beq.n	800452e <xPortStartScheduler+0x76>
 800451a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800451e:	f383 8811 	msr	BASEPRI, r3
 8004522:	f3bf 8f6f 	isb	sy
 8004526:	f3bf 8f4f 	dsb	sy
 800452a:	60bb      	str	r3, [r7, #8]
 800452c:	e7fe      	b.n	800452c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800452e:	4b17      	ldr	r3, [pc, #92]	; (800458c <xPortStartScheduler+0xd4>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	021b      	lsls	r3, r3, #8
 8004534:	4a15      	ldr	r2, [pc, #84]	; (800458c <xPortStartScheduler+0xd4>)
 8004536:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004538:	4b14      	ldr	r3, [pc, #80]	; (800458c <xPortStartScheduler+0xd4>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004540:	4a12      	ldr	r2, [pc, #72]	; (800458c <xPortStartScheduler+0xd4>)
 8004542:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	b2da      	uxtb	r2, r3
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800454c:	4b10      	ldr	r3, [pc, #64]	; (8004590 <xPortStartScheduler+0xd8>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a0f      	ldr	r2, [pc, #60]	; (8004590 <xPortStartScheduler+0xd8>)
 8004552:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004556:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004558:	4b0d      	ldr	r3, [pc, #52]	; (8004590 <xPortStartScheduler+0xd8>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a0c      	ldr	r2, [pc, #48]	; (8004590 <xPortStartScheduler+0xd8>)
 800455e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004562:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004564:	f000 f8b0 	bl	80046c8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004568:	4b0a      	ldr	r3, [pc, #40]	; (8004594 <xPortStartScheduler+0xdc>)
 800456a:	2200      	movs	r2, #0
 800456c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800456e:	f7ff ff93 	bl	8004498 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004572:	f7ff fbe9 	bl	8003d48 <vTaskSwitchContext>
	prvTaskExitError();
 8004576:	f7ff ff53 	bl	8004420 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800457a:	2300      	movs	r3, #0
}
 800457c:	4618      	mov	r0, r3
 800457e:	3710      	adds	r7, #16
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	e000e400 	.word	0xe000e400
 8004588:	20000418 	.word	0x20000418
 800458c:	2000041c 	.word	0x2000041c
 8004590:	e000ed20 	.word	0xe000ed20
 8004594:	2000000c 	.word	0x2000000c

08004598 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a2:	f383 8811 	msr	BASEPRI, r3
 80045a6:	f3bf 8f6f 	isb	sy
 80045aa:	f3bf 8f4f 	dsb	sy
 80045ae:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80045b0:	4b0e      	ldr	r3, [pc, #56]	; (80045ec <vPortEnterCritical+0x54>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	3301      	adds	r3, #1
 80045b6:	4a0d      	ldr	r2, [pc, #52]	; (80045ec <vPortEnterCritical+0x54>)
 80045b8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80045ba:	4b0c      	ldr	r3, [pc, #48]	; (80045ec <vPortEnterCritical+0x54>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d10e      	bne.n	80045e0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80045c2:	4b0b      	ldr	r3, [pc, #44]	; (80045f0 <vPortEnterCritical+0x58>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d009      	beq.n	80045e0 <vPortEnterCritical+0x48>
 80045cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d0:	f383 8811 	msr	BASEPRI, r3
 80045d4:	f3bf 8f6f 	isb	sy
 80045d8:	f3bf 8f4f 	dsb	sy
 80045dc:	603b      	str	r3, [r7, #0]
 80045de:	e7fe      	b.n	80045de <vPortEnterCritical+0x46>
	}
}
 80045e0:	bf00      	nop
 80045e2:	370c      	adds	r7, #12
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bc80      	pop	{r7}
 80045e8:	4770      	bx	lr
 80045ea:	bf00      	nop
 80045ec:	2000000c 	.word	0x2000000c
 80045f0:	e000ed04 	.word	0xe000ed04

080045f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80045fa:	4b10      	ldr	r3, [pc, #64]	; (800463c <vPortExitCritical+0x48>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d109      	bne.n	8004616 <vPortExitCritical+0x22>
 8004602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004606:	f383 8811 	msr	BASEPRI, r3
 800460a:	f3bf 8f6f 	isb	sy
 800460e:	f3bf 8f4f 	dsb	sy
 8004612:	607b      	str	r3, [r7, #4]
 8004614:	e7fe      	b.n	8004614 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8004616:	4b09      	ldr	r3, [pc, #36]	; (800463c <vPortExitCritical+0x48>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	3b01      	subs	r3, #1
 800461c:	4a07      	ldr	r2, [pc, #28]	; (800463c <vPortExitCritical+0x48>)
 800461e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004620:	4b06      	ldr	r3, [pc, #24]	; (800463c <vPortExitCritical+0x48>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d104      	bne.n	8004632 <vPortExitCritical+0x3e>
 8004628:	2300      	movs	r3, #0
 800462a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004632:	bf00      	nop
 8004634:	370c      	adds	r7, #12
 8004636:	46bd      	mov	sp, r7
 8004638:	bc80      	pop	{r7}
 800463a:	4770      	bx	lr
 800463c:	2000000c 	.word	0x2000000c

08004640 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004640:	f3ef 8009 	mrs	r0, PSP
 8004644:	f3bf 8f6f 	isb	sy
 8004648:	4b0d      	ldr	r3, [pc, #52]	; (8004680 <pxCurrentTCBConst>)
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004650:	6010      	str	r0, [r2, #0]
 8004652:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004656:	f04f 0050 	mov.w	r0, #80	; 0x50
 800465a:	f380 8811 	msr	BASEPRI, r0
 800465e:	f7ff fb73 	bl	8003d48 <vTaskSwitchContext>
 8004662:	f04f 0000 	mov.w	r0, #0
 8004666:	f380 8811 	msr	BASEPRI, r0
 800466a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800466e:	6819      	ldr	r1, [r3, #0]
 8004670:	6808      	ldr	r0, [r1, #0]
 8004672:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004676:	f380 8809 	msr	PSP, r0
 800467a:	f3bf 8f6f 	isb	sy
 800467e:	4770      	bx	lr

08004680 <pxCurrentTCBConst>:
 8004680:	200002ec 	.word	0x200002ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004684:	bf00      	nop
 8004686:	bf00      	nop

08004688 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0
	__asm volatile
 800468e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004692:	f383 8811 	msr	BASEPRI, r3
 8004696:	f3bf 8f6f 	isb	sy
 800469a:	f3bf 8f4f 	dsb	sy
 800469e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80046a0:	f7ff fa96 	bl	8003bd0 <xTaskIncrementTick>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d003      	beq.n	80046b2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80046aa:	4b06      	ldr	r3, [pc, #24]	; (80046c4 <SysTick_Handler+0x3c>)
 80046ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046b0:	601a      	str	r2, [r3, #0]
 80046b2:	2300      	movs	r3, #0
 80046b4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80046bc:	bf00      	nop
 80046be:	3708      	adds	r7, #8
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	e000ed04 	.word	0xe000ed04

080046c8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80046c8:	b480      	push	{r7}
 80046ca:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80046cc:	4b0a      	ldr	r3, [pc, #40]	; (80046f8 <vPortSetupTimerInterrupt+0x30>)
 80046ce:	2200      	movs	r2, #0
 80046d0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80046d2:	4b0a      	ldr	r3, [pc, #40]	; (80046fc <vPortSetupTimerInterrupt+0x34>)
 80046d4:	2200      	movs	r2, #0
 80046d6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80046d8:	4b09      	ldr	r3, [pc, #36]	; (8004700 <vPortSetupTimerInterrupt+0x38>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a09      	ldr	r2, [pc, #36]	; (8004704 <vPortSetupTimerInterrupt+0x3c>)
 80046de:	fba2 2303 	umull	r2, r3, r2, r3
 80046e2:	099b      	lsrs	r3, r3, #6
 80046e4:	4a08      	ldr	r2, [pc, #32]	; (8004708 <vPortSetupTimerInterrupt+0x40>)
 80046e6:	3b01      	subs	r3, #1
 80046e8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80046ea:	4b03      	ldr	r3, [pc, #12]	; (80046f8 <vPortSetupTimerInterrupt+0x30>)
 80046ec:	2207      	movs	r2, #7
 80046ee:	601a      	str	r2, [r3, #0]
}
 80046f0:	bf00      	nop
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bc80      	pop	{r7}
 80046f6:	4770      	bx	lr
 80046f8:	e000e010 	.word	0xe000e010
 80046fc:	e000e018 	.word	0xe000e018
 8004700:	20000000 	.word	0x20000000
 8004704:	10624dd3 	.word	0x10624dd3
 8004708:	e000e014 	.word	0xe000e014

0800470c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800470c:	b480      	push	{r7}
 800470e:	b085      	sub	sp, #20
 8004710:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004712:	f3ef 8305 	mrs	r3, IPSR
 8004716:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2b0f      	cmp	r3, #15
 800471c:	d913      	bls.n	8004746 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800471e:	4a15      	ldr	r2, [pc, #84]	; (8004774 <vPortValidateInterruptPriority+0x68>)
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	4413      	add	r3, r2
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004728:	4b13      	ldr	r3, [pc, #76]	; (8004778 <vPortValidateInterruptPriority+0x6c>)
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	7afa      	ldrb	r2, [r7, #11]
 800472e:	429a      	cmp	r2, r3
 8004730:	d209      	bcs.n	8004746 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8004732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004736:	f383 8811 	msr	BASEPRI, r3
 800473a:	f3bf 8f6f 	isb	sy
 800473e:	f3bf 8f4f 	dsb	sy
 8004742:	607b      	str	r3, [r7, #4]
 8004744:	e7fe      	b.n	8004744 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004746:	4b0d      	ldr	r3, [pc, #52]	; (800477c <vPortValidateInterruptPriority+0x70>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800474e:	4b0c      	ldr	r3, [pc, #48]	; (8004780 <vPortValidateInterruptPriority+0x74>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	429a      	cmp	r2, r3
 8004754:	d909      	bls.n	800476a <vPortValidateInterruptPriority+0x5e>
 8004756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800475a:	f383 8811 	msr	BASEPRI, r3
 800475e:	f3bf 8f6f 	isb	sy
 8004762:	f3bf 8f4f 	dsb	sy
 8004766:	603b      	str	r3, [r7, #0]
 8004768:	e7fe      	b.n	8004768 <vPortValidateInterruptPriority+0x5c>
	}
 800476a:	bf00      	nop
 800476c:	3714      	adds	r7, #20
 800476e:	46bd      	mov	sp, r7
 8004770:	bc80      	pop	{r7}
 8004772:	4770      	bx	lr
 8004774:	e000e3f0 	.word	0xe000e3f0
 8004778:	20000418 	.word	0x20000418
 800477c:	e000ed0c 	.word	0xe000ed0c
 8004780:	2000041c 	.word	0x2000041c

08004784 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b08a      	sub	sp, #40	; 0x28
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800478c:	2300      	movs	r3, #0
 800478e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004790:	f7ff f974 	bl	8003a7c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004794:	4b57      	ldr	r3, [pc, #348]	; (80048f4 <pvPortMalloc+0x170>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d101      	bne.n	80047a0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800479c:	f000 f90c 	bl	80049b8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80047a0:	4b55      	ldr	r3, [pc, #340]	; (80048f8 <pvPortMalloc+0x174>)
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	4013      	ands	r3, r2
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	f040 808c 	bne.w	80048c6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d01c      	beq.n	80047ee <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80047b4:	2208      	movs	r2, #8
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4413      	add	r3, r2
 80047ba:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f003 0307 	and.w	r3, r3, #7
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d013      	beq.n	80047ee <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f023 0307 	bic.w	r3, r3, #7
 80047cc:	3308      	adds	r3, #8
 80047ce:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f003 0307 	and.w	r3, r3, #7
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d009      	beq.n	80047ee <pvPortMalloc+0x6a>
 80047da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047de:	f383 8811 	msr	BASEPRI, r3
 80047e2:	f3bf 8f6f 	isb	sy
 80047e6:	f3bf 8f4f 	dsb	sy
 80047ea:	617b      	str	r3, [r7, #20]
 80047ec:	e7fe      	b.n	80047ec <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d068      	beq.n	80048c6 <pvPortMalloc+0x142>
 80047f4:	4b41      	ldr	r3, [pc, #260]	; (80048fc <pvPortMalloc+0x178>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d863      	bhi.n	80048c6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80047fe:	4b40      	ldr	r3, [pc, #256]	; (8004900 <pvPortMalloc+0x17c>)
 8004800:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004802:	4b3f      	ldr	r3, [pc, #252]	; (8004900 <pvPortMalloc+0x17c>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004808:	e004      	b.n	8004814 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800480a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800480e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	429a      	cmp	r2, r3
 800481c:	d903      	bls.n	8004826 <pvPortMalloc+0xa2>
 800481e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d1f1      	bne.n	800480a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004826:	4b33      	ldr	r3, [pc, #204]	; (80048f4 <pvPortMalloc+0x170>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800482c:	429a      	cmp	r2, r3
 800482e:	d04a      	beq.n	80048c6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004830:	6a3b      	ldr	r3, [r7, #32]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	2208      	movs	r2, #8
 8004836:	4413      	add	r3, r2
 8004838:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800483a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	6a3b      	ldr	r3, [r7, #32]
 8004840:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004844:	685a      	ldr	r2, [r3, #4]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	1ad2      	subs	r2, r2, r3
 800484a:	2308      	movs	r3, #8
 800484c:	005b      	lsls	r3, r3, #1
 800484e:	429a      	cmp	r2, r3
 8004850:	d91e      	bls.n	8004890 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004852:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4413      	add	r3, r2
 8004858:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	f003 0307 	and.w	r3, r3, #7
 8004860:	2b00      	cmp	r3, #0
 8004862:	d009      	beq.n	8004878 <pvPortMalloc+0xf4>
 8004864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004868:	f383 8811 	msr	BASEPRI, r3
 800486c:	f3bf 8f6f 	isb	sy
 8004870:	f3bf 8f4f 	dsb	sy
 8004874:	613b      	str	r3, [r7, #16]
 8004876:	e7fe      	b.n	8004876 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487a:	685a      	ldr	r2, [r3, #4]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	1ad2      	subs	r2, r2, r3
 8004880:	69bb      	ldr	r3, [r7, #24]
 8004882:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800488a:	69b8      	ldr	r0, [r7, #24]
 800488c:	f000 f8f6 	bl	8004a7c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004890:	4b1a      	ldr	r3, [pc, #104]	; (80048fc <pvPortMalloc+0x178>)
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	4a18      	ldr	r2, [pc, #96]	; (80048fc <pvPortMalloc+0x178>)
 800489c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800489e:	4b17      	ldr	r3, [pc, #92]	; (80048fc <pvPortMalloc+0x178>)
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	4b18      	ldr	r3, [pc, #96]	; (8004904 <pvPortMalloc+0x180>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d203      	bcs.n	80048b2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80048aa:	4b14      	ldr	r3, [pc, #80]	; (80048fc <pvPortMalloc+0x178>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a15      	ldr	r2, [pc, #84]	; (8004904 <pvPortMalloc+0x180>)
 80048b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80048b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b4:	685a      	ldr	r2, [r3, #4]
 80048b6:	4b10      	ldr	r3, [pc, #64]	; (80048f8 <pvPortMalloc+0x174>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	431a      	orrs	r2, r3
 80048bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80048c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c2:	2200      	movs	r2, #0
 80048c4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80048c6:	f7ff f8e7 	bl	8003a98 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	f003 0307 	and.w	r3, r3, #7
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d009      	beq.n	80048e8 <pvPortMalloc+0x164>
 80048d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d8:	f383 8811 	msr	BASEPRI, r3
 80048dc:	f3bf 8f6f 	isb	sy
 80048e0:	f3bf 8f4f 	dsb	sy
 80048e4:	60fb      	str	r3, [r7, #12]
 80048e6:	e7fe      	b.n	80048e6 <pvPortMalloc+0x162>
	return pvReturn;
 80048e8:	69fb      	ldr	r3, [r7, #28]
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3728      	adds	r7, #40	; 0x28
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	20001028 	.word	0x20001028
 80048f8:	20001034 	.word	0x20001034
 80048fc:	2000102c 	.word	0x2000102c
 8004900:	20001020 	.word	0x20001020
 8004904:	20001030 	.word	0x20001030

08004908 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b086      	sub	sp, #24
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d046      	beq.n	80049a8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800491a:	2308      	movs	r3, #8
 800491c:	425b      	negs	r3, r3
 800491e:	697a      	ldr	r2, [r7, #20]
 8004920:	4413      	add	r3, r2
 8004922:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	685a      	ldr	r2, [r3, #4]
 800492c:	4b20      	ldr	r3, [pc, #128]	; (80049b0 <vPortFree+0xa8>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4013      	ands	r3, r2
 8004932:	2b00      	cmp	r3, #0
 8004934:	d109      	bne.n	800494a <vPortFree+0x42>
 8004936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800493a:	f383 8811 	msr	BASEPRI, r3
 800493e:	f3bf 8f6f 	isb	sy
 8004942:	f3bf 8f4f 	dsb	sy
 8004946:	60fb      	str	r3, [r7, #12]
 8004948:	e7fe      	b.n	8004948 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d009      	beq.n	8004966 <vPortFree+0x5e>
 8004952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004956:	f383 8811 	msr	BASEPRI, r3
 800495a:	f3bf 8f6f 	isb	sy
 800495e:	f3bf 8f4f 	dsb	sy
 8004962:	60bb      	str	r3, [r7, #8]
 8004964:	e7fe      	b.n	8004964 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	685a      	ldr	r2, [r3, #4]
 800496a:	4b11      	ldr	r3, [pc, #68]	; (80049b0 <vPortFree+0xa8>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4013      	ands	r3, r2
 8004970:	2b00      	cmp	r3, #0
 8004972:	d019      	beq.n	80049a8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d115      	bne.n	80049a8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	685a      	ldr	r2, [r3, #4]
 8004980:	4b0b      	ldr	r3, [pc, #44]	; (80049b0 <vPortFree+0xa8>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	43db      	mvns	r3, r3
 8004986:	401a      	ands	r2, r3
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800498c:	f7ff f876 	bl	8003a7c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	685a      	ldr	r2, [r3, #4]
 8004994:	4b07      	ldr	r3, [pc, #28]	; (80049b4 <vPortFree+0xac>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4413      	add	r3, r2
 800499a:	4a06      	ldr	r2, [pc, #24]	; (80049b4 <vPortFree+0xac>)
 800499c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800499e:	6938      	ldr	r0, [r7, #16]
 80049a0:	f000 f86c 	bl	8004a7c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80049a4:	f7ff f878 	bl	8003a98 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80049a8:	bf00      	nop
 80049aa:	3718      	adds	r7, #24
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}
 80049b0:	20001034 	.word	0x20001034
 80049b4:	2000102c 	.word	0x2000102c

080049b8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80049b8:	b480      	push	{r7}
 80049ba:	b085      	sub	sp, #20
 80049bc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80049be:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80049c2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80049c4:	4b27      	ldr	r3, [pc, #156]	; (8004a64 <prvHeapInit+0xac>)
 80049c6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f003 0307 	and.w	r3, r3, #7
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d00c      	beq.n	80049ec <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	3307      	adds	r3, #7
 80049d6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f023 0307 	bic.w	r3, r3, #7
 80049de:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80049e0:	68ba      	ldr	r2, [r7, #8]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	4a1f      	ldr	r2, [pc, #124]	; (8004a64 <prvHeapInit+0xac>)
 80049e8:	4413      	add	r3, r2
 80049ea:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80049f0:	4a1d      	ldr	r2, [pc, #116]	; (8004a68 <prvHeapInit+0xb0>)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80049f6:	4b1c      	ldr	r3, [pc, #112]	; (8004a68 <prvHeapInit+0xb0>)
 80049f8:	2200      	movs	r2, #0
 80049fa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	68ba      	ldr	r2, [r7, #8]
 8004a00:	4413      	add	r3, r2
 8004a02:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004a04:	2208      	movs	r2, #8
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	1a9b      	subs	r3, r3, r2
 8004a0a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f023 0307 	bic.w	r3, r3, #7
 8004a12:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	4a15      	ldr	r2, [pc, #84]	; (8004a6c <prvHeapInit+0xb4>)
 8004a18:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004a1a:	4b14      	ldr	r3, [pc, #80]	; (8004a6c <prvHeapInit+0xb4>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004a22:	4b12      	ldr	r3, [pc, #72]	; (8004a6c <prvHeapInit+0xb4>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	2200      	movs	r2, #0
 8004a28:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	68fa      	ldr	r2, [r7, #12]
 8004a32:	1ad2      	subs	r2, r2, r3
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004a38:	4b0c      	ldr	r3, [pc, #48]	; (8004a6c <prvHeapInit+0xb4>)
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	4a0a      	ldr	r2, [pc, #40]	; (8004a70 <prvHeapInit+0xb8>)
 8004a46:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	4a09      	ldr	r2, [pc, #36]	; (8004a74 <prvHeapInit+0xbc>)
 8004a4e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004a50:	4b09      	ldr	r3, [pc, #36]	; (8004a78 <prvHeapInit+0xc0>)
 8004a52:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004a56:	601a      	str	r2, [r3, #0]
}
 8004a58:	bf00      	nop
 8004a5a:	3714      	adds	r7, #20
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bc80      	pop	{r7}
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	20000420 	.word	0x20000420
 8004a68:	20001020 	.word	0x20001020
 8004a6c:	20001028 	.word	0x20001028
 8004a70:	20001030 	.word	0x20001030
 8004a74:	2000102c 	.word	0x2000102c
 8004a78:	20001034 	.word	0x20001034

08004a7c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b085      	sub	sp, #20
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004a84:	4b27      	ldr	r3, [pc, #156]	; (8004b24 <prvInsertBlockIntoFreeList+0xa8>)
 8004a86:	60fb      	str	r3, [r7, #12]
 8004a88:	e002      	b.n	8004a90 <prvInsertBlockIntoFreeList+0x14>
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	60fb      	str	r3, [r7, #12]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d8f7      	bhi.n	8004a8a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	68ba      	ldr	r2, [r7, #8]
 8004aa4:	4413      	add	r3, r2
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d108      	bne.n	8004abe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	685a      	ldr	r2, [r3, #4]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	441a      	add	r2, r3
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	68ba      	ldr	r2, [r7, #8]
 8004ac8:	441a      	add	r2, r3
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d118      	bne.n	8004b04 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	4b14      	ldr	r3, [pc, #80]	; (8004b28 <prvInsertBlockIntoFreeList+0xac>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d00d      	beq.n	8004afa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	685a      	ldr	r2, [r3, #4]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	441a      	add	r2, r3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	601a      	str	r2, [r3, #0]
 8004af8:	e008      	b.n	8004b0c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004afa:	4b0b      	ldr	r3, [pc, #44]	; (8004b28 <prvInsertBlockIntoFreeList+0xac>)
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	601a      	str	r2, [r3, #0]
 8004b02:	e003      	b.n	8004b0c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004b0c:	68fa      	ldr	r2, [r7, #12]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d002      	beq.n	8004b1a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b1a:	bf00      	nop
 8004b1c:	3714      	adds	r7, #20
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bc80      	pop	{r7}
 8004b22:	4770      	bx	lr
 8004b24:	20001020 	.word	0x20001020
 8004b28:	20001028 	.word	0x20001028

08004b2c <__errno>:
 8004b2c:	4b01      	ldr	r3, [pc, #4]	; (8004b34 <__errno+0x8>)
 8004b2e:	6818      	ldr	r0, [r3, #0]
 8004b30:	4770      	bx	lr
 8004b32:	bf00      	nop
 8004b34:	20000010 	.word	0x20000010

08004b38 <__libc_init_array>:
 8004b38:	b570      	push	{r4, r5, r6, lr}
 8004b3a:	2500      	movs	r5, #0
 8004b3c:	4e0c      	ldr	r6, [pc, #48]	; (8004b70 <__libc_init_array+0x38>)
 8004b3e:	4c0d      	ldr	r4, [pc, #52]	; (8004b74 <__libc_init_array+0x3c>)
 8004b40:	1ba4      	subs	r4, r4, r6
 8004b42:	10a4      	asrs	r4, r4, #2
 8004b44:	42a5      	cmp	r5, r4
 8004b46:	d109      	bne.n	8004b5c <__libc_init_array+0x24>
 8004b48:	f000 fc36 	bl	80053b8 <_init>
 8004b4c:	2500      	movs	r5, #0
 8004b4e:	4e0a      	ldr	r6, [pc, #40]	; (8004b78 <__libc_init_array+0x40>)
 8004b50:	4c0a      	ldr	r4, [pc, #40]	; (8004b7c <__libc_init_array+0x44>)
 8004b52:	1ba4      	subs	r4, r4, r6
 8004b54:	10a4      	asrs	r4, r4, #2
 8004b56:	42a5      	cmp	r5, r4
 8004b58:	d105      	bne.n	8004b66 <__libc_init_array+0x2e>
 8004b5a:	bd70      	pop	{r4, r5, r6, pc}
 8004b5c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b60:	4798      	blx	r3
 8004b62:	3501      	adds	r5, #1
 8004b64:	e7ee      	b.n	8004b44 <__libc_init_array+0xc>
 8004b66:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b6a:	4798      	blx	r3
 8004b6c:	3501      	adds	r5, #1
 8004b6e:	e7f2      	b.n	8004b56 <__libc_init_array+0x1e>
 8004b70:	080054c0 	.word	0x080054c0
 8004b74:	080054c0 	.word	0x080054c0
 8004b78:	080054c0 	.word	0x080054c0
 8004b7c:	080054c4 	.word	0x080054c4

08004b80 <memcpy>:
 8004b80:	b510      	push	{r4, lr}
 8004b82:	1e43      	subs	r3, r0, #1
 8004b84:	440a      	add	r2, r1
 8004b86:	4291      	cmp	r1, r2
 8004b88:	d100      	bne.n	8004b8c <memcpy+0xc>
 8004b8a:	bd10      	pop	{r4, pc}
 8004b8c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b90:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b94:	e7f7      	b.n	8004b86 <memcpy+0x6>

08004b96 <memset>:
 8004b96:	4603      	mov	r3, r0
 8004b98:	4402      	add	r2, r0
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d100      	bne.n	8004ba0 <memset+0xa>
 8004b9e:	4770      	bx	lr
 8004ba0:	f803 1b01 	strb.w	r1, [r3], #1
 8004ba4:	e7f9      	b.n	8004b9a <memset+0x4>
	...

08004ba8 <siprintf>:
 8004ba8:	b40e      	push	{r1, r2, r3}
 8004baa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004bae:	b500      	push	{lr}
 8004bb0:	b09c      	sub	sp, #112	; 0x70
 8004bb2:	ab1d      	add	r3, sp, #116	; 0x74
 8004bb4:	9002      	str	r0, [sp, #8]
 8004bb6:	9006      	str	r0, [sp, #24]
 8004bb8:	9107      	str	r1, [sp, #28]
 8004bba:	9104      	str	r1, [sp, #16]
 8004bbc:	4808      	ldr	r0, [pc, #32]	; (8004be0 <siprintf+0x38>)
 8004bbe:	4909      	ldr	r1, [pc, #36]	; (8004be4 <siprintf+0x3c>)
 8004bc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8004bc4:	9105      	str	r1, [sp, #20]
 8004bc6:	6800      	ldr	r0, [r0, #0]
 8004bc8:	a902      	add	r1, sp, #8
 8004bca:	9301      	str	r3, [sp, #4]
 8004bcc:	f000 f866 	bl	8004c9c <_svfiprintf_r>
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	9b02      	ldr	r3, [sp, #8]
 8004bd4:	701a      	strb	r2, [r3, #0]
 8004bd6:	b01c      	add	sp, #112	; 0x70
 8004bd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004bdc:	b003      	add	sp, #12
 8004bde:	4770      	bx	lr
 8004be0:	20000010 	.word	0x20000010
 8004be4:	ffff0208 	.word	0xffff0208

08004be8 <__ssputs_r>:
 8004be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bec:	688e      	ldr	r6, [r1, #8]
 8004bee:	4682      	mov	sl, r0
 8004bf0:	429e      	cmp	r6, r3
 8004bf2:	460c      	mov	r4, r1
 8004bf4:	4690      	mov	r8, r2
 8004bf6:	4699      	mov	r9, r3
 8004bf8:	d837      	bhi.n	8004c6a <__ssputs_r+0x82>
 8004bfa:	898a      	ldrh	r2, [r1, #12]
 8004bfc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004c00:	d031      	beq.n	8004c66 <__ssputs_r+0x7e>
 8004c02:	2302      	movs	r3, #2
 8004c04:	6825      	ldr	r5, [r4, #0]
 8004c06:	6909      	ldr	r1, [r1, #16]
 8004c08:	1a6f      	subs	r7, r5, r1
 8004c0a:	6965      	ldr	r5, [r4, #20]
 8004c0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004c10:	fb95 f5f3 	sdiv	r5, r5, r3
 8004c14:	f109 0301 	add.w	r3, r9, #1
 8004c18:	443b      	add	r3, r7
 8004c1a:	429d      	cmp	r5, r3
 8004c1c:	bf38      	it	cc
 8004c1e:	461d      	movcc	r5, r3
 8004c20:	0553      	lsls	r3, r2, #21
 8004c22:	d530      	bpl.n	8004c86 <__ssputs_r+0x9e>
 8004c24:	4629      	mov	r1, r5
 8004c26:	f000 fb2d 	bl	8005284 <_malloc_r>
 8004c2a:	4606      	mov	r6, r0
 8004c2c:	b950      	cbnz	r0, 8004c44 <__ssputs_r+0x5c>
 8004c2e:	230c      	movs	r3, #12
 8004c30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c34:	f8ca 3000 	str.w	r3, [sl]
 8004c38:	89a3      	ldrh	r3, [r4, #12]
 8004c3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c3e:	81a3      	strh	r3, [r4, #12]
 8004c40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c44:	463a      	mov	r2, r7
 8004c46:	6921      	ldr	r1, [r4, #16]
 8004c48:	f7ff ff9a 	bl	8004b80 <memcpy>
 8004c4c:	89a3      	ldrh	r3, [r4, #12]
 8004c4e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004c52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c56:	81a3      	strh	r3, [r4, #12]
 8004c58:	6126      	str	r6, [r4, #16]
 8004c5a:	443e      	add	r6, r7
 8004c5c:	6026      	str	r6, [r4, #0]
 8004c5e:	464e      	mov	r6, r9
 8004c60:	6165      	str	r5, [r4, #20]
 8004c62:	1bed      	subs	r5, r5, r7
 8004c64:	60a5      	str	r5, [r4, #8]
 8004c66:	454e      	cmp	r6, r9
 8004c68:	d900      	bls.n	8004c6c <__ssputs_r+0x84>
 8004c6a:	464e      	mov	r6, r9
 8004c6c:	4632      	mov	r2, r6
 8004c6e:	4641      	mov	r1, r8
 8004c70:	6820      	ldr	r0, [r4, #0]
 8004c72:	f000 faa1 	bl	80051b8 <memmove>
 8004c76:	68a3      	ldr	r3, [r4, #8]
 8004c78:	2000      	movs	r0, #0
 8004c7a:	1b9b      	subs	r3, r3, r6
 8004c7c:	60a3      	str	r3, [r4, #8]
 8004c7e:	6823      	ldr	r3, [r4, #0]
 8004c80:	441e      	add	r6, r3
 8004c82:	6026      	str	r6, [r4, #0]
 8004c84:	e7dc      	b.n	8004c40 <__ssputs_r+0x58>
 8004c86:	462a      	mov	r2, r5
 8004c88:	f000 fb56 	bl	8005338 <_realloc_r>
 8004c8c:	4606      	mov	r6, r0
 8004c8e:	2800      	cmp	r0, #0
 8004c90:	d1e2      	bne.n	8004c58 <__ssputs_r+0x70>
 8004c92:	6921      	ldr	r1, [r4, #16]
 8004c94:	4650      	mov	r0, sl
 8004c96:	f000 faa9 	bl	80051ec <_free_r>
 8004c9a:	e7c8      	b.n	8004c2e <__ssputs_r+0x46>

08004c9c <_svfiprintf_r>:
 8004c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ca0:	461d      	mov	r5, r3
 8004ca2:	898b      	ldrh	r3, [r1, #12]
 8004ca4:	b09d      	sub	sp, #116	; 0x74
 8004ca6:	061f      	lsls	r7, r3, #24
 8004ca8:	4680      	mov	r8, r0
 8004caa:	460c      	mov	r4, r1
 8004cac:	4616      	mov	r6, r2
 8004cae:	d50f      	bpl.n	8004cd0 <_svfiprintf_r+0x34>
 8004cb0:	690b      	ldr	r3, [r1, #16]
 8004cb2:	b96b      	cbnz	r3, 8004cd0 <_svfiprintf_r+0x34>
 8004cb4:	2140      	movs	r1, #64	; 0x40
 8004cb6:	f000 fae5 	bl	8005284 <_malloc_r>
 8004cba:	6020      	str	r0, [r4, #0]
 8004cbc:	6120      	str	r0, [r4, #16]
 8004cbe:	b928      	cbnz	r0, 8004ccc <_svfiprintf_r+0x30>
 8004cc0:	230c      	movs	r3, #12
 8004cc2:	f8c8 3000 	str.w	r3, [r8]
 8004cc6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004cca:	e0c8      	b.n	8004e5e <_svfiprintf_r+0x1c2>
 8004ccc:	2340      	movs	r3, #64	; 0x40
 8004cce:	6163      	str	r3, [r4, #20]
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	9309      	str	r3, [sp, #36]	; 0x24
 8004cd4:	2320      	movs	r3, #32
 8004cd6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004cda:	2330      	movs	r3, #48	; 0x30
 8004cdc:	f04f 0b01 	mov.w	fp, #1
 8004ce0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004ce4:	9503      	str	r5, [sp, #12]
 8004ce6:	4637      	mov	r7, r6
 8004ce8:	463d      	mov	r5, r7
 8004cea:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004cee:	b10b      	cbz	r3, 8004cf4 <_svfiprintf_r+0x58>
 8004cf0:	2b25      	cmp	r3, #37	; 0x25
 8004cf2:	d13e      	bne.n	8004d72 <_svfiprintf_r+0xd6>
 8004cf4:	ebb7 0a06 	subs.w	sl, r7, r6
 8004cf8:	d00b      	beq.n	8004d12 <_svfiprintf_r+0x76>
 8004cfa:	4653      	mov	r3, sl
 8004cfc:	4632      	mov	r2, r6
 8004cfe:	4621      	mov	r1, r4
 8004d00:	4640      	mov	r0, r8
 8004d02:	f7ff ff71 	bl	8004be8 <__ssputs_r>
 8004d06:	3001      	adds	r0, #1
 8004d08:	f000 80a4 	beq.w	8004e54 <_svfiprintf_r+0x1b8>
 8004d0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d0e:	4453      	add	r3, sl
 8004d10:	9309      	str	r3, [sp, #36]	; 0x24
 8004d12:	783b      	ldrb	r3, [r7, #0]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	f000 809d 	beq.w	8004e54 <_svfiprintf_r+0x1b8>
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d24:	9304      	str	r3, [sp, #16]
 8004d26:	9307      	str	r3, [sp, #28]
 8004d28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004d2c:	931a      	str	r3, [sp, #104]	; 0x68
 8004d2e:	462f      	mov	r7, r5
 8004d30:	2205      	movs	r2, #5
 8004d32:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004d36:	4850      	ldr	r0, [pc, #320]	; (8004e78 <_svfiprintf_r+0x1dc>)
 8004d38:	f000 fa30 	bl	800519c <memchr>
 8004d3c:	9b04      	ldr	r3, [sp, #16]
 8004d3e:	b9d0      	cbnz	r0, 8004d76 <_svfiprintf_r+0xda>
 8004d40:	06d9      	lsls	r1, r3, #27
 8004d42:	bf44      	itt	mi
 8004d44:	2220      	movmi	r2, #32
 8004d46:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004d4a:	071a      	lsls	r2, r3, #28
 8004d4c:	bf44      	itt	mi
 8004d4e:	222b      	movmi	r2, #43	; 0x2b
 8004d50:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004d54:	782a      	ldrb	r2, [r5, #0]
 8004d56:	2a2a      	cmp	r2, #42	; 0x2a
 8004d58:	d015      	beq.n	8004d86 <_svfiprintf_r+0xea>
 8004d5a:	462f      	mov	r7, r5
 8004d5c:	2000      	movs	r0, #0
 8004d5e:	250a      	movs	r5, #10
 8004d60:	9a07      	ldr	r2, [sp, #28]
 8004d62:	4639      	mov	r1, r7
 8004d64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d68:	3b30      	subs	r3, #48	; 0x30
 8004d6a:	2b09      	cmp	r3, #9
 8004d6c:	d94d      	bls.n	8004e0a <_svfiprintf_r+0x16e>
 8004d6e:	b1b8      	cbz	r0, 8004da0 <_svfiprintf_r+0x104>
 8004d70:	e00f      	b.n	8004d92 <_svfiprintf_r+0xf6>
 8004d72:	462f      	mov	r7, r5
 8004d74:	e7b8      	b.n	8004ce8 <_svfiprintf_r+0x4c>
 8004d76:	4a40      	ldr	r2, [pc, #256]	; (8004e78 <_svfiprintf_r+0x1dc>)
 8004d78:	463d      	mov	r5, r7
 8004d7a:	1a80      	subs	r0, r0, r2
 8004d7c:	fa0b f000 	lsl.w	r0, fp, r0
 8004d80:	4318      	orrs	r0, r3
 8004d82:	9004      	str	r0, [sp, #16]
 8004d84:	e7d3      	b.n	8004d2e <_svfiprintf_r+0x92>
 8004d86:	9a03      	ldr	r2, [sp, #12]
 8004d88:	1d11      	adds	r1, r2, #4
 8004d8a:	6812      	ldr	r2, [r2, #0]
 8004d8c:	9103      	str	r1, [sp, #12]
 8004d8e:	2a00      	cmp	r2, #0
 8004d90:	db01      	blt.n	8004d96 <_svfiprintf_r+0xfa>
 8004d92:	9207      	str	r2, [sp, #28]
 8004d94:	e004      	b.n	8004da0 <_svfiprintf_r+0x104>
 8004d96:	4252      	negs	r2, r2
 8004d98:	f043 0302 	orr.w	r3, r3, #2
 8004d9c:	9207      	str	r2, [sp, #28]
 8004d9e:	9304      	str	r3, [sp, #16]
 8004da0:	783b      	ldrb	r3, [r7, #0]
 8004da2:	2b2e      	cmp	r3, #46	; 0x2e
 8004da4:	d10c      	bne.n	8004dc0 <_svfiprintf_r+0x124>
 8004da6:	787b      	ldrb	r3, [r7, #1]
 8004da8:	2b2a      	cmp	r3, #42	; 0x2a
 8004daa:	d133      	bne.n	8004e14 <_svfiprintf_r+0x178>
 8004dac:	9b03      	ldr	r3, [sp, #12]
 8004dae:	3702      	adds	r7, #2
 8004db0:	1d1a      	adds	r2, r3, #4
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	9203      	str	r2, [sp, #12]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	bfb8      	it	lt
 8004dba:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004dbe:	9305      	str	r3, [sp, #20]
 8004dc0:	4d2e      	ldr	r5, [pc, #184]	; (8004e7c <_svfiprintf_r+0x1e0>)
 8004dc2:	2203      	movs	r2, #3
 8004dc4:	7839      	ldrb	r1, [r7, #0]
 8004dc6:	4628      	mov	r0, r5
 8004dc8:	f000 f9e8 	bl	800519c <memchr>
 8004dcc:	b138      	cbz	r0, 8004dde <_svfiprintf_r+0x142>
 8004dce:	2340      	movs	r3, #64	; 0x40
 8004dd0:	1b40      	subs	r0, r0, r5
 8004dd2:	fa03 f000 	lsl.w	r0, r3, r0
 8004dd6:	9b04      	ldr	r3, [sp, #16]
 8004dd8:	3701      	adds	r7, #1
 8004dda:	4303      	orrs	r3, r0
 8004ddc:	9304      	str	r3, [sp, #16]
 8004dde:	7839      	ldrb	r1, [r7, #0]
 8004de0:	2206      	movs	r2, #6
 8004de2:	4827      	ldr	r0, [pc, #156]	; (8004e80 <_svfiprintf_r+0x1e4>)
 8004de4:	1c7e      	adds	r6, r7, #1
 8004de6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004dea:	f000 f9d7 	bl	800519c <memchr>
 8004dee:	2800      	cmp	r0, #0
 8004df0:	d038      	beq.n	8004e64 <_svfiprintf_r+0x1c8>
 8004df2:	4b24      	ldr	r3, [pc, #144]	; (8004e84 <_svfiprintf_r+0x1e8>)
 8004df4:	bb13      	cbnz	r3, 8004e3c <_svfiprintf_r+0x1a0>
 8004df6:	9b03      	ldr	r3, [sp, #12]
 8004df8:	3307      	adds	r3, #7
 8004dfa:	f023 0307 	bic.w	r3, r3, #7
 8004dfe:	3308      	adds	r3, #8
 8004e00:	9303      	str	r3, [sp, #12]
 8004e02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e04:	444b      	add	r3, r9
 8004e06:	9309      	str	r3, [sp, #36]	; 0x24
 8004e08:	e76d      	b.n	8004ce6 <_svfiprintf_r+0x4a>
 8004e0a:	fb05 3202 	mla	r2, r5, r2, r3
 8004e0e:	2001      	movs	r0, #1
 8004e10:	460f      	mov	r7, r1
 8004e12:	e7a6      	b.n	8004d62 <_svfiprintf_r+0xc6>
 8004e14:	2300      	movs	r3, #0
 8004e16:	250a      	movs	r5, #10
 8004e18:	4619      	mov	r1, r3
 8004e1a:	3701      	adds	r7, #1
 8004e1c:	9305      	str	r3, [sp, #20]
 8004e1e:	4638      	mov	r0, r7
 8004e20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e24:	3a30      	subs	r2, #48	; 0x30
 8004e26:	2a09      	cmp	r2, #9
 8004e28:	d903      	bls.n	8004e32 <_svfiprintf_r+0x196>
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d0c8      	beq.n	8004dc0 <_svfiprintf_r+0x124>
 8004e2e:	9105      	str	r1, [sp, #20]
 8004e30:	e7c6      	b.n	8004dc0 <_svfiprintf_r+0x124>
 8004e32:	fb05 2101 	mla	r1, r5, r1, r2
 8004e36:	2301      	movs	r3, #1
 8004e38:	4607      	mov	r7, r0
 8004e3a:	e7f0      	b.n	8004e1e <_svfiprintf_r+0x182>
 8004e3c:	ab03      	add	r3, sp, #12
 8004e3e:	9300      	str	r3, [sp, #0]
 8004e40:	4622      	mov	r2, r4
 8004e42:	4b11      	ldr	r3, [pc, #68]	; (8004e88 <_svfiprintf_r+0x1ec>)
 8004e44:	a904      	add	r1, sp, #16
 8004e46:	4640      	mov	r0, r8
 8004e48:	f3af 8000 	nop.w
 8004e4c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8004e50:	4681      	mov	r9, r0
 8004e52:	d1d6      	bne.n	8004e02 <_svfiprintf_r+0x166>
 8004e54:	89a3      	ldrh	r3, [r4, #12]
 8004e56:	065b      	lsls	r3, r3, #25
 8004e58:	f53f af35 	bmi.w	8004cc6 <_svfiprintf_r+0x2a>
 8004e5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004e5e:	b01d      	add	sp, #116	; 0x74
 8004e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e64:	ab03      	add	r3, sp, #12
 8004e66:	9300      	str	r3, [sp, #0]
 8004e68:	4622      	mov	r2, r4
 8004e6a:	4b07      	ldr	r3, [pc, #28]	; (8004e88 <_svfiprintf_r+0x1ec>)
 8004e6c:	a904      	add	r1, sp, #16
 8004e6e:	4640      	mov	r0, r8
 8004e70:	f000 f882 	bl	8004f78 <_printf_i>
 8004e74:	e7ea      	b.n	8004e4c <_svfiprintf_r+0x1b0>
 8004e76:	bf00      	nop
 8004e78:	0800548c 	.word	0x0800548c
 8004e7c:	08005492 	.word	0x08005492
 8004e80:	08005496 	.word	0x08005496
 8004e84:	00000000 	.word	0x00000000
 8004e88:	08004be9 	.word	0x08004be9

08004e8c <_printf_common>:
 8004e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e90:	4691      	mov	r9, r2
 8004e92:	461f      	mov	r7, r3
 8004e94:	688a      	ldr	r2, [r1, #8]
 8004e96:	690b      	ldr	r3, [r1, #16]
 8004e98:	4606      	mov	r6, r0
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	bfb8      	it	lt
 8004e9e:	4613      	movlt	r3, r2
 8004ea0:	f8c9 3000 	str.w	r3, [r9]
 8004ea4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ea8:	460c      	mov	r4, r1
 8004eaa:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004eae:	b112      	cbz	r2, 8004eb6 <_printf_common+0x2a>
 8004eb0:	3301      	adds	r3, #1
 8004eb2:	f8c9 3000 	str.w	r3, [r9]
 8004eb6:	6823      	ldr	r3, [r4, #0]
 8004eb8:	0699      	lsls	r1, r3, #26
 8004eba:	bf42      	ittt	mi
 8004ebc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004ec0:	3302      	addmi	r3, #2
 8004ec2:	f8c9 3000 	strmi.w	r3, [r9]
 8004ec6:	6825      	ldr	r5, [r4, #0]
 8004ec8:	f015 0506 	ands.w	r5, r5, #6
 8004ecc:	d107      	bne.n	8004ede <_printf_common+0x52>
 8004ece:	f104 0a19 	add.w	sl, r4, #25
 8004ed2:	68e3      	ldr	r3, [r4, #12]
 8004ed4:	f8d9 2000 	ldr.w	r2, [r9]
 8004ed8:	1a9b      	subs	r3, r3, r2
 8004eda:	42ab      	cmp	r3, r5
 8004edc:	dc29      	bgt.n	8004f32 <_printf_common+0xa6>
 8004ede:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004ee2:	6822      	ldr	r2, [r4, #0]
 8004ee4:	3300      	adds	r3, #0
 8004ee6:	bf18      	it	ne
 8004ee8:	2301      	movne	r3, #1
 8004eea:	0692      	lsls	r2, r2, #26
 8004eec:	d42e      	bmi.n	8004f4c <_printf_common+0xc0>
 8004eee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ef2:	4639      	mov	r1, r7
 8004ef4:	4630      	mov	r0, r6
 8004ef6:	47c0      	blx	r8
 8004ef8:	3001      	adds	r0, #1
 8004efa:	d021      	beq.n	8004f40 <_printf_common+0xb4>
 8004efc:	6823      	ldr	r3, [r4, #0]
 8004efe:	68e5      	ldr	r5, [r4, #12]
 8004f00:	f003 0306 	and.w	r3, r3, #6
 8004f04:	2b04      	cmp	r3, #4
 8004f06:	bf18      	it	ne
 8004f08:	2500      	movne	r5, #0
 8004f0a:	f8d9 2000 	ldr.w	r2, [r9]
 8004f0e:	f04f 0900 	mov.w	r9, #0
 8004f12:	bf08      	it	eq
 8004f14:	1aad      	subeq	r5, r5, r2
 8004f16:	68a3      	ldr	r3, [r4, #8]
 8004f18:	6922      	ldr	r2, [r4, #16]
 8004f1a:	bf08      	it	eq
 8004f1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f20:	4293      	cmp	r3, r2
 8004f22:	bfc4      	itt	gt
 8004f24:	1a9b      	subgt	r3, r3, r2
 8004f26:	18ed      	addgt	r5, r5, r3
 8004f28:	341a      	adds	r4, #26
 8004f2a:	454d      	cmp	r5, r9
 8004f2c:	d11a      	bne.n	8004f64 <_printf_common+0xd8>
 8004f2e:	2000      	movs	r0, #0
 8004f30:	e008      	b.n	8004f44 <_printf_common+0xb8>
 8004f32:	2301      	movs	r3, #1
 8004f34:	4652      	mov	r2, sl
 8004f36:	4639      	mov	r1, r7
 8004f38:	4630      	mov	r0, r6
 8004f3a:	47c0      	blx	r8
 8004f3c:	3001      	adds	r0, #1
 8004f3e:	d103      	bne.n	8004f48 <_printf_common+0xbc>
 8004f40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f48:	3501      	adds	r5, #1
 8004f4a:	e7c2      	b.n	8004ed2 <_printf_common+0x46>
 8004f4c:	2030      	movs	r0, #48	; 0x30
 8004f4e:	18e1      	adds	r1, r4, r3
 8004f50:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f54:	1c5a      	adds	r2, r3, #1
 8004f56:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f5a:	4422      	add	r2, r4
 8004f5c:	3302      	adds	r3, #2
 8004f5e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f62:	e7c4      	b.n	8004eee <_printf_common+0x62>
 8004f64:	2301      	movs	r3, #1
 8004f66:	4622      	mov	r2, r4
 8004f68:	4639      	mov	r1, r7
 8004f6a:	4630      	mov	r0, r6
 8004f6c:	47c0      	blx	r8
 8004f6e:	3001      	adds	r0, #1
 8004f70:	d0e6      	beq.n	8004f40 <_printf_common+0xb4>
 8004f72:	f109 0901 	add.w	r9, r9, #1
 8004f76:	e7d8      	b.n	8004f2a <_printf_common+0x9e>

08004f78 <_printf_i>:
 8004f78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004f7c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004f80:	460c      	mov	r4, r1
 8004f82:	7e09      	ldrb	r1, [r1, #24]
 8004f84:	b085      	sub	sp, #20
 8004f86:	296e      	cmp	r1, #110	; 0x6e
 8004f88:	4617      	mov	r7, r2
 8004f8a:	4606      	mov	r6, r0
 8004f8c:	4698      	mov	r8, r3
 8004f8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004f90:	f000 80b3 	beq.w	80050fa <_printf_i+0x182>
 8004f94:	d822      	bhi.n	8004fdc <_printf_i+0x64>
 8004f96:	2963      	cmp	r1, #99	; 0x63
 8004f98:	d036      	beq.n	8005008 <_printf_i+0x90>
 8004f9a:	d80a      	bhi.n	8004fb2 <_printf_i+0x3a>
 8004f9c:	2900      	cmp	r1, #0
 8004f9e:	f000 80b9 	beq.w	8005114 <_printf_i+0x19c>
 8004fa2:	2958      	cmp	r1, #88	; 0x58
 8004fa4:	f000 8083 	beq.w	80050ae <_printf_i+0x136>
 8004fa8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fac:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004fb0:	e032      	b.n	8005018 <_printf_i+0xa0>
 8004fb2:	2964      	cmp	r1, #100	; 0x64
 8004fb4:	d001      	beq.n	8004fba <_printf_i+0x42>
 8004fb6:	2969      	cmp	r1, #105	; 0x69
 8004fb8:	d1f6      	bne.n	8004fa8 <_printf_i+0x30>
 8004fba:	6820      	ldr	r0, [r4, #0]
 8004fbc:	6813      	ldr	r3, [r2, #0]
 8004fbe:	0605      	lsls	r5, r0, #24
 8004fc0:	f103 0104 	add.w	r1, r3, #4
 8004fc4:	d52a      	bpl.n	800501c <_printf_i+0xa4>
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	6011      	str	r1, [r2, #0]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	da03      	bge.n	8004fd6 <_printf_i+0x5e>
 8004fce:	222d      	movs	r2, #45	; 0x2d
 8004fd0:	425b      	negs	r3, r3
 8004fd2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004fd6:	486f      	ldr	r0, [pc, #444]	; (8005194 <_printf_i+0x21c>)
 8004fd8:	220a      	movs	r2, #10
 8004fda:	e039      	b.n	8005050 <_printf_i+0xd8>
 8004fdc:	2973      	cmp	r1, #115	; 0x73
 8004fde:	f000 809d 	beq.w	800511c <_printf_i+0x1a4>
 8004fe2:	d808      	bhi.n	8004ff6 <_printf_i+0x7e>
 8004fe4:	296f      	cmp	r1, #111	; 0x6f
 8004fe6:	d020      	beq.n	800502a <_printf_i+0xb2>
 8004fe8:	2970      	cmp	r1, #112	; 0x70
 8004fea:	d1dd      	bne.n	8004fa8 <_printf_i+0x30>
 8004fec:	6823      	ldr	r3, [r4, #0]
 8004fee:	f043 0320 	orr.w	r3, r3, #32
 8004ff2:	6023      	str	r3, [r4, #0]
 8004ff4:	e003      	b.n	8004ffe <_printf_i+0x86>
 8004ff6:	2975      	cmp	r1, #117	; 0x75
 8004ff8:	d017      	beq.n	800502a <_printf_i+0xb2>
 8004ffa:	2978      	cmp	r1, #120	; 0x78
 8004ffc:	d1d4      	bne.n	8004fa8 <_printf_i+0x30>
 8004ffe:	2378      	movs	r3, #120	; 0x78
 8005000:	4865      	ldr	r0, [pc, #404]	; (8005198 <_printf_i+0x220>)
 8005002:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005006:	e055      	b.n	80050b4 <_printf_i+0x13c>
 8005008:	6813      	ldr	r3, [r2, #0]
 800500a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800500e:	1d19      	adds	r1, r3, #4
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	6011      	str	r1, [r2, #0]
 8005014:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005018:	2301      	movs	r3, #1
 800501a:	e08c      	b.n	8005136 <_printf_i+0x1be>
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005022:	6011      	str	r1, [r2, #0]
 8005024:	bf18      	it	ne
 8005026:	b21b      	sxthne	r3, r3
 8005028:	e7cf      	b.n	8004fca <_printf_i+0x52>
 800502a:	6813      	ldr	r3, [r2, #0]
 800502c:	6825      	ldr	r5, [r4, #0]
 800502e:	1d18      	adds	r0, r3, #4
 8005030:	6010      	str	r0, [r2, #0]
 8005032:	0628      	lsls	r0, r5, #24
 8005034:	d501      	bpl.n	800503a <_printf_i+0xc2>
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	e002      	b.n	8005040 <_printf_i+0xc8>
 800503a:	0668      	lsls	r0, r5, #25
 800503c:	d5fb      	bpl.n	8005036 <_printf_i+0xbe>
 800503e:	881b      	ldrh	r3, [r3, #0]
 8005040:	296f      	cmp	r1, #111	; 0x6f
 8005042:	bf14      	ite	ne
 8005044:	220a      	movne	r2, #10
 8005046:	2208      	moveq	r2, #8
 8005048:	4852      	ldr	r0, [pc, #328]	; (8005194 <_printf_i+0x21c>)
 800504a:	2100      	movs	r1, #0
 800504c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005050:	6865      	ldr	r5, [r4, #4]
 8005052:	2d00      	cmp	r5, #0
 8005054:	60a5      	str	r5, [r4, #8]
 8005056:	f2c0 8095 	blt.w	8005184 <_printf_i+0x20c>
 800505a:	6821      	ldr	r1, [r4, #0]
 800505c:	f021 0104 	bic.w	r1, r1, #4
 8005060:	6021      	str	r1, [r4, #0]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d13d      	bne.n	80050e2 <_printf_i+0x16a>
 8005066:	2d00      	cmp	r5, #0
 8005068:	f040 808e 	bne.w	8005188 <_printf_i+0x210>
 800506c:	4665      	mov	r5, ip
 800506e:	2a08      	cmp	r2, #8
 8005070:	d10b      	bne.n	800508a <_printf_i+0x112>
 8005072:	6823      	ldr	r3, [r4, #0]
 8005074:	07db      	lsls	r3, r3, #31
 8005076:	d508      	bpl.n	800508a <_printf_i+0x112>
 8005078:	6923      	ldr	r3, [r4, #16]
 800507a:	6862      	ldr	r2, [r4, #4]
 800507c:	429a      	cmp	r2, r3
 800507e:	bfde      	ittt	le
 8005080:	2330      	movle	r3, #48	; 0x30
 8005082:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005086:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800508a:	ebac 0305 	sub.w	r3, ip, r5
 800508e:	6123      	str	r3, [r4, #16]
 8005090:	f8cd 8000 	str.w	r8, [sp]
 8005094:	463b      	mov	r3, r7
 8005096:	aa03      	add	r2, sp, #12
 8005098:	4621      	mov	r1, r4
 800509a:	4630      	mov	r0, r6
 800509c:	f7ff fef6 	bl	8004e8c <_printf_common>
 80050a0:	3001      	adds	r0, #1
 80050a2:	d14d      	bne.n	8005140 <_printf_i+0x1c8>
 80050a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80050a8:	b005      	add	sp, #20
 80050aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80050ae:	4839      	ldr	r0, [pc, #228]	; (8005194 <_printf_i+0x21c>)
 80050b0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80050b4:	6813      	ldr	r3, [r2, #0]
 80050b6:	6821      	ldr	r1, [r4, #0]
 80050b8:	1d1d      	adds	r5, r3, #4
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	6015      	str	r5, [r2, #0]
 80050be:	060a      	lsls	r2, r1, #24
 80050c0:	d50b      	bpl.n	80050da <_printf_i+0x162>
 80050c2:	07ca      	lsls	r2, r1, #31
 80050c4:	bf44      	itt	mi
 80050c6:	f041 0120 	orrmi.w	r1, r1, #32
 80050ca:	6021      	strmi	r1, [r4, #0]
 80050cc:	b91b      	cbnz	r3, 80050d6 <_printf_i+0x15e>
 80050ce:	6822      	ldr	r2, [r4, #0]
 80050d0:	f022 0220 	bic.w	r2, r2, #32
 80050d4:	6022      	str	r2, [r4, #0]
 80050d6:	2210      	movs	r2, #16
 80050d8:	e7b7      	b.n	800504a <_printf_i+0xd2>
 80050da:	064d      	lsls	r5, r1, #25
 80050dc:	bf48      	it	mi
 80050de:	b29b      	uxthmi	r3, r3
 80050e0:	e7ef      	b.n	80050c2 <_printf_i+0x14a>
 80050e2:	4665      	mov	r5, ip
 80050e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80050e8:	fb02 3311 	mls	r3, r2, r1, r3
 80050ec:	5cc3      	ldrb	r3, [r0, r3]
 80050ee:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80050f2:	460b      	mov	r3, r1
 80050f4:	2900      	cmp	r1, #0
 80050f6:	d1f5      	bne.n	80050e4 <_printf_i+0x16c>
 80050f8:	e7b9      	b.n	800506e <_printf_i+0xf6>
 80050fa:	6813      	ldr	r3, [r2, #0]
 80050fc:	6825      	ldr	r5, [r4, #0]
 80050fe:	1d18      	adds	r0, r3, #4
 8005100:	6961      	ldr	r1, [r4, #20]
 8005102:	6010      	str	r0, [r2, #0]
 8005104:	0628      	lsls	r0, r5, #24
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	d501      	bpl.n	800510e <_printf_i+0x196>
 800510a:	6019      	str	r1, [r3, #0]
 800510c:	e002      	b.n	8005114 <_printf_i+0x19c>
 800510e:	066a      	lsls	r2, r5, #25
 8005110:	d5fb      	bpl.n	800510a <_printf_i+0x192>
 8005112:	8019      	strh	r1, [r3, #0]
 8005114:	2300      	movs	r3, #0
 8005116:	4665      	mov	r5, ip
 8005118:	6123      	str	r3, [r4, #16]
 800511a:	e7b9      	b.n	8005090 <_printf_i+0x118>
 800511c:	6813      	ldr	r3, [r2, #0]
 800511e:	1d19      	adds	r1, r3, #4
 8005120:	6011      	str	r1, [r2, #0]
 8005122:	681d      	ldr	r5, [r3, #0]
 8005124:	6862      	ldr	r2, [r4, #4]
 8005126:	2100      	movs	r1, #0
 8005128:	4628      	mov	r0, r5
 800512a:	f000 f837 	bl	800519c <memchr>
 800512e:	b108      	cbz	r0, 8005134 <_printf_i+0x1bc>
 8005130:	1b40      	subs	r0, r0, r5
 8005132:	6060      	str	r0, [r4, #4]
 8005134:	6863      	ldr	r3, [r4, #4]
 8005136:	6123      	str	r3, [r4, #16]
 8005138:	2300      	movs	r3, #0
 800513a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800513e:	e7a7      	b.n	8005090 <_printf_i+0x118>
 8005140:	6923      	ldr	r3, [r4, #16]
 8005142:	462a      	mov	r2, r5
 8005144:	4639      	mov	r1, r7
 8005146:	4630      	mov	r0, r6
 8005148:	47c0      	blx	r8
 800514a:	3001      	adds	r0, #1
 800514c:	d0aa      	beq.n	80050a4 <_printf_i+0x12c>
 800514e:	6823      	ldr	r3, [r4, #0]
 8005150:	079b      	lsls	r3, r3, #30
 8005152:	d413      	bmi.n	800517c <_printf_i+0x204>
 8005154:	68e0      	ldr	r0, [r4, #12]
 8005156:	9b03      	ldr	r3, [sp, #12]
 8005158:	4298      	cmp	r0, r3
 800515a:	bfb8      	it	lt
 800515c:	4618      	movlt	r0, r3
 800515e:	e7a3      	b.n	80050a8 <_printf_i+0x130>
 8005160:	2301      	movs	r3, #1
 8005162:	464a      	mov	r2, r9
 8005164:	4639      	mov	r1, r7
 8005166:	4630      	mov	r0, r6
 8005168:	47c0      	blx	r8
 800516a:	3001      	adds	r0, #1
 800516c:	d09a      	beq.n	80050a4 <_printf_i+0x12c>
 800516e:	3501      	adds	r5, #1
 8005170:	68e3      	ldr	r3, [r4, #12]
 8005172:	9a03      	ldr	r2, [sp, #12]
 8005174:	1a9b      	subs	r3, r3, r2
 8005176:	42ab      	cmp	r3, r5
 8005178:	dcf2      	bgt.n	8005160 <_printf_i+0x1e8>
 800517a:	e7eb      	b.n	8005154 <_printf_i+0x1dc>
 800517c:	2500      	movs	r5, #0
 800517e:	f104 0919 	add.w	r9, r4, #25
 8005182:	e7f5      	b.n	8005170 <_printf_i+0x1f8>
 8005184:	2b00      	cmp	r3, #0
 8005186:	d1ac      	bne.n	80050e2 <_printf_i+0x16a>
 8005188:	7803      	ldrb	r3, [r0, #0]
 800518a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800518e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005192:	e76c      	b.n	800506e <_printf_i+0xf6>
 8005194:	0800549d 	.word	0x0800549d
 8005198:	080054ae 	.word	0x080054ae

0800519c <memchr>:
 800519c:	b510      	push	{r4, lr}
 800519e:	b2c9      	uxtb	r1, r1
 80051a0:	4402      	add	r2, r0
 80051a2:	4290      	cmp	r0, r2
 80051a4:	4603      	mov	r3, r0
 80051a6:	d101      	bne.n	80051ac <memchr+0x10>
 80051a8:	2300      	movs	r3, #0
 80051aa:	e003      	b.n	80051b4 <memchr+0x18>
 80051ac:	781c      	ldrb	r4, [r3, #0]
 80051ae:	3001      	adds	r0, #1
 80051b0:	428c      	cmp	r4, r1
 80051b2:	d1f6      	bne.n	80051a2 <memchr+0x6>
 80051b4:	4618      	mov	r0, r3
 80051b6:	bd10      	pop	{r4, pc}

080051b8 <memmove>:
 80051b8:	4288      	cmp	r0, r1
 80051ba:	b510      	push	{r4, lr}
 80051bc:	eb01 0302 	add.w	r3, r1, r2
 80051c0:	d807      	bhi.n	80051d2 <memmove+0x1a>
 80051c2:	1e42      	subs	r2, r0, #1
 80051c4:	4299      	cmp	r1, r3
 80051c6:	d00a      	beq.n	80051de <memmove+0x26>
 80051c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80051cc:	f802 4f01 	strb.w	r4, [r2, #1]!
 80051d0:	e7f8      	b.n	80051c4 <memmove+0xc>
 80051d2:	4283      	cmp	r3, r0
 80051d4:	d9f5      	bls.n	80051c2 <memmove+0xa>
 80051d6:	1881      	adds	r1, r0, r2
 80051d8:	1ad2      	subs	r2, r2, r3
 80051da:	42d3      	cmn	r3, r2
 80051dc:	d100      	bne.n	80051e0 <memmove+0x28>
 80051de:	bd10      	pop	{r4, pc}
 80051e0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80051e4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80051e8:	e7f7      	b.n	80051da <memmove+0x22>
	...

080051ec <_free_r>:
 80051ec:	b538      	push	{r3, r4, r5, lr}
 80051ee:	4605      	mov	r5, r0
 80051f0:	2900      	cmp	r1, #0
 80051f2:	d043      	beq.n	800527c <_free_r+0x90>
 80051f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051f8:	1f0c      	subs	r4, r1, #4
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	bfb8      	it	lt
 80051fe:	18e4      	addlt	r4, r4, r3
 8005200:	f000 f8d0 	bl	80053a4 <__malloc_lock>
 8005204:	4a1e      	ldr	r2, [pc, #120]	; (8005280 <_free_r+0x94>)
 8005206:	6813      	ldr	r3, [r2, #0]
 8005208:	4610      	mov	r0, r2
 800520a:	b933      	cbnz	r3, 800521a <_free_r+0x2e>
 800520c:	6063      	str	r3, [r4, #4]
 800520e:	6014      	str	r4, [r2, #0]
 8005210:	4628      	mov	r0, r5
 8005212:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005216:	f000 b8c6 	b.w	80053a6 <__malloc_unlock>
 800521a:	42a3      	cmp	r3, r4
 800521c:	d90b      	bls.n	8005236 <_free_r+0x4a>
 800521e:	6821      	ldr	r1, [r4, #0]
 8005220:	1862      	adds	r2, r4, r1
 8005222:	4293      	cmp	r3, r2
 8005224:	bf01      	itttt	eq
 8005226:	681a      	ldreq	r2, [r3, #0]
 8005228:	685b      	ldreq	r3, [r3, #4]
 800522a:	1852      	addeq	r2, r2, r1
 800522c:	6022      	streq	r2, [r4, #0]
 800522e:	6063      	str	r3, [r4, #4]
 8005230:	6004      	str	r4, [r0, #0]
 8005232:	e7ed      	b.n	8005210 <_free_r+0x24>
 8005234:	4613      	mov	r3, r2
 8005236:	685a      	ldr	r2, [r3, #4]
 8005238:	b10a      	cbz	r2, 800523e <_free_r+0x52>
 800523a:	42a2      	cmp	r2, r4
 800523c:	d9fa      	bls.n	8005234 <_free_r+0x48>
 800523e:	6819      	ldr	r1, [r3, #0]
 8005240:	1858      	adds	r0, r3, r1
 8005242:	42a0      	cmp	r0, r4
 8005244:	d10b      	bne.n	800525e <_free_r+0x72>
 8005246:	6820      	ldr	r0, [r4, #0]
 8005248:	4401      	add	r1, r0
 800524a:	1858      	adds	r0, r3, r1
 800524c:	4282      	cmp	r2, r0
 800524e:	6019      	str	r1, [r3, #0]
 8005250:	d1de      	bne.n	8005210 <_free_r+0x24>
 8005252:	6810      	ldr	r0, [r2, #0]
 8005254:	6852      	ldr	r2, [r2, #4]
 8005256:	4401      	add	r1, r0
 8005258:	6019      	str	r1, [r3, #0]
 800525a:	605a      	str	r2, [r3, #4]
 800525c:	e7d8      	b.n	8005210 <_free_r+0x24>
 800525e:	d902      	bls.n	8005266 <_free_r+0x7a>
 8005260:	230c      	movs	r3, #12
 8005262:	602b      	str	r3, [r5, #0]
 8005264:	e7d4      	b.n	8005210 <_free_r+0x24>
 8005266:	6820      	ldr	r0, [r4, #0]
 8005268:	1821      	adds	r1, r4, r0
 800526a:	428a      	cmp	r2, r1
 800526c:	bf01      	itttt	eq
 800526e:	6811      	ldreq	r1, [r2, #0]
 8005270:	6852      	ldreq	r2, [r2, #4]
 8005272:	1809      	addeq	r1, r1, r0
 8005274:	6021      	streq	r1, [r4, #0]
 8005276:	6062      	str	r2, [r4, #4]
 8005278:	605c      	str	r4, [r3, #4]
 800527a:	e7c9      	b.n	8005210 <_free_r+0x24>
 800527c:	bd38      	pop	{r3, r4, r5, pc}
 800527e:	bf00      	nop
 8005280:	20001038 	.word	0x20001038

08005284 <_malloc_r>:
 8005284:	b570      	push	{r4, r5, r6, lr}
 8005286:	1ccd      	adds	r5, r1, #3
 8005288:	f025 0503 	bic.w	r5, r5, #3
 800528c:	3508      	adds	r5, #8
 800528e:	2d0c      	cmp	r5, #12
 8005290:	bf38      	it	cc
 8005292:	250c      	movcc	r5, #12
 8005294:	2d00      	cmp	r5, #0
 8005296:	4606      	mov	r6, r0
 8005298:	db01      	blt.n	800529e <_malloc_r+0x1a>
 800529a:	42a9      	cmp	r1, r5
 800529c:	d903      	bls.n	80052a6 <_malloc_r+0x22>
 800529e:	230c      	movs	r3, #12
 80052a0:	6033      	str	r3, [r6, #0]
 80052a2:	2000      	movs	r0, #0
 80052a4:	bd70      	pop	{r4, r5, r6, pc}
 80052a6:	f000 f87d 	bl	80053a4 <__malloc_lock>
 80052aa:	4a21      	ldr	r2, [pc, #132]	; (8005330 <_malloc_r+0xac>)
 80052ac:	6814      	ldr	r4, [r2, #0]
 80052ae:	4621      	mov	r1, r4
 80052b0:	b991      	cbnz	r1, 80052d8 <_malloc_r+0x54>
 80052b2:	4c20      	ldr	r4, [pc, #128]	; (8005334 <_malloc_r+0xb0>)
 80052b4:	6823      	ldr	r3, [r4, #0]
 80052b6:	b91b      	cbnz	r3, 80052c0 <_malloc_r+0x3c>
 80052b8:	4630      	mov	r0, r6
 80052ba:	f000 f863 	bl	8005384 <_sbrk_r>
 80052be:	6020      	str	r0, [r4, #0]
 80052c0:	4629      	mov	r1, r5
 80052c2:	4630      	mov	r0, r6
 80052c4:	f000 f85e 	bl	8005384 <_sbrk_r>
 80052c8:	1c43      	adds	r3, r0, #1
 80052ca:	d124      	bne.n	8005316 <_malloc_r+0x92>
 80052cc:	230c      	movs	r3, #12
 80052ce:	4630      	mov	r0, r6
 80052d0:	6033      	str	r3, [r6, #0]
 80052d2:	f000 f868 	bl	80053a6 <__malloc_unlock>
 80052d6:	e7e4      	b.n	80052a2 <_malloc_r+0x1e>
 80052d8:	680b      	ldr	r3, [r1, #0]
 80052da:	1b5b      	subs	r3, r3, r5
 80052dc:	d418      	bmi.n	8005310 <_malloc_r+0x8c>
 80052de:	2b0b      	cmp	r3, #11
 80052e0:	d90f      	bls.n	8005302 <_malloc_r+0x7e>
 80052e2:	600b      	str	r3, [r1, #0]
 80052e4:	18cc      	adds	r4, r1, r3
 80052e6:	50cd      	str	r5, [r1, r3]
 80052e8:	4630      	mov	r0, r6
 80052ea:	f000 f85c 	bl	80053a6 <__malloc_unlock>
 80052ee:	f104 000b 	add.w	r0, r4, #11
 80052f2:	1d23      	adds	r3, r4, #4
 80052f4:	f020 0007 	bic.w	r0, r0, #7
 80052f8:	1ac3      	subs	r3, r0, r3
 80052fa:	d0d3      	beq.n	80052a4 <_malloc_r+0x20>
 80052fc:	425a      	negs	r2, r3
 80052fe:	50e2      	str	r2, [r4, r3]
 8005300:	e7d0      	b.n	80052a4 <_malloc_r+0x20>
 8005302:	684b      	ldr	r3, [r1, #4]
 8005304:	428c      	cmp	r4, r1
 8005306:	bf16      	itet	ne
 8005308:	6063      	strne	r3, [r4, #4]
 800530a:	6013      	streq	r3, [r2, #0]
 800530c:	460c      	movne	r4, r1
 800530e:	e7eb      	b.n	80052e8 <_malloc_r+0x64>
 8005310:	460c      	mov	r4, r1
 8005312:	6849      	ldr	r1, [r1, #4]
 8005314:	e7cc      	b.n	80052b0 <_malloc_r+0x2c>
 8005316:	1cc4      	adds	r4, r0, #3
 8005318:	f024 0403 	bic.w	r4, r4, #3
 800531c:	42a0      	cmp	r0, r4
 800531e:	d005      	beq.n	800532c <_malloc_r+0xa8>
 8005320:	1a21      	subs	r1, r4, r0
 8005322:	4630      	mov	r0, r6
 8005324:	f000 f82e 	bl	8005384 <_sbrk_r>
 8005328:	3001      	adds	r0, #1
 800532a:	d0cf      	beq.n	80052cc <_malloc_r+0x48>
 800532c:	6025      	str	r5, [r4, #0]
 800532e:	e7db      	b.n	80052e8 <_malloc_r+0x64>
 8005330:	20001038 	.word	0x20001038
 8005334:	2000103c 	.word	0x2000103c

08005338 <_realloc_r>:
 8005338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800533a:	4607      	mov	r7, r0
 800533c:	4614      	mov	r4, r2
 800533e:	460e      	mov	r6, r1
 8005340:	b921      	cbnz	r1, 800534c <_realloc_r+0x14>
 8005342:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005346:	4611      	mov	r1, r2
 8005348:	f7ff bf9c 	b.w	8005284 <_malloc_r>
 800534c:	b922      	cbnz	r2, 8005358 <_realloc_r+0x20>
 800534e:	f7ff ff4d 	bl	80051ec <_free_r>
 8005352:	4625      	mov	r5, r4
 8005354:	4628      	mov	r0, r5
 8005356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005358:	f000 f826 	bl	80053a8 <_malloc_usable_size_r>
 800535c:	42a0      	cmp	r0, r4
 800535e:	d20f      	bcs.n	8005380 <_realloc_r+0x48>
 8005360:	4621      	mov	r1, r4
 8005362:	4638      	mov	r0, r7
 8005364:	f7ff ff8e 	bl	8005284 <_malloc_r>
 8005368:	4605      	mov	r5, r0
 800536a:	2800      	cmp	r0, #0
 800536c:	d0f2      	beq.n	8005354 <_realloc_r+0x1c>
 800536e:	4631      	mov	r1, r6
 8005370:	4622      	mov	r2, r4
 8005372:	f7ff fc05 	bl	8004b80 <memcpy>
 8005376:	4631      	mov	r1, r6
 8005378:	4638      	mov	r0, r7
 800537a:	f7ff ff37 	bl	80051ec <_free_r>
 800537e:	e7e9      	b.n	8005354 <_realloc_r+0x1c>
 8005380:	4635      	mov	r5, r6
 8005382:	e7e7      	b.n	8005354 <_realloc_r+0x1c>

08005384 <_sbrk_r>:
 8005384:	b538      	push	{r3, r4, r5, lr}
 8005386:	2300      	movs	r3, #0
 8005388:	4c05      	ldr	r4, [pc, #20]	; (80053a0 <_sbrk_r+0x1c>)
 800538a:	4605      	mov	r5, r0
 800538c:	4608      	mov	r0, r1
 800538e:	6023      	str	r3, [r4, #0]
 8005390:	f7fb f988 	bl	80006a4 <_sbrk>
 8005394:	1c43      	adds	r3, r0, #1
 8005396:	d102      	bne.n	800539e <_sbrk_r+0x1a>
 8005398:	6823      	ldr	r3, [r4, #0]
 800539a:	b103      	cbz	r3, 800539e <_sbrk_r+0x1a>
 800539c:	602b      	str	r3, [r5, #0]
 800539e:	bd38      	pop	{r3, r4, r5, pc}
 80053a0:	200010dc 	.word	0x200010dc

080053a4 <__malloc_lock>:
 80053a4:	4770      	bx	lr

080053a6 <__malloc_unlock>:
 80053a6:	4770      	bx	lr

080053a8 <_malloc_usable_size_r>:
 80053a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053ac:	1f18      	subs	r0, r3, #4
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	bfbc      	itt	lt
 80053b2:	580b      	ldrlt	r3, [r1, r0]
 80053b4:	18c0      	addlt	r0, r0, r3
 80053b6:	4770      	bx	lr

080053b8 <_init>:
 80053b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053ba:	bf00      	nop
 80053bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053be:	bc08      	pop	{r3}
 80053c0:	469e      	mov	lr, r3
 80053c2:	4770      	bx	lr

080053c4 <_fini>:
 80053c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053c6:	bf00      	nop
 80053c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053ca:	bc08      	pop	{r3}
 80053cc:	469e      	mov	lr, r3
 80053ce:	4770      	bx	lr

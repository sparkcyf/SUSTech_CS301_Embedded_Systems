
NRFTest4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a944  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001914  0800ab2c  0800ab2c  0001ab2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c440  0800c440  00020098  2**0
                  CONTENTS
  4 .ARM          00000000  0800c440  0800c440  00020098  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c440  0800c440  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c440  0800c440  0001c440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c444  0800c444  0001c444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0800c448  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002d84  20000098  0800c4e0  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002e1c  0800c4e0  00022e1c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c81a  00000000  00000000  000200c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002595  00000000  00000000  0002c8db  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b60  00000000  00000000  0002ee70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a40  00000000  00000000  0002f9d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001af83  00000000  00000000  00030410  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b8fc  00000000  00000000  0004b393  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00093f01  00000000  00000000  00056c8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000eab90  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034b0  00000000  00000000  000eac0c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000098 	.word	0x20000098
 8000204:	00000000 	.word	0x00000000
 8000208:	0800ab14 	.word	0x0800ab14

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	2000009c 	.word	0x2000009c
 8000224:	0800ab14 	.word	0x0800ab14

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000366:	f1a4 0401 	sub.w	r4, r4, #1
 800036a:	d1e9      	bne.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__aeabi_d2uiz>:
 80009c4:	004a      	lsls	r2, r1, #1
 80009c6:	d211      	bcs.n	80009ec <__aeabi_d2uiz+0x28>
 80009c8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009cc:	d211      	bcs.n	80009f2 <__aeabi_d2uiz+0x2e>
 80009ce:	d50d      	bpl.n	80009ec <__aeabi_d2uiz+0x28>
 80009d0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009d4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009d8:	d40e      	bmi.n	80009f8 <__aeabi_d2uiz+0x34>
 80009da:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009e2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009e6:	fa23 f002 	lsr.w	r0, r3, r2
 80009ea:	4770      	bx	lr
 80009ec:	f04f 0000 	mov.w	r0, #0
 80009f0:	4770      	bx	lr
 80009f2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009f6:	d102      	bne.n	80009fe <__aeabi_d2uiz+0x3a>
 80009f8:	f04f 30ff 	mov.w	r0, #4294967295
 80009fc:	4770      	bx	lr
 80009fe:	f04f 0000 	mov.w	r0, #0
 8000a02:	4770      	bx	lr

08000a04 <NRF24L01_SPI_Init>:
const u8 TX_ADDRESS[TX_ADR_WIDTH]={0x34,0x43,0x10,0x10,0x01}; //发送地址
const u8 RX_ADDRESS[RX_ADR_WIDTH]={0x34,0x43,0x10,0x10,0x01}; //发送地址

//针对NRF24L01修改SPI1驱动
void NRF24L01_SPI_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
    __HAL_SPI_DISABLE(&SPI1_Handler);               //先关闭SPI1
 8000a08:	4b0d      	ldr	r3, [pc, #52]	; (8000a40 <NRF24L01_SPI_Init+0x3c>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	681a      	ldr	r2, [r3, #0]
 8000a0e:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <NRF24L01_SPI_Init+0x3c>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000a16:	601a      	str	r2, [r3, #0]
    SPI1_Handler.Init.CLKPolarity=SPI_POLARITY_LOW; //串行同步时钟的空闲状态为低电平
 8000a18:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <NRF24L01_SPI_Init+0x3c>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	611a      	str	r2, [r3, #16]
    SPI1_Handler.Init.CLKPhase=SPI_PHASE_1EDGE;     //串行同步时钟的第1个跳变沿（上升或下降）数据被采样
 8000a1e:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <NRF24L01_SPI_Init+0x3c>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	615a      	str	r2, [r3, #20]
    HAL_SPI_Init(&SPI1_Handler);
 8000a24:	4806      	ldr	r0, [pc, #24]	; (8000a40 <NRF24L01_SPI_Init+0x3c>)
 8000a26:	f008 fa53 	bl	8008ed0 <HAL_SPI_Init>
    __HAL_SPI_ENABLE(&SPI1_Handler);                //使能SPI1
 8000a2a:	4b05      	ldr	r3, [pc, #20]	; (8000a40 <NRF24L01_SPI_Init+0x3c>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	681a      	ldr	r2, [r3, #0]
 8000a30:	4b03      	ldr	r3, [pc, #12]	; (8000a40 <NRF24L01_SPI_Init+0x3c>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000a38:	601a      	str	r2, [r3, #0]
}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	20002dbc 	.word	0x20002dbc

08000a44 <NRF24L01_Init>:

//初始化24L01的IO口
void NRF24L01_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b086      	sub	sp, #24
 8000a48:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_Initure;
    __HAL_RCC_GPIOA_CLK_ENABLE();			//开启GPIOA时钟
 8000a4a:	4b2d      	ldr	r3, [pc, #180]	; (8000b00 <NRF24L01_Init+0xbc>)
 8000a4c:	699b      	ldr	r3, [r3, #24]
 8000a4e:	4a2c      	ldr	r2, [pc, #176]	; (8000b00 <NRF24L01_Init+0xbc>)
 8000a50:	f043 0304 	orr.w	r3, r3, #4
 8000a54:	6193      	str	r3, [r2, #24]
 8000a56:	4b2a      	ldr	r3, [pc, #168]	; (8000b00 <NRF24L01_Init+0xbc>)
 8000a58:	699b      	ldr	r3, [r3, #24]
 8000a5a:	f003 0304 	and.w	r3, r3, #4
 8000a5e:	607b      	str	r3, [r7, #4]
 8000a60:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();			//开启GPIOC时钟
 8000a62:	4b27      	ldr	r3, [pc, #156]	; (8000b00 <NRF24L01_Init+0xbc>)
 8000a64:	699b      	ldr	r3, [r3, #24]
 8000a66:	4a26      	ldr	r2, [pc, #152]	; (8000b00 <NRF24L01_Init+0xbc>)
 8000a68:	f043 0310 	orr.w	r3, r3, #16
 8000a6c:	6193      	str	r3, [r2, #24]
 8000a6e:	4b24      	ldr	r3, [pc, #144]	; (8000b00 <NRF24L01_Init+0xbc>)
 8000a70:	699b      	ldr	r3, [r3, #24]
 8000a72:	f003 0310 	and.w	r3, r3, #16
 8000a76:	603b      	str	r3, [r7, #0]
 8000a78:	683b      	ldr	r3, [r7, #0]
    
	//PA2,3,4初始化设置:推挽输出
    GPIO_Initure.Pin=GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4; 
 8000a7a:	231c      	movs	r3, #28
 8000a7c:	60bb      	str	r3, [r7, #8]
    GPIO_Initure.Mode=GPIO_MODE_OUTPUT_PP;  //推挽输出
 8000a7e:	2301      	movs	r3, #1
 8000a80:	60fb      	str	r3, [r7, #12]
    GPIO_Initure.Pull=GPIO_PULLUP;          //上拉
 8000a82:	2301      	movs	r3, #1
 8000a84:	613b      	str	r3, [r7, #16]
    GPIO_Initure.Speed=GPIO_SPEED_FREQ_HIGH;//高速
 8000a86:	2303      	movs	r3, #3
 8000a88:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA,&GPIO_Initure);     //初始化
 8000a8a:	f107 0308 	add.w	r3, r7, #8
 8000a8e:	4619      	mov	r1, r3
 8000a90:	481c      	ldr	r0, [pc, #112]	; (8000b04 <NRF24L01_Init+0xc0>)
 8000a92:	f007 fc67 	bl	8008364 <HAL_GPIO_Init>

	//PC4推挽输出
    GPIO_Initure.Pin=GPIO_PIN_4;			//PC4
 8000a96:	2310      	movs	r3, #16
 8000a98:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(GPIOC,&GPIO_Initure);     //初始化
 8000a9a:	f107 0308 	add.w	r3, r7, #8
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4819      	ldr	r0, [pc, #100]	; (8000b08 <NRF24L01_Init+0xc4>)
 8000aa2:	f007 fc5f 	bl	8008364 <HAL_GPIO_Init>
	
	//PA1上拉输入
	GPIO_Initure.Pin=GPIO_PIN_1;			//PA1
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	60bb      	str	r3, [r7, #8]
	GPIO_Initure.Mode=GPIO_MODE_INPUT;      //输入
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA,&GPIO_Initure);     //初始化
 8000aae:	f107 0308 	add.w	r3, r7, #8
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4813      	ldr	r0, [pc, #76]	; (8000b04 <NRF24L01_Init+0xc0>)
 8000ab6:	f007 fc55 	bl	8008364 <HAL_GPIO_Init>
	
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_SET);
 8000aba:	2201      	movs	r2, #1
 8000abc:	2102      	movs	r1, #2
 8000abe:	4811      	ldr	r0, [pc, #68]	; (8000b04 <NRF24L01_Init+0xc0>)
 8000ac0:	f007 fdd1 	bl	8008666 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_2,GPIO_PIN_SET);
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	2104      	movs	r1, #4
 8000ac8:	480e      	ldr	r0, [pc, #56]	; (8000b04 <NRF24L01_Init+0xc0>)
 8000aca:	f007 fdcc 	bl	8008666 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_3,GPIO_PIN_SET);
 8000ace:	2201      	movs	r2, #1
 8000ad0:	2108      	movs	r1, #8
 8000ad2:	480c      	ldr	r0, [pc, #48]	; (8000b04 <NRF24L01_Init+0xc0>)
 8000ad4:	f007 fdc7 	bl	8008666 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 8000ad8:	2201      	movs	r2, #1
 8000ada:	2110      	movs	r1, #16
 8000adc:	4809      	ldr	r0, [pc, #36]	; (8000b04 <NRF24L01_Init+0xc0>)
 8000ade:	f007 fdc2 	bl	8008666 <HAL_GPIO_WritePin>
    
	SPI1_Init();    		                //初始化SPI1
 8000ae2:	f006 ff77 	bl	80079d4 <SPI1_Init>
    NRF24L01_SPI_Init();                    //针对NRF的特点修改SPI的设置	
 8000ae6:	f7ff ff8d 	bl	8000a04 <NRF24L01_SPI_Init>
	NRF24L01_CE=0; 			                //使能24L01
 8000aea:	4b08      	ldr	r3, [pc, #32]	; (8000b0c <NRF24L01_Init+0xc8>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
	NRF24L01_CSN=1;			                //SPI片选取消	 		 	 
 8000af0:	4b07      	ldr	r3, [pc, #28]	; (8000b10 <NRF24L01_Init+0xcc>)
 8000af2:	2201      	movs	r2, #1
 8000af4:	601a      	str	r2, [r3, #0]
}
 8000af6:	bf00      	nop
 8000af8:	3718      	adds	r7, #24
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40021000 	.word	0x40021000
 8000b04:	40010800 	.word	0x40010800
 8000b08:	40011000 	.word	0x40011000
 8000b0c:	42210190 	.word	0x42210190
 8000b10:	42220190 	.word	0x42220190

08000b14 <NRF24L01_Check>:
//检测24L01是否存在
//返回值:0，成功;1，失败	
u8 NRF24L01_Check(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
	u8 buf[5]={0XA5,0XA5,0XA5,0XA5,0XA5};
 8000b1a:	4a19      	ldr	r2, [pc, #100]	; (8000b80 <NRF24L01_Check+0x6c>)
 8000b1c:	463b      	mov	r3, r7
 8000b1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b22:	6018      	str	r0, [r3, #0]
 8000b24:	3304      	adds	r3, #4
 8000b26:	7019      	strb	r1, [r3, #0]
	u8 i;
	SPI1_SetSpeed(SPI_BAUDRATEPRESCALER_8); //spi速度为10.5Mhz（（24L01的最大SPI时钟为10Mhz,这里大一点没关系）    	 
 8000b28:	2010      	movs	r0, #16
 8000b2a:	f006 ffc1 	bl	8007ab0 <SPI1_SetSpeed>
	NRF24L01_Write_Buf(NRF_WRITE_REG+TX_ADDR,buf,5);//写入5个字节的地址.	
 8000b2e:	463b      	mov	r3, r7
 8000b30:	2205      	movs	r2, #5
 8000b32:	4619      	mov	r1, r3
 8000b34:	2030      	movs	r0, #48	; 0x30
 8000b36:	f000 f88f 	bl	8000c58 <NRF24L01_Write_Buf>
	NRF24L01_Read_Buf(TX_ADDR,buf,5); //读出写入的地址  
 8000b3a:	463b      	mov	r3, r7
 8000b3c:	2205      	movs	r2, #5
 8000b3e:	4619      	mov	r1, r3
 8000b40:	2010      	movs	r0, #16
 8000b42:	f000 f85b 	bl	8000bfc <NRF24L01_Read_Buf>
	for(i=0;i<5;i++)if(buf[i]!=0XA5)break;	 							   
 8000b46:	2300      	movs	r3, #0
 8000b48:	71fb      	strb	r3, [r7, #7]
 8000b4a:	e00a      	b.n	8000b62 <NRF24L01_Check+0x4e>
 8000b4c:	79fb      	ldrb	r3, [r7, #7]
 8000b4e:	f107 0208 	add.w	r2, r7, #8
 8000b52:	4413      	add	r3, r2
 8000b54:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8000b58:	2ba5      	cmp	r3, #165	; 0xa5
 8000b5a:	d106      	bne.n	8000b6a <NRF24L01_Check+0x56>
 8000b5c:	79fb      	ldrb	r3, [r7, #7]
 8000b5e:	3301      	adds	r3, #1
 8000b60:	71fb      	strb	r3, [r7, #7]
 8000b62:	79fb      	ldrb	r3, [r7, #7]
 8000b64:	2b04      	cmp	r3, #4
 8000b66:	d9f1      	bls.n	8000b4c <NRF24L01_Check+0x38>
 8000b68:	e000      	b.n	8000b6c <NRF24L01_Check+0x58>
 8000b6a:	bf00      	nop
	if(i!=5)return 1;//检测24L01错误	
 8000b6c:	79fb      	ldrb	r3, [r7, #7]
 8000b6e:	2b05      	cmp	r3, #5
 8000b70:	d001      	beq.n	8000b76 <NRF24L01_Check+0x62>
 8000b72:	2301      	movs	r3, #1
 8000b74:	e000      	b.n	8000b78 <NRF24L01_Check+0x64>
	return 0;		 //检测到24L01
 8000b76:	2300      	movs	r3, #0
}	 	 
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3708      	adds	r7, #8
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	0800ab2c 	.word	0x0800ab2c

08000b84 <NRF24L01_Write_Reg>:
//SPI写寄存器
//reg:指定寄存器地址
//value:写入的值
u8 NRF24L01_Write_Reg(u8 reg,u8 value)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	460a      	mov	r2, r1
 8000b8e:	71fb      	strb	r3, [r7, #7]
 8000b90:	4613      	mov	r3, r2
 8000b92:	71bb      	strb	r3, [r7, #6]
	u8 status;	
   	NRF24L01_CSN=0;                 //使能SPI传输
 8000b94:	4b0a      	ldr	r3, [pc, #40]	; (8000bc0 <NRF24L01_Write_Reg+0x3c>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
  	status =SPI1_ReadWriteByte(reg);//发送寄存器号 
 8000b9a:	79fb      	ldrb	r3, [r7, #7]
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f006 ffb5 	bl	8007b0c <SPI1_ReadWriteByte>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	73fb      	strb	r3, [r7, #15]
  	SPI1_ReadWriteByte(value);      //写入寄存器的值
 8000ba6:	79bb      	ldrb	r3, [r7, #6]
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f006 ffaf 	bl	8007b0c <SPI1_ReadWriteByte>
  	NRF24L01_CSN=1;                 //禁止SPI传输	   
 8000bae:	4b04      	ldr	r3, [pc, #16]	; (8000bc0 <NRF24L01_Write_Reg+0x3c>)
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	601a      	str	r2, [r3, #0]
  	return(status);       		    //返回状态值
 8000bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3710      	adds	r7, #16
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	42220190 	.word	0x42220190

08000bc4 <NRF24L01_Read_Reg>:
//读取SPI寄存器值
//reg:要读的寄存器
u8 NRF24L01_Read_Reg(u8 reg)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b084      	sub	sp, #16
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	71fb      	strb	r3, [r7, #7]
	  u8 reg_val;	    
   	NRF24L01_CSN=0;             //使能SPI传输		
 8000bce:	4b0a      	ldr	r3, [pc, #40]	; (8000bf8 <NRF24L01_Read_Reg+0x34>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
  	SPI1_ReadWriteByte(reg);    //发送寄存器号
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f006 ff98 	bl	8007b0c <SPI1_ReadWriteByte>
  	reg_val=SPI1_ReadWriteByte(0XFF);//读取寄存器内容
 8000bdc:	20ff      	movs	r0, #255	; 0xff
 8000bde:	f006 ff95 	bl	8007b0c <SPI1_ReadWriteByte>
 8000be2:	4603      	mov	r3, r0
 8000be4:	73fb      	strb	r3, [r7, #15]
  	NRF24L01_CSN=1;             //禁止SPI传输		    
 8000be6:	4b04      	ldr	r3, [pc, #16]	; (8000bf8 <NRF24L01_Read_Reg+0x34>)
 8000be8:	2201      	movs	r2, #1
 8000bea:	601a      	str	r2, [r3, #0]
  	return(reg_val);            //返回状态值
 8000bec:	7bfb      	ldrb	r3, [r7, #15]
}	
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3710      	adds	r7, #16
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	42220190 	.word	0x42220190

08000bfc <NRF24L01_Read_Buf>:
//reg:寄存器(位置)
//*pBuf:数据指针
//len:数据长度
//返回值,此次读到的状态寄存器值 
u8 NRF24L01_Read_Buf(u8 reg,u8 *pBuf,u8 len)
{
 8000bfc:	b590      	push	{r4, r7, lr}
 8000bfe:	b085      	sub	sp, #20
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	6039      	str	r1, [r7, #0]
 8000c06:	71fb      	strb	r3, [r7, #7]
 8000c08:	4613      	mov	r3, r2
 8000c0a:	71bb      	strb	r3, [r7, #6]
	u8 status,u8_ctr;	       
  	NRF24L01_CSN=0;            //使能SPI传输
 8000c0c:	4b11      	ldr	r3, [pc, #68]	; (8000c54 <NRF24L01_Read_Buf+0x58>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]
  	status=SPI1_ReadWriteByte(reg);//发送寄存器值(位置),并读取状态值   	   
 8000c12:	79fb      	ldrb	r3, [r7, #7]
 8000c14:	4618      	mov	r0, r3
 8000c16:	f006 ff79 	bl	8007b0c <SPI1_ReadWriteByte>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	73bb      	strb	r3, [r7, #14]
	for(u8_ctr=0;u8_ctr<len;u8_ctr++)pBuf[u8_ctr]=SPI1_ReadWriteByte(0XFF);//读出数据
 8000c1e:	2300      	movs	r3, #0
 8000c20:	73fb      	strb	r3, [r7, #15]
 8000c22:	e00a      	b.n	8000c3a <NRF24L01_Read_Buf+0x3e>
 8000c24:	7bfb      	ldrb	r3, [r7, #15]
 8000c26:	683a      	ldr	r2, [r7, #0]
 8000c28:	18d4      	adds	r4, r2, r3
 8000c2a:	20ff      	movs	r0, #255	; 0xff
 8000c2c:	f006 ff6e 	bl	8007b0c <SPI1_ReadWriteByte>
 8000c30:	4603      	mov	r3, r0
 8000c32:	7023      	strb	r3, [r4, #0]
 8000c34:	7bfb      	ldrb	r3, [r7, #15]
 8000c36:	3301      	adds	r3, #1
 8000c38:	73fb      	strb	r3, [r7, #15]
 8000c3a:	7bfa      	ldrb	r2, [r7, #15]
 8000c3c:	79bb      	ldrb	r3, [r7, #6]
 8000c3e:	429a      	cmp	r2, r3
 8000c40:	d3f0      	bcc.n	8000c24 <NRF24L01_Read_Buf+0x28>
  	NRF24L01_CSN=1;            //关闭SPI传输
 8000c42:	4b04      	ldr	r3, [pc, #16]	; (8000c54 <NRF24L01_Read_Buf+0x58>)
 8000c44:	2201      	movs	r2, #1
 8000c46:	601a      	str	r2, [r3, #0]
  	return status;             //返回读到的状态值
 8000c48:	7bbb      	ldrb	r3, [r7, #14]
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3714      	adds	r7, #20
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd90      	pop	{r4, r7, pc}
 8000c52:	bf00      	nop
 8000c54:	42220190 	.word	0x42220190

08000c58 <NRF24L01_Write_Buf>:
//reg:寄存器(位置)
//*pBuf:数据指针
//len:数据长度
//返回值,此次读到的状态寄存器值
u8 NRF24L01_Write_Buf(u8 reg, u8 *pBuf, u8 len)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	6039      	str	r1, [r7, #0]
 8000c62:	71fb      	strb	r3, [r7, #7]
 8000c64:	4613      	mov	r3, r2
 8000c66:	71bb      	strb	r3, [r7, #6]
	u8 status,u8_ctr;	    
	NRF24L01_CSN=0;             //使能SPI传输
 8000c68:	4b10      	ldr	r3, [pc, #64]	; (8000cac <NRF24L01_Write_Buf+0x54>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
  	status = SPI1_ReadWriteByte(reg);//发送寄存器值(位置),并读取状态值
 8000c6e:	79fb      	ldrb	r3, [r7, #7]
 8000c70:	4618      	mov	r0, r3
 8000c72:	f006 ff4b 	bl	8007b0c <SPI1_ReadWriteByte>
 8000c76:	4603      	mov	r3, r0
 8000c78:	73bb      	strb	r3, [r7, #14]
  	for(u8_ctr=0; u8_ctr<len; u8_ctr++)SPI1_ReadWriteByte(*pBuf++); //写入数据	 
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	73fb      	strb	r3, [r7, #15]
 8000c7e:	e009      	b.n	8000c94 <NRF24L01_Write_Buf+0x3c>
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	1c5a      	adds	r2, r3, #1
 8000c84:	603a      	str	r2, [r7, #0]
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f006 ff3f 	bl	8007b0c <SPI1_ReadWriteByte>
 8000c8e:	7bfb      	ldrb	r3, [r7, #15]
 8000c90:	3301      	adds	r3, #1
 8000c92:	73fb      	strb	r3, [r7, #15]
 8000c94:	7bfa      	ldrb	r2, [r7, #15]
 8000c96:	79bb      	ldrb	r3, [r7, #6]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	d3f1      	bcc.n	8000c80 <NRF24L01_Write_Buf+0x28>
  	NRF24L01_CSN=1;             //关闭SPI传输
 8000c9c:	4b03      	ldr	r3, [pc, #12]	; (8000cac <NRF24L01_Write_Buf+0x54>)
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	601a      	str	r2, [r3, #0]
  	return status;              //返回读到的状态值
 8000ca2:	7bbb      	ldrb	r3, [r7, #14]
}				   
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	3710      	adds	r7, #16
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	42220190 	.word	0x42220190

08000cb0 <NRF24L01_TxPacket>:
//启动NRF24L01发送一次数据
//txbuf:待发送数据首地址
//返回值:发送完成状况
u8 NRF24L01_TxPacket(u8 *txbuf)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
	u8 sta;
 	SPI1_SetSpeed(SPI_BAUDRATEPRESCALER_8); //spi速度为6.75Mhz（24L01的最大SPI时钟为10Mhz）   
 8000cb8:	2010      	movs	r0, #16
 8000cba:	f006 fef9 	bl	8007ab0 <SPI1_SetSpeed>
	NRF24L01_CE=0;
 8000cbe:	4b18      	ldr	r3, [pc, #96]	; (8000d20 <NRF24L01_TxPacket+0x70>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
  	NRF24L01_Write_Buf(WR_TX_PLOAD,txbuf,TX_PLOAD_WIDTH);//写数据到TX BUF  32个字节
 8000cc4:	2220      	movs	r2, #32
 8000cc6:	6879      	ldr	r1, [r7, #4]
 8000cc8:	20a0      	movs	r0, #160	; 0xa0
 8000cca:	f7ff ffc5 	bl	8000c58 <NRF24L01_Write_Buf>
 	NRF24L01_CE=1;                         //启动发送	   
 8000cce:	4b14      	ldr	r3, [pc, #80]	; (8000d20 <NRF24L01_TxPacket+0x70>)
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	601a      	str	r2, [r3, #0]
	while(NRF24L01_IRQ!=0);                 //等待发送完成
 8000cd4:	bf00      	nop
 8000cd6:	4b13      	ldr	r3, [pc, #76]	; (8000d24 <NRF24L01_TxPacket+0x74>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d1fb      	bne.n	8000cd6 <NRF24L01_TxPacket+0x26>
	sta=NRF24L01_Read_Reg(STATUS);          //读取状态寄存器的值	   
 8000cde:	2007      	movs	r0, #7
 8000ce0:	f7ff ff70 	bl	8000bc4 <NRF24L01_Read_Reg>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	73fb      	strb	r3, [r7, #15]
	NRF24L01_Write_Reg(NRF_WRITE_REG+STATUS,sta); //清除TX_DS或MAX_RT中断标志
 8000ce8:	7bfb      	ldrb	r3, [r7, #15]
 8000cea:	4619      	mov	r1, r3
 8000cec:	2027      	movs	r0, #39	; 0x27
 8000cee:	f7ff ff49 	bl	8000b84 <NRF24L01_Write_Reg>
	if(sta&MAX_TX)                          //达到最大重发次数
 8000cf2:	7bfb      	ldrb	r3, [r7, #15]
 8000cf4:	f003 0310 	and.w	r3, r3, #16
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d005      	beq.n	8000d08 <NRF24L01_TxPacket+0x58>
	{
		NRF24L01_Write_Reg(FLUSH_TX,0xff);  //清除TX FIFO寄存器 
 8000cfc:	21ff      	movs	r1, #255	; 0xff
 8000cfe:	20e1      	movs	r0, #225	; 0xe1
 8000d00:	f7ff ff40 	bl	8000b84 <NRF24L01_Write_Reg>
		return MAX_TX; 
 8000d04:	2310      	movs	r3, #16
 8000d06:	e007      	b.n	8000d18 <NRF24L01_TxPacket+0x68>
	}
	if(sta&TX_OK)                           //发送完成
 8000d08:	7bfb      	ldrb	r3, [r7, #15]
 8000d0a:	f003 0320 	and.w	r3, r3, #32
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <NRF24L01_TxPacket+0x66>
	{
		return TX_OK;
 8000d12:	2320      	movs	r3, #32
 8000d14:	e000      	b.n	8000d18 <NRF24L01_TxPacket+0x68>
	}
	return 0xff;//其他原因发送失败
 8000d16:	23ff      	movs	r3, #255	; 0xff
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3710      	adds	r7, #16
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	42210190 	.word	0x42210190
 8000d24:	42210104 	.word	0x42210104

08000d28 <NRF24L01_RxPacket>:
//启动NRF24L01发送一次数据
//txbuf:待发送数据首地址
//返回值:0，接收完成；其他，错误代码
u8 NRF24L01_RxPacket(u8 *rxbuf)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b084      	sub	sp, #16
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
	u8 sta;		    							   
	SPI1_SetSpeed(SPI_BAUDRATEPRESCALER_8); //spi速度为6.75Mhz（24L01的最大SPI时钟为10Mhz）   
 8000d30:	2010      	movs	r0, #16
 8000d32:	f006 febd 	bl	8007ab0 <SPI1_SetSpeed>
	sta=NRF24L01_Read_Reg(STATUS);          //读取状态寄存器的值    	 
 8000d36:	2007      	movs	r0, #7
 8000d38:	f7ff ff44 	bl	8000bc4 <NRF24L01_Read_Reg>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	73fb      	strb	r3, [r7, #15]
	NRF24L01_Write_Reg(NRF_WRITE_REG+STATUS,sta); //清除TX_DS或MAX_RT中断标志
 8000d40:	7bfb      	ldrb	r3, [r7, #15]
 8000d42:	4619      	mov	r1, r3
 8000d44:	2027      	movs	r0, #39	; 0x27
 8000d46:	f7ff ff1d 	bl	8000b84 <NRF24L01_Write_Reg>
	if(sta&RX_OK)//接收到数据
 8000d4a:	7bfb      	ldrb	r3, [r7, #15]
 8000d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d00a      	beq.n	8000d6a <NRF24L01_RxPacket+0x42>
	{
		NRF24L01_Read_Buf(RD_RX_PLOAD,rxbuf,RX_PLOAD_WIDTH);//读取数据
 8000d54:	2220      	movs	r2, #32
 8000d56:	6879      	ldr	r1, [r7, #4]
 8000d58:	2061      	movs	r0, #97	; 0x61
 8000d5a:	f7ff ff4f 	bl	8000bfc <NRF24L01_Read_Buf>
		NRF24L01_Write_Reg(FLUSH_RX,0xff);  //清除RX FIFO寄存器 
 8000d5e:	21ff      	movs	r1, #255	; 0xff
 8000d60:	20e2      	movs	r0, #226	; 0xe2
 8000d62:	f7ff ff0f 	bl	8000b84 <NRF24L01_Write_Reg>
		return 0; 
 8000d66:	2300      	movs	r3, #0
 8000d68:	e000      	b.n	8000d6c <NRF24L01_RxPacket+0x44>
	}	   
	return 1;//没收到任何数据
 8000d6a:	2301      	movs	r3, #1
}					    
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3710      	adds	r7, #16
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <NRF24L01_RX_Mode>:
//该函数初始化NRF24L01到RX模式
//设置RX地址,写RX数据宽度,选择RF频道,波特率和LNA HCURR
//当CE变高后,即进入RX模式,并可以接收数据了		   
void NRF24L01_RX_Mode(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
	NRF24L01_CE=0;	  
 8000d78:	4b12      	ldr	r3, [pc, #72]	; (8000dc4 <NRF24L01_RX_Mode+0x50>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
  	NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P0,(u8*)RX_ADDRESS,RX_ADR_WIDTH);//写RX节点地址
 8000d7e:	2205      	movs	r2, #5
 8000d80:	4911      	ldr	r1, [pc, #68]	; (8000dc8 <NRF24L01_RX_Mode+0x54>)
 8000d82:	202a      	movs	r0, #42	; 0x2a
 8000d84:	f7ff ff68 	bl	8000c58 <NRF24L01_Write_Buf>
	  
  	NRF24L01_Write_Reg(NRF_WRITE_REG+EN_AA,0x01);       //使能通道0的自动应答    
 8000d88:	2101      	movs	r1, #1
 8000d8a:	2021      	movs	r0, #33	; 0x21
 8000d8c:	f7ff fefa 	bl	8000b84 <NRF24L01_Write_Reg>
  	NRF24L01_Write_Reg(NRF_WRITE_REG+EN_RXADDR,0x01);   //使能通道0的接收地址  	 
 8000d90:	2101      	movs	r1, #1
 8000d92:	2022      	movs	r0, #34	; 0x22
 8000d94:	f7ff fef6 	bl	8000b84 <NRF24L01_Write_Reg>
  	NRF24L01_Write_Reg(NRF_WRITE_REG+RF_CH,40);	        //设置RF通信频率		  
 8000d98:	2128      	movs	r1, #40	; 0x28
 8000d9a:	2025      	movs	r0, #37	; 0x25
 8000d9c:	f7ff fef2 	bl	8000b84 <NRF24L01_Write_Reg>
  	NRF24L01_Write_Reg(NRF_WRITE_REG+RX_PW_P0,RX_PLOAD_WIDTH);//选择通道0的有效数据宽度 	    
 8000da0:	2120      	movs	r1, #32
 8000da2:	2031      	movs	r0, #49	; 0x31
 8000da4:	f7ff feee 	bl	8000b84 <NRF24L01_Write_Reg>
  	NRF24L01_Write_Reg(NRF_WRITE_REG+RF_SETUP,0x0f);    //设置TX发射参数,0db增益,2Mbps,低噪声增益开启   
 8000da8:	210f      	movs	r1, #15
 8000daa:	2026      	movs	r0, #38	; 0x26
 8000dac:	f7ff feea 	bl	8000b84 <NRF24L01_Write_Reg>
  	NRF24L01_Write_Reg(NRF_WRITE_REG+CONFIG, 0x0f);     //配置基本工作模式的参数;PWR_UP,EN_CRC,16BIT_CRC,接收模式 
 8000db0:	210f      	movs	r1, #15
 8000db2:	2020      	movs	r0, #32
 8000db4:	f7ff fee6 	bl	8000b84 <NRF24L01_Write_Reg>
  	NRF24L01_CE=1; //CE为高,进入接收模式 
 8000db8:	4b02      	ldr	r3, [pc, #8]	; (8000dc4 <NRF24L01_RX_Mode+0x50>)
 8000dba:	2201      	movs	r2, #1
 8000dbc:	601a      	str	r2, [r3, #0]
}						 
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	42210190 	.word	0x42210190
 8000dc8:	0800abc8 	.word	0x0800abc8

08000dcc <NRF24L01_TX_Mode>:
//设置TX地址,写TX数据宽度,设置RX自动应答的地址,填充TX发送数据,选择RF频道,波特率和LNA HCURR
//PWR_UP,CRC使能
//当CE变高后,即进入RX模式,并可以接收数据了		   
//CE为高大于10us,则启动发送.	 
void NRF24L01_TX_Mode(void)
{														 
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
	NRF24L01_CE=0;	    
 8000dd0:	4b14      	ldr	r3, [pc, #80]	; (8000e24 <NRF24L01_TX_Mode+0x58>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	601a      	str	r2, [r3, #0]
	NRF24L01_Write_Buf(NRF_WRITE_REG+TX_ADDR,(u8*)TX_ADDRESS,TX_ADR_WIDTH);//写TX节点地址 
 8000dd6:	2205      	movs	r2, #5
 8000dd8:	4913      	ldr	r1, [pc, #76]	; (8000e28 <NRF24L01_TX_Mode+0x5c>)
 8000dda:	2030      	movs	r0, #48	; 0x30
 8000ddc:	f7ff ff3c 	bl	8000c58 <NRF24L01_Write_Buf>
	NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P0,(u8*)RX_ADDRESS,RX_ADR_WIDTH); //设置TX节点地址,主要为了使能ACK	  
 8000de0:	2205      	movs	r2, #5
 8000de2:	4912      	ldr	r1, [pc, #72]	; (8000e2c <NRF24L01_TX_Mode+0x60>)
 8000de4:	202a      	movs	r0, #42	; 0x2a
 8000de6:	f7ff ff37 	bl	8000c58 <NRF24L01_Write_Buf>

	NRF24L01_Write_Reg(NRF_WRITE_REG+EN_AA,0x01);     //使能通道0的自动应答    
 8000dea:	2101      	movs	r1, #1
 8000dec:	2021      	movs	r0, #33	; 0x21
 8000dee:	f7ff fec9 	bl	8000b84 <NRF24L01_Write_Reg>
	NRF24L01_Write_Reg(NRF_WRITE_REG+EN_RXADDR,0x01); //使能通道0的接收地址  
 8000df2:	2101      	movs	r1, #1
 8000df4:	2022      	movs	r0, #34	; 0x22
 8000df6:	f7ff fec5 	bl	8000b84 <NRF24L01_Write_Reg>
	NRF24L01_Write_Reg(NRF_WRITE_REG+SETUP_RETR,0x1a);//设置自动重发间隔时间:500us + 86us;最大自动重发次数:10次
 8000dfa:	211a      	movs	r1, #26
 8000dfc:	2024      	movs	r0, #36	; 0x24
 8000dfe:	f7ff fec1 	bl	8000b84 <NRF24L01_Write_Reg>
	NRF24L01_Write_Reg(NRF_WRITE_REG+RF_CH,40);       //设置RF通道为40*
 8000e02:	2128      	movs	r1, #40	; 0x28
 8000e04:	2025      	movs	r0, #37	; 0x25
 8000e06:	f7ff febd 	bl	8000b84 <NRF24L01_Write_Reg>
	NRF24L01_Write_Reg(NRF_WRITE_REG+RF_SETUP,0x0f);  //设置TX发射参数,0db增益,2Mbps,低噪声增益开启   
 8000e0a:	210f      	movs	r1, #15
 8000e0c:	2026      	movs	r0, #38	; 0x26
 8000e0e:	f7ff feb9 	bl	8000b84 <NRF24L01_Write_Reg>
	NRF24L01_Write_Reg(NRF_WRITE_REG+CONFIG,0x0e);    //配置基本工作模式的参数;PWR_UP,EN_CRC,16BIT_CRC,接收模式,开启所有中断
 8000e12:	210e      	movs	r1, #14
 8000e14:	2020      	movs	r0, #32
 8000e16:	f7ff feb5 	bl	8000b84 <NRF24L01_Write_Reg>
	NRF24L01_CE=1;//CE为高,10us后启动发送
 8000e1a:	4b02      	ldr	r3, [pc, #8]	; (8000e24 <NRF24L01_TX_Mode+0x58>)
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	601a      	str	r2, [r3, #0]
}
 8000e20:	bf00      	nop
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	42210190 	.word	0x42210190
 8000e28:	0800abc0 	.word	0x0800abc0
 8000e2c:	0800abc8 	.word	0x0800abc8

08000e30 <delay_init>:
//初始化延迟函数
//当使用ucos的时候,此函数会初始化ucos的时钟节拍
//SYSTICK的时钟固定为AHB时钟
//SYSCLK:系统时钟频率
void delay_init(u8 SYSCLK)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4603      	mov	r3, r0
 8000e38:	71fb      	strb	r3, [r7, #7]
#if SYSTEM_SUPPORT_OS 						//如果需要支持OS.
	u32 reload;
#endif
    HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);//SysTick频率为HCLK
 8000e3a:	2004      	movs	r0, #4
 8000e3c:	f007 f96e 	bl	800811c <HAL_SYSTICK_CLKSourceConfig>
	fac_us=SYSCLK;						//不论是否使用OS,fac_us都需要使用
 8000e40:	79fb      	ldrb	r3, [r7, #7]
 8000e42:	4a03      	ldr	r2, [pc, #12]	; (8000e50 <delay_init+0x20>)
 8000e44:	6013      	str	r3, [r2, #0]
	SysTick->CTRL|=SysTick_CTRL_TICKINT_Msk;//开启SYSTICK中断
	SysTick->LOAD=reload; 					//每1/OS_TICKS_PER_SEC秒中断一次	
	SysTick->CTRL|=SysTick_CTRL_ENABLE_Msk; //开启SYSTICK
#else
#endif
}								    
 8000e46:	bf00      	nop
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	200000b4 	.word	0x200000b4

08000e54 <delay_us>:

//延时nus
//nus为要延时的us数.	
//nus:0~190887435(最大值即2^32/fac_us@fac_us=22.5)	 
void delay_us(u32 nus)
{		
 8000e54:	b480      	push	{r7}
 8000e56:	b089      	sub	sp, #36	; 0x24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
	u32 ticks;
	u32 told,tnow,tcnt=0;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	61bb      	str	r3, [r7, #24]
	u32 reload=SysTick->LOAD;				//LOAD的值	    	 
 8000e60:	4b19      	ldr	r3, [pc, #100]	; (8000ec8 <delay_us+0x74>)
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	617b      	str	r3, [r7, #20]
	ticks=nus*fac_us; 						//需要的节拍数 
 8000e66:	4b19      	ldr	r3, [pc, #100]	; (8000ecc <delay_us+0x78>)
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	fb02 f303 	mul.w	r3, r2, r3
 8000e70:	613b      	str	r3, [r7, #16]
	told=SysTick->VAL;        				//刚进入时的计数器值
 8000e72:	4b15      	ldr	r3, [pc, #84]	; (8000ec8 <delay_us+0x74>)
 8000e74:	689b      	ldr	r3, [r3, #8]
 8000e76:	61fb      	str	r3, [r7, #28]
	while(1)
	{
		tnow=SysTick->VAL;	
 8000e78:	4b13      	ldr	r3, [pc, #76]	; (8000ec8 <delay_us+0x74>)
 8000e7a:	689b      	ldr	r3, [r3, #8]
 8000e7c:	60fb      	str	r3, [r7, #12]
		if(tnow!=told)
 8000e7e:	68fa      	ldr	r2, [r7, #12]
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	429a      	cmp	r2, r3
 8000e84:	d0f8      	beq.n	8000e78 <delay_us+0x24>
		{	    
			if(tnow<told)tcnt+=told-tnow;	//这里注意一下SYSTICK是一个递减的计数器就可以了.
 8000e86:	68fa      	ldr	r2, [r7, #12]
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	d206      	bcs.n	8000e9c <delay_us+0x48>
 8000e8e:	69fa      	ldr	r2, [r7, #28]
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	1ad3      	subs	r3, r2, r3
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	4413      	add	r3, r2
 8000e98:	61bb      	str	r3, [r7, #24]
 8000e9a:	e007      	b.n	8000eac <delay_us+0x58>
			else tcnt+=reload-tnow+told;	    
 8000e9c:	697a      	ldr	r2, [r7, #20]
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	1ad2      	subs	r2, r2, r3
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	61bb      	str	r3, [r7, #24]
			told=tnow;
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	61fb      	str	r3, [r7, #28]
			if(tcnt>=ticks)break;			//时间超过/等于要延迟的时间,则退出.
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d200      	bcs.n	8000eba <delay_us+0x66>
		tnow=SysTick->VAL;	
 8000eb8:	e7de      	b.n	8000e78 <delay_us+0x24>
			if(tcnt>=ticks)break;			//时间超过/等于要延迟的时间,则退出.
 8000eba:	bf00      	nop
		}  
	};
}
 8000ebc:	bf00      	nop
 8000ebe:	3724      	adds	r7, #36	; 0x24
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bc80      	pop	{r7}
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	e000e010 	.word	0xe000e010
 8000ecc:	200000b4 	.word	0x200000b4

08000ed0 <delay_ms>:

//延时nms
//nms:要延时的ms数
void delay_ms(u16 nms)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	80fb      	strh	r3, [r7, #6]
	u32 i;
	for(i=0;i<nms;i++) delay_us(1000);
 8000eda:	2300      	movs	r3, #0
 8000edc:	60fb      	str	r3, [r7, #12]
 8000ede:	e006      	b.n	8000eee <delay_ms+0x1e>
 8000ee0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ee4:	f7ff ffb6 	bl	8000e54 <delay_us>
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	3301      	adds	r3, #1
 8000eec:	60fb      	str	r3, [r7, #12]
 8000eee:	88fb      	ldrh	r3, [r7, #6]
 8000ef0:	68fa      	ldr	r2, [r7, #12]
 8000ef2:	429a      	cmp	r2, r3
 8000ef4:	d3f4      	bcc.n	8000ee0 <delay_ms+0x10>
}
 8000ef6:	bf00      	nop
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
	...

08000f00 <KEY_Init>:
//All rights reserved
//////////////////////////////////////////////////////////////////////////////////

//按键初始化函数
void KEY_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b086      	sub	sp, #24
 8000f04:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_Initure;

    __HAL_RCC_GPIOA_CLK_ENABLE();           //开启GPIOA时钟
 8000f06:	4b1f      	ldr	r3, [pc, #124]	; (8000f84 <KEY_Init+0x84>)
 8000f08:	699b      	ldr	r3, [r3, #24]
 8000f0a:	4a1e      	ldr	r2, [pc, #120]	; (8000f84 <KEY_Init+0x84>)
 8000f0c:	f043 0304 	orr.w	r3, r3, #4
 8000f10:	6193      	str	r3, [r2, #24]
 8000f12:	4b1c      	ldr	r3, [pc, #112]	; (8000f84 <KEY_Init+0x84>)
 8000f14:	699b      	ldr	r3, [r3, #24]
 8000f16:	f003 0304 	and.w	r3, r3, #4
 8000f1a:	607b      	str	r3, [r7, #4]
 8000f1c:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();           //开启GPIOC时钟
 8000f1e:	4b19      	ldr	r3, [pc, #100]	; (8000f84 <KEY_Init+0x84>)
 8000f20:	699b      	ldr	r3, [r3, #24]
 8000f22:	4a18      	ldr	r2, [pc, #96]	; (8000f84 <KEY_Init+0x84>)
 8000f24:	f043 0310 	orr.w	r3, r3, #16
 8000f28:	6193      	str	r3, [r2, #24]
 8000f2a:	4b16      	ldr	r3, [pc, #88]	; (8000f84 <KEY_Init+0x84>)
 8000f2c:	699b      	ldr	r3, [r3, #24]
 8000f2e:	f003 0310 	and.w	r3, r3, #16
 8000f32:	603b      	str	r3, [r7, #0]
 8000f34:	683b      	ldr	r3, [r7, #0]


    GPIO_Initure.Pin=GPIO_PIN_0;            //PA0
 8000f36:	2301      	movs	r3, #1
 8000f38:	60bb      	str	r3, [r7, #8]
    GPIO_Initure.Mode=GPIO_MODE_INPUT;      //输入
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60fb      	str	r3, [r7, #12]
    GPIO_Initure.Pull=GPIO_PULLDOWN;        //下拉
 8000f3e:	2302      	movs	r3, #2
 8000f40:	613b      	str	r3, [r7, #16]
    GPIO_Initure.Speed=GPIO_SPEED_FREQ_HIGH;//高速
 8000f42:	2303      	movs	r3, #3
 8000f44:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA,&GPIO_Initure);
 8000f46:	f107 0308 	add.w	r3, r7, #8
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	480e      	ldr	r0, [pc, #56]	; (8000f88 <KEY_Init+0x88>)
 8000f4e:	f007 fa09 	bl	8008364 <HAL_GPIO_Init>

	GPIO_Initure.Pin=GPIO_PIN_15; 			//PA15
 8000f52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f56:	60bb      	str	r3, [r7, #8]
    GPIO_Initure.Pull=GPIO_PULLUP;          //上拉
 8000f58:	2301      	movs	r3, #1
 8000f5a:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOA,&GPIO_Initure);
 8000f5c:	f107 0308 	add.w	r3, r7, #8
 8000f60:	4619      	mov	r1, r3
 8000f62:	4809      	ldr	r0, [pc, #36]	; (8000f88 <KEY_Init+0x88>)
 8000f64:	f007 f9fe 	bl	8008364 <HAL_GPIO_Init>

	GPIO_Initure.Pin=GPIO_PIN_5; 			//PC5
 8000f68:	2320      	movs	r3, #32
 8000f6a:	60bb      	str	r3, [r7, #8]
    GPIO_Initure.Pull=GPIO_PULLUP;          //上拉
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOC,&GPIO_Initure);
 8000f70:	f107 0308 	add.w	r3, r7, #8
 8000f74:	4619      	mov	r1, r3
 8000f76:	4805      	ldr	r0, [pc, #20]	; (8000f8c <KEY_Init+0x8c>)
 8000f78:	f007 f9f4 	bl	8008364 <HAL_GPIO_Init>
}
 8000f7c:	bf00      	nop
 8000f7e:	3718      	adds	r7, #24
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40021000 	.word	0x40021000
 8000f88:	40010800 	.word	0x40010800
 8000f8c:	40011000 	.word	0x40011000

08000f90 <KEY_Scan>:
//mode:0,不支持连续按;1,支持连续按;
//0，没有任何按键按下
//1，WKUP按下 WK_UP
//注意此函数有响应优先级,KEY0>KEY1>KEY2>WK_UP!!
u8 KEY_Scan(u8 mode)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	71fb      	strb	r3, [r7, #7]
    static u8 key_up=1;     //按键松开标志
    if(mode==1)key_up=1;    //支持连按
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d102      	bne.n	8000fa6 <KEY_Scan+0x16>
 8000fa0:	4b2f      	ldr	r3, [pc, #188]	; (8001060 <KEY_Scan+0xd0>)
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	701a      	strb	r2, [r3, #0]
    if(key_up&&(KEY0==0||KEY1==0||WK_UP==1))
 8000fa6:	4b2e      	ldr	r3, [pc, #184]	; (8001060 <KEY_Scan+0xd0>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d037      	beq.n	800101e <KEY_Scan+0x8e>
 8000fae:	2120      	movs	r1, #32
 8000fb0:	482c      	ldr	r0, [pc, #176]	; (8001064 <KEY_Scan+0xd4>)
 8000fb2:	f007 fb41 	bl	8008638 <HAL_GPIO_ReadPin>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d00e      	beq.n	8000fda <KEY_Scan+0x4a>
 8000fbc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fc0:	4829      	ldr	r0, [pc, #164]	; (8001068 <KEY_Scan+0xd8>)
 8000fc2:	f007 fb39 	bl	8008638 <HAL_GPIO_ReadPin>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d006      	beq.n	8000fda <KEY_Scan+0x4a>
 8000fcc:	2101      	movs	r1, #1
 8000fce:	4826      	ldr	r0, [pc, #152]	; (8001068 <KEY_Scan+0xd8>)
 8000fd0:	f007 fb32 	bl	8008638 <HAL_GPIO_ReadPin>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d121      	bne.n	800101e <KEY_Scan+0x8e>
    {
        delay_ms(10);
 8000fda:	200a      	movs	r0, #10
 8000fdc:	f7ff ff78 	bl	8000ed0 <delay_ms>
        key_up=0;
 8000fe0:	4b1f      	ldr	r3, [pc, #124]	; (8001060 <KEY_Scan+0xd0>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	701a      	strb	r2, [r3, #0]
        if(KEY0==0)       return KEY0_PRES;
 8000fe6:	2120      	movs	r1, #32
 8000fe8:	481e      	ldr	r0, [pc, #120]	; (8001064 <KEY_Scan+0xd4>)
 8000fea:	f007 fb25 	bl	8008638 <HAL_GPIO_ReadPin>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d101      	bne.n	8000ff8 <KEY_Scan+0x68>
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	e02e      	b.n	8001056 <KEY_Scan+0xc6>
        else if(KEY1==0)  return KEY1_PRES;
 8000ff8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ffc:	481a      	ldr	r0, [pc, #104]	; (8001068 <KEY_Scan+0xd8>)
 8000ffe:	f007 fb1b 	bl	8008638 <HAL_GPIO_ReadPin>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d101      	bne.n	800100c <KEY_Scan+0x7c>
 8001008:	2302      	movs	r3, #2
 800100a:	e024      	b.n	8001056 <KEY_Scan+0xc6>
        else if(WK_UP==1) return WKUP_PRES;
 800100c:	2101      	movs	r1, #1
 800100e:	4816      	ldr	r0, [pc, #88]	; (8001068 <KEY_Scan+0xd8>)
 8001010:	f007 fb12 	bl	8008638 <HAL_GPIO_ReadPin>
 8001014:	4603      	mov	r3, r0
 8001016:	2b01      	cmp	r3, #1
 8001018:	d11b      	bne.n	8001052 <KEY_Scan+0xc2>
 800101a:	2303      	movs	r3, #3
 800101c:	e01b      	b.n	8001056 <KEY_Scan+0xc6>
    }else if(KEY0==1&&KEY1==1&&WK_UP==0)key_up=1;
 800101e:	2120      	movs	r1, #32
 8001020:	4810      	ldr	r0, [pc, #64]	; (8001064 <KEY_Scan+0xd4>)
 8001022:	f007 fb09 	bl	8008638 <HAL_GPIO_ReadPin>
 8001026:	4603      	mov	r3, r0
 8001028:	2b01      	cmp	r3, #1
 800102a:	d113      	bne.n	8001054 <KEY_Scan+0xc4>
 800102c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001030:	480d      	ldr	r0, [pc, #52]	; (8001068 <KEY_Scan+0xd8>)
 8001032:	f007 fb01 	bl	8008638 <HAL_GPIO_ReadPin>
 8001036:	4603      	mov	r3, r0
 8001038:	2b01      	cmp	r3, #1
 800103a:	d10b      	bne.n	8001054 <KEY_Scan+0xc4>
 800103c:	2101      	movs	r1, #1
 800103e:	480a      	ldr	r0, [pc, #40]	; (8001068 <KEY_Scan+0xd8>)
 8001040:	f007 fafa 	bl	8008638 <HAL_GPIO_ReadPin>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d104      	bne.n	8001054 <KEY_Scan+0xc4>
 800104a:	4b05      	ldr	r3, [pc, #20]	; (8001060 <KEY_Scan+0xd0>)
 800104c:	2201      	movs	r2, #1
 800104e:	701a      	strb	r2, [r3, #0]
 8001050:	e000      	b.n	8001054 <KEY_Scan+0xc4>
        if(KEY0==0)       return KEY0_PRES;
 8001052:	bf00      	nop
    return 0;   //无按键按下
 8001054:	2300      	movs	r3, #0
}
 8001056:	4618      	mov	r0, r3
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	20000000 	.word	0x20000000
 8001064:	40011000 	.word	0x40011000
 8001068:	40010800 	.word	0x40010800

0800106c <LCD_WR_REG>:
_lcd_dev lcddev;
	 					    
//д�Ĵ�������
//data:�Ĵ���ֵ
void LCD_WR_REG(u16 data)
{ 
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	80fb      	strh	r3, [r7, #6]
	LCD_RS_CLR;//д��ַ  
 8001076:	4b0d      	ldr	r3, [pc, #52]	; (80010ac <LCD_WR_REG+0x40>)
 8001078:	f44f 7280 	mov.w	r2, #256	; 0x100
 800107c:	615a      	str	r2, [r3, #20]
 	LCD_CS_CLR; 
 800107e:	4b0b      	ldr	r3, [pc, #44]	; (80010ac <LCD_WR_REG+0x40>)
 8001080:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001084:	615a      	str	r2, [r3, #20]
	DATAOUT(data); 
 8001086:	4a0a      	ldr	r2, [pc, #40]	; (80010b0 <LCD_WR_REG+0x44>)
 8001088:	88fb      	ldrh	r3, [r7, #6]
 800108a:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR; 
 800108c:	4b07      	ldr	r3, [pc, #28]	; (80010ac <LCD_WR_REG+0x40>)
 800108e:	2280      	movs	r2, #128	; 0x80
 8001090:	615a      	str	r2, [r3, #20]
	LCD_WR_SET; 
 8001092:	4b06      	ldr	r3, [pc, #24]	; (80010ac <LCD_WR_REG+0x40>)
 8001094:	2280      	movs	r2, #128	; 0x80
 8001096:	611a      	str	r2, [r3, #16]
 	LCD_CS_SET;   
 8001098:	4b04      	ldr	r3, [pc, #16]	; (80010ac <LCD_WR_REG+0x40>)
 800109a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800109e:	611a      	str	r2, [r3, #16]
}
 80010a0:	bf00      	nop
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bc80      	pop	{r7}
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	40011000 	.word	0x40011000
 80010b0:	40010c00 	.word	0x40010c00

080010b4 <LCD_WR_DATAX>:
//д���ݺ���
//�������LCD_WR_DATAX��,��ʱ�任�ռ�.
//data:�Ĵ���ֵ
void LCD_WR_DATAX(u16 data)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	80fb      	strh	r3, [r7, #6]
	LCD_RS_SET;
 80010be:	4b0d      	ldr	r3, [pc, #52]	; (80010f4 <LCD_WR_DATAX+0x40>)
 80010c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010c4:	611a      	str	r2, [r3, #16]
	LCD_CS_CLR;
 80010c6:	4b0b      	ldr	r3, [pc, #44]	; (80010f4 <LCD_WR_DATAX+0x40>)
 80010c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010cc:	615a      	str	r2, [r3, #20]
	DATAOUT(data);
 80010ce:	4a0a      	ldr	r2, [pc, #40]	; (80010f8 <LCD_WR_DATAX+0x44>)
 80010d0:	88fb      	ldrh	r3, [r7, #6]
 80010d2:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR;
 80010d4:	4b07      	ldr	r3, [pc, #28]	; (80010f4 <LCD_WR_DATAX+0x40>)
 80010d6:	2280      	movs	r2, #128	; 0x80
 80010d8:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 80010da:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <LCD_WR_DATAX+0x40>)
 80010dc:	2280      	movs	r2, #128	; 0x80
 80010de:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 80010e0:	4b04      	ldr	r3, [pc, #16]	; (80010f4 <LCD_WR_DATAX+0x40>)
 80010e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010e6:	611a      	str	r2, [r3, #16]
}
 80010e8:	bf00      	nop
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bc80      	pop	{r7}
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	40011000 	.word	0x40011000
 80010f8:	40010c00 	.word	0x40010c00

080010fc <LCD_RD_DATA>:
//��LCD����
//����ֵ:������ֵ
u16 LCD_RD_DATA(void)
{										   
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
	u16 t;
 	GPIOB->CRL=0X88888888; //PB0-7  ��������
 8001102:	4b1d      	ldr	r3, [pc, #116]	; (8001178 <LCD_RD_DATA+0x7c>)
 8001104:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8001108:	601a      	str	r2, [r3, #0]
	GPIOB->CRH=0X88888888; //PB8-15 ��������
 800110a:	4b1b      	ldr	r3, [pc, #108]	; (8001178 <LCD_RD_DATA+0x7c>)
 800110c:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8001110:	605a      	str	r2, [r3, #4]
	GPIOB->ODR=0X0000;     //ȫ�����0
 8001112:	4b19      	ldr	r3, [pc, #100]	; (8001178 <LCD_RD_DATA+0x7c>)
 8001114:	2200      	movs	r2, #0
 8001116:	60da      	str	r2, [r3, #12]

	LCD_RS_SET;
 8001118:	4b18      	ldr	r3, [pc, #96]	; (800117c <LCD_RD_DATA+0x80>)
 800111a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800111e:	611a      	str	r2, [r3, #16]
	LCD_CS_CLR;
 8001120:	4b16      	ldr	r3, [pc, #88]	; (800117c <LCD_RD_DATA+0x80>)
 8001122:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001126:	615a      	str	r2, [r3, #20]
	//��ȡ����(���Ĵ���ʱ,������Ҫ��2��)
	LCD_RD_CLR;
 8001128:	4b14      	ldr	r3, [pc, #80]	; (800117c <LCD_RD_DATA+0x80>)
 800112a:	2240      	movs	r2, #64	; 0x40
 800112c:	615a      	str	r2, [r3, #20]
	if(lcddev.id==0X8989)delay_us(2);//FOR 8989,��ʱ2us					   
 800112e:	4b14      	ldr	r3, [pc, #80]	; (8001180 <LCD_RD_DATA+0x84>)
 8001130:	889b      	ldrh	r3, [r3, #4]
 8001132:	f648 1289 	movw	r2, #35209	; 0x8989
 8001136:	4293      	cmp	r3, r2
 8001138:	d102      	bne.n	8001140 <LCD_RD_DATA+0x44>
 800113a:	2002      	movs	r0, #2
 800113c:	f7ff fe8a 	bl	8000e54 <delay_us>
	t=DATAIN;  
 8001140:	4b0d      	ldr	r3, [pc, #52]	; (8001178 <LCD_RD_DATA+0x7c>)
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	80fb      	strh	r3, [r7, #6]
	LCD_RD_SET;
 8001146:	4b0d      	ldr	r3, [pc, #52]	; (800117c <LCD_RD_DATA+0x80>)
 8001148:	2240      	movs	r2, #64	; 0x40
 800114a:	611a      	str	r2, [r3, #16]
	LCD_CS_SET; 
 800114c:	4b0b      	ldr	r3, [pc, #44]	; (800117c <LCD_RD_DATA+0x80>)
 800114e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001152:	611a      	str	r2, [r3, #16]

	GPIOB->CRL=0X33333333; //PB0-7  �������
 8001154:	4b08      	ldr	r3, [pc, #32]	; (8001178 <LCD_RD_DATA+0x7c>)
 8001156:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 800115a:	601a      	str	r2, [r3, #0]
	GPIOB->CRH=0X33333333; //PB8-15 �������
 800115c:	4b06      	ldr	r3, [pc, #24]	; (8001178 <LCD_RD_DATA+0x7c>)
 800115e:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8001162:	605a      	str	r2, [r3, #4]
	GPIOB->ODR=0XFFFF;    //ȫ�������
 8001164:	4b04      	ldr	r3, [pc, #16]	; (8001178 <LCD_RD_DATA+0x7c>)
 8001166:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800116a:	60da      	str	r2, [r3, #12]
	return t;  
 800116c:	88fb      	ldrh	r3, [r7, #6]
}
 800116e:	4618      	mov	r0, r3
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40010c00 	.word	0x40010c00
 800117c:	40011000 	.word	0x40011000
 8001180:	200024f8 	.word	0x200024f8

08001184 <LCD_WriteReg>:
//д�Ĵ���
//LCD_Reg:�Ĵ������
//LCD_RegValue:Ҫд���ֵ
void LCD_WriteReg(u16 LCD_Reg,u16 LCD_RegValue)
{	
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	460a      	mov	r2, r1
 800118e:	80fb      	strh	r3, [r7, #6]
 8001190:	4613      	mov	r3, r2
 8001192:	80bb      	strh	r3, [r7, #4]
	LCD_WR_REG(LCD_Reg);  
 8001194:	88fb      	ldrh	r3, [r7, #6]
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff ff68 	bl	800106c <LCD_WR_REG>
	LCD_WR_DATA(LCD_RegValue);	    		 
 800119c:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <LCD_WriteReg+0x4c>)
 800119e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011a2:	611a      	str	r2, [r3, #16]
 80011a4:	4b0a      	ldr	r3, [pc, #40]	; (80011d0 <LCD_WriteReg+0x4c>)
 80011a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011aa:	615a      	str	r2, [r3, #20]
 80011ac:	4a09      	ldr	r2, [pc, #36]	; (80011d4 <LCD_WriteReg+0x50>)
 80011ae:	88bb      	ldrh	r3, [r7, #4]
 80011b0:	60d3      	str	r3, [r2, #12]
 80011b2:	4b07      	ldr	r3, [pc, #28]	; (80011d0 <LCD_WriteReg+0x4c>)
 80011b4:	2280      	movs	r2, #128	; 0x80
 80011b6:	615a      	str	r2, [r3, #20]
 80011b8:	4b05      	ldr	r3, [pc, #20]	; (80011d0 <LCD_WriteReg+0x4c>)
 80011ba:	2280      	movs	r2, #128	; 0x80
 80011bc:	611a      	str	r2, [r3, #16]
 80011be:	4b04      	ldr	r3, [pc, #16]	; (80011d0 <LCD_WriteReg+0x4c>)
 80011c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011c4:	611a      	str	r2, [r3, #16]
}   
 80011c6:	bf00      	nop
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40011000 	.word	0x40011000
 80011d4:	40010c00 	.word	0x40010c00

080011d8 <LCD_ReadReg>:
//���Ĵ���
//LCD_Reg:�Ĵ������
//����ֵ:������ֵ
u16 LCD_ReadReg(u16 LCD_Reg)
{										   
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	80fb      	strh	r3, [r7, #6]
 	LCD_WR_REG(LCD_Reg);  //д��Ҫ���ļĴ�����  
 80011e2:	88fb      	ldrh	r3, [r7, #6]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff ff41 	bl	800106c <LCD_WR_REG>
	return LCD_RD_DATA(); 
 80011ea:	f7ff ff87 	bl	80010fc <LCD_RD_DATA>
 80011ee:	4603      	mov	r3, r0
} 
 80011f0:	4618      	mov	r0, r3
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <LCD_WriteRAM_Prepare>:
//��ʼдGRAM
void LCD_WriteRAM_Prepare(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
	LCD_WR_REG(lcddev.wramcmd);
 80011fc:	4b03      	ldr	r3, [pc, #12]	; (800120c <LCD_WriteRAM_Prepare+0x14>)
 80011fe:	891b      	ldrh	r3, [r3, #8]
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff ff33 	bl	800106c <LCD_WR_REG>
} 
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	200024f8 	.word	0x200024f8

08001210 <LCD_SetCursor>:
}   
//���ù��λ��
//Xpos:������
//Ypos:������
void LCD_SetCursor(u16 Xpos, u16 Ypos)
{	 
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	460a      	mov	r2, r1
 800121a:	80fb      	strh	r3, [r7, #6]
 800121c:	4613      	mov	r3, r2
 800121e:	80bb      	strh	r3, [r7, #4]
 	if(lcddev.id==0X9341||lcddev.id==0X5310)
 8001220:	4b73      	ldr	r3, [pc, #460]	; (80013f0 <LCD_SetCursor+0x1e0>)
 8001222:	889b      	ldrh	r3, [r3, #4]
 8001224:	f249 3241 	movw	r2, #37697	; 0x9341
 8001228:	4293      	cmp	r3, r2
 800122a:	d005      	beq.n	8001238 <LCD_SetCursor+0x28>
 800122c:	4b70      	ldr	r3, [pc, #448]	; (80013f0 <LCD_SetCursor+0x1e0>)
 800122e:	889b      	ldrh	r3, [r3, #4]
 8001230:	f245 3210 	movw	r2, #21264	; 0x5310
 8001234:	4293      	cmp	r3, r2
 8001236:	d164      	bne.n	8001302 <LCD_SetCursor+0xf2>
	{		    
		LCD_WR_REG(lcddev.setxcmd); 
 8001238:	4b6d      	ldr	r3, [pc, #436]	; (80013f0 <LCD_SetCursor+0x1e0>)
 800123a:	895b      	ldrh	r3, [r3, #10]
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff ff15 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATA(Xpos>>8);LCD_WR_DATA(Xpos&0XFF); 			 
 8001242:	4b6c      	ldr	r3, [pc, #432]	; (80013f4 <LCD_SetCursor+0x1e4>)
 8001244:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001248:	611a      	str	r2, [r3, #16]
 800124a:	4b6a      	ldr	r3, [pc, #424]	; (80013f4 <LCD_SetCursor+0x1e4>)
 800124c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001250:	615a      	str	r2, [r3, #20]
 8001252:	88fb      	ldrh	r3, [r7, #6]
 8001254:	0a1b      	lsrs	r3, r3, #8
 8001256:	b29a      	uxth	r2, r3
 8001258:	4b67      	ldr	r3, [pc, #412]	; (80013f8 <LCD_SetCursor+0x1e8>)
 800125a:	60da      	str	r2, [r3, #12]
 800125c:	4b65      	ldr	r3, [pc, #404]	; (80013f4 <LCD_SetCursor+0x1e4>)
 800125e:	2280      	movs	r2, #128	; 0x80
 8001260:	615a      	str	r2, [r3, #20]
 8001262:	4b64      	ldr	r3, [pc, #400]	; (80013f4 <LCD_SetCursor+0x1e4>)
 8001264:	2280      	movs	r2, #128	; 0x80
 8001266:	611a      	str	r2, [r3, #16]
 8001268:	4b62      	ldr	r3, [pc, #392]	; (80013f4 <LCD_SetCursor+0x1e4>)
 800126a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800126e:	611a      	str	r2, [r3, #16]
 8001270:	4b60      	ldr	r3, [pc, #384]	; (80013f4 <LCD_SetCursor+0x1e4>)
 8001272:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001276:	611a      	str	r2, [r3, #16]
 8001278:	4b5e      	ldr	r3, [pc, #376]	; (80013f4 <LCD_SetCursor+0x1e4>)
 800127a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800127e:	615a      	str	r2, [r3, #20]
 8001280:	88fb      	ldrh	r3, [r7, #6]
 8001282:	4a5d      	ldr	r2, [pc, #372]	; (80013f8 <LCD_SetCursor+0x1e8>)
 8001284:	b2db      	uxtb	r3, r3
 8001286:	60d3      	str	r3, [r2, #12]
 8001288:	4b5a      	ldr	r3, [pc, #360]	; (80013f4 <LCD_SetCursor+0x1e4>)
 800128a:	2280      	movs	r2, #128	; 0x80
 800128c:	615a      	str	r2, [r3, #20]
 800128e:	4b59      	ldr	r3, [pc, #356]	; (80013f4 <LCD_SetCursor+0x1e4>)
 8001290:	2280      	movs	r2, #128	; 0x80
 8001292:	611a      	str	r2, [r3, #16]
 8001294:	4b57      	ldr	r3, [pc, #348]	; (80013f4 <LCD_SetCursor+0x1e4>)
 8001296:	f44f 7200 	mov.w	r2, #512	; 0x200
 800129a:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd); 
 800129c:	4b54      	ldr	r3, [pc, #336]	; (80013f0 <LCD_SetCursor+0x1e0>)
 800129e:	899b      	ldrh	r3, [r3, #12]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff fee3 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATA(Ypos>>8);LCD_WR_DATA(Ypos&0XFF); 		
 80012a6:	4b53      	ldr	r3, [pc, #332]	; (80013f4 <LCD_SetCursor+0x1e4>)
 80012a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012ac:	611a      	str	r2, [r3, #16]
 80012ae:	4b51      	ldr	r3, [pc, #324]	; (80013f4 <LCD_SetCursor+0x1e4>)
 80012b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012b4:	615a      	str	r2, [r3, #20]
 80012b6:	88bb      	ldrh	r3, [r7, #4]
 80012b8:	0a1b      	lsrs	r3, r3, #8
 80012ba:	b29a      	uxth	r2, r3
 80012bc:	4b4e      	ldr	r3, [pc, #312]	; (80013f8 <LCD_SetCursor+0x1e8>)
 80012be:	60da      	str	r2, [r3, #12]
 80012c0:	4b4c      	ldr	r3, [pc, #304]	; (80013f4 <LCD_SetCursor+0x1e4>)
 80012c2:	2280      	movs	r2, #128	; 0x80
 80012c4:	615a      	str	r2, [r3, #20]
 80012c6:	4b4b      	ldr	r3, [pc, #300]	; (80013f4 <LCD_SetCursor+0x1e4>)
 80012c8:	2280      	movs	r2, #128	; 0x80
 80012ca:	611a      	str	r2, [r3, #16]
 80012cc:	4b49      	ldr	r3, [pc, #292]	; (80013f4 <LCD_SetCursor+0x1e4>)
 80012ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012d2:	611a      	str	r2, [r3, #16]
 80012d4:	4b47      	ldr	r3, [pc, #284]	; (80013f4 <LCD_SetCursor+0x1e4>)
 80012d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012da:	611a      	str	r2, [r3, #16]
 80012dc:	4b45      	ldr	r3, [pc, #276]	; (80013f4 <LCD_SetCursor+0x1e4>)
 80012de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012e2:	615a      	str	r2, [r3, #20]
 80012e4:	88bb      	ldrh	r3, [r7, #4]
 80012e6:	4a44      	ldr	r2, [pc, #272]	; (80013f8 <LCD_SetCursor+0x1e8>)
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	60d3      	str	r3, [r2, #12]
 80012ec:	4b41      	ldr	r3, [pc, #260]	; (80013f4 <LCD_SetCursor+0x1e4>)
 80012ee:	2280      	movs	r2, #128	; 0x80
 80012f0:	615a      	str	r2, [r3, #20]
 80012f2:	4b40      	ldr	r3, [pc, #256]	; (80013f4 <LCD_SetCursor+0x1e4>)
 80012f4:	2280      	movs	r2, #128	; 0x80
 80012f6:	611a      	str	r2, [r3, #16]
 80012f8:	4b3e      	ldr	r3, [pc, #248]	; (80013f4 <LCD_SetCursor+0x1e4>)
 80012fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012fe:	611a      	str	r2, [r3, #16]
	{
		if(lcddev.dir==1)Xpos=lcddev.width-1-Xpos;//������ʵ���ǵ�תx,y����
		LCD_WriteReg(lcddev.setxcmd, Xpos);
		LCD_WriteReg(lcddev.setycmd, Ypos);
	}	 
} 		 
 8001300:	e248      	b.n	8001794 <LCD_SetCursor+0x584>
	}else if(lcddev.id==0X6804)
 8001302:	4b3b      	ldr	r3, [pc, #236]	; (80013f0 <LCD_SetCursor+0x1e0>)
 8001304:	889b      	ldrh	r3, [r3, #4]
 8001306:	f646 0204 	movw	r2, #26628	; 0x6804
 800130a:	4293      	cmp	r3, r2
 800130c:	d176      	bne.n	80013fc <LCD_SetCursor+0x1ec>
		if(lcddev.dir==1)Xpos=lcddev.width-1-Xpos;//����ʱ����
 800130e:	4b38      	ldr	r3, [pc, #224]	; (80013f0 <LCD_SetCursor+0x1e0>)
 8001310:	799b      	ldrb	r3, [r3, #6]
 8001312:	2b01      	cmp	r3, #1
 8001314:	d106      	bne.n	8001324 <LCD_SetCursor+0x114>
 8001316:	4b36      	ldr	r3, [pc, #216]	; (80013f0 <LCD_SetCursor+0x1e0>)
 8001318:	881a      	ldrh	r2, [r3, #0]
 800131a:	88fb      	ldrh	r3, [r7, #6]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	b29b      	uxth	r3, r3
 8001320:	3b01      	subs	r3, #1
 8001322:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd); 
 8001324:	4b32      	ldr	r3, [pc, #200]	; (80013f0 <LCD_SetCursor+0x1e0>)
 8001326:	895b      	ldrh	r3, [r3, #10]
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff fe9f 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATA(Xpos>>8);LCD_WR_DATA(Xpos&0XFF); 
 800132e:	4b31      	ldr	r3, [pc, #196]	; (80013f4 <LCD_SetCursor+0x1e4>)
 8001330:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001334:	611a      	str	r2, [r3, #16]
 8001336:	4b2f      	ldr	r3, [pc, #188]	; (80013f4 <LCD_SetCursor+0x1e4>)
 8001338:	f44f 7200 	mov.w	r2, #512	; 0x200
 800133c:	615a      	str	r2, [r3, #20]
 800133e:	88fb      	ldrh	r3, [r7, #6]
 8001340:	0a1b      	lsrs	r3, r3, #8
 8001342:	b29a      	uxth	r2, r3
 8001344:	4b2c      	ldr	r3, [pc, #176]	; (80013f8 <LCD_SetCursor+0x1e8>)
 8001346:	60da      	str	r2, [r3, #12]
 8001348:	4b2a      	ldr	r3, [pc, #168]	; (80013f4 <LCD_SetCursor+0x1e4>)
 800134a:	2280      	movs	r2, #128	; 0x80
 800134c:	615a      	str	r2, [r3, #20]
 800134e:	4b29      	ldr	r3, [pc, #164]	; (80013f4 <LCD_SetCursor+0x1e4>)
 8001350:	2280      	movs	r2, #128	; 0x80
 8001352:	611a      	str	r2, [r3, #16]
 8001354:	4b27      	ldr	r3, [pc, #156]	; (80013f4 <LCD_SetCursor+0x1e4>)
 8001356:	f44f 7200 	mov.w	r2, #512	; 0x200
 800135a:	611a      	str	r2, [r3, #16]
 800135c:	4b25      	ldr	r3, [pc, #148]	; (80013f4 <LCD_SetCursor+0x1e4>)
 800135e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001362:	611a      	str	r2, [r3, #16]
 8001364:	4b23      	ldr	r3, [pc, #140]	; (80013f4 <LCD_SetCursor+0x1e4>)
 8001366:	f44f 7200 	mov.w	r2, #512	; 0x200
 800136a:	615a      	str	r2, [r3, #20]
 800136c:	88fb      	ldrh	r3, [r7, #6]
 800136e:	4a22      	ldr	r2, [pc, #136]	; (80013f8 <LCD_SetCursor+0x1e8>)
 8001370:	b2db      	uxtb	r3, r3
 8001372:	60d3      	str	r3, [r2, #12]
 8001374:	4b1f      	ldr	r3, [pc, #124]	; (80013f4 <LCD_SetCursor+0x1e4>)
 8001376:	2280      	movs	r2, #128	; 0x80
 8001378:	615a      	str	r2, [r3, #20]
 800137a:	4b1e      	ldr	r3, [pc, #120]	; (80013f4 <LCD_SetCursor+0x1e4>)
 800137c:	2280      	movs	r2, #128	; 0x80
 800137e:	611a      	str	r2, [r3, #16]
 8001380:	4b1c      	ldr	r3, [pc, #112]	; (80013f4 <LCD_SetCursor+0x1e4>)
 8001382:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001386:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd); 
 8001388:	4b19      	ldr	r3, [pc, #100]	; (80013f0 <LCD_SetCursor+0x1e0>)
 800138a:	899b      	ldrh	r3, [r3, #12]
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff fe6d 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATA(Ypos>>8);LCD_WR_DATA(Ypos&0XFF); 
 8001392:	4b18      	ldr	r3, [pc, #96]	; (80013f4 <LCD_SetCursor+0x1e4>)
 8001394:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001398:	611a      	str	r2, [r3, #16]
 800139a:	4b16      	ldr	r3, [pc, #88]	; (80013f4 <LCD_SetCursor+0x1e4>)
 800139c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013a0:	615a      	str	r2, [r3, #20]
 80013a2:	88bb      	ldrh	r3, [r7, #4]
 80013a4:	0a1b      	lsrs	r3, r3, #8
 80013a6:	b29a      	uxth	r2, r3
 80013a8:	4b13      	ldr	r3, [pc, #76]	; (80013f8 <LCD_SetCursor+0x1e8>)
 80013aa:	60da      	str	r2, [r3, #12]
 80013ac:	4b11      	ldr	r3, [pc, #68]	; (80013f4 <LCD_SetCursor+0x1e4>)
 80013ae:	2280      	movs	r2, #128	; 0x80
 80013b0:	615a      	str	r2, [r3, #20]
 80013b2:	4b10      	ldr	r3, [pc, #64]	; (80013f4 <LCD_SetCursor+0x1e4>)
 80013b4:	2280      	movs	r2, #128	; 0x80
 80013b6:	611a      	str	r2, [r3, #16]
 80013b8:	4b0e      	ldr	r3, [pc, #56]	; (80013f4 <LCD_SetCursor+0x1e4>)
 80013ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013be:	611a      	str	r2, [r3, #16]
 80013c0:	4b0c      	ldr	r3, [pc, #48]	; (80013f4 <LCD_SetCursor+0x1e4>)
 80013c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013c6:	611a      	str	r2, [r3, #16]
 80013c8:	4b0a      	ldr	r3, [pc, #40]	; (80013f4 <LCD_SetCursor+0x1e4>)
 80013ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013ce:	615a      	str	r2, [r3, #20]
 80013d0:	88bb      	ldrh	r3, [r7, #4]
 80013d2:	4a09      	ldr	r2, [pc, #36]	; (80013f8 <LCD_SetCursor+0x1e8>)
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	60d3      	str	r3, [r2, #12]
 80013d8:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <LCD_SetCursor+0x1e4>)
 80013da:	2280      	movs	r2, #128	; 0x80
 80013dc:	615a      	str	r2, [r3, #20]
 80013de:	4b05      	ldr	r3, [pc, #20]	; (80013f4 <LCD_SetCursor+0x1e4>)
 80013e0:	2280      	movs	r2, #128	; 0x80
 80013e2:	611a      	str	r2, [r3, #16]
 80013e4:	4b03      	ldr	r3, [pc, #12]	; (80013f4 <LCD_SetCursor+0x1e4>)
 80013e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013ea:	611a      	str	r2, [r3, #16]
} 		 
 80013ec:	e1d2      	b.n	8001794 <LCD_SetCursor+0x584>
 80013ee:	bf00      	nop
 80013f0:	200024f8 	.word	0x200024f8
 80013f4:	40011000 	.word	0x40011000
 80013f8:	40010c00 	.word	0x40010c00
	}else if(lcddev.id==0X1963)
 80013fc:	4b99      	ldr	r3, [pc, #612]	; (8001664 <LCD_SetCursor+0x454>)
 80013fe:	889b      	ldrh	r3, [r3, #4]
 8001400:	f641 1263 	movw	r2, #6499	; 0x1963
 8001404:	4293      	cmp	r3, r2
 8001406:	f040 8133 	bne.w	8001670 <LCD_SetCursor+0x460>
		if(lcddev.dir==0)//x������Ҫ�任
 800140a:	4b96      	ldr	r3, [pc, #600]	; (8001664 <LCD_SetCursor+0x454>)
 800140c:	799b      	ldrb	r3, [r3, #6]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d163      	bne.n	80014da <LCD_SetCursor+0x2ca>
			Xpos=lcddev.width-1-Xpos;
 8001412:	4b94      	ldr	r3, [pc, #592]	; (8001664 <LCD_SetCursor+0x454>)
 8001414:	881a      	ldrh	r2, [r3, #0]
 8001416:	88fb      	ldrh	r3, [r7, #6]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	b29b      	uxth	r3, r3
 800141c:	3b01      	subs	r3, #1
 800141e:	80fb      	strh	r3, [r7, #6]
			LCD_WR_REG(lcddev.setxcmd); 
 8001420:	4b90      	ldr	r3, [pc, #576]	; (8001664 <LCD_SetCursor+0x454>)
 8001422:	895b      	ldrh	r3, [r3, #10]
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff fe21 	bl	800106c <LCD_WR_REG>
			LCD_WR_DATA(0);LCD_WR_DATA(0); 		
 800142a:	4b8f      	ldr	r3, [pc, #572]	; (8001668 <LCD_SetCursor+0x458>)
 800142c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001430:	611a      	str	r2, [r3, #16]
 8001432:	4b8d      	ldr	r3, [pc, #564]	; (8001668 <LCD_SetCursor+0x458>)
 8001434:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001438:	615a      	str	r2, [r3, #20]
 800143a:	4b8c      	ldr	r3, [pc, #560]	; (800166c <LCD_SetCursor+0x45c>)
 800143c:	2200      	movs	r2, #0
 800143e:	60da      	str	r2, [r3, #12]
 8001440:	4b89      	ldr	r3, [pc, #548]	; (8001668 <LCD_SetCursor+0x458>)
 8001442:	2280      	movs	r2, #128	; 0x80
 8001444:	615a      	str	r2, [r3, #20]
 8001446:	4b88      	ldr	r3, [pc, #544]	; (8001668 <LCD_SetCursor+0x458>)
 8001448:	2280      	movs	r2, #128	; 0x80
 800144a:	611a      	str	r2, [r3, #16]
 800144c:	4b86      	ldr	r3, [pc, #536]	; (8001668 <LCD_SetCursor+0x458>)
 800144e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001452:	611a      	str	r2, [r3, #16]
 8001454:	4b84      	ldr	r3, [pc, #528]	; (8001668 <LCD_SetCursor+0x458>)
 8001456:	f44f 7280 	mov.w	r2, #256	; 0x100
 800145a:	611a      	str	r2, [r3, #16]
 800145c:	4b82      	ldr	r3, [pc, #520]	; (8001668 <LCD_SetCursor+0x458>)
 800145e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001462:	615a      	str	r2, [r3, #20]
 8001464:	4b81      	ldr	r3, [pc, #516]	; (800166c <LCD_SetCursor+0x45c>)
 8001466:	2200      	movs	r2, #0
 8001468:	60da      	str	r2, [r3, #12]
 800146a:	4b7f      	ldr	r3, [pc, #508]	; (8001668 <LCD_SetCursor+0x458>)
 800146c:	2280      	movs	r2, #128	; 0x80
 800146e:	615a      	str	r2, [r3, #20]
 8001470:	4b7d      	ldr	r3, [pc, #500]	; (8001668 <LCD_SetCursor+0x458>)
 8001472:	2280      	movs	r2, #128	; 0x80
 8001474:	611a      	str	r2, [r3, #16]
 8001476:	4b7c      	ldr	r3, [pc, #496]	; (8001668 <LCD_SetCursor+0x458>)
 8001478:	f44f 7200 	mov.w	r2, #512	; 0x200
 800147c:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos>>8);LCD_WR_DATA(Xpos&0XFF);		 	 
 800147e:	4b7a      	ldr	r3, [pc, #488]	; (8001668 <LCD_SetCursor+0x458>)
 8001480:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001484:	611a      	str	r2, [r3, #16]
 8001486:	4b78      	ldr	r3, [pc, #480]	; (8001668 <LCD_SetCursor+0x458>)
 8001488:	f44f 7200 	mov.w	r2, #512	; 0x200
 800148c:	615a      	str	r2, [r3, #20]
 800148e:	88fb      	ldrh	r3, [r7, #6]
 8001490:	0a1b      	lsrs	r3, r3, #8
 8001492:	b29a      	uxth	r2, r3
 8001494:	4b75      	ldr	r3, [pc, #468]	; (800166c <LCD_SetCursor+0x45c>)
 8001496:	60da      	str	r2, [r3, #12]
 8001498:	4b73      	ldr	r3, [pc, #460]	; (8001668 <LCD_SetCursor+0x458>)
 800149a:	2280      	movs	r2, #128	; 0x80
 800149c:	615a      	str	r2, [r3, #20]
 800149e:	4b72      	ldr	r3, [pc, #456]	; (8001668 <LCD_SetCursor+0x458>)
 80014a0:	2280      	movs	r2, #128	; 0x80
 80014a2:	611a      	str	r2, [r3, #16]
 80014a4:	4b70      	ldr	r3, [pc, #448]	; (8001668 <LCD_SetCursor+0x458>)
 80014a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014aa:	611a      	str	r2, [r3, #16]
 80014ac:	4b6e      	ldr	r3, [pc, #440]	; (8001668 <LCD_SetCursor+0x458>)
 80014ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014b2:	611a      	str	r2, [r3, #16]
 80014b4:	4b6c      	ldr	r3, [pc, #432]	; (8001668 <LCD_SetCursor+0x458>)
 80014b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014ba:	615a      	str	r2, [r3, #20]
 80014bc:	88fb      	ldrh	r3, [r7, #6]
 80014be:	4a6b      	ldr	r2, [pc, #428]	; (800166c <LCD_SetCursor+0x45c>)
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	60d3      	str	r3, [r2, #12]
 80014c4:	4b68      	ldr	r3, [pc, #416]	; (8001668 <LCD_SetCursor+0x458>)
 80014c6:	2280      	movs	r2, #128	; 0x80
 80014c8:	615a      	str	r2, [r3, #20]
 80014ca:	4b67      	ldr	r3, [pc, #412]	; (8001668 <LCD_SetCursor+0x458>)
 80014cc:	2280      	movs	r2, #128	; 0x80
 80014ce:	611a      	str	r2, [r3, #16]
 80014d0:	4b65      	ldr	r3, [pc, #404]	; (8001668 <LCD_SetCursor+0x458>)
 80014d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014d6:	611a      	str	r2, [r3, #16]
 80014d8:	e061      	b.n	800159e <LCD_SetCursor+0x38e>
			LCD_WR_REG(lcddev.setxcmd); 
 80014da:	4b62      	ldr	r3, [pc, #392]	; (8001664 <LCD_SetCursor+0x454>)
 80014dc:	895b      	ldrh	r3, [r3, #10]
 80014de:	4618      	mov	r0, r3
 80014e0:	f7ff fdc4 	bl	800106c <LCD_WR_REG>
			LCD_WR_DATA(Xpos>>8);LCD_WR_DATA(Xpos&0XFF); 		
 80014e4:	4b60      	ldr	r3, [pc, #384]	; (8001668 <LCD_SetCursor+0x458>)
 80014e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014ea:	611a      	str	r2, [r3, #16]
 80014ec:	4b5e      	ldr	r3, [pc, #376]	; (8001668 <LCD_SetCursor+0x458>)
 80014ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014f2:	615a      	str	r2, [r3, #20]
 80014f4:	88fb      	ldrh	r3, [r7, #6]
 80014f6:	0a1b      	lsrs	r3, r3, #8
 80014f8:	b29a      	uxth	r2, r3
 80014fa:	4b5c      	ldr	r3, [pc, #368]	; (800166c <LCD_SetCursor+0x45c>)
 80014fc:	60da      	str	r2, [r3, #12]
 80014fe:	4b5a      	ldr	r3, [pc, #360]	; (8001668 <LCD_SetCursor+0x458>)
 8001500:	2280      	movs	r2, #128	; 0x80
 8001502:	615a      	str	r2, [r3, #20]
 8001504:	4b58      	ldr	r3, [pc, #352]	; (8001668 <LCD_SetCursor+0x458>)
 8001506:	2280      	movs	r2, #128	; 0x80
 8001508:	611a      	str	r2, [r3, #16]
 800150a:	4b57      	ldr	r3, [pc, #348]	; (8001668 <LCD_SetCursor+0x458>)
 800150c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001510:	611a      	str	r2, [r3, #16]
 8001512:	4b55      	ldr	r3, [pc, #340]	; (8001668 <LCD_SetCursor+0x458>)
 8001514:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001518:	611a      	str	r2, [r3, #16]
 800151a:	4b53      	ldr	r3, [pc, #332]	; (8001668 <LCD_SetCursor+0x458>)
 800151c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001520:	615a      	str	r2, [r3, #20]
 8001522:	88fb      	ldrh	r3, [r7, #6]
 8001524:	4a51      	ldr	r2, [pc, #324]	; (800166c <LCD_SetCursor+0x45c>)
 8001526:	b2db      	uxtb	r3, r3
 8001528:	60d3      	str	r3, [r2, #12]
 800152a:	4b4f      	ldr	r3, [pc, #316]	; (8001668 <LCD_SetCursor+0x458>)
 800152c:	2280      	movs	r2, #128	; 0x80
 800152e:	615a      	str	r2, [r3, #20]
 8001530:	4b4d      	ldr	r3, [pc, #308]	; (8001668 <LCD_SetCursor+0x458>)
 8001532:	2280      	movs	r2, #128	; 0x80
 8001534:	611a      	str	r2, [r3, #16]
 8001536:	4b4c      	ldr	r3, [pc, #304]	; (8001668 <LCD_SetCursor+0x458>)
 8001538:	f44f 7200 	mov.w	r2, #512	; 0x200
 800153c:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width-1)>>8);LCD_WR_DATA((lcddev.width-1)&0XFF);		 	 			
 800153e:	4b4a      	ldr	r3, [pc, #296]	; (8001668 <LCD_SetCursor+0x458>)
 8001540:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001544:	611a      	str	r2, [r3, #16]
 8001546:	4b48      	ldr	r3, [pc, #288]	; (8001668 <LCD_SetCursor+0x458>)
 8001548:	f44f 7200 	mov.w	r2, #512	; 0x200
 800154c:	615a      	str	r2, [r3, #20]
 800154e:	4b45      	ldr	r3, [pc, #276]	; (8001664 <LCD_SetCursor+0x454>)
 8001550:	881b      	ldrh	r3, [r3, #0]
 8001552:	3b01      	subs	r3, #1
 8001554:	121a      	asrs	r2, r3, #8
 8001556:	4b45      	ldr	r3, [pc, #276]	; (800166c <LCD_SetCursor+0x45c>)
 8001558:	60da      	str	r2, [r3, #12]
 800155a:	4b43      	ldr	r3, [pc, #268]	; (8001668 <LCD_SetCursor+0x458>)
 800155c:	2280      	movs	r2, #128	; 0x80
 800155e:	615a      	str	r2, [r3, #20]
 8001560:	4b41      	ldr	r3, [pc, #260]	; (8001668 <LCD_SetCursor+0x458>)
 8001562:	2280      	movs	r2, #128	; 0x80
 8001564:	611a      	str	r2, [r3, #16]
 8001566:	4b40      	ldr	r3, [pc, #256]	; (8001668 <LCD_SetCursor+0x458>)
 8001568:	f44f 7200 	mov.w	r2, #512	; 0x200
 800156c:	611a      	str	r2, [r3, #16]
 800156e:	4b3e      	ldr	r3, [pc, #248]	; (8001668 <LCD_SetCursor+0x458>)
 8001570:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001574:	611a      	str	r2, [r3, #16]
 8001576:	4b3c      	ldr	r3, [pc, #240]	; (8001668 <LCD_SetCursor+0x458>)
 8001578:	f44f 7200 	mov.w	r2, #512	; 0x200
 800157c:	615a      	str	r2, [r3, #20]
 800157e:	4b39      	ldr	r3, [pc, #228]	; (8001664 <LCD_SetCursor+0x454>)
 8001580:	881b      	ldrh	r3, [r3, #0]
 8001582:	3b01      	subs	r3, #1
 8001584:	4a39      	ldr	r2, [pc, #228]	; (800166c <LCD_SetCursor+0x45c>)
 8001586:	b2db      	uxtb	r3, r3
 8001588:	60d3      	str	r3, [r2, #12]
 800158a:	4b37      	ldr	r3, [pc, #220]	; (8001668 <LCD_SetCursor+0x458>)
 800158c:	2280      	movs	r2, #128	; 0x80
 800158e:	615a      	str	r2, [r3, #20]
 8001590:	4b35      	ldr	r3, [pc, #212]	; (8001668 <LCD_SetCursor+0x458>)
 8001592:	2280      	movs	r2, #128	; 0x80
 8001594:	611a      	str	r2, [r3, #16]
 8001596:	4b34      	ldr	r3, [pc, #208]	; (8001668 <LCD_SetCursor+0x458>)
 8001598:	f44f 7200 	mov.w	r2, #512	; 0x200
 800159c:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd); 
 800159e:	4b31      	ldr	r3, [pc, #196]	; (8001664 <LCD_SetCursor+0x454>)
 80015a0:	899b      	ldrh	r3, [r3, #12]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7ff fd62 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATA(Ypos>>8);LCD_WR_DATA(Ypos&0XFF); 		
 80015a8:	4b2f      	ldr	r3, [pc, #188]	; (8001668 <LCD_SetCursor+0x458>)
 80015aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015ae:	611a      	str	r2, [r3, #16]
 80015b0:	4b2d      	ldr	r3, [pc, #180]	; (8001668 <LCD_SetCursor+0x458>)
 80015b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015b6:	615a      	str	r2, [r3, #20]
 80015b8:	88bb      	ldrh	r3, [r7, #4]
 80015ba:	0a1b      	lsrs	r3, r3, #8
 80015bc:	b29a      	uxth	r2, r3
 80015be:	4b2b      	ldr	r3, [pc, #172]	; (800166c <LCD_SetCursor+0x45c>)
 80015c0:	60da      	str	r2, [r3, #12]
 80015c2:	4b29      	ldr	r3, [pc, #164]	; (8001668 <LCD_SetCursor+0x458>)
 80015c4:	2280      	movs	r2, #128	; 0x80
 80015c6:	615a      	str	r2, [r3, #20]
 80015c8:	4b27      	ldr	r3, [pc, #156]	; (8001668 <LCD_SetCursor+0x458>)
 80015ca:	2280      	movs	r2, #128	; 0x80
 80015cc:	611a      	str	r2, [r3, #16]
 80015ce:	4b26      	ldr	r3, [pc, #152]	; (8001668 <LCD_SetCursor+0x458>)
 80015d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015d4:	611a      	str	r2, [r3, #16]
 80015d6:	4b24      	ldr	r3, [pc, #144]	; (8001668 <LCD_SetCursor+0x458>)
 80015d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015dc:	611a      	str	r2, [r3, #16]
 80015de:	4b22      	ldr	r3, [pc, #136]	; (8001668 <LCD_SetCursor+0x458>)
 80015e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015e4:	615a      	str	r2, [r3, #20]
 80015e6:	88bb      	ldrh	r3, [r7, #4]
 80015e8:	4a20      	ldr	r2, [pc, #128]	; (800166c <LCD_SetCursor+0x45c>)
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	60d3      	str	r3, [r2, #12]
 80015ee:	4b1e      	ldr	r3, [pc, #120]	; (8001668 <LCD_SetCursor+0x458>)
 80015f0:	2280      	movs	r2, #128	; 0x80
 80015f2:	615a      	str	r2, [r3, #20]
 80015f4:	4b1c      	ldr	r3, [pc, #112]	; (8001668 <LCD_SetCursor+0x458>)
 80015f6:	2280      	movs	r2, #128	; 0x80
 80015f8:	611a      	str	r2, [r3, #16]
 80015fa:	4b1b      	ldr	r3, [pc, #108]	; (8001668 <LCD_SetCursor+0x458>)
 80015fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001600:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((lcddev.height-1)>>8);LCD_WR_DATA((lcddev.height-1)&0XFF); 			 		
 8001602:	4b19      	ldr	r3, [pc, #100]	; (8001668 <LCD_SetCursor+0x458>)
 8001604:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001608:	611a      	str	r2, [r3, #16]
 800160a:	4b17      	ldr	r3, [pc, #92]	; (8001668 <LCD_SetCursor+0x458>)
 800160c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001610:	615a      	str	r2, [r3, #20]
 8001612:	4b14      	ldr	r3, [pc, #80]	; (8001664 <LCD_SetCursor+0x454>)
 8001614:	885b      	ldrh	r3, [r3, #2]
 8001616:	3b01      	subs	r3, #1
 8001618:	121a      	asrs	r2, r3, #8
 800161a:	4b14      	ldr	r3, [pc, #80]	; (800166c <LCD_SetCursor+0x45c>)
 800161c:	60da      	str	r2, [r3, #12]
 800161e:	4b12      	ldr	r3, [pc, #72]	; (8001668 <LCD_SetCursor+0x458>)
 8001620:	2280      	movs	r2, #128	; 0x80
 8001622:	615a      	str	r2, [r3, #20]
 8001624:	4b10      	ldr	r3, [pc, #64]	; (8001668 <LCD_SetCursor+0x458>)
 8001626:	2280      	movs	r2, #128	; 0x80
 8001628:	611a      	str	r2, [r3, #16]
 800162a:	4b0f      	ldr	r3, [pc, #60]	; (8001668 <LCD_SetCursor+0x458>)
 800162c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001630:	611a      	str	r2, [r3, #16]
 8001632:	4b0d      	ldr	r3, [pc, #52]	; (8001668 <LCD_SetCursor+0x458>)
 8001634:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001638:	611a      	str	r2, [r3, #16]
 800163a:	4b0b      	ldr	r3, [pc, #44]	; (8001668 <LCD_SetCursor+0x458>)
 800163c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001640:	615a      	str	r2, [r3, #20]
 8001642:	4b08      	ldr	r3, [pc, #32]	; (8001664 <LCD_SetCursor+0x454>)
 8001644:	885b      	ldrh	r3, [r3, #2]
 8001646:	3b01      	subs	r3, #1
 8001648:	4a08      	ldr	r2, [pc, #32]	; (800166c <LCD_SetCursor+0x45c>)
 800164a:	b2db      	uxtb	r3, r3
 800164c:	60d3      	str	r3, [r2, #12]
 800164e:	4b06      	ldr	r3, [pc, #24]	; (8001668 <LCD_SetCursor+0x458>)
 8001650:	2280      	movs	r2, #128	; 0x80
 8001652:	615a      	str	r2, [r3, #20]
 8001654:	4b04      	ldr	r3, [pc, #16]	; (8001668 <LCD_SetCursor+0x458>)
 8001656:	2280      	movs	r2, #128	; 0x80
 8001658:	611a      	str	r2, [r3, #16]
 800165a:	4b03      	ldr	r3, [pc, #12]	; (8001668 <LCD_SetCursor+0x458>)
 800165c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001660:	611a      	str	r2, [r3, #16]
} 		 
 8001662:	e097      	b.n	8001794 <LCD_SetCursor+0x584>
 8001664:	200024f8 	.word	0x200024f8
 8001668:	40011000 	.word	0x40011000
 800166c:	40010c00 	.word	0x40010c00
	}else if(lcddev.id==0X5510)
 8001670:	4b4a      	ldr	r3, [pc, #296]	; (800179c <LCD_SetCursor+0x58c>)
 8001672:	889b      	ldrh	r3, [r3, #4]
 8001674:	f245 5210 	movw	r2, #21776	; 0x5510
 8001678:	4293      	cmp	r3, r2
 800167a:	d172      	bne.n	8001762 <LCD_SetCursor+0x552>
		LCD_WR_REG(lcddev.setxcmd);LCD_WR_DATA(Xpos>>8); 		
 800167c:	4b47      	ldr	r3, [pc, #284]	; (800179c <LCD_SetCursor+0x58c>)
 800167e:	895b      	ldrh	r3, [r3, #10]
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff fcf3 	bl	800106c <LCD_WR_REG>
 8001686:	4b46      	ldr	r3, [pc, #280]	; (80017a0 <LCD_SetCursor+0x590>)
 8001688:	f44f 7280 	mov.w	r2, #256	; 0x100
 800168c:	611a      	str	r2, [r3, #16]
 800168e:	4b44      	ldr	r3, [pc, #272]	; (80017a0 <LCD_SetCursor+0x590>)
 8001690:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001694:	615a      	str	r2, [r3, #20]
 8001696:	88fb      	ldrh	r3, [r7, #6]
 8001698:	0a1b      	lsrs	r3, r3, #8
 800169a:	b29a      	uxth	r2, r3
 800169c:	4b41      	ldr	r3, [pc, #260]	; (80017a4 <LCD_SetCursor+0x594>)
 800169e:	60da      	str	r2, [r3, #12]
 80016a0:	4b3f      	ldr	r3, [pc, #252]	; (80017a0 <LCD_SetCursor+0x590>)
 80016a2:	2280      	movs	r2, #128	; 0x80
 80016a4:	615a      	str	r2, [r3, #20]
 80016a6:	4b3e      	ldr	r3, [pc, #248]	; (80017a0 <LCD_SetCursor+0x590>)
 80016a8:	2280      	movs	r2, #128	; 0x80
 80016aa:	611a      	str	r2, [r3, #16]
 80016ac:	4b3c      	ldr	r3, [pc, #240]	; (80017a0 <LCD_SetCursor+0x590>)
 80016ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016b2:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setxcmd+1);LCD_WR_DATA(Xpos&0XFF);			 
 80016b4:	4b39      	ldr	r3, [pc, #228]	; (800179c <LCD_SetCursor+0x58c>)
 80016b6:	895b      	ldrh	r3, [r3, #10]
 80016b8:	3301      	adds	r3, #1
 80016ba:	b29b      	uxth	r3, r3
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff fcd5 	bl	800106c <LCD_WR_REG>
 80016c2:	4b37      	ldr	r3, [pc, #220]	; (80017a0 <LCD_SetCursor+0x590>)
 80016c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016c8:	611a      	str	r2, [r3, #16]
 80016ca:	4b35      	ldr	r3, [pc, #212]	; (80017a0 <LCD_SetCursor+0x590>)
 80016cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016d0:	615a      	str	r2, [r3, #20]
 80016d2:	88fb      	ldrh	r3, [r7, #6]
 80016d4:	4a33      	ldr	r2, [pc, #204]	; (80017a4 <LCD_SetCursor+0x594>)
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	60d3      	str	r3, [r2, #12]
 80016da:	4b31      	ldr	r3, [pc, #196]	; (80017a0 <LCD_SetCursor+0x590>)
 80016dc:	2280      	movs	r2, #128	; 0x80
 80016de:	615a      	str	r2, [r3, #20]
 80016e0:	4b2f      	ldr	r3, [pc, #188]	; (80017a0 <LCD_SetCursor+0x590>)
 80016e2:	2280      	movs	r2, #128	; 0x80
 80016e4:	611a      	str	r2, [r3, #16]
 80016e6:	4b2e      	ldr	r3, [pc, #184]	; (80017a0 <LCD_SetCursor+0x590>)
 80016e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016ec:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);LCD_WR_DATA(Ypos>>8);  		
 80016ee:	4b2b      	ldr	r3, [pc, #172]	; (800179c <LCD_SetCursor+0x58c>)
 80016f0:	899b      	ldrh	r3, [r3, #12]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff fcba 	bl	800106c <LCD_WR_REG>
 80016f8:	4b29      	ldr	r3, [pc, #164]	; (80017a0 <LCD_SetCursor+0x590>)
 80016fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016fe:	611a      	str	r2, [r3, #16]
 8001700:	4b27      	ldr	r3, [pc, #156]	; (80017a0 <LCD_SetCursor+0x590>)
 8001702:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001706:	615a      	str	r2, [r3, #20]
 8001708:	88bb      	ldrh	r3, [r7, #4]
 800170a:	0a1b      	lsrs	r3, r3, #8
 800170c:	b29a      	uxth	r2, r3
 800170e:	4b25      	ldr	r3, [pc, #148]	; (80017a4 <LCD_SetCursor+0x594>)
 8001710:	60da      	str	r2, [r3, #12]
 8001712:	4b23      	ldr	r3, [pc, #140]	; (80017a0 <LCD_SetCursor+0x590>)
 8001714:	2280      	movs	r2, #128	; 0x80
 8001716:	615a      	str	r2, [r3, #20]
 8001718:	4b21      	ldr	r3, [pc, #132]	; (80017a0 <LCD_SetCursor+0x590>)
 800171a:	2280      	movs	r2, #128	; 0x80
 800171c:	611a      	str	r2, [r3, #16]
 800171e:	4b20      	ldr	r3, [pc, #128]	; (80017a0 <LCD_SetCursor+0x590>)
 8001720:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001724:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd+1);LCD_WR_DATA(Ypos&0XFF);			
 8001726:	4b1d      	ldr	r3, [pc, #116]	; (800179c <LCD_SetCursor+0x58c>)
 8001728:	899b      	ldrh	r3, [r3, #12]
 800172a:	3301      	adds	r3, #1
 800172c:	b29b      	uxth	r3, r3
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff fc9c 	bl	800106c <LCD_WR_REG>
 8001734:	4b1a      	ldr	r3, [pc, #104]	; (80017a0 <LCD_SetCursor+0x590>)
 8001736:	f44f 7280 	mov.w	r2, #256	; 0x100
 800173a:	611a      	str	r2, [r3, #16]
 800173c:	4b18      	ldr	r3, [pc, #96]	; (80017a0 <LCD_SetCursor+0x590>)
 800173e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001742:	615a      	str	r2, [r3, #20]
 8001744:	88bb      	ldrh	r3, [r7, #4]
 8001746:	4a17      	ldr	r2, [pc, #92]	; (80017a4 <LCD_SetCursor+0x594>)
 8001748:	b2db      	uxtb	r3, r3
 800174a:	60d3      	str	r3, [r2, #12]
 800174c:	4b14      	ldr	r3, [pc, #80]	; (80017a0 <LCD_SetCursor+0x590>)
 800174e:	2280      	movs	r2, #128	; 0x80
 8001750:	615a      	str	r2, [r3, #20]
 8001752:	4b13      	ldr	r3, [pc, #76]	; (80017a0 <LCD_SetCursor+0x590>)
 8001754:	2280      	movs	r2, #128	; 0x80
 8001756:	611a      	str	r2, [r3, #16]
 8001758:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <LCD_SetCursor+0x590>)
 800175a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800175e:	611a      	str	r2, [r3, #16]
} 		 
 8001760:	e018      	b.n	8001794 <LCD_SetCursor+0x584>
		if(lcddev.dir==1)Xpos=lcddev.width-1-Xpos;//������ʵ���ǵ�תx,y����
 8001762:	4b0e      	ldr	r3, [pc, #56]	; (800179c <LCD_SetCursor+0x58c>)
 8001764:	799b      	ldrb	r3, [r3, #6]
 8001766:	2b01      	cmp	r3, #1
 8001768:	d106      	bne.n	8001778 <LCD_SetCursor+0x568>
 800176a:	4b0c      	ldr	r3, [pc, #48]	; (800179c <LCD_SetCursor+0x58c>)
 800176c:	881a      	ldrh	r2, [r3, #0]
 800176e:	88fb      	ldrh	r3, [r7, #6]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	b29b      	uxth	r3, r3
 8001774:	3b01      	subs	r3, #1
 8001776:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd, Xpos);
 8001778:	4b08      	ldr	r3, [pc, #32]	; (800179c <LCD_SetCursor+0x58c>)
 800177a:	895b      	ldrh	r3, [r3, #10]
 800177c:	88fa      	ldrh	r2, [r7, #6]
 800177e:	4611      	mov	r1, r2
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff fcff 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd, Ypos);
 8001786:	4b05      	ldr	r3, [pc, #20]	; (800179c <LCD_SetCursor+0x58c>)
 8001788:	899b      	ldrh	r3, [r3, #12]
 800178a:	88ba      	ldrh	r2, [r7, #4]
 800178c:	4611      	mov	r1, r2
 800178e:	4618      	mov	r0, r3
 8001790:	f7ff fcf8 	bl	8001184 <LCD_WriteReg>
} 		 
 8001794:	bf00      	nop
 8001796:	3708      	adds	r7, #8
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	200024f8 	.word	0x200024f8
 80017a0:	40011000 	.word	0x40011000
 80017a4:	40010c00 	.word	0x40010c00

080017a8 <LCD_Scan_Dir>:
//ע��:�����������ܻ��ܵ��˺������õ�Ӱ��(������9341/6804����������),
//����,һ������ΪL2R_U2D����,�������Ϊ����ɨ�跽ʽ,���ܵ�����ʾ������.
//dir:0~7,����8������(���嶨���lcd.h)
//9320/9325/9328/4531/4535/1505/b505/5408/9341/5310/5510/1963��IC�Ѿ�ʵ�ʲ���	   	   
void LCD_Scan_Dir(u8 dir)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	71fb      	strb	r3, [r7, #7]
	u16 regval=0;
 80017b2:	2300      	movs	r3, #0
 80017b4:	81fb      	strh	r3, [r7, #14]
	u16 dirreg=0;
 80017b6:	2300      	movs	r3, #0
 80017b8:	81bb      	strh	r3, [r7, #12]
	u16 temp;  
	if((lcddev.dir==1&&lcddev.id!=0X6804&&lcddev.id!=0X1963)||(lcddev.dir==0&&lcddev.id==0X1963))//����ʱ����6804��1963���ı�ɨ�跽������ʱ1963�ı䷽��
 80017ba:	4b78      	ldr	r3, [pc, #480]	; (800199c <LCD_Scan_Dir+0x1f4>)
 80017bc:	799b      	ldrb	r3, [r3, #6]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d10b      	bne.n	80017da <LCD_Scan_Dir+0x32>
 80017c2:	4b76      	ldr	r3, [pc, #472]	; (800199c <LCD_Scan_Dir+0x1f4>)
 80017c4:	889b      	ldrh	r3, [r3, #4]
 80017c6:	f646 0204 	movw	r2, #26628	; 0x6804
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d005      	beq.n	80017da <LCD_Scan_Dir+0x32>
 80017ce:	4b73      	ldr	r3, [pc, #460]	; (800199c <LCD_Scan_Dir+0x1f4>)
 80017d0:	889b      	ldrh	r3, [r3, #4]
 80017d2:	f641 1263 	movw	r2, #6499	; 0x1963
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d109      	bne.n	80017ee <LCD_Scan_Dir+0x46>
 80017da:	4b70      	ldr	r3, [pc, #448]	; (800199c <LCD_Scan_Dir+0x1f4>)
 80017dc:	799b      	ldrb	r3, [r3, #6]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d134      	bne.n	800184c <LCD_Scan_Dir+0xa4>
 80017e2:	4b6e      	ldr	r3, [pc, #440]	; (800199c <LCD_Scan_Dir+0x1f4>)
 80017e4:	889b      	ldrh	r3, [r3, #4]
 80017e6:	f641 1263 	movw	r2, #6499	; 0x1963
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d12e      	bne.n	800184c <LCD_Scan_Dir+0xa4>
	{			   
		switch(dir)//����ת��
 80017ee:	79fb      	ldrb	r3, [r7, #7]
 80017f0:	2b07      	cmp	r3, #7
 80017f2:	d82b      	bhi.n	800184c <LCD_Scan_Dir+0xa4>
 80017f4:	a201      	add	r2, pc, #4	; (adr r2, 80017fc <LCD_Scan_Dir+0x54>)
 80017f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017fa:	bf00      	nop
 80017fc:	0800181d 	.word	0x0800181d
 8001800:	08001823 	.word	0x08001823
 8001804:	08001829 	.word	0x08001829
 8001808:	0800182f 	.word	0x0800182f
 800180c:	08001835 	.word	0x08001835
 8001810:	0800183b 	.word	0x0800183b
 8001814:	08001841 	.word	0x08001841
 8001818:	08001847 	.word	0x08001847
		{
			case 0:dir=6;break;
 800181c:	2306      	movs	r3, #6
 800181e:	71fb      	strb	r3, [r7, #7]
 8001820:	e014      	b.n	800184c <LCD_Scan_Dir+0xa4>
			case 1:dir=7;break;
 8001822:	2307      	movs	r3, #7
 8001824:	71fb      	strb	r3, [r7, #7]
 8001826:	e011      	b.n	800184c <LCD_Scan_Dir+0xa4>
			case 2:dir=4;break;
 8001828:	2304      	movs	r3, #4
 800182a:	71fb      	strb	r3, [r7, #7]
 800182c:	e00e      	b.n	800184c <LCD_Scan_Dir+0xa4>
			case 3:dir=5;break;
 800182e:	2305      	movs	r3, #5
 8001830:	71fb      	strb	r3, [r7, #7]
 8001832:	e00b      	b.n	800184c <LCD_Scan_Dir+0xa4>
			case 4:dir=1;break;
 8001834:	2301      	movs	r3, #1
 8001836:	71fb      	strb	r3, [r7, #7]
 8001838:	e008      	b.n	800184c <LCD_Scan_Dir+0xa4>
			case 5:dir=0;break;
 800183a:	2300      	movs	r3, #0
 800183c:	71fb      	strb	r3, [r7, #7]
 800183e:	e005      	b.n	800184c <LCD_Scan_Dir+0xa4>
			case 6:dir=3;break;
 8001840:	2303      	movs	r3, #3
 8001842:	71fb      	strb	r3, [r7, #7]
 8001844:	e002      	b.n	800184c <LCD_Scan_Dir+0xa4>
			case 7:dir=2;break;	     
 8001846:	2302      	movs	r3, #2
 8001848:	71fb      	strb	r3, [r7, #7]
 800184a:	bf00      	nop
		}
	} 
	if(lcddev.id==0x9341||lcddev.id==0X6804||lcddev.id==0X5310||lcddev.id==0X5510||lcddev.id==0X1963)//9341/6804/5310/5510/1963,���⴦��
 800184c:	4b53      	ldr	r3, [pc, #332]	; (800199c <LCD_Scan_Dir+0x1f4>)
 800184e:	889b      	ldrh	r3, [r3, #4]
 8001850:	f249 3241 	movw	r2, #37697	; 0x9341
 8001854:	4293      	cmp	r3, r2
 8001856:	d018      	beq.n	800188a <LCD_Scan_Dir+0xe2>
 8001858:	4b50      	ldr	r3, [pc, #320]	; (800199c <LCD_Scan_Dir+0x1f4>)
 800185a:	889b      	ldrh	r3, [r3, #4]
 800185c:	f646 0204 	movw	r2, #26628	; 0x6804
 8001860:	4293      	cmp	r3, r2
 8001862:	d012      	beq.n	800188a <LCD_Scan_Dir+0xe2>
 8001864:	4b4d      	ldr	r3, [pc, #308]	; (800199c <LCD_Scan_Dir+0x1f4>)
 8001866:	889b      	ldrh	r3, [r3, #4]
 8001868:	f245 3210 	movw	r2, #21264	; 0x5310
 800186c:	4293      	cmp	r3, r2
 800186e:	d00c      	beq.n	800188a <LCD_Scan_Dir+0xe2>
 8001870:	4b4a      	ldr	r3, [pc, #296]	; (800199c <LCD_Scan_Dir+0x1f4>)
 8001872:	889b      	ldrh	r3, [r3, #4]
 8001874:	f245 5210 	movw	r2, #21776	; 0x5510
 8001878:	4293      	cmp	r3, r2
 800187a:	d006      	beq.n	800188a <LCD_Scan_Dir+0xe2>
 800187c:	4b47      	ldr	r3, [pc, #284]	; (800199c <LCD_Scan_Dir+0x1f4>)
 800187e:	889b      	ldrh	r3, [r3, #4]
 8001880:	f641 1263 	movw	r2, #6499	; 0x1963
 8001884:	4293      	cmp	r3, r2
 8001886:	f040 8250 	bne.w	8001d2a <LCD_Scan_Dir+0x582>
	{
		switch(dir)
 800188a:	79fb      	ldrb	r3, [r7, #7]
 800188c:	2b07      	cmp	r3, #7
 800188e:	d836      	bhi.n	80018fe <LCD_Scan_Dir+0x156>
 8001890:	a201      	add	r2, pc, #4	; (adr r2, 8001898 <LCD_Scan_Dir+0xf0>)
 8001892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001896:	bf00      	nop
 8001898:	080018ff 	.word	0x080018ff
 800189c:	080018b9 	.word	0x080018b9
 80018a0:	080018c3 	.word	0x080018c3
 80018a4:	080018cd 	.word	0x080018cd
 80018a8:	080018d7 	.word	0x080018d7
 80018ac:	080018e1 	.word	0x080018e1
 80018b0:	080018eb 	.word	0x080018eb
 80018b4:	080018f5 	.word	0x080018f5
		{
			case L2R_U2D://������,���ϵ���
				regval|=(0<<7)|(0<<6)|(0<<5); 
				break;
			case L2R_D2U://������,���µ���
				regval|=(1<<7)|(0<<6)|(0<<5); 
 80018b8:	89fb      	ldrh	r3, [r7, #14]
 80018ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018be:	81fb      	strh	r3, [r7, #14]
				break;
 80018c0:	e01d      	b.n	80018fe <LCD_Scan_Dir+0x156>
			case R2L_U2D://���ҵ���,���ϵ���
				regval|=(0<<7)|(1<<6)|(0<<5); 
 80018c2:	89fb      	ldrh	r3, [r7, #14]
 80018c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018c8:	81fb      	strh	r3, [r7, #14]
				break;
 80018ca:	e018      	b.n	80018fe <LCD_Scan_Dir+0x156>
			case R2L_D2U://���ҵ���,���µ���
				regval|=(1<<7)|(1<<6)|(0<<5); 
 80018cc:	89fb      	ldrh	r3, [r7, #14]
 80018ce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80018d2:	81fb      	strh	r3, [r7, #14]
				break;	 
 80018d4:	e013      	b.n	80018fe <LCD_Scan_Dir+0x156>
			case U2D_L2R://���ϵ���,������
				regval|=(0<<7)|(0<<6)|(1<<5); 
 80018d6:	89fb      	ldrh	r3, [r7, #14]
 80018d8:	f043 0320 	orr.w	r3, r3, #32
 80018dc:	81fb      	strh	r3, [r7, #14]
				break;
 80018de:	e00e      	b.n	80018fe <LCD_Scan_Dir+0x156>
			case U2D_R2L://���ϵ���,���ҵ���
				regval|=(0<<7)|(1<<6)|(1<<5); 
 80018e0:	89fb      	ldrh	r3, [r7, #14]
 80018e2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80018e6:	81fb      	strh	r3, [r7, #14]
				break;
 80018e8:	e009      	b.n	80018fe <LCD_Scan_Dir+0x156>
			case D2U_L2R://���µ���,������
				regval|=(1<<7)|(0<<6)|(1<<5); 
 80018ea:	89fb      	ldrh	r3, [r7, #14]
 80018ec:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80018f0:	81fb      	strh	r3, [r7, #14]
				break;
 80018f2:	e004      	b.n	80018fe <LCD_Scan_Dir+0x156>
			case D2U_R2L://���µ���,���ҵ���
				regval|=(1<<7)|(1<<6)|(1<<5); 
 80018f4:	89fb      	ldrh	r3, [r7, #14]
 80018f6:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 80018fa:	81fb      	strh	r3, [r7, #14]
				break;	 
 80018fc:	bf00      	nop
		}
		if(lcddev.id==0X5510)dirreg=0X3600;
 80018fe:	4b27      	ldr	r3, [pc, #156]	; (800199c <LCD_Scan_Dir+0x1f4>)
 8001900:	889b      	ldrh	r3, [r3, #4]
 8001902:	f245 5210 	movw	r2, #21776	; 0x5510
 8001906:	4293      	cmp	r3, r2
 8001908:	d103      	bne.n	8001912 <LCD_Scan_Dir+0x16a>
 800190a:	f44f 5358 	mov.w	r3, #13824	; 0x3600
 800190e:	81bb      	strh	r3, [r7, #12]
 8001910:	e001      	b.n	8001916 <LCD_Scan_Dir+0x16e>
		else dirreg=0X36;
 8001912:	2336      	movs	r3, #54	; 0x36
 8001914:	81bb      	strh	r3, [r7, #12]
 		if((lcddev.id!=0X5310)&&(lcddev.id!=0X5510)&&(lcddev.id!=0X1963))regval|=0X08;//5310/5510/1963����ҪBGR   
 8001916:	4b21      	ldr	r3, [pc, #132]	; (800199c <LCD_Scan_Dir+0x1f4>)
 8001918:	889b      	ldrh	r3, [r3, #4]
 800191a:	f245 3210 	movw	r2, #21264	; 0x5310
 800191e:	4293      	cmp	r3, r2
 8001920:	d00f      	beq.n	8001942 <LCD_Scan_Dir+0x19a>
 8001922:	4b1e      	ldr	r3, [pc, #120]	; (800199c <LCD_Scan_Dir+0x1f4>)
 8001924:	889b      	ldrh	r3, [r3, #4]
 8001926:	f245 5210 	movw	r2, #21776	; 0x5510
 800192a:	4293      	cmp	r3, r2
 800192c:	d009      	beq.n	8001942 <LCD_Scan_Dir+0x19a>
 800192e:	4b1b      	ldr	r3, [pc, #108]	; (800199c <LCD_Scan_Dir+0x1f4>)
 8001930:	889b      	ldrh	r3, [r3, #4]
 8001932:	f641 1263 	movw	r2, #6499	; 0x1963
 8001936:	4293      	cmp	r3, r2
 8001938:	d003      	beq.n	8001942 <LCD_Scan_Dir+0x19a>
 800193a:	89fb      	ldrh	r3, [r7, #14]
 800193c:	f043 0308 	orr.w	r3, r3, #8
 8001940:	81fb      	strh	r3, [r7, #14]
		if(lcddev.id==0X6804)regval|=0x02;//6804��BIT6��9341�ķ���	   
 8001942:	4b16      	ldr	r3, [pc, #88]	; (800199c <LCD_Scan_Dir+0x1f4>)
 8001944:	889b      	ldrh	r3, [r3, #4]
 8001946:	f646 0204 	movw	r2, #26628	; 0x6804
 800194a:	4293      	cmp	r3, r2
 800194c:	d103      	bne.n	8001956 <LCD_Scan_Dir+0x1ae>
 800194e:	89fb      	ldrh	r3, [r7, #14]
 8001950:	f043 0302 	orr.w	r3, r3, #2
 8001954:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg,regval);
 8001956:	89fa      	ldrh	r2, [r7, #14]
 8001958:	89bb      	ldrh	r3, [r7, #12]
 800195a:	4611      	mov	r1, r2
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff fc11 	bl	8001184 <LCD_WriteReg>
		if(lcddev.id!=0X1963)//1963�������괦��
 8001962:	4b0e      	ldr	r3, [pc, #56]	; (800199c <LCD_Scan_Dir+0x1f4>)
 8001964:	889b      	ldrh	r3, [r3, #4]
 8001966:	f641 1263 	movw	r2, #6499	; 0x1963
 800196a:	4293      	cmp	r3, r2
 800196c:	d028      	beq.n	80019c0 <LCD_Scan_Dir+0x218>
		{
			if(regval&0X20)
 800196e:	89fb      	ldrh	r3, [r7, #14]
 8001970:	f003 0320 	and.w	r3, r3, #32
 8001974:	2b00      	cmp	r3, #0
 8001976:	d013      	beq.n	80019a0 <LCD_Scan_Dir+0x1f8>
			{
				if(lcddev.width<lcddev.height)//����X,Y
 8001978:	4b08      	ldr	r3, [pc, #32]	; (800199c <LCD_Scan_Dir+0x1f4>)
 800197a:	881a      	ldrh	r2, [r3, #0]
 800197c:	4b07      	ldr	r3, [pc, #28]	; (800199c <LCD_Scan_Dir+0x1f4>)
 800197e:	885b      	ldrh	r3, [r3, #2]
 8001980:	429a      	cmp	r2, r3
 8001982:	d21d      	bcs.n	80019c0 <LCD_Scan_Dir+0x218>
				{
					temp=lcddev.width;
 8001984:	4b05      	ldr	r3, [pc, #20]	; (800199c <LCD_Scan_Dir+0x1f4>)
 8001986:	881b      	ldrh	r3, [r3, #0]
 8001988:	817b      	strh	r3, [r7, #10]
					lcddev.width=lcddev.height;
 800198a:	4b04      	ldr	r3, [pc, #16]	; (800199c <LCD_Scan_Dir+0x1f4>)
 800198c:	885a      	ldrh	r2, [r3, #2]
 800198e:	4b03      	ldr	r3, [pc, #12]	; (800199c <LCD_Scan_Dir+0x1f4>)
 8001990:	801a      	strh	r2, [r3, #0]
					lcddev.height=temp;
 8001992:	4a02      	ldr	r2, [pc, #8]	; (800199c <LCD_Scan_Dir+0x1f4>)
 8001994:	897b      	ldrh	r3, [r7, #10]
 8001996:	8053      	strh	r3, [r2, #2]
 8001998:	e012      	b.n	80019c0 <LCD_Scan_Dir+0x218>
 800199a:	bf00      	nop
 800199c:	200024f8 	.word	0x200024f8
				}
			}else  
			{
				if(lcddev.width>lcddev.height)//����X,Y
 80019a0:	4b7f      	ldr	r3, [pc, #508]	; (8001ba0 <LCD_Scan_Dir+0x3f8>)
 80019a2:	881a      	ldrh	r2, [r3, #0]
 80019a4:	4b7e      	ldr	r3, [pc, #504]	; (8001ba0 <LCD_Scan_Dir+0x3f8>)
 80019a6:	885b      	ldrh	r3, [r3, #2]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d909      	bls.n	80019c0 <LCD_Scan_Dir+0x218>
				{
					temp=lcddev.width;
 80019ac:	4b7c      	ldr	r3, [pc, #496]	; (8001ba0 <LCD_Scan_Dir+0x3f8>)
 80019ae:	881b      	ldrh	r3, [r3, #0]
 80019b0:	817b      	strh	r3, [r7, #10]
					lcddev.width=lcddev.height;
 80019b2:	4b7b      	ldr	r3, [pc, #492]	; (8001ba0 <LCD_Scan_Dir+0x3f8>)
 80019b4:	885a      	ldrh	r2, [r3, #2]
 80019b6:	4b7a      	ldr	r3, [pc, #488]	; (8001ba0 <LCD_Scan_Dir+0x3f8>)
 80019b8:	801a      	strh	r2, [r3, #0]
					lcddev.height=temp;
 80019ba:	4a79      	ldr	r2, [pc, #484]	; (8001ba0 <LCD_Scan_Dir+0x3f8>)
 80019bc:	897b      	ldrh	r3, [r7, #10]
 80019be:	8053      	strh	r3, [r2, #2]
				}
			}  
		}
		if(lcddev.id==0X5510)
 80019c0:	4b77      	ldr	r3, [pc, #476]	; (8001ba0 <LCD_Scan_Dir+0x3f8>)
 80019c2:	889b      	ldrh	r3, [r3, #4]
 80019c4:	f245 5210 	movw	r2, #21776	; 0x5510
 80019c8:	4293      	cmp	r3, r2
 80019ca:	f040 80ef 	bne.w	8001bac <LCD_Scan_Dir+0x404>
		{
			LCD_WR_REG(lcddev.setxcmd);LCD_WR_DATA(0); 
 80019ce:	4b74      	ldr	r3, [pc, #464]	; (8001ba0 <LCD_Scan_Dir+0x3f8>)
 80019d0:	895b      	ldrh	r3, [r3, #10]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7ff fb4a 	bl	800106c <LCD_WR_REG>
 80019d8:	4b72      	ldr	r3, [pc, #456]	; (8001ba4 <LCD_Scan_Dir+0x3fc>)
 80019da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019de:	611a      	str	r2, [r3, #16]
 80019e0:	4b70      	ldr	r3, [pc, #448]	; (8001ba4 <LCD_Scan_Dir+0x3fc>)
 80019e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019e6:	615a      	str	r2, [r3, #20]
 80019e8:	4b6f      	ldr	r3, [pc, #444]	; (8001ba8 <LCD_Scan_Dir+0x400>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	60da      	str	r2, [r3, #12]
 80019ee:	4b6d      	ldr	r3, [pc, #436]	; (8001ba4 <LCD_Scan_Dir+0x3fc>)
 80019f0:	2280      	movs	r2, #128	; 0x80
 80019f2:	615a      	str	r2, [r3, #20]
 80019f4:	4b6b      	ldr	r3, [pc, #428]	; (8001ba4 <LCD_Scan_Dir+0x3fc>)
 80019f6:	2280      	movs	r2, #128	; 0x80
 80019f8:	611a      	str	r2, [r3, #16]
 80019fa:	4b6a      	ldr	r3, [pc, #424]	; (8001ba4 <LCD_Scan_Dir+0x3fc>)
 80019fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a00:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd+1);LCD_WR_DATA(0); 
 8001a02:	4b67      	ldr	r3, [pc, #412]	; (8001ba0 <LCD_Scan_Dir+0x3f8>)
 8001a04:	895b      	ldrh	r3, [r3, #10]
 8001a06:	3301      	adds	r3, #1
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7ff fb2e 	bl	800106c <LCD_WR_REG>
 8001a10:	4b64      	ldr	r3, [pc, #400]	; (8001ba4 <LCD_Scan_Dir+0x3fc>)
 8001a12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a16:	611a      	str	r2, [r3, #16]
 8001a18:	4b62      	ldr	r3, [pc, #392]	; (8001ba4 <LCD_Scan_Dir+0x3fc>)
 8001a1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a1e:	615a      	str	r2, [r3, #20]
 8001a20:	4b61      	ldr	r3, [pc, #388]	; (8001ba8 <LCD_Scan_Dir+0x400>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	60da      	str	r2, [r3, #12]
 8001a26:	4b5f      	ldr	r3, [pc, #380]	; (8001ba4 <LCD_Scan_Dir+0x3fc>)
 8001a28:	2280      	movs	r2, #128	; 0x80
 8001a2a:	615a      	str	r2, [r3, #20]
 8001a2c:	4b5d      	ldr	r3, [pc, #372]	; (8001ba4 <LCD_Scan_Dir+0x3fc>)
 8001a2e:	2280      	movs	r2, #128	; 0x80
 8001a30:	611a      	str	r2, [r3, #16]
 8001a32:	4b5c      	ldr	r3, [pc, #368]	; (8001ba4 <LCD_Scan_Dir+0x3fc>)
 8001a34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a38:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd+2);LCD_WR_DATA((lcddev.width-1)>>8); 
 8001a3a:	4b59      	ldr	r3, [pc, #356]	; (8001ba0 <LCD_Scan_Dir+0x3f8>)
 8001a3c:	895b      	ldrh	r3, [r3, #10]
 8001a3e:	3302      	adds	r3, #2
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7ff fb12 	bl	800106c <LCD_WR_REG>
 8001a48:	4b56      	ldr	r3, [pc, #344]	; (8001ba4 <LCD_Scan_Dir+0x3fc>)
 8001a4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a4e:	611a      	str	r2, [r3, #16]
 8001a50:	4b54      	ldr	r3, [pc, #336]	; (8001ba4 <LCD_Scan_Dir+0x3fc>)
 8001a52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a56:	615a      	str	r2, [r3, #20]
 8001a58:	4b51      	ldr	r3, [pc, #324]	; (8001ba0 <LCD_Scan_Dir+0x3f8>)
 8001a5a:	881b      	ldrh	r3, [r3, #0]
 8001a5c:	3b01      	subs	r3, #1
 8001a5e:	121a      	asrs	r2, r3, #8
 8001a60:	4b51      	ldr	r3, [pc, #324]	; (8001ba8 <LCD_Scan_Dir+0x400>)
 8001a62:	60da      	str	r2, [r3, #12]
 8001a64:	4b4f      	ldr	r3, [pc, #316]	; (8001ba4 <LCD_Scan_Dir+0x3fc>)
 8001a66:	2280      	movs	r2, #128	; 0x80
 8001a68:	615a      	str	r2, [r3, #20]
 8001a6a:	4b4e      	ldr	r3, [pc, #312]	; (8001ba4 <LCD_Scan_Dir+0x3fc>)
 8001a6c:	2280      	movs	r2, #128	; 0x80
 8001a6e:	611a      	str	r2, [r3, #16]
 8001a70:	4b4c      	ldr	r3, [pc, #304]	; (8001ba4 <LCD_Scan_Dir+0x3fc>)
 8001a72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a76:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd+3);LCD_WR_DATA((lcddev.width-1)&0XFF); 
 8001a78:	4b49      	ldr	r3, [pc, #292]	; (8001ba0 <LCD_Scan_Dir+0x3f8>)
 8001a7a:	895b      	ldrh	r3, [r3, #10]
 8001a7c:	3303      	adds	r3, #3
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff faf3 	bl	800106c <LCD_WR_REG>
 8001a86:	4b47      	ldr	r3, [pc, #284]	; (8001ba4 <LCD_Scan_Dir+0x3fc>)
 8001a88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a8c:	611a      	str	r2, [r3, #16]
 8001a8e:	4b45      	ldr	r3, [pc, #276]	; (8001ba4 <LCD_Scan_Dir+0x3fc>)
 8001a90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a94:	615a      	str	r2, [r3, #20]
 8001a96:	4b42      	ldr	r3, [pc, #264]	; (8001ba0 <LCD_Scan_Dir+0x3f8>)
 8001a98:	881b      	ldrh	r3, [r3, #0]
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	4a42      	ldr	r2, [pc, #264]	; (8001ba8 <LCD_Scan_Dir+0x400>)
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	60d3      	str	r3, [r2, #12]
 8001aa2:	4b40      	ldr	r3, [pc, #256]	; (8001ba4 <LCD_Scan_Dir+0x3fc>)
 8001aa4:	2280      	movs	r2, #128	; 0x80
 8001aa6:	615a      	str	r2, [r3, #20]
 8001aa8:	4b3e      	ldr	r3, [pc, #248]	; (8001ba4 <LCD_Scan_Dir+0x3fc>)
 8001aaa:	2280      	movs	r2, #128	; 0x80
 8001aac:	611a      	str	r2, [r3, #16]
 8001aae:	4b3d      	ldr	r3, [pc, #244]	; (8001ba4 <LCD_Scan_Dir+0x3fc>)
 8001ab0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ab4:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd);LCD_WR_DATA(0); 
 8001ab6:	4b3a      	ldr	r3, [pc, #232]	; (8001ba0 <LCD_Scan_Dir+0x3f8>)
 8001ab8:	899b      	ldrh	r3, [r3, #12]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7ff fad6 	bl	800106c <LCD_WR_REG>
 8001ac0:	4b38      	ldr	r3, [pc, #224]	; (8001ba4 <LCD_Scan_Dir+0x3fc>)
 8001ac2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ac6:	611a      	str	r2, [r3, #16]
 8001ac8:	4b36      	ldr	r3, [pc, #216]	; (8001ba4 <LCD_Scan_Dir+0x3fc>)
 8001aca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ace:	615a      	str	r2, [r3, #20]
 8001ad0:	4b35      	ldr	r3, [pc, #212]	; (8001ba8 <LCD_Scan_Dir+0x400>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	60da      	str	r2, [r3, #12]
 8001ad6:	4b33      	ldr	r3, [pc, #204]	; (8001ba4 <LCD_Scan_Dir+0x3fc>)
 8001ad8:	2280      	movs	r2, #128	; 0x80
 8001ada:	615a      	str	r2, [r3, #20]
 8001adc:	4b31      	ldr	r3, [pc, #196]	; (8001ba4 <LCD_Scan_Dir+0x3fc>)
 8001ade:	2280      	movs	r2, #128	; 0x80
 8001ae0:	611a      	str	r2, [r3, #16]
 8001ae2:	4b30      	ldr	r3, [pc, #192]	; (8001ba4 <LCD_Scan_Dir+0x3fc>)
 8001ae4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ae8:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd+1);LCD_WR_DATA(0); 
 8001aea:	4b2d      	ldr	r3, [pc, #180]	; (8001ba0 <LCD_Scan_Dir+0x3f8>)
 8001aec:	899b      	ldrh	r3, [r3, #12]
 8001aee:	3301      	adds	r3, #1
 8001af0:	b29b      	uxth	r3, r3
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff faba 	bl	800106c <LCD_WR_REG>
 8001af8:	4b2a      	ldr	r3, [pc, #168]	; (8001ba4 <LCD_Scan_Dir+0x3fc>)
 8001afa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001afe:	611a      	str	r2, [r3, #16]
 8001b00:	4b28      	ldr	r3, [pc, #160]	; (8001ba4 <LCD_Scan_Dir+0x3fc>)
 8001b02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b06:	615a      	str	r2, [r3, #20]
 8001b08:	4b27      	ldr	r3, [pc, #156]	; (8001ba8 <LCD_Scan_Dir+0x400>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	60da      	str	r2, [r3, #12]
 8001b0e:	4b25      	ldr	r3, [pc, #148]	; (8001ba4 <LCD_Scan_Dir+0x3fc>)
 8001b10:	2280      	movs	r2, #128	; 0x80
 8001b12:	615a      	str	r2, [r3, #20]
 8001b14:	4b23      	ldr	r3, [pc, #140]	; (8001ba4 <LCD_Scan_Dir+0x3fc>)
 8001b16:	2280      	movs	r2, #128	; 0x80
 8001b18:	611a      	str	r2, [r3, #16]
 8001b1a:	4b22      	ldr	r3, [pc, #136]	; (8001ba4 <LCD_Scan_Dir+0x3fc>)
 8001b1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b20:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd+2);LCD_WR_DATA((lcddev.height-1)>>8); 
 8001b22:	4b1f      	ldr	r3, [pc, #124]	; (8001ba0 <LCD_Scan_Dir+0x3f8>)
 8001b24:	899b      	ldrh	r3, [r3, #12]
 8001b26:	3302      	adds	r3, #2
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7ff fa9e 	bl	800106c <LCD_WR_REG>
 8001b30:	4b1c      	ldr	r3, [pc, #112]	; (8001ba4 <LCD_Scan_Dir+0x3fc>)
 8001b32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b36:	611a      	str	r2, [r3, #16]
 8001b38:	4b1a      	ldr	r3, [pc, #104]	; (8001ba4 <LCD_Scan_Dir+0x3fc>)
 8001b3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b3e:	615a      	str	r2, [r3, #20]
 8001b40:	4b17      	ldr	r3, [pc, #92]	; (8001ba0 <LCD_Scan_Dir+0x3f8>)
 8001b42:	885b      	ldrh	r3, [r3, #2]
 8001b44:	3b01      	subs	r3, #1
 8001b46:	121a      	asrs	r2, r3, #8
 8001b48:	4b17      	ldr	r3, [pc, #92]	; (8001ba8 <LCD_Scan_Dir+0x400>)
 8001b4a:	60da      	str	r2, [r3, #12]
 8001b4c:	4b15      	ldr	r3, [pc, #84]	; (8001ba4 <LCD_Scan_Dir+0x3fc>)
 8001b4e:	2280      	movs	r2, #128	; 0x80
 8001b50:	615a      	str	r2, [r3, #20]
 8001b52:	4b14      	ldr	r3, [pc, #80]	; (8001ba4 <LCD_Scan_Dir+0x3fc>)
 8001b54:	2280      	movs	r2, #128	; 0x80
 8001b56:	611a      	str	r2, [r3, #16]
 8001b58:	4b12      	ldr	r3, [pc, #72]	; (8001ba4 <LCD_Scan_Dir+0x3fc>)
 8001b5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b5e:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd+3);LCD_WR_DATA((lcddev.height-1)&0XFF);
 8001b60:	4b0f      	ldr	r3, [pc, #60]	; (8001ba0 <LCD_Scan_Dir+0x3f8>)
 8001b62:	899b      	ldrh	r3, [r3, #12]
 8001b64:	3303      	adds	r3, #3
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff fa7f 	bl	800106c <LCD_WR_REG>
 8001b6e:	4b0d      	ldr	r3, [pc, #52]	; (8001ba4 <LCD_Scan_Dir+0x3fc>)
 8001b70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b74:	611a      	str	r2, [r3, #16]
 8001b76:	4b0b      	ldr	r3, [pc, #44]	; (8001ba4 <LCD_Scan_Dir+0x3fc>)
 8001b78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b7c:	615a      	str	r2, [r3, #20]
 8001b7e:	4b08      	ldr	r3, [pc, #32]	; (8001ba0 <LCD_Scan_Dir+0x3f8>)
 8001b80:	885b      	ldrh	r3, [r3, #2]
 8001b82:	3b01      	subs	r3, #1
 8001b84:	4a08      	ldr	r2, [pc, #32]	; (8001ba8 <LCD_Scan_Dir+0x400>)
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	60d3      	str	r3, [r2, #12]
 8001b8a:	4b06      	ldr	r3, [pc, #24]	; (8001ba4 <LCD_Scan_Dir+0x3fc>)
 8001b8c:	2280      	movs	r2, #128	; 0x80
 8001b8e:	615a      	str	r2, [r3, #20]
 8001b90:	4b04      	ldr	r3, [pc, #16]	; (8001ba4 <LCD_Scan_Dir+0x3fc>)
 8001b92:	2280      	movs	r2, #128	; 0x80
 8001b94:	611a      	str	r2, [r3, #16]
 8001b96:	4b03      	ldr	r3, [pc, #12]	; (8001ba4 <LCD_Scan_Dir+0x3fc>)
 8001b98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b9c:	611a      	str	r2, [r3, #16]
		if(lcddev.id==0X5510)
 8001b9e:	e10a      	b.n	8001db6 <LCD_Scan_Dir+0x60e>
 8001ba0:	200024f8 	.word	0x200024f8
 8001ba4:	40011000 	.word	0x40011000
 8001ba8:	40010c00 	.word	0x40010c00
		}else
		{
			LCD_WR_REG(lcddev.setxcmd); 
 8001bac:	4b84      	ldr	r3, [pc, #528]	; (8001dc0 <LCD_Scan_Dir+0x618>)
 8001bae:	895b      	ldrh	r3, [r3, #10]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff fa5b 	bl	800106c <LCD_WR_REG>
			LCD_WR_DATA(0);LCD_WR_DATA(0);
 8001bb6:	4b83      	ldr	r3, [pc, #524]	; (8001dc4 <LCD_Scan_Dir+0x61c>)
 8001bb8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bbc:	611a      	str	r2, [r3, #16]
 8001bbe:	4b81      	ldr	r3, [pc, #516]	; (8001dc4 <LCD_Scan_Dir+0x61c>)
 8001bc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bc4:	615a      	str	r2, [r3, #20]
 8001bc6:	4b80      	ldr	r3, [pc, #512]	; (8001dc8 <LCD_Scan_Dir+0x620>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	60da      	str	r2, [r3, #12]
 8001bcc:	4b7d      	ldr	r3, [pc, #500]	; (8001dc4 <LCD_Scan_Dir+0x61c>)
 8001bce:	2280      	movs	r2, #128	; 0x80
 8001bd0:	615a      	str	r2, [r3, #20]
 8001bd2:	4b7c      	ldr	r3, [pc, #496]	; (8001dc4 <LCD_Scan_Dir+0x61c>)
 8001bd4:	2280      	movs	r2, #128	; 0x80
 8001bd6:	611a      	str	r2, [r3, #16]
 8001bd8:	4b7a      	ldr	r3, [pc, #488]	; (8001dc4 <LCD_Scan_Dir+0x61c>)
 8001bda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bde:	611a      	str	r2, [r3, #16]
 8001be0:	4b78      	ldr	r3, [pc, #480]	; (8001dc4 <LCD_Scan_Dir+0x61c>)
 8001be2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001be6:	611a      	str	r2, [r3, #16]
 8001be8:	4b76      	ldr	r3, [pc, #472]	; (8001dc4 <LCD_Scan_Dir+0x61c>)
 8001bea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bee:	615a      	str	r2, [r3, #20]
 8001bf0:	4b75      	ldr	r3, [pc, #468]	; (8001dc8 <LCD_Scan_Dir+0x620>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	60da      	str	r2, [r3, #12]
 8001bf6:	4b73      	ldr	r3, [pc, #460]	; (8001dc4 <LCD_Scan_Dir+0x61c>)
 8001bf8:	2280      	movs	r2, #128	; 0x80
 8001bfa:	615a      	str	r2, [r3, #20]
 8001bfc:	4b71      	ldr	r3, [pc, #452]	; (8001dc4 <LCD_Scan_Dir+0x61c>)
 8001bfe:	2280      	movs	r2, #128	; 0x80
 8001c00:	611a      	str	r2, [r3, #16]
 8001c02:	4b70      	ldr	r3, [pc, #448]	; (8001dc4 <LCD_Scan_Dir+0x61c>)
 8001c04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c08:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width-1)>>8);LCD_WR_DATA((lcddev.width-1)&0XFF);
 8001c0a:	4b6e      	ldr	r3, [pc, #440]	; (8001dc4 <LCD_Scan_Dir+0x61c>)
 8001c0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c10:	611a      	str	r2, [r3, #16]
 8001c12:	4b6c      	ldr	r3, [pc, #432]	; (8001dc4 <LCD_Scan_Dir+0x61c>)
 8001c14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c18:	615a      	str	r2, [r3, #20]
 8001c1a:	4b69      	ldr	r3, [pc, #420]	; (8001dc0 <LCD_Scan_Dir+0x618>)
 8001c1c:	881b      	ldrh	r3, [r3, #0]
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	121a      	asrs	r2, r3, #8
 8001c22:	4b69      	ldr	r3, [pc, #420]	; (8001dc8 <LCD_Scan_Dir+0x620>)
 8001c24:	60da      	str	r2, [r3, #12]
 8001c26:	4b67      	ldr	r3, [pc, #412]	; (8001dc4 <LCD_Scan_Dir+0x61c>)
 8001c28:	2280      	movs	r2, #128	; 0x80
 8001c2a:	615a      	str	r2, [r3, #20]
 8001c2c:	4b65      	ldr	r3, [pc, #404]	; (8001dc4 <LCD_Scan_Dir+0x61c>)
 8001c2e:	2280      	movs	r2, #128	; 0x80
 8001c30:	611a      	str	r2, [r3, #16]
 8001c32:	4b64      	ldr	r3, [pc, #400]	; (8001dc4 <LCD_Scan_Dir+0x61c>)
 8001c34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c38:	611a      	str	r2, [r3, #16]
 8001c3a:	4b62      	ldr	r3, [pc, #392]	; (8001dc4 <LCD_Scan_Dir+0x61c>)
 8001c3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c40:	611a      	str	r2, [r3, #16]
 8001c42:	4b60      	ldr	r3, [pc, #384]	; (8001dc4 <LCD_Scan_Dir+0x61c>)
 8001c44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c48:	615a      	str	r2, [r3, #20]
 8001c4a:	4b5d      	ldr	r3, [pc, #372]	; (8001dc0 <LCD_Scan_Dir+0x618>)
 8001c4c:	881b      	ldrh	r3, [r3, #0]
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	4a5d      	ldr	r2, [pc, #372]	; (8001dc8 <LCD_Scan_Dir+0x620>)
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	60d3      	str	r3, [r2, #12]
 8001c56:	4b5b      	ldr	r3, [pc, #364]	; (8001dc4 <LCD_Scan_Dir+0x61c>)
 8001c58:	2280      	movs	r2, #128	; 0x80
 8001c5a:	615a      	str	r2, [r3, #20]
 8001c5c:	4b59      	ldr	r3, [pc, #356]	; (8001dc4 <LCD_Scan_Dir+0x61c>)
 8001c5e:	2280      	movs	r2, #128	; 0x80
 8001c60:	611a      	str	r2, [r3, #16]
 8001c62:	4b58      	ldr	r3, [pc, #352]	; (8001dc4 <LCD_Scan_Dir+0x61c>)
 8001c64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c68:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd); 
 8001c6a:	4b55      	ldr	r3, [pc, #340]	; (8001dc0 <LCD_Scan_Dir+0x618>)
 8001c6c:	899b      	ldrh	r3, [r3, #12]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff f9fc 	bl	800106c <LCD_WR_REG>
			LCD_WR_DATA(0);LCD_WR_DATA(0);
 8001c74:	4b53      	ldr	r3, [pc, #332]	; (8001dc4 <LCD_Scan_Dir+0x61c>)
 8001c76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c7a:	611a      	str	r2, [r3, #16]
 8001c7c:	4b51      	ldr	r3, [pc, #324]	; (8001dc4 <LCD_Scan_Dir+0x61c>)
 8001c7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c82:	615a      	str	r2, [r3, #20]
 8001c84:	4b50      	ldr	r3, [pc, #320]	; (8001dc8 <LCD_Scan_Dir+0x620>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	60da      	str	r2, [r3, #12]
 8001c8a:	4b4e      	ldr	r3, [pc, #312]	; (8001dc4 <LCD_Scan_Dir+0x61c>)
 8001c8c:	2280      	movs	r2, #128	; 0x80
 8001c8e:	615a      	str	r2, [r3, #20]
 8001c90:	4b4c      	ldr	r3, [pc, #304]	; (8001dc4 <LCD_Scan_Dir+0x61c>)
 8001c92:	2280      	movs	r2, #128	; 0x80
 8001c94:	611a      	str	r2, [r3, #16]
 8001c96:	4b4b      	ldr	r3, [pc, #300]	; (8001dc4 <LCD_Scan_Dir+0x61c>)
 8001c98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c9c:	611a      	str	r2, [r3, #16]
 8001c9e:	4b49      	ldr	r3, [pc, #292]	; (8001dc4 <LCD_Scan_Dir+0x61c>)
 8001ca0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ca4:	611a      	str	r2, [r3, #16]
 8001ca6:	4b47      	ldr	r3, [pc, #284]	; (8001dc4 <LCD_Scan_Dir+0x61c>)
 8001ca8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cac:	615a      	str	r2, [r3, #20]
 8001cae:	4b46      	ldr	r3, [pc, #280]	; (8001dc8 <LCD_Scan_Dir+0x620>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	60da      	str	r2, [r3, #12]
 8001cb4:	4b43      	ldr	r3, [pc, #268]	; (8001dc4 <LCD_Scan_Dir+0x61c>)
 8001cb6:	2280      	movs	r2, #128	; 0x80
 8001cb8:	615a      	str	r2, [r3, #20]
 8001cba:	4b42      	ldr	r3, [pc, #264]	; (8001dc4 <LCD_Scan_Dir+0x61c>)
 8001cbc:	2280      	movs	r2, #128	; 0x80
 8001cbe:	611a      	str	r2, [r3, #16]
 8001cc0:	4b40      	ldr	r3, [pc, #256]	; (8001dc4 <LCD_Scan_Dir+0x61c>)
 8001cc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cc6:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.height-1)>>8);LCD_WR_DATA((lcddev.height-1)&0XFF);  
 8001cc8:	4b3e      	ldr	r3, [pc, #248]	; (8001dc4 <LCD_Scan_Dir+0x61c>)
 8001cca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cce:	611a      	str	r2, [r3, #16]
 8001cd0:	4b3c      	ldr	r3, [pc, #240]	; (8001dc4 <LCD_Scan_Dir+0x61c>)
 8001cd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cd6:	615a      	str	r2, [r3, #20]
 8001cd8:	4b39      	ldr	r3, [pc, #228]	; (8001dc0 <LCD_Scan_Dir+0x618>)
 8001cda:	885b      	ldrh	r3, [r3, #2]
 8001cdc:	3b01      	subs	r3, #1
 8001cde:	121a      	asrs	r2, r3, #8
 8001ce0:	4b39      	ldr	r3, [pc, #228]	; (8001dc8 <LCD_Scan_Dir+0x620>)
 8001ce2:	60da      	str	r2, [r3, #12]
 8001ce4:	4b37      	ldr	r3, [pc, #220]	; (8001dc4 <LCD_Scan_Dir+0x61c>)
 8001ce6:	2280      	movs	r2, #128	; 0x80
 8001ce8:	615a      	str	r2, [r3, #20]
 8001cea:	4b36      	ldr	r3, [pc, #216]	; (8001dc4 <LCD_Scan_Dir+0x61c>)
 8001cec:	2280      	movs	r2, #128	; 0x80
 8001cee:	611a      	str	r2, [r3, #16]
 8001cf0:	4b34      	ldr	r3, [pc, #208]	; (8001dc4 <LCD_Scan_Dir+0x61c>)
 8001cf2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cf6:	611a      	str	r2, [r3, #16]
 8001cf8:	4b32      	ldr	r3, [pc, #200]	; (8001dc4 <LCD_Scan_Dir+0x61c>)
 8001cfa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cfe:	611a      	str	r2, [r3, #16]
 8001d00:	4b30      	ldr	r3, [pc, #192]	; (8001dc4 <LCD_Scan_Dir+0x61c>)
 8001d02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d06:	615a      	str	r2, [r3, #20]
 8001d08:	4b2d      	ldr	r3, [pc, #180]	; (8001dc0 <LCD_Scan_Dir+0x618>)
 8001d0a:	885b      	ldrh	r3, [r3, #2]
 8001d0c:	3b01      	subs	r3, #1
 8001d0e:	4a2e      	ldr	r2, [pc, #184]	; (8001dc8 <LCD_Scan_Dir+0x620>)
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	60d3      	str	r3, [r2, #12]
 8001d14:	4b2b      	ldr	r3, [pc, #172]	; (8001dc4 <LCD_Scan_Dir+0x61c>)
 8001d16:	2280      	movs	r2, #128	; 0x80
 8001d18:	615a      	str	r2, [r3, #20]
 8001d1a:	4b2a      	ldr	r3, [pc, #168]	; (8001dc4 <LCD_Scan_Dir+0x61c>)
 8001d1c:	2280      	movs	r2, #128	; 0x80
 8001d1e:	611a      	str	r2, [r3, #16]
 8001d20:	4b28      	ldr	r3, [pc, #160]	; (8001dc4 <LCD_Scan_Dir+0x61c>)
 8001d22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d26:	611a      	str	r2, [r3, #16]
		if(lcddev.id==0X5510)
 8001d28:	e045      	b.n	8001db6 <LCD_Scan_Dir+0x60e>
		}
  	}else 
	{
		switch(dir)
 8001d2a:	79fb      	ldrb	r3, [r7, #7]
 8001d2c:	2b07      	cmp	r3, #7
 8001d2e:	d836      	bhi.n	8001d9e <LCD_Scan_Dir+0x5f6>
 8001d30:	a201      	add	r2, pc, #4	; (adr r2, 8001d38 <LCD_Scan_Dir+0x590>)
 8001d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d36:	bf00      	nop
 8001d38:	08001d59 	.word	0x08001d59
 8001d3c:	08001d63 	.word	0x08001d63
 8001d40:	08001d6d 	.word	0x08001d6d
 8001d44:	08001d9f 	.word	0x08001d9f
 8001d48:	08001d77 	.word	0x08001d77
 8001d4c:	08001d81 	.word	0x08001d81
 8001d50:	08001d8b 	.word	0x08001d8b
 8001d54:	08001d95 	.word	0x08001d95
		{
			case L2R_U2D://������,���ϵ���
				regval|=(1<<5)|(1<<4)|(0<<3); 
 8001d58:	89fb      	ldrh	r3, [r7, #14]
 8001d5a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001d5e:	81fb      	strh	r3, [r7, #14]
				break;
 8001d60:	e01d      	b.n	8001d9e <LCD_Scan_Dir+0x5f6>
			case L2R_D2U://������,���µ���
				regval|=(0<<5)|(1<<4)|(0<<3); 
 8001d62:	89fb      	ldrh	r3, [r7, #14]
 8001d64:	f043 0310 	orr.w	r3, r3, #16
 8001d68:	81fb      	strh	r3, [r7, #14]
				break;
 8001d6a:	e018      	b.n	8001d9e <LCD_Scan_Dir+0x5f6>
			case R2L_U2D://���ҵ���,���ϵ���
				regval|=(1<<5)|(0<<4)|(0<<3);
 8001d6c:	89fb      	ldrh	r3, [r7, #14]
 8001d6e:	f043 0320 	orr.w	r3, r3, #32
 8001d72:	81fb      	strh	r3, [r7, #14]
				break;
 8001d74:	e013      	b.n	8001d9e <LCD_Scan_Dir+0x5f6>
			case R2L_D2U://���ҵ���,���µ���
				regval|=(0<<5)|(0<<4)|(0<<3); 
				break;	 
			case U2D_L2R://���ϵ���,������
				regval|=(1<<5)|(1<<4)|(1<<3); 
 8001d76:	89fb      	ldrh	r3, [r7, #14]
 8001d78:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8001d7c:	81fb      	strh	r3, [r7, #14]
				break;
 8001d7e:	e00e      	b.n	8001d9e <LCD_Scan_Dir+0x5f6>
			case U2D_R2L://���ϵ���,���ҵ���
				regval|=(1<<5)|(0<<4)|(1<<3); 
 8001d80:	89fb      	ldrh	r3, [r7, #14]
 8001d82:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8001d86:	81fb      	strh	r3, [r7, #14]
				break;
 8001d88:	e009      	b.n	8001d9e <LCD_Scan_Dir+0x5f6>
			case D2U_L2R://���µ���,������
				regval|=(0<<5)|(1<<4)|(1<<3); 
 8001d8a:	89fb      	ldrh	r3, [r7, #14]
 8001d8c:	f043 0318 	orr.w	r3, r3, #24
 8001d90:	81fb      	strh	r3, [r7, #14]
				break;
 8001d92:	e004      	b.n	8001d9e <LCD_Scan_Dir+0x5f6>
			case D2U_R2L://���µ���,���ҵ���
				regval|=(0<<5)|(0<<4)|(1<<3); 
 8001d94:	89fb      	ldrh	r3, [r7, #14]
 8001d96:	f043 0308 	orr.w	r3, r3, #8
 8001d9a:	81fb      	strh	r3, [r7, #14]
				break;	 
 8001d9c:	bf00      	nop
		} 
		dirreg=0X03;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	81bb      	strh	r3, [r7, #12]
		regval|=1<<12; 
 8001da2:	89fb      	ldrh	r3, [r7, #14]
 8001da4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001da8:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg,regval);
 8001daa:	89fa      	ldrh	r2, [r7, #14]
 8001dac:	89bb      	ldrh	r3, [r7, #12]
 8001dae:	4611      	mov	r1, r2
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7ff f9e7 	bl	8001184 <LCD_WriteReg>
	}
}     
 8001db6:	bf00      	nop
 8001db8:	3710      	adds	r7, #16
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	200024f8 	.word	0x200024f8
 8001dc4:	40011000 	.word	0x40011000
 8001dc8:	40010c00 	.word	0x40010c00

08001dcc <LCD_DrawPoint>:
//����
//x,y:����
//POINT_COLOR:�˵����ɫ
void LCD_DrawPoint(u16 x,u16 y)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	460a      	mov	r2, r1
 8001dd6:	80fb      	strh	r3, [r7, #6]
 8001dd8:	4613      	mov	r3, r2
 8001dda:	80bb      	strh	r3, [r7, #4]
	LCD_SetCursor(x,y);		//���ù��λ�� 
 8001ddc:	88ba      	ldrh	r2, [r7, #4]
 8001dde:	88fb      	ldrh	r3, [r7, #6]
 8001de0:	4611      	mov	r1, r2
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7ff fa14 	bl	8001210 <LCD_SetCursor>
	LCD_WriteRAM_Prepare();	//��ʼд��GRAM
 8001de8:	f7ff fa06 	bl	80011f8 <LCD_WriteRAM_Prepare>
	LCD_WR_DATA(POINT_COLOR); 
 8001dec:	4b0c      	ldr	r3, [pc, #48]	; (8001e20 <LCD_DrawPoint+0x54>)
 8001dee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001df2:	611a      	str	r2, [r3, #16]
 8001df4:	4b0a      	ldr	r3, [pc, #40]	; (8001e20 <LCD_DrawPoint+0x54>)
 8001df6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dfa:	615a      	str	r2, [r3, #20]
 8001dfc:	4b09      	ldr	r3, [pc, #36]	; (8001e24 <LCD_DrawPoint+0x58>)
 8001dfe:	881a      	ldrh	r2, [r3, #0]
 8001e00:	4b09      	ldr	r3, [pc, #36]	; (8001e28 <LCD_DrawPoint+0x5c>)
 8001e02:	60da      	str	r2, [r3, #12]
 8001e04:	4b06      	ldr	r3, [pc, #24]	; (8001e20 <LCD_DrawPoint+0x54>)
 8001e06:	2280      	movs	r2, #128	; 0x80
 8001e08:	615a      	str	r2, [r3, #20]
 8001e0a:	4b05      	ldr	r3, [pc, #20]	; (8001e20 <LCD_DrawPoint+0x54>)
 8001e0c:	2280      	movs	r2, #128	; 0x80
 8001e0e:	611a      	str	r2, [r3, #16]
 8001e10:	4b03      	ldr	r3, [pc, #12]	; (8001e20 <LCD_DrawPoint+0x54>)
 8001e12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e16:	611a      	str	r2, [r3, #16]
}	 
 8001e18:	bf00      	nop
 8001e1a:	3708      	adds	r7, #8
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	40011000 	.word	0x40011000
 8001e24:	200000b8 	.word	0x200000b8
 8001e28:	40010c00 	.word	0x40010c00

08001e2c <LCD_Fast_DrawPoint>:
//���ٻ���
//x,y:����
//color:��ɫ
void LCD_Fast_DrawPoint(u16 x,u16 y,u16 color)
{	   
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	4603      	mov	r3, r0
 8001e34:	80fb      	strh	r3, [r7, #6]
 8001e36:	460b      	mov	r3, r1
 8001e38:	80bb      	strh	r3, [r7, #4]
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	807b      	strh	r3, [r7, #2]
	if(lcddev.id==0X9341||lcddev.id==0X5310)
 8001e3e:	4b75      	ldr	r3, [pc, #468]	; (8002014 <LCD_Fast_DrawPoint+0x1e8>)
 8001e40:	889b      	ldrh	r3, [r3, #4]
 8001e42:	f249 3241 	movw	r2, #37697	; 0x9341
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d005      	beq.n	8001e56 <LCD_Fast_DrawPoint+0x2a>
 8001e4a:	4b72      	ldr	r3, [pc, #456]	; (8002014 <LCD_Fast_DrawPoint+0x1e8>)
 8001e4c:	889b      	ldrh	r3, [r3, #4]
 8001e4e:	f245 3210 	movw	r2, #21264	; 0x5310
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d164      	bne.n	8001f20 <LCD_Fast_DrawPoint+0xf4>
	{
		LCD_WR_REG(lcddev.setxcmd); 
 8001e56:	4b6f      	ldr	r3, [pc, #444]	; (8002014 <LCD_Fast_DrawPoint+0x1e8>)
 8001e58:	895b      	ldrh	r3, [r3, #10]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7ff f906 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATA(x>>8);LCD_WR_DATA(x&0XFF);  			 
 8001e60:	4b6d      	ldr	r3, [pc, #436]	; (8002018 <LCD_Fast_DrawPoint+0x1ec>)
 8001e62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e66:	611a      	str	r2, [r3, #16]
 8001e68:	4b6b      	ldr	r3, [pc, #428]	; (8002018 <LCD_Fast_DrawPoint+0x1ec>)
 8001e6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e6e:	615a      	str	r2, [r3, #20]
 8001e70:	88fb      	ldrh	r3, [r7, #6]
 8001e72:	0a1b      	lsrs	r3, r3, #8
 8001e74:	b29a      	uxth	r2, r3
 8001e76:	4b69      	ldr	r3, [pc, #420]	; (800201c <LCD_Fast_DrawPoint+0x1f0>)
 8001e78:	60da      	str	r2, [r3, #12]
 8001e7a:	4b67      	ldr	r3, [pc, #412]	; (8002018 <LCD_Fast_DrawPoint+0x1ec>)
 8001e7c:	2280      	movs	r2, #128	; 0x80
 8001e7e:	615a      	str	r2, [r3, #20]
 8001e80:	4b65      	ldr	r3, [pc, #404]	; (8002018 <LCD_Fast_DrawPoint+0x1ec>)
 8001e82:	2280      	movs	r2, #128	; 0x80
 8001e84:	611a      	str	r2, [r3, #16]
 8001e86:	4b64      	ldr	r3, [pc, #400]	; (8002018 <LCD_Fast_DrawPoint+0x1ec>)
 8001e88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e8c:	611a      	str	r2, [r3, #16]
 8001e8e:	4b62      	ldr	r3, [pc, #392]	; (8002018 <LCD_Fast_DrawPoint+0x1ec>)
 8001e90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e94:	611a      	str	r2, [r3, #16]
 8001e96:	4b60      	ldr	r3, [pc, #384]	; (8002018 <LCD_Fast_DrawPoint+0x1ec>)
 8001e98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e9c:	615a      	str	r2, [r3, #20]
 8001e9e:	88fb      	ldrh	r3, [r7, #6]
 8001ea0:	4a5e      	ldr	r2, [pc, #376]	; (800201c <LCD_Fast_DrawPoint+0x1f0>)
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	60d3      	str	r3, [r2, #12]
 8001ea6:	4b5c      	ldr	r3, [pc, #368]	; (8002018 <LCD_Fast_DrawPoint+0x1ec>)
 8001ea8:	2280      	movs	r2, #128	; 0x80
 8001eaa:	615a      	str	r2, [r3, #20]
 8001eac:	4b5a      	ldr	r3, [pc, #360]	; (8002018 <LCD_Fast_DrawPoint+0x1ec>)
 8001eae:	2280      	movs	r2, #128	; 0x80
 8001eb0:	611a      	str	r2, [r3, #16]
 8001eb2:	4b59      	ldr	r3, [pc, #356]	; (8002018 <LCD_Fast_DrawPoint+0x1ec>)
 8001eb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001eb8:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd); 
 8001eba:	4b56      	ldr	r3, [pc, #344]	; (8002014 <LCD_Fast_DrawPoint+0x1e8>)
 8001ebc:	899b      	ldrh	r3, [r3, #12]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7ff f8d4 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATA(y>>8);LCD_WR_DATA(y&0XFF); 		 	 
 8001ec4:	4b54      	ldr	r3, [pc, #336]	; (8002018 <LCD_Fast_DrawPoint+0x1ec>)
 8001ec6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001eca:	611a      	str	r2, [r3, #16]
 8001ecc:	4b52      	ldr	r3, [pc, #328]	; (8002018 <LCD_Fast_DrawPoint+0x1ec>)
 8001ece:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ed2:	615a      	str	r2, [r3, #20]
 8001ed4:	88bb      	ldrh	r3, [r7, #4]
 8001ed6:	0a1b      	lsrs	r3, r3, #8
 8001ed8:	b29a      	uxth	r2, r3
 8001eda:	4b50      	ldr	r3, [pc, #320]	; (800201c <LCD_Fast_DrawPoint+0x1f0>)
 8001edc:	60da      	str	r2, [r3, #12]
 8001ede:	4b4e      	ldr	r3, [pc, #312]	; (8002018 <LCD_Fast_DrawPoint+0x1ec>)
 8001ee0:	2280      	movs	r2, #128	; 0x80
 8001ee2:	615a      	str	r2, [r3, #20]
 8001ee4:	4b4c      	ldr	r3, [pc, #304]	; (8002018 <LCD_Fast_DrawPoint+0x1ec>)
 8001ee6:	2280      	movs	r2, #128	; 0x80
 8001ee8:	611a      	str	r2, [r3, #16]
 8001eea:	4b4b      	ldr	r3, [pc, #300]	; (8002018 <LCD_Fast_DrawPoint+0x1ec>)
 8001eec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ef0:	611a      	str	r2, [r3, #16]
 8001ef2:	4b49      	ldr	r3, [pc, #292]	; (8002018 <LCD_Fast_DrawPoint+0x1ec>)
 8001ef4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ef8:	611a      	str	r2, [r3, #16]
 8001efa:	4b47      	ldr	r3, [pc, #284]	; (8002018 <LCD_Fast_DrawPoint+0x1ec>)
 8001efc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f00:	615a      	str	r2, [r3, #20]
 8001f02:	88bb      	ldrh	r3, [r7, #4]
 8001f04:	4a45      	ldr	r2, [pc, #276]	; (800201c <LCD_Fast_DrawPoint+0x1f0>)
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	60d3      	str	r3, [r2, #12]
 8001f0a:	4b43      	ldr	r3, [pc, #268]	; (8002018 <LCD_Fast_DrawPoint+0x1ec>)
 8001f0c:	2280      	movs	r2, #128	; 0x80
 8001f0e:	615a      	str	r2, [r3, #20]
 8001f10:	4b41      	ldr	r3, [pc, #260]	; (8002018 <LCD_Fast_DrawPoint+0x1ec>)
 8001f12:	2280      	movs	r2, #128	; 0x80
 8001f14:	611a      	str	r2, [r3, #16]
 8001f16:	4b40      	ldr	r3, [pc, #256]	; (8002018 <LCD_Fast_DrawPoint+0x1ec>)
 8001f18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f1c:	611a      	str	r2, [r3, #16]
 8001f1e:	e1e6      	b.n	80022ee <LCD_Fast_DrawPoint+0x4c2>
	}else if(lcddev.id==0X5510)
 8001f20:	4b3c      	ldr	r3, [pc, #240]	; (8002014 <LCD_Fast_DrawPoint+0x1e8>)
 8001f22:	889b      	ldrh	r3, [r3, #4]
 8001f24:	f245 5210 	movw	r2, #21776	; 0x5510
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d179      	bne.n	8002020 <LCD_Fast_DrawPoint+0x1f4>
	{
		LCD_WR_REG(lcddev.setxcmd);LCD_WR_DATA(x>>8);  
 8001f2c:	4b39      	ldr	r3, [pc, #228]	; (8002014 <LCD_Fast_DrawPoint+0x1e8>)
 8001f2e:	895b      	ldrh	r3, [r3, #10]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff f89b 	bl	800106c <LCD_WR_REG>
 8001f36:	4b38      	ldr	r3, [pc, #224]	; (8002018 <LCD_Fast_DrawPoint+0x1ec>)
 8001f38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f3c:	611a      	str	r2, [r3, #16]
 8001f3e:	4b36      	ldr	r3, [pc, #216]	; (8002018 <LCD_Fast_DrawPoint+0x1ec>)
 8001f40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f44:	615a      	str	r2, [r3, #20]
 8001f46:	88fb      	ldrh	r3, [r7, #6]
 8001f48:	0a1b      	lsrs	r3, r3, #8
 8001f4a:	b29a      	uxth	r2, r3
 8001f4c:	4b33      	ldr	r3, [pc, #204]	; (800201c <LCD_Fast_DrawPoint+0x1f0>)
 8001f4e:	60da      	str	r2, [r3, #12]
 8001f50:	4b31      	ldr	r3, [pc, #196]	; (8002018 <LCD_Fast_DrawPoint+0x1ec>)
 8001f52:	2280      	movs	r2, #128	; 0x80
 8001f54:	615a      	str	r2, [r3, #20]
 8001f56:	4b30      	ldr	r3, [pc, #192]	; (8002018 <LCD_Fast_DrawPoint+0x1ec>)
 8001f58:	2280      	movs	r2, #128	; 0x80
 8001f5a:	611a      	str	r2, [r3, #16]
 8001f5c:	4b2e      	ldr	r3, [pc, #184]	; (8002018 <LCD_Fast_DrawPoint+0x1ec>)
 8001f5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f62:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setxcmd+1);LCD_WR_DATA(x&0XFF);	  
 8001f64:	4b2b      	ldr	r3, [pc, #172]	; (8002014 <LCD_Fast_DrawPoint+0x1e8>)
 8001f66:	895b      	ldrh	r3, [r3, #10]
 8001f68:	3301      	adds	r3, #1
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff f87d 	bl	800106c <LCD_WR_REG>
 8001f72:	4b29      	ldr	r3, [pc, #164]	; (8002018 <LCD_Fast_DrawPoint+0x1ec>)
 8001f74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f78:	611a      	str	r2, [r3, #16]
 8001f7a:	4b27      	ldr	r3, [pc, #156]	; (8002018 <LCD_Fast_DrawPoint+0x1ec>)
 8001f7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f80:	615a      	str	r2, [r3, #20]
 8001f82:	88fb      	ldrh	r3, [r7, #6]
 8001f84:	4a25      	ldr	r2, [pc, #148]	; (800201c <LCD_Fast_DrawPoint+0x1f0>)
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	60d3      	str	r3, [r2, #12]
 8001f8a:	4b23      	ldr	r3, [pc, #140]	; (8002018 <LCD_Fast_DrawPoint+0x1ec>)
 8001f8c:	2280      	movs	r2, #128	; 0x80
 8001f8e:	615a      	str	r2, [r3, #20]
 8001f90:	4b21      	ldr	r3, [pc, #132]	; (8002018 <LCD_Fast_DrawPoint+0x1ec>)
 8001f92:	2280      	movs	r2, #128	; 0x80
 8001f94:	611a      	str	r2, [r3, #16]
 8001f96:	4b20      	ldr	r3, [pc, #128]	; (8002018 <LCD_Fast_DrawPoint+0x1ec>)
 8001f98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f9c:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);LCD_WR_DATA(y>>8);  
 8001f9e:	4b1d      	ldr	r3, [pc, #116]	; (8002014 <LCD_Fast_DrawPoint+0x1e8>)
 8001fa0:	899b      	ldrh	r3, [r3, #12]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7ff f862 	bl	800106c <LCD_WR_REG>
 8001fa8:	4b1b      	ldr	r3, [pc, #108]	; (8002018 <LCD_Fast_DrawPoint+0x1ec>)
 8001faa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fae:	611a      	str	r2, [r3, #16]
 8001fb0:	4b19      	ldr	r3, [pc, #100]	; (8002018 <LCD_Fast_DrawPoint+0x1ec>)
 8001fb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fb6:	615a      	str	r2, [r3, #20]
 8001fb8:	88bb      	ldrh	r3, [r7, #4]
 8001fba:	0a1b      	lsrs	r3, r3, #8
 8001fbc:	b29a      	uxth	r2, r3
 8001fbe:	4b17      	ldr	r3, [pc, #92]	; (800201c <LCD_Fast_DrawPoint+0x1f0>)
 8001fc0:	60da      	str	r2, [r3, #12]
 8001fc2:	4b15      	ldr	r3, [pc, #84]	; (8002018 <LCD_Fast_DrawPoint+0x1ec>)
 8001fc4:	2280      	movs	r2, #128	; 0x80
 8001fc6:	615a      	str	r2, [r3, #20]
 8001fc8:	4b13      	ldr	r3, [pc, #76]	; (8002018 <LCD_Fast_DrawPoint+0x1ec>)
 8001fca:	2280      	movs	r2, #128	; 0x80
 8001fcc:	611a      	str	r2, [r3, #16]
 8001fce:	4b12      	ldr	r3, [pc, #72]	; (8002018 <LCD_Fast_DrawPoint+0x1ec>)
 8001fd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fd4:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd+1);LCD_WR_DATA(y&0XFF); 
 8001fd6:	4b0f      	ldr	r3, [pc, #60]	; (8002014 <LCD_Fast_DrawPoint+0x1e8>)
 8001fd8:	899b      	ldrh	r3, [r3, #12]
 8001fda:	3301      	adds	r3, #1
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7ff f844 	bl	800106c <LCD_WR_REG>
 8001fe4:	4b0c      	ldr	r3, [pc, #48]	; (8002018 <LCD_Fast_DrawPoint+0x1ec>)
 8001fe6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fea:	611a      	str	r2, [r3, #16]
 8001fec:	4b0a      	ldr	r3, [pc, #40]	; (8002018 <LCD_Fast_DrawPoint+0x1ec>)
 8001fee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ff2:	615a      	str	r2, [r3, #20]
 8001ff4:	88bb      	ldrh	r3, [r7, #4]
 8001ff6:	4a09      	ldr	r2, [pc, #36]	; (800201c <LCD_Fast_DrawPoint+0x1f0>)
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	60d3      	str	r3, [r2, #12]
 8001ffc:	4b06      	ldr	r3, [pc, #24]	; (8002018 <LCD_Fast_DrawPoint+0x1ec>)
 8001ffe:	2280      	movs	r2, #128	; 0x80
 8002000:	615a      	str	r2, [r3, #20]
 8002002:	4b05      	ldr	r3, [pc, #20]	; (8002018 <LCD_Fast_DrawPoint+0x1ec>)
 8002004:	2280      	movs	r2, #128	; 0x80
 8002006:	611a      	str	r2, [r3, #16]
 8002008:	4b03      	ldr	r3, [pc, #12]	; (8002018 <LCD_Fast_DrawPoint+0x1ec>)
 800200a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800200e:	611a      	str	r2, [r3, #16]
 8002010:	e16d      	b.n	80022ee <LCD_Fast_DrawPoint+0x4c2>
 8002012:	bf00      	nop
 8002014:	200024f8 	.word	0x200024f8
 8002018:	40011000 	.word	0x40011000
 800201c:	40010c00 	.word	0x40010c00
	}else if(lcddev.id==0X1963)
 8002020:	4b68      	ldr	r3, [pc, #416]	; (80021c4 <LCD_Fast_DrawPoint+0x398>)
 8002022:	889b      	ldrh	r3, [r3, #4]
 8002024:	f641 1263 	movw	r2, #6499	; 0x1963
 8002028:	4293      	cmp	r3, r2
 800202a:	f040 80d1 	bne.w	80021d0 <LCD_Fast_DrawPoint+0x3a4>
	{
		if(lcddev.dir==0)x=lcddev.width-1-x;
 800202e:	4b65      	ldr	r3, [pc, #404]	; (80021c4 <LCD_Fast_DrawPoint+0x398>)
 8002030:	799b      	ldrb	r3, [r3, #6]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d106      	bne.n	8002044 <LCD_Fast_DrawPoint+0x218>
 8002036:	4b63      	ldr	r3, [pc, #396]	; (80021c4 <LCD_Fast_DrawPoint+0x398>)
 8002038:	881a      	ldrh	r2, [r3, #0]
 800203a:	88fb      	ldrh	r3, [r7, #6]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	b29b      	uxth	r3, r3
 8002040:	3b01      	subs	r3, #1
 8002042:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd); 
 8002044:	4b5f      	ldr	r3, [pc, #380]	; (80021c4 <LCD_Fast_DrawPoint+0x398>)
 8002046:	895b      	ldrh	r3, [r3, #10]
 8002048:	4618      	mov	r0, r3
 800204a:	f7ff f80f 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATA(x>>8);LCD_WR_DATA(x&0XFF); 		
 800204e:	4b5e      	ldr	r3, [pc, #376]	; (80021c8 <LCD_Fast_DrawPoint+0x39c>)
 8002050:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002054:	611a      	str	r2, [r3, #16]
 8002056:	4b5c      	ldr	r3, [pc, #368]	; (80021c8 <LCD_Fast_DrawPoint+0x39c>)
 8002058:	f44f 7200 	mov.w	r2, #512	; 0x200
 800205c:	615a      	str	r2, [r3, #20]
 800205e:	88fb      	ldrh	r3, [r7, #6]
 8002060:	0a1b      	lsrs	r3, r3, #8
 8002062:	b29a      	uxth	r2, r3
 8002064:	4b59      	ldr	r3, [pc, #356]	; (80021cc <LCD_Fast_DrawPoint+0x3a0>)
 8002066:	60da      	str	r2, [r3, #12]
 8002068:	4b57      	ldr	r3, [pc, #348]	; (80021c8 <LCD_Fast_DrawPoint+0x39c>)
 800206a:	2280      	movs	r2, #128	; 0x80
 800206c:	615a      	str	r2, [r3, #20]
 800206e:	4b56      	ldr	r3, [pc, #344]	; (80021c8 <LCD_Fast_DrawPoint+0x39c>)
 8002070:	2280      	movs	r2, #128	; 0x80
 8002072:	611a      	str	r2, [r3, #16]
 8002074:	4b54      	ldr	r3, [pc, #336]	; (80021c8 <LCD_Fast_DrawPoint+0x39c>)
 8002076:	f44f 7200 	mov.w	r2, #512	; 0x200
 800207a:	611a      	str	r2, [r3, #16]
 800207c:	4b52      	ldr	r3, [pc, #328]	; (80021c8 <LCD_Fast_DrawPoint+0x39c>)
 800207e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002082:	611a      	str	r2, [r3, #16]
 8002084:	4b50      	ldr	r3, [pc, #320]	; (80021c8 <LCD_Fast_DrawPoint+0x39c>)
 8002086:	f44f 7200 	mov.w	r2, #512	; 0x200
 800208a:	615a      	str	r2, [r3, #20]
 800208c:	88fb      	ldrh	r3, [r7, #6]
 800208e:	4a4f      	ldr	r2, [pc, #316]	; (80021cc <LCD_Fast_DrawPoint+0x3a0>)
 8002090:	b2db      	uxtb	r3, r3
 8002092:	60d3      	str	r3, [r2, #12]
 8002094:	4b4c      	ldr	r3, [pc, #304]	; (80021c8 <LCD_Fast_DrawPoint+0x39c>)
 8002096:	2280      	movs	r2, #128	; 0x80
 8002098:	615a      	str	r2, [r3, #20]
 800209a:	4b4b      	ldr	r3, [pc, #300]	; (80021c8 <LCD_Fast_DrawPoint+0x39c>)
 800209c:	2280      	movs	r2, #128	; 0x80
 800209e:	611a      	str	r2, [r3, #16]
 80020a0:	4b49      	ldr	r3, [pc, #292]	; (80021c8 <LCD_Fast_DrawPoint+0x39c>)
 80020a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020a6:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x>>8);LCD_WR_DATA(x&0XFF); 		
 80020a8:	4b47      	ldr	r3, [pc, #284]	; (80021c8 <LCD_Fast_DrawPoint+0x39c>)
 80020aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020ae:	611a      	str	r2, [r3, #16]
 80020b0:	4b45      	ldr	r3, [pc, #276]	; (80021c8 <LCD_Fast_DrawPoint+0x39c>)
 80020b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020b6:	615a      	str	r2, [r3, #20]
 80020b8:	88fb      	ldrh	r3, [r7, #6]
 80020ba:	0a1b      	lsrs	r3, r3, #8
 80020bc:	b29a      	uxth	r2, r3
 80020be:	4b43      	ldr	r3, [pc, #268]	; (80021cc <LCD_Fast_DrawPoint+0x3a0>)
 80020c0:	60da      	str	r2, [r3, #12]
 80020c2:	4b41      	ldr	r3, [pc, #260]	; (80021c8 <LCD_Fast_DrawPoint+0x39c>)
 80020c4:	2280      	movs	r2, #128	; 0x80
 80020c6:	615a      	str	r2, [r3, #20]
 80020c8:	4b3f      	ldr	r3, [pc, #252]	; (80021c8 <LCD_Fast_DrawPoint+0x39c>)
 80020ca:	2280      	movs	r2, #128	; 0x80
 80020cc:	611a      	str	r2, [r3, #16]
 80020ce:	4b3e      	ldr	r3, [pc, #248]	; (80021c8 <LCD_Fast_DrawPoint+0x39c>)
 80020d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020d4:	611a      	str	r2, [r3, #16]
 80020d6:	4b3c      	ldr	r3, [pc, #240]	; (80021c8 <LCD_Fast_DrawPoint+0x39c>)
 80020d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020dc:	611a      	str	r2, [r3, #16]
 80020de:	4b3a      	ldr	r3, [pc, #232]	; (80021c8 <LCD_Fast_DrawPoint+0x39c>)
 80020e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020e4:	615a      	str	r2, [r3, #20]
 80020e6:	88fb      	ldrh	r3, [r7, #6]
 80020e8:	4a38      	ldr	r2, [pc, #224]	; (80021cc <LCD_Fast_DrawPoint+0x3a0>)
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	60d3      	str	r3, [r2, #12]
 80020ee:	4b36      	ldr	r3, [pc, #216]	; (80021c8 <LCD_Fast_DrawPoint+0x39c>)
 80020f0:	2280      	movs	r2, #128	; 0x80
 80020f2:	615a      	str	r2, [r3, #20]
 80020f4:	4b34      	ldr	r3, [pc, #208]	; (80021c8 <LCD_Fast_DrawPoint+0x39c>)
 80020f6:	2280      	movs	r2, #128	; 0x80
 80020f8:	611a      	str	r2, [r3, #16]
 80020fa:	4b33      	ldr	r3, [pc, #204]	; (80021c8 <LCD_Fast_DrawPoint+0x39c>)
 80020fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002100:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd); 
 8002102:	4b30      	ldr	r3, [pc, #192]	; (80021c4 <LCD_Fast_DrawPoint+0x398>)
 8002104:	899b      	ldrh	r3, [r3, #12]
 8002106:	4618      	mov	r0, r3
 8002108:	f7fe ffb0 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATA(y>>8);LCD_WR_DATA(y&0XFF); 		
 800210c:	4b2e      	ldr	r3, [pc, #184]	; (80021c8 <LCD_Fast_DrawPoint+0x39c>)
 800210e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002112:	611a      	str	r2, [r3, #16]
 8002114:	4b2c      	ldr	r3, [pc, #176]	; (80021c8 <LCD_Fast_DrawPoint+0x39c>)
 8002116:	f44f 7200 	mov.w	r2, #512	; 0x200
 800211a:	615a      	str	r2, [r3, #20]
 800211c:	88bb      	ldrh	r3, [r7, #4]
 800211e:	0a1b      	lsrs	r3, r3, #8
 8002120:	b29a      	uxth	r2, r3
 8002122:	4b2a      	ldr	r3, [pc, #168]	; (80021cc <LCD_Fast_DrawPoint+0x3a0>)
 8002124:	60da      	str	r2, [r3, #12]
 8002126:	4b28      	ldr	r3, [pc, #160]	; (80021c8 <LCD_Fast_DrawPoint+0x39c>)
 8002128:	2280      	movs	r2, #128	; 0x80
 800212a:	615a      	str	r2, [r3, #20]
 800212c:	4b26      	ldr	r3, [pc, #152]	; (80021c8 <LCD_Fast_DrawPoint+0x39c>)
 800212e:	2280      	movs	r2, #128	; 0x80
 8002130:	611a      	str	r2, [r3, #16]
 8002132:	4b25      	ldr	r3, [pc, #148]	; (80021c8 <LCD_Fast_DrawPoint+0x39c>)
 8002134:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002138:	611a      	str	r2, [r3, #16]
 800213a:	4b23      	ldr	r3, [pc, #140]	; (80021c8 <LCD_Fast_DrawPoint+0x39c>)
 800213c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002140:	611a      	str	r2, [r3, #16]
 8002142:	4b21      	ldr	r3, [pc, #132]	; (80021c8 <LCD_Fast_DrawPoint+0x39c>)
 8002144:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002148:	615a      	str	r2, [r3, #20]
 800214a:	88bb      	ldrh	r3, [r7, #4]
 800214c:	4a1f      	ldr	r2, [pc, #124]	; (80021cc <LCD_Fast_DrawPoint+0x3a0>)
 800214e:	b2db      	uxtb	r3, r3
 8002150:	60d3      	str	r3, [r2, #12]
 8002152:	4b1d      	ldr	r3, [pc, #116]	; (80021c8 <LCD_Fast_DrawPoint+0x39c>)
 8002154:	2280      	movs	r2, #128	; 0x80
 8002156:	615a      	str	r2, [r3, #20]
 8002158:	4b1b      	ldr	r3, [pc, #108]	; (80021c8 <LCD_Fast_DrawPoint+0x39c>)
 800215a:	2280      	movs	r2, #128	; 0x80
 800215c:	611a      	str	r2, [r3, #16]
 800215e:	4b1a      	ldr	r3, [pc, #104]	; (80021c8 <LCD_Fast_DrawPoint+0x39c>)
 8002160:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002164:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y>>8);LCD_WR_DATA(y&0XFF); 		
 8002166:	4b18      	ldr	r3, [pc, #96]	; (80021c8 <LCD_Fast_DrawPoint+0x39c>)
 8002168:	f44f 7280 	mov.w	r2, #256	; 0x100
 800216c:	611a      	str	r2, [r3, #16]
 800216e:	4b16      	ldr	r3, [pc, #88]	; (80021c8 <LCD_Fast_DrawPoint+0x39c>)
 8002170:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002174:	615a      	str	r2, [r3, #20]
 8002176:	88bb      	ldrh	r3, [r7, #4]
 8002178:	0a1b      	lsrs	r3, r3, #8
 800217a:	b29a      	uxth	r2, r3
 800217c:	4b13      	ldr	r3, [pc, #76]	; (80021cc <LCD_Fast_DrawPoint+0x3a0>)
 800217e:	60da      	str	r2, [r3, #12]
 8002180:	4b11      	ldr	r3, [pc, #68]	; (80021c8 <LCD_Fast_DrawPoint+0x39c>)
 8002182:	2280      	movs	r2, #128	; 0x80
 8002184:	615a      	str	r2, [r3, #20]
 8002186:	4b10      	ldr	r3, [pc, #64]	; (80021c8 <LCD_Fast_DrawPoint+0x39c>)
 8002188:	2280      	movs	r2, #128	; 0x80
 800218a:	611a      	str	r2, [r3, #16]
 800218c:	4b0e      	ldr	r3, [pc, #56]	; (80021c8 <LCD_Fast_DrawPoint+0x39c>)
 800218e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002192:	611a      	str	r2, [r3, #16]
 8002194:	4b0c      	ldr	r3, [pc, #48]	; (80021c8 <LCD_Fast_DrawPoint+0x39c>)
 8002196:	f44f 7280 	mov.w	r2, #256	; 0x100
 800219a:	611a      	str	r2, [r3, #16]
 800219c:	4b0a      	ldr	r3, [pc, #40]	; (80021c8 <LCD_Fast_DrawPoint+0x39c>)
 800219e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021a2:	615a      	str	r2, [r3, #20]
 80021a4:	88bb      	ldrh	r3, [r7, #4]
 80021a6:	4a09      	ldr	r2, [pc, #36]	; (80021cc <LCD_Fast_DrawPoint+0x3a0>)
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	60d3      	str	r3, [r2, #12]
 80021ac:	4b06      	ldr	r3, [pc, #24]	; (80021c8 <LCD_Fast_DrawPoint+0x39c>)
 80021ae:	2280      	movs	r2, #128	; 0x80
 80021b0:	615a      	str	r2, [r3, #20]
 80021b2:	4b05      	ldr	r3, [pc, #20]	; (80021c8 <LCD_Fast_DrawPoint+0x39c>)
 80021b4:	2280      	movs	r2, #128	; 0x80
 80021b6:	611a      	str	r2, [r3, #16]
 80021b8:	4b03      	ldr	r3, [pc, #12]	; (80021c8 <LCD_Fast_DrawPoint+0x39c>)
 80021ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021be:	611a      	str	r2, [r3, #16]
 80021c0:	e095      	b.n	80022ee <LCD_Fast_DrawPoint+0x4c2>
 80021c2:	bf00      	nop
 80021c4:	200024f8 	.word	0x200024f8
 80021c8:	40011000 	.word	0x40011000
 80021cc:	40010c00 	.word	0x40010c00
	}else if(lcddev.id==0X6804)
 80021d0:	4b5e      	ldr	r3, [pc, #376]	; (800234c <LCD_Fast_DrawPoint+0x520>)
 80021d2:	889b      	ldrh	r3, [r3, #4]
 80021d4:	f646 0204 	movw	r2, #26628	; 0x6804
 80021d8:	4293      	cmp	r3, r2
 80021da:	d16f      	bne.n	80022bc <LCD_Fast_DrawPoint+0x490>
	{		    
		if(lcddev.dir==1)x=lcddev.width-1-x;//����ʱ����
 80021dc:	4b5b      	ldr	r3, [pc, #364]	; (800234c <LCD_Fast_DrawPoint+0x520>)
 80021de:	799b      	ldrb	r3, [r3, #6]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d106      	bne.n	80021f2 <LCD_Fast_DrawPoint+0x3c6>
 80021e4:	4b59      	ldr	r3, [pc, #356]	; (800234c <LCD_Fast_DrawPoint+0x520>)
 80021e6:	881a      	ldrh	r2, [r3, #0]
 80021e8:	88fb      	ldrh	r3, [r7, #6]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	3b01      	subs	r3, #1
 80021f0:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd); 
 80021f2:	4b56      	ldr	r3, [pc, #344]	; (800234c <LCD_Fast_DrawPoint+0x520>)
 80021f4:	895b      	ldrh	r3, [r3, #10]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7fe ff38 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATA(x>>8);LCD_WR_DATA(x&0XFF);			 
 80021fc:	4b54      	ldr	r3, [pc, #336]	; (8002350 <LCD_Fast_DrawPoint+0x524>)
 80021fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002202:	611a      	str	r2, [r3, #16]
 8002204:	4b52      	ldr	r3, [pc, #328]	; (8002350 <LCD_Fast_DrawPoint+0x524>)
 8002206:	f44f 7200 	mov.w	r2, #512	; 0x200
 800220a:	615a      	str	r2, [r3, #20]
 800220c:	88fb      	ldrh	r3, [r7, #6]
 800220e:	0a1b      	lsrs	r3, r3, #8
 8002210:	b29a      	uxth	r2, r3
 8002212:	4b50      	ldr	r3, [pc, #320]	; (8002354 <LCD_Fast_DrawPoint+0x528>)
 8002214:	60da      	str	r2, [r3, #12]
 8002216:	4b4e      	ldr	r3, [pc, #312]	; (8002350 <LCD_Fast_DrawPoint+0x524>)
 8002218:	2280      	movs	r2, #128	; 0x80
 800221a:	615a      	str	r2, [r3, #20]
 800221c:	4b4c      	ldr	r3, [pc, #304]	; (8002350 <LCD_Fast_DrawPoint+0x524>)
 800221e:	2280      	movs	r2, #128	; 0x80
 8002220:	611a      	str	r2, [r3, #16]
 8002222:	4b4b      	ldr	r3, [pc, #300]	; (8002350 <LCD_Fast_DrawPoint+0x524>)
 8002224:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002228:	611a      	str	r2, [r3, #16]
 800222a:	4b49      	ldr	r3, [pc, #292]	; (8002350 <LCD_Fast_DrawPoint+0x524>)
 800222c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002230:	611a      	str	r2, [r3, #16]
 8002232:	4b47      	ldr	r3, [pc, #284]	; (8002350 <LCD_Fast_DrawPoint+0x524>)
 8002234:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002238:	615a      	str	r2, [r3, #20]
 800223a:	88fb      	ldrh	r3, [r7, #6]
 800223c:	4a45      	ldr	r2, [pc, #276]	; (8002354 <LCD_Fast_DrawPoint+0x528>)
 800223e:	b2db      	uxtb	r3, r3
 8002240:	60d3      	str	r3, [r2, #12]
 8002242:	4b43      	ldr	r3, [pc, #268]	; (8002350 <LCD_Fast_DrawPoint+0x524>)
 8002244:	2280      	movs	r2, #128	; 0x80
 8002246:	615a      	str	r2, [r3, #20]
 8002248:	4b41      	ldr	r3, [pc, #260]	; (8002350 <LCD_Fast_DrawPoint+0x524>)
 800224a:	2280      	movs	r2, #128	; 0x80
 800224c:	611a      	str	r2, [r3, #16]
 800224e:	4b40      	ldr	r3, [pc, #256]	; (8002350 <LCD_Fast_DrawPoint+0x524>)
 8002250:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002254:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd); 
 8002256:	4b3d      	ldr	r3, [pc, #244]	; (800234c <LCD_Fast_DrawPoint+0x520>)
 8002258:	899b      	ldrh	r3, [r3, #12]
 800225a:	4618      	mov	r0, r3
 800225c:	f7fe ff06 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATA(y>>8);LCD_WR_DATA(y&0XFF); 		
 8002260:	4b3b      	ldr	r3, [pc, #236]	; (8002350 <LCD_Fast_DrawPoint+0x524>)
 8002262:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002266:	611a      	str	r2, [r3, #16]
 8002268:	4b39      	ldr	r3, [pc, #228]	; (8002350 <LCD_Fast_DrawPoint+0x524>)
 800226a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800226e:	615a      	str	r2, [r3, #20]
 8002270:	88bb      	ldrh	r3, [r7, #4]
 8002272:	0a1b      	lsrs	r3, r3, #8
 8002274:	b29a      	uxth	r2, r3
 8002276:	4b37      	ldr	r3, [pc, #220]	; (8002354 <LCD_Fast_DrawPoint+0x528>)
 8002278:	60da      	str	r2, [r3, #12]
 800227a:	4b35      	ldr	r3, [pc, #212]	; (8002350 <LCD_Fast_DrawPoint+0x524>)
 800227c:	2280      	movs	r2, #128	; 0x80
 800227e:	615a      	str	r2, [r3, #20]
 8002280:	4b33      	ldr	r3, [pc, #204]	; (8002350 <LCD_Fast_DrawPoint+0x524>)
 8002282:	2280      	movs	r2, #128	; 0x80
 8002284:	611a      	str	r2, [r3, #16]
 8002286:	4b32      	ldr	r3, [pc, #200]	; (8002350 <LCD_Fast_DrawPoint+0x524>)
 8002288:	f44f 7200 	mov.w	r2, #512	; 0x200
 800228c:	611a      	str	r2, [r3, #16]
 800228e:	4b30      	ldr	r3, [pc, #192]	; (8002350 <LCD_Fast_DrawPoint+0x524>)
 8002290:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002294:	611a      	str	r2, [r3, #16]
 8002296:	4b2e      	ldr	r3, [pc, #184]	; (8002350 <LCD_Fast_DrawPoint+0x524>)
 8002298:	f44f 7200 	mov.w	r2, #512	; 0x200
 800229c:	615a      	str	r2, [r3, #20]
 800229e:	88bb      	ldrh	r3, [r7, #4]
 80022a0:	4a2c      	ldr	r2, [pc, #176]	; (8002354 <LCD_Fast_DrawPoint+0x528>)
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	60d3      	str	r3, [r2, #12]
 80022a6:	4b2a      	ldr	r3, [pc, #168]	; (8002350 <LCD_Fast_DrawPoint+0x524>)
 80022a8:	2280      	movs	r2, #128	; 0x80
 80022aa:	615a      	str	r2, [r3, #20]
 80022ac:	4b28      	ldr	r3, [pc, #160]	; (8002350 <LCD_Fast_DrawPoint+0x524>)
 80022ae:	2280      	movs	r2, #128	; 0x80
 80022b0:	611a      	str	r2, [r3, #16]
 80022b2:	4b27      	ldr	r3, [pc, #156]	; (8002350 <LCD_Fast_DrawPoint+0x524>)
 80022b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022b8:	611a      	str	r2, [r3, #16]
 80022ba:	e018      	b.n	80022ee <LCD_Fast_DrawPoint+0x4c2>
	}else
	{
 		if(lcddev.dir==1)x=lcddev.width-1-x;//������ʵ���ǵ�תx,y����
 80022bc:	4b23      	ldr	r3, [pc, #140]	; (800234c <LCD_Fast_DrawPoint+0x520>)
 80022be:	799b      	ldrb	r3, [r3, #6]
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d106      	bne.n	80022d2 <LCD_Fast_DrawPoint+0x4a6>
 80022c4:	4b21      	ldr	r3, [pc, #132]	; (800234c <LCD_Fast_DrawPoint+0x520>)
 80022c6:	881a      	ldrh	r2, [r3, #0]
 80022c8:	88fb      	ldrh	r3, [r7, #6]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	3b01      	subs	r3, #1
 80022d0:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd,x);
 80022d2:	4b1e      	ldr	r3, [pc, #120]	; (800234c <LCD_Fast_DrawPoint+0x520>)
 80022d4:	895b      	ldrh	r3, [r3, #10]
 80022d6:	88fa      	ldrh	r2, [r7, #6]
 80022d8:	4611      	mov	r1, r2
 80022da:	4618      	mov	r0, r3
 80022dc:	f7fe ff52 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd,y);
 80022e0:	4b1a      	ldr	r3, [pc, #104]	; (800234c <LCD_Fast_DrawPoint+0x520>)
 80022e2:	899b      	ldrh	r3, [r3, #12]
 80022e4:	88ba      	ldrh	r2, [r7, #4]
 80022e6:	4611      	mov	r1, r2
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7fe ff4b 	bl	8001184 <LCD_WriteReg>
	}	
	LCD_RS_CLR;
 80022ee:	4b18      	ldr	r3, [pc, #96]	; (8002350 <LCD_Fast_DrawPoint+0x524>)
 80022f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022f4:	615a      	str	r2, [r3, #20]
 	LCD_CS_CLR; 
 80022f6:	4b16      	ldr	r3, [pc, #88]	; (8002350 <LCD_Fast_DrawPoint+0x524>)
 80022f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022fc:	615a      	str	r2, [r3, #20]
	DATAOUT(lcddev.wramcmd);//дָ��  
 80022fe:	4b13      	ldr	r3, [pc, #76]	; (800234c <LCD_Fast_DrawPoint+0x520>)
 8002300:	891a      	ldrh	r2, [r3, #8]
 8002302:	4b14      	ldr	r3, [pc, #80]	; (8002354 <LCD_Fast_DrawPoint+0x528>)
 8002304:	60da      	str	r2, [r3, #12]
	LCD_WR_CLR; 
 8002306:	4b12      	ldr	r3, [pc, #72]	; (8002350 <LCD_Fast_DrawPoint+0x524>)
 8002308:	2280      	movs	r2, #128	; 0x80
 800230a:	615a      	str	r2, [r3, #20]
	LCD_WR_SET; 
 800230c:	4b10      	ldr	r3, [pc, #64]	; (8002350 <LCD_Fast_DrawPoint+0x524>)
 800230e:	2280      	movs	r2, #128	; 0x80
 8002310:	611a      	str	r2, [r3, #16]
 	LCD_CS_SET; 
 8002312:	4b0f      	ldr	r3, [pc, #60]	; (8002350 <LCD_Fast_DrawPoint+0x524>)
 8002314:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002318:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(color);		//д����
 800231a:	4b0d      	ldr	r3, [pc, #52]	; (8002350 <LCD_Fast_DrawPoint+0x524>)
 800231c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002320:	611a      	str	r2, [r3, #16]
 8002322:	4b0b      	ldr	r3, [pc, #44]	; (8002350 <LCD_Fast_DrawPoint+0x524>)
 8002324:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002328:	615a      	str	r2, [r3, #20]
 800232a:	4a0a      	ldr	r2, [pc, #40]	; (8002354 <LCD_Fast_DrawPoint+0x528>)
 800232c:	887b      	ldrh	r3, [r7, #2]
 800232e:	60d3      	str	r3, [r2, #12]
 8002330:	4b07      	ldr	r3, [pc, #28]	; (8002350 <LCD_Fast_DrawPoint+0x524>)
 8002332:	2280      	movs	r2, #128	; 0x80
 8002334:	615a      	str	r2, [r3, #20]
 8002336:	4b06      	ldr	r3, [pc, #24]	; (8002350 <LCD_Fast_DrawPoint+0x524>)
 8002338:	2280      	movs	r2, #128	; 0x80
 800233a:	611a      	str	r2, [r3, #16]
 800233c:	4b04      	ldr	r3, [pc, #16]	; (8002350 <LCD_Fast_DrawPoint+0x524>)
 800233e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002342:	611a      	str	r2, [r3, #16]
}
 8002344:	bf00      	nop
 8002346:	3708      	adds	r7, #8
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	200024f8 	.word	0x200024f8
 8002350:	40011000 	.word	0x40011000
 8002354:	40010c00 	.word	0x40010c00

08002358 <LCD_SSD_BackLightSet>:
//SSD1963 ��������
//pwm:����ȼ�,0~100.Խ��Խ��.
void LCD_SSD_BackLightSet(u8 pwm)
{	
 8002358:	b590      	push	{r4, r7, lr}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	4603      	mov	r3, r0
 8002360:	71fb      	strb	r3, [r7, #7]
	LCD_WR_REG(0xBE);	//����PWM���
 8002362:	20be      	movs	r0, #190	; 0xbe
 8002364:	f7fe fe82 	bl	800106c <LCD_WR_REG>
	LCD_WR_DATA(0x05);	//1����PWMƵ��
 8002368:	4b4b      	ldr	r3, [pc, #300]	; (8002498 <LCD_SSD_BackLightSet+0x140>)
 800236a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800236e:	611a      	str	r2, [r3, #16]
 8002370:	4b49      	ldr	r3, [pc, #292]	; (8002498 <LCD_SSD_BackLightSet+0x140>)
 8002372:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002376:	615a      	str	r2, [r3, #20]
 8002378:	4b48      	ldr	r3, [pc, #288]	; (800249c <LCD_SSD_BackLightSet+0x144>)
 800237a:	2205      	movs	r2, #5
 800237c:	60da      	str	r2, [r3, #12]
 800237e:	4b46      	ldr	r3, [pc, #280]	; (8002498 <LCD_SSD_BackLightSet+0x140>)
 8002380:	2280      	movs	r2, #128	; 0x80
 8002382:	615a      	str	r2, [r3, #20]
 8002384:	4b44      	ldr	r3, [pc, #272]	; (8002498 <LCD_SSD_BackLightSet+0x140>)
 8002386:	2280      	movs	r2, #128	; 0x80
 8002388:	611a      	str	r2, [r3, #16]
 800238a:	4b43      	ldr	r3, [pc, #268]	; (8002498 <LCD_SSD_BackLightSet+0x140>)
 800238c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002390:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(pwm*2.55);//2����PWMռ�ձ�
 8002392:	4b41      	ldr	r3, [pc, #260]	; (8002498 <LCD_SSD_BackLightSet+0x140>)
 8002394:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002398:	611a      	str	r2, [r3, #16]
 800239a:	4b3f      	ldr	r3, [pc, #252]	; (8002498 <LCD_SSD_BackLightSet+0x140>)
 800239c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023a0:	615a      	str	r2, [r3, #20]
 80023a2:	79fb      	ldrb	r3, [r7, #7]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7fe f891 	bl	80004cc <__aeabi_i2d>
 80023aa:	a339      	add	r3, pc, #228	; (adr r3, 8002490 <LCD_SSD_BackLightSet+0x138>)
 80023ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b0:	f7fe f8f6 	bl	80005a0 <__aeabi_dmul>
 80023b4:	4603      	mov	r3, r0
 80023b6:	460c      	mov	r4, r1
 80023b8:	461a      	mov	r2, r3
 80023ba:	4623      	mov	r3, r4
 80023bc:	4c37      	ldr	r4, [pc, #220]	; (800249c <LCD_SSD_BackLightSet+0x144>)
 80023be:	4610      	mov	r0, r2
 80023c0:	4619      	mov	r1, r3
 80023c2:	f7fe faff 	bl	80009c4 <__aeabi_d2uiz>
 80023c6:	4603      	mov	r3, r0
 80023c8:	60e3      	str	r3, [r4, #12]
 80023ca:	4b33      	ldr	r3, [pc, #204]	; (8002498 <LCD_SSD_BackLightSet+0x140>)
 80023cc:	2280      	movs	r2, #128	; 0x80
 80023ce:	615a      	str	r2, [r3, #20]
 80023d0:	4b31      	ldr	r3, [pc, #196]	; (8002498 <LCD_SSD_BackLightSet+0x140>)
 80023d2:	2280      	movs	r2, #128	; 0x80
 80023d4:	611a      	str	r2, [r3, #16]
 80023d6:	4b30      	ldr	r3, [pc, #192]	; (8002498 <LCD_SSD_BackLightSet+0x140>)
 80023d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023dc:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x01);	//3����C
 80023de:	4b2e      	ldr	r3, [pc, #184]	; (8002498 <LCD_SSD_BackLightSet+0x140>)
 80023e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023e4:	611a      	str	r2, [r3, #16]
 80023e6:	4b2c      	ldr	r3, [pc, #176]	; (8002498 <LCD_SSD_BackLightSet+0x140>)
 80023e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023ec:	615a      	str	r2, [r3, #20]
 80023ee:	4b2b      	ldr	r3, [pc, #172]	; (800249c <LCD_SSD_BackLightSet+0x144>)
 80023f0:	2201      	movs	r2, #1
 80023f2:	60da      	str	r2, [r3, #12]
 80023f4:	4b28      	ldr	r3, [pc, #160]	; (8002498 <LCD_SSD_BackLightSet+0x140>)
 80023f6:	2280      	movs	r2, #128	; 0x80
 80023f8:	615a      	str	r2, [r3, #20]
 80023fa:	4b27      	ldr	r3, [pc, #156]	; (8002498 <LCD_SSD_BackLightSet+0x140>)
 80023fc:	2280      	movs	r2, #128	; 0x80
 80023fe:	611a      	str	r2, [r3, #16]
 8002400:	4b25      	ldr	r3, [pc, #148]	; (8002498 <LCD_SSD_BackLightSet+0x140>)
 8002402:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002406:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0xFF);	//4����D
 8002408:	4b23      	ldr	r3, [pc, #140]	; (8002498 <LCD_SSD_BackLightSet+0x140>)
 800240a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800240e:	611a      	str	r2, [r3, #16]
 8002410:	4b21      	ldr	r3, [pc, #132]	; (8002498 <LCD_SSD_BackLightSet+0x140>)
 8002412:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002416:	615a      	str	r2, [r3, #20]
 8002418:	4b20      	ldr	r3, [pc, #128]	; (800249c <LCD_SSD_BackLightSet+0x144>)
 800241a:	22ff      	movs	r2, #255	; 0xff
 800241c:	60da      	str	r2, [r3, #12]
 800241e:	4b1e      	ldr	r3, [pc, #120]	; (8002498 <LCD_SSD_BackLightSet+0x140>)
 8002420:	2280      	movs	r2, #128	; 0x80
 8002422:	615a      	str	r2, [r3, #20]
 8002424:	4b1c      	ldr	r3, [pc, #112]	; (8002498 <LCD_SSD_BackLightSet+0x140>)
 8002426:	2280      	movs	r2, #128	; 0x80
 8002428:	611a      	str	r2, [r3, #16]
 800242a:	4b1b      	ldr	r3, [pc, #108]	; (8002498 <LCD_SSD_BackLightSet+0x140>)
 800242c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002430:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x00);	//5����E
 8002432:	4b19      	ldr	r3, [pc, #100]	; (8002498 <LCD_SSD_BackLightSet+0x140>)
 8002434:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002438:	611a      	str	r2, [r3, #16]
 800243a:	4b17      	ldr	r3, [pc, #92]	; (8002498 <LCD_SSD_BackLightSet+0x140>)
 800243c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002440:	615a      	str	r2, [r3, #20]
 8002442:	4b16      	ldr	r3, [pc, #88]	; (800249c <LCD_SSD_BackLightSet+0x144>)
 8002444:	2200      	movs	r2, #0
 8002446:	60da      	str	r2, [r3, #12]
 8002448:	4b13      	ldr	r3, [pc, #76]	; (8002498 <LCD_SSD_BackLightSet+0x140>)
 800244a:	2280      	movs	r2, #128	; 0x80
 800244c:	615a      	str	r2, [r3, #20]
 800244e:	4b12      	ldr	r3, [pc, #72]	; (8002498 <LCD_SSD_BackLightSet+0x140>)
 8002450:	2280      	movs	r2, #128	; 0x80
 8002452:	611a      	str	r2, [r3, #16]
 8002454:	4b10      	ldr	r3, [pc, #64]	; (8002498 <LCD_SSD_BackLightSet+0x140>)
 8002456:	f44f 7200 	mov.w	r2, #512	; 0x200
 800245a:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x00);	//6����F
 800245c:	4b0e      	ldr	r3, [pc, #56]	; (8002498 <LCD_SSD_BackLightSet+0x140>)
 800245e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002462:	611a      	str	r2, [r3, #16]
 8002464:	4b0c      	ldr	r3, [pc, #48]	; (8002498 <LCD_SSD_BackLightSet+0x140>)
 8002466:	f44f 7200 	mov.w	r2, #512	; 0x200
 800246a:	615a      	str	r2, [r3, #20]
 800246c:	4b0b      	ldr	r3, [pc, #44]	; (800249c <LCD_SSD_BackLightSet+0x144>)
 800246e:	2200      	movs	r2, #0
 8002470:	60da      	str	r2, [r3, #12]
 8002472:	4b09      	ldr	r3, [pc, #36]	; (8002498 <LCD_SSD_BackLightSet+0x140>)
 8002474:	2280      	movs	r2, #128	; 0x80
 8002476:	615a      	str	r2, [r3, #20]
 8002478:	4b07      	ldr	r3, [pc, #28]	; (8002498 <LCD_SSD_BackLightSet+0x140>)
 800247a:	2280      	movs	r2, #128	; 0x80
 800247c:	611a      	str	r2, [r3, #16]
 800247e:	4b06      	ldr	r3, [pc, #24]	; (8002498 <LCD_SSD_BackLightSet+0x140>)
 8002480:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002484:	611a      	str	r2, [r3, #16]
}
 8002486:	bf00      	nop
 8002488:	370c      	adds	r7, #12
 800248a:	46bd      	mov	sp, r7
 800248c:	bd90      	pop	{r4, r7, pc}
 800248e:	bf00      	nop
 8002490:	66666666 	.word	0x66666666
 8002494:	40046666 	.word	0x40046666
 8002498:	40011000 	.word	0x40011000
 800249c:	40010c00 	.word	0x40010c00

080024a0 <LCD_Display_Dir>:
//����LCD��ʾ����
//dir:0,������1,����
void LCD_Display_Dir(u8 dir)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	4603      	mov	r3, r0
 80024a8:	71fb      	strb	r3, [r7, #7]
	if(dir==0)			//����
 80024aa:	79fb      	ldrb	r3, [r7, #7]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d177      	bne.n	80025a0 <LCD_Display_Dir+0x100>
	{
		lcddev.dir=0;	//����
 80024b0:	4b80      	ldr	r3, [pc, #512]	; (80026b4 <LCD_Display_Dir+0x214>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	719a      	strb	r2, [r3, #6]
		lcddev.width=240;
 80024b6:	4b7f      	ldr	r3, [pc, #508]	; (80026b4 <LCD_Display_Dir+0x214>)
 80024b8:	22f0      	movs	r2, #240	; 0xf0
 80024ba:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 80024bc:	4b7d      	ldr	r3, [pc, #500]	; (80026b4 <LCD_Display_Dir+0x214>)
 80024be:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80024c2:	805a      	strh	r2, [r3, #2]
		if(lcddev.id==0X9341||lcddev.id==0X6804||lcddev.id==0X5310)
 80024c4:	4b7b      	ldr	r3, [pc, #492]	; (80026b4 <LCD_Display_Dir+0x214>)
 80024c6:	889b      	ldrh	r3, [r3, #4]
 80024c8:	f249 3241 	movw	r2, #37697	; 0x9341
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d00b      	beq.n	80024e8 <LCD_Display_Dir+0x48>
 80024d0:	4b78      	ldr	r3, [pc, #480]	; (80026b4 <LCD_Display_Dir+0x214>)
 80024d2:	889b      	ldrh	r3, [r3, #4]
 80024d4:	f646 0204 	movw	r2, #26628	; 0x6804
 80024d8:	4293      	cmp	r3, r2
 80024da:	d005      	beq.n	80024e8 <LCD_Display_Dir+0x48>
 80024dc:	4b75      	ldr	r3, [pc, #468]	; (80026b4 <LCD_Display_Dir+0x214>)
 80024de:	889b      	ldrh	r3, [r3, #4]
 80024e0:	f245 3210 	movw	r2, #21264	; 0x5310
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d11e      	bne.n	8002526 <LCD_Display_Dir+0x86>
		{
			lcddev.wramcmd=0X2C;
 80024e8:	4b72      	ldr	r3, [pc, #456]	; (80026b4 <LCD_Display_Dir+0x214>)
 80024ea:	222c      	movs	r2, #44	; 0x2c
 80024ec:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2A;
 80024ee:	4b71      	ldr	r3, [pc, #452]	; (80026b4 <LCD_Display_Dir+0x214>)
 80024f0:	222a      	movs	r2, #42	; 0x2a
 80024f2:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B;  	 
 80024f4:	4b6f      	ldr	r3, [pc, #444]	; (80026b4 <LCD_Display_Dir+0x214>)
 80024f6:	222b      	movs	r2, #43	; 0x2b
 80024f8:	819a      	strh	r2, [r3, #12]
			if(lcddev.id==0X6804||lcddev.id==0X5310)
 80024fa:	4b6e      	ldr	r3, [pc, #440]	; (80026b4 <LCD_Display_Dir+0x214>)
 80024fc:	889b      	ldrh	r3, [r3, #4]
 80024fe:	f646 0204 	movw	r2, #26628	; 0x6804
 8002502:	4293      	cmp	r3, r2
 8002504:	d006      	beq.n	8002514 <LCD_Display_Dir+0x74>
 8002506:	4b6b      	ldr	r3, [pc, #428]	; (80026b4 <LCD_Display_Dir+0x214>)
 8002508:	889b      	ldrh	r3, [r3, #4]
 800250a:	f245 3210 	movw	r2, #21264	; 0x5310
 800250e:	4293      	cmp	r3, r2
 8002510:	f040 80c7 	bne.w	80026a2 <LCD_Display_Dir+0x202>
			{
				lcddev.width=320;
 8002514:	4b67      	ldr	r3, [pc, #412]	; (80026b4 <LCD_Display_Dir+0x214>)
 8002516:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800251a:	801a      	strh	r2, [r3, #0]
				lcddev.height=480;
 800251c:	4b65      	ldr	r3, [pc, #404]	; (80026b4 <LCD_Display_Dir+0x214>)
 800251e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002522:	805a      	strh	r2, [r3, #2]
			if(lcddev.id==0X6804||lcddev.id==0X5310)
 8002524:	e0bd      	b.n	80026a2 <LCD_Display_Dir+0x202>
			}
		}else if(lcddev.id==0x5510)
 8002526:	4b63      	ldr	r3, [pc, #396]	; (80026b4 <LCD_Display_Dir+0x214>)
 8002528:	889b      	ldrh	r3, [r3, #4]
 800252a:	f245 5210 	movw	r2, #21776	; 0x5510
 800252e:	4293      	cmp	r3, r2
 8002530:	d114      	bne.n	800255c <LCD_Display_Dir+0xbc>
		{
			lcddev.wramcmd=0X2C00;
 8002532:	4b60      	ldr	r3, [pc, #384]	; (80026b4 <LCD_Display_Dir+0x214>)
 8002534:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8002538:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2A00;
 800253a:	4b5e      	ldr	r3, [pc, #376]	; (80026b4 <LCD_Display_Dir+0x214>)
 800253c:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8002540:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B00; 
 8002542:	4b5c      	ldr	r3, [pc, #368]	; (80026b4 <LCD_Display_Dir+0x214>)
 8002544:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8002548:	819a      	strh	r2, [r3, #12]
			lcddev.width=480;
 800254a:	4b5a      	ldr	r3, [pc, #360]	; (80026b4 <LCD_Display_Dir+0x214>)
 800254c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002550:	801a      	strh	r2, [r3, #0]
			lcddev.height=800;
 8002552:	4b58      	ldr	r3, [pc, #352]	; (80026b4 <LCD_Display_Dir+0x214>)
 8002554:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002558:	805a      	strh	r2, [r3, #2]
 800255a:	e0a3      	b.n	80026a4 <LCD_Display_Dir+0x204>
		}else if(lcddev.id==0X1963)
 800255c:	4b55      	ldr	r3, [pc, #340]	; (80026b4 <LCD_Display_Dir+0x214>)
 800255e:	889b      	ldrh	r3, [r3, #4]
 8002560:	f641 1263 	movw	r2, #6499	; 0x1963
 8002564:	4293      	cmp	r3, r2
 8002566:	d111      	bne.n	800258c <LCD_Display_Dir+0xec>
		{
			lcddev.wramcmd=0X2C;	//����д��GRAM��ָ�� 
 8002568:	4b52      	ldr	r3, [pc, #328]	; (80026b4 <LCD_Display_Dir+0x214>)
 800256a:	222c      	movs	r2, #44	; 0x2c
 800256c:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd=0X2B;	//����дX����ָ��
 800256e:	4b51      	ldr	r3, [pc, #324]	; (80026b4 <LCD_Display_Dir+0x214>)
 8002570:	222b      	movs	r2, #43	; 0x2b
 8002572:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2A;	//����дY����ָ��
 8002574:	4b4f      	ldr	r3, [pc, #316]	; (80026b4 <LCD_Display_Dir+0x214>)
 8002576:	222a      	movs	r2, #42	; 0x2a
 8002578:	819a      	strh	r2, [r3, #12]
			lcddev.width=480;		//���ÿ��480
 800257a:	4b4e      	ldr	r3, [pc, #312]	; (80026b4 <LCD_Display_Dir+0x214>)
 800257c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002580:	801a      	strh	r2, [r3, #0]
			lcddev.height=800;		//���ø߶�800  
 8002582:	4b4c      	ldr	r3, [pc, #304]	; (80026b4 <LCD_Display_Dir+0x214>)
 8002584:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002588:	805a      	strh	r2, [r3, #2]
 800258a:	e08b      	b.n	80026a4 <LCD_Display_Dir+0x204>
		}else
		{
			lcddev.wramcmd=0X22;
 800258c:	4b49      	ldr	r3, [pc, #292]	; (80026b4 <LCD_Display_Dir+0x214>)
 800258e:	2222      	movs	r2, #34	; 0x22
 8002590:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X20;
 8002592:	4b48      	ldr	r3, [pc, #288]	; (80026b4 <LCD_Display_Dir+0x214>)
 8002594:	2220      	movs	r2, #32
 8002596:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X21;  
 8002598:	4b46      	ldr	r3, [pc, #280]	; (80026b4 <LCD_Display_Dir+0x214>)
 800259a:	2221      	movs	r2, #33	; 0x21
 800259c:	819a      	strh	r2, [r3, #12]
 800259e:	e081      	b.n	80026a4 <LCD_Display_Dir+0x204>
		}
	}else 				//����
	{	  				
		lcddev.dir=1;	//����
 80025a0:	4b44      	ldr	r3, [pc, #272]	; (80026b4 <LCD_Display_Dir+0x214>)
 80025a2:	2201      	movs	r2, #1
 80025a4:	719a      	strb	r2, [r3, #6]
		lcddev.width=320;
 80025a6:	4b43      	ldr	r3, [pc, #268]	; (80026b4 <LCD_Display_Dir+0x214>)
 80025a8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80025ac:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 80025ae:	4b41      	ldr	r3, [pc, #260]	; (80026b4 <LCD_Display_Dir+0x214>)
 80025b0:	22f0      	movs	r2, #240	; 0xf0
 80025b2:	805a      	strh	r2, [r3, #2]
		if(lcddev.id==0X9341||lcddev.id==0X5310)
 80025b4:	4b3f      	ldr	r3, [pc, #252]	; (80026b4 <LCD_Display_Dir+0x214>)
 80025b6:	889b      	ldrh	r3, [r3, #4]
 80025b8:	f249 3241 	movw	r2, #37697	; 0x9341
 80025bc:	4293      	cmp	r3, r2
 80025be:	d005      	beq.n	80025cc <LCD_Display_Dir+0x12c>
 80025c0:	4b3c      	ldr	r3, [pc, #240]	; (80026b4 <LCD_Display_Dir+0x214>)
 80025c2:	889b      	ldrh	r3, [r3, #4]
 80025c4:	f245 3210 	movw	r2, #21264	; 0x5310
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d109      	bne.n	80025e0 <LCD_Display_Dir+0x140>
		{
			lcddev.wramcmd=0X2C;
 80025cc:	4b39      	ldr	r3, [pc, #228]	; (80026b4 <LCD_Display_Dir+0x214>)
 80025ce:	222c      	movs	r2, #44	; 0x2c
 80025d0:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2A;
 80025d2:	4b38      	ldr	r3, [pc, #224]	; (80026b4 <LCD_Display_Dir+0x214>)
 80025d4:	222a      	movs	r2, #42	; 0x2a
 80025d6:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B;  	 
 80025d8:	4b36      	ldr	r3, [pc, #216]	; (80026b4 <LCD_Display_Dir+0x214>)
 80025da:	222b      	movs	r2, #43	; 0x2b
 80025dc:	819a      	strh	r2, [r3, #12]
 80025de:	e04b      	b.n	8002678 <LCD_Display_Dir+0x1d8>
		}else if(lcddev.id==0X6804)	 
 80025e0:	4b34      	ldr	r3, [pc, #208]	; (80026b4 <LCD_Display_Dir+0x214>)
 80025e2:	889b      	ldrh	r3, [r3, #4]
 80025e4:	f646 0204 	movw	r2, #26628	; 0x6804
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d109      	bne.n	8002600 <LCD_Display_Dir+0x160>
		{
 			lcddev.wramcmd=0X2C;
 80025ec:	4b31      	ldr	r3, [pc, #196]	; (80026b4 <LCD_Display_Dir+0x214>)
 80025ee:	222c      	movs	r2, #44	; 0x2c
 80025f0:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2B;
 80025f2:	4b30      	ldr	r3, [pc, #192]	; (80026b4 <LCD_Display_Dir+0x214>)
 80025f4:	222b      	movs	r2, #43	; 0x2b
 80025f6:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2A; 
 80025f8:	4b2e      	ldr	r3, [pc, #184]	; (80026b4 <LCD_Display_Dir+0x214>)
 80025fa:	222a      	movs	r2, #42	; 0x2a
 80025fc:	819a      	strh	r2, [r3, #12]
 80025fe:	e03b      	b.n	8002678 <LCD_Display_Dir+0x1d8>
		}else if(lcddev.id==0x5510)
 8002600:	4b2c      	ldr	r3, [pc, #176]	; (80026b4 <LCD_Display_Dir+0x214>)
 8002602:	889b      	ldrh	r3, [r3, #4]
 8002604:	f245 5210 	movw	r2, #21776	; 0x5510
 8002608:	4293      	cmp	r3, r2
 800260a:	d114      	bne.n	8002636 <LCD_Display_Dir+0x196>
		{
			lcddev.wramcmd=0X2C00;
 800260c:	4b29      	ldr	r3, [pc, #164]	; (80026b4 <LCD_Display_Dir+0x214>)
 800260e:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8002612:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2A00;
 8002614:	4b27      	ldr	r3, [pc, #156]	; (80026b4 <LCD_Display_Dir+0x214>)
 8002616:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 800261a:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B00; 
 800261c:	4b25      	ldr	r3, [pc, #148]	; (80026b4 <LCD_Display_Dir+0x214>)
 800261e:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8002622:	819a      	strh	r2, [r3, #12]
			lcddev.width=800;
 8002624:	4b23      	ldr	r3, [pc, #140]	; (80026b4 <LCD_Display_Dir+0x214>)
 8002626:	f44f 7248 	mov.w	r2, #800	; 0x320
 800262a:	801a      	strh	r2, [r3, #0]
			lcddev.height=480;
 800262c:	4b21      	ldr	r3, [pc, #132]	; (80026b4 <LCD_Display_Dir+0x214>)
 800262e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002632:	805a      	strh	r2, [r3, #2]
 8002634:	e020      	b.n	8002678 <LCD_Display_Dir+0x1d8>
		}else if(lcddev.id==0X1963)
 8002636:	4b1f      	ldr	r3, [pc, #124]	; (80026b4 <LCD_Display_Dir+0x214>)
 8002638:	889b      	ldrh	r3, [r3, #4]
 800263a:	f641 1263 	movw	r2, #6499	; 0x1963
 800263e:	4293      	cmp	r3, r2
 8002640:	d111      	bne.n	8002666 <LCD_Display_Dir+0x1c6>
		{
			lcddev.wramcmd=0X2C;	//����д��GRAM��ָ�� 
 8002642:	4b1c      	ldr	r3, [pc, #112]	; (80026b4 <LCD_Display_Dir+0x214>)
 8002644:	222c      	movs	r2, #44	; 0x2c
 8002646:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd=0X2A;	//����дX����ָ��
 8002648:	4b1a      	ldr	r3, [pc, #104]	; (80026b4 <LCD_Display_Dir+0x214>)
 800264a:	222a      	movs	r2, #42	; 0x2a
 800264c:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B;	//����дY����ָ��
 800264e:	4b19      	ldr	r3, [pc, #100]	; (80026b4 <LCD_Display_Dir+0x214>)
 8002650:	222b      	movs	r2, #43	; 0x2b
 8002652:	819a      	strh	r2, [r3, #12]
			lcddev.width=800;		//���ÿ��800
 8002654:	4b17      	ldr	r3, [pc, #92]	; (80026b4 <LCD_Display_Dir+0x214>)
 8002656:	f44f 7248 	mov.w	r2, #800	; 0x320
 800265a:	801a      	strh	r2, [r3, #0]
			lcddev.height=480;		//���ø߶�480  
 800265c:	4b15      	ldr	r3, [pc, #84]	; (80026b4 <LCD_Display_Dir+0x214>)
 800265e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002662:	805a      	strh	r2, [r3, #2]
 8002664:	e008      	b.n	8002678 <LCD_Display_Dir+0x1d8>
		}else
		{
			lcddev.wramcmd=0X22;
 8002666:	4b13      	ldr	r3, [pc, #76]	; (80026b4 <LCD_Display_Dir+0x214>)
 8002668:	2222      	movs	r2, #34	; 0x22
 800266a:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X21;
 800266c:	4b11      	ldr	r3, [pc, #68]	; (80026b4 <LCD_Display_Dir+0x214>)
 800266e:	2221      	movs	r2, #33	; 0x21
 8002670:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X20;  
 8002672:	4b10      	ldr	r3, [pc, #64]	; (80026b4 <LCD_Display_Dir+0x214>)
 8002674:	2220      	movs	r2, #32
 8002676:	819a      	strh	r2, [r3, #12]
		}
		if(lcddev.id==0X6804||lcddev.id==0X5310)
 8002678:	4b0e      	ldr	r3, [pc, #56]	; (80026b4 <LCD_Display_Dir+0x214>)
 800267a:	889b      	ldrh	r3, [r3, #4]
 800267c:	f646 0204 	movw	r2, #26628	; 0x6804
 8002680:	4293      	cmp	r3, r2
 8002682:	d005      	beq.n	8002690 <LCD_Display_Dir+0x1f0>
 8002684:	4b0b      	ldr	r3, [pc, #44]	; (80026b4 <LCD_Display_Dir+0x214>)
 8002686:	889b      	ldrh	r3, [r3, #4]
 8002688:	f245 3210 	movw	r2, #21264	; 0x5310
 800268c:	4293      	cmp	r3, r2
 800268e:	d109      	bne.n	80026a4 <LCD_Display_Dir+0x204>
		{ 	 
			lcddev.width=480;
 8002690:	4b08      	ldr	r3, [pc, #32]	; (80026b4 <LCD_Display_Dir+0x214>)
 8002692:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002696:	801a      	strh	r2, [r3, #0]
			lcddev.height=320; 			
 8002698:	4b06      	ldr	r3, [pc, #24]	; (80026b4 <LCD_Display_Dir+0x214>)
 800269a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800269e:	805a      	strh	r2, [r3, #2]
 80026a0:	e000      	b.n	80026a4 <LCD_Display_Dir+0x204>
			if(lcddev.id==0X6804||lcddev.id==0X5310)
 80026a2:	bf00      	nop
		}
	} 
	LCD_Scan_Dir(DFT_SCAN_DIR);	//Ĭ��ɨ�跽��
 80026a4:	2000      	movs	r0, #0
 80026a6:	f7ff f87f 	bl	80017a8 <LCD_Scan_Dir>
}	 
 80026aa:	bf00      	nop
 80026ac:	3708      	adds	r7, #8
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	200024f8 	.word	0x200024f8

080026b8 <LCD_Init>:
}
//��ʼ��lcd
//�ó�ʼ���������Գ�ʼ������ALIENTEK��Ʒ��LCDҺ����
//������ռ�ýϴ�flash,�û����Ը����Լ���ʵ�����,ɾ��δ�õ���LCD��ʼ������.�Խ�ʡ�ռ�.
void LCD_Init(void)
{ 	
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b088      	sub	sp, #32
 80026bc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_Initure;

	__HAL_RCC_GPIOB_CLK_ENABLE();           	//����GPIOBʱ��
 80026be:	4b9a      	ldr	r3, [pc, #616]	; (8002928 <LCD_Init+0x270>)
 80026c0:	699b      	ldr	r3, [r3, #24]
 80026c2:	4a99      	ldr	r2, [pc, #612]	; (8002928 <LCD_Init+0x270>)
 80026c4:	f043 0308 	orr.w	r3, r3, #8
 80026c8:	6193      	str	r3, [r2, #24]
 80026ca:	4b97      	ldr	r3, [pc, #604]	; (8002928 <LCD_Init+0x270>)
 80026cc:	699b      	ldr	r3, [r3, #24]
 80026ce:	f003 0308 	and.w	r3, r3, #8
 80026d2:	60bb      	str	r3, [r7, #8]
 80026d4:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();           	//����GPIOCʱ��
 80026d6:	4b94      	ldr	r3, [pc, #592]	; (8002928 <LCD_Init+0x270>)
 80026d8:	699b      	ldr	r3, [r3, #24]
 80026da:	4a93      	ldr	r2, [pc, #588]	; (8002928 <LCD_Init+0x270>)
 80026dc:	f043 0310 	orr.w	r3, r3, #16
 80026e0:	6193      	str	r3, [r2, #24]
 80026e2:	4b91      	ldr	r3, [pc, #580]	; (8002928 <LCD_Init+0x270>)
 80026e4:	699b      	ldr	r3, [r3, #24]
 80026e6:	f003 0310 	and.w	r3, r3, #16
 80026ea:	607b      	str	r3, [r7, #4]
 80026ec:	687b      	ldr	r3, [r7, #4]
	
	//PC6,7,8,9,10
    GPIO_Initure.Pin=GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|\
 80026ee:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 80026f2:	60fb      	str	r3, [r7, #12]
					 GPIO_PIN_9|GPIO_PIN_10; 				
    GPIO_Initure.Mode=GPIO_MODE_OUTPUT_PP;  	//�������
 80026f4:	2301      	movs	r3, #1
 80026f6:	613b      	str	r3, [r7, #16]
    GPIO_Initure.Pull=GPIO_PULLUP;          	//����
 80026f8:	2301      	movs	r3, #1
 80026fa:	617b      	str	r3, [r7, #20]
    GPIO_Initure.Speed=GPIO_SPEED_FREQ_HIGH;    //����
 80026fc:	2303      	movs	r3, #3
 80026fe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOC,&GPIO_Initure);
 8002700:	f107 030c 	add.w	r3, r7, #12
 8002704:	4619      	mov	r1, r3
 8002706:	4889      	ldr	r0, [pc, #548]	; (800292c <LCD_Init+0x274>)
 8002708:	f005 fe2c 	bl	8008364 <HAL_GPIO_Init>

	//PB0~15
	GPIO_Initure.Pin=GPIO_PIN_All;				//PB�������
 800270c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002710:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB,&GPIO_Initure);
 8002712:	f107 030c 	add.w	r3, r7, #12
 8002716:	4619      	mov	r1, r3
 8002718:	4885      	ldr	r0, [pc, #532]	; (8002930 <LCD_Init+0x278>)
 800271a:	f005 fe23 	bl	8008364 <HAL_GPIO_Init>
		
	__HAL_AFIO_REMAP_SWJ_DISABLE();				//��ֹJTAG
 800271e:	4b85      	ldr	r3, [pc, #532]	; (8002934 <LCD_Init+0x27c>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	61fb      	str	r3, [r7, #28]
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800272a:	61fb      	str	r3, [r7, #28]
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002732:	61fb      	str	r3, [r7, #28]
 8002734:	4a7f      	ldr	r2, [pc, #508]	; (8002934 <LCD_Init+0x27c>)
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	6053      	str	r3, [r2, #4]

	delay_ms(50); // delay 50 ms 
 800273a:	2032      	movs	r0, #50	; 0x32
 800273c:	f7fe fbc8 	bl	8000ed0 <delay_ms>
	LCD_WriteReg(0x0000,0x0001);
 8002740:	2101      	movs	r1, #1
 8002742:	2000      	movs	r0, #0
 8002744:	f7fe fd1e 	bl	8001184 <LCD_WriteReg>
	delay_ms(50); // delay 50 ms 
 8002748:	2032      	movs	r0, #50	; 0x32
 800274a:	f7fe fbc1 	bl	8000ed0 <delay_ms>
  	lcddev.id = LCD_ReadReg(0x0000);   
 800274e:	2000      	movs	r0, #0
 8002750:	f7fe fd42 	bl	80011d8 <LCD_ReadReg>
 8002754:	4603      	mov	r3, r0
 8002756:	461a      	mov	r2, r3
 8002758:	4b77      	ldr	r3, [pc, #476]	; (8002938 <LCD_Init+0x280>)
 800275a:	809a      	strh	r2, [r3, #4]
	if(lcddev.id<0XFF||lcddev.id==0XFFFF||lcddev.id==0X9300)//����ID����ȷ,����lcddev.id==0X9300�жϣ���Ϊ9341��δ����λ������»ᱻ����9300
 800275c:	4b76      	ldr	r3, [pc, #472]	; (8002938 <LCD_Init+0x280>)
 800275e:	889b      	ldrh	r3, [r3, #4]
 8002760:	2bfe      	cmp	r3, #254	; 0xfe
 8002762:	d90b      	bls.n	800277c <LCD_Init+0xc4>
 8002764:	4b74      	ldr	r3, [pc, #464]	; (8002938 <LCD_Init+0x280>)
 8002766:	889b      	ldrh	r3, [r3, #4]
 8002768:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800276c:	4293      	cmp	r3, r2
 800276e:	d005      	beq.n	800277c <LCD_Init+0xc4>
 8002770:	4b71      	ldr	r3, [pc, #452]	; (8002938 <LCD_Init+0x280>)
 8002772:	889b      	ldrh	r3, [r3, #4]
 8002774:	f5b3 4f13 	cmp.w	r3, #37632	; 0x9300
 8002778:	f040 80c8 	bne.w	800290c <LCD_Init+0x254>
	{	
 		//����9341 ID�Ķ�ȡ		
		LCD_WR_REG(0XD3);				   
 800277c:	20d3      	movs	r0, #211	; 0xd3
 800277e:	f7fe fc75 	bl	800106c <LCD_WR_REG>
		LCD_RD_DATA(); 				//dummy read 	
 8002782:	f7fe fcbb 	bl	80010fc <LCD_RD_DATA>
 		LCD_RD_DATA();   	    	//����0X00
 8002786:	f7fe fcb9 	bl	80010fc <LCD_RD_DATA>
  		lcddev.id=LCD_RD_DATA();   	//��ȡ93								   
 800278a:	f7fe fcb7 	bl	80010fc <LCD_RD_DATA>
 800278e:	4603      	mov	r3, r0
 8002790:	461a      	mov	r2, r3
 8002792:	4b69      	ldr	r3, [pc, #420]	; (8002938 <LCD_Init+0x280>)
 8002794:	809a      	strh	r2, [r3, #4]
 		lcddev.id<<=8;
 8002796:	4b68      	ldr	r3, [pc, #416]	; (8002938 <LCD_Init+0x280>)
 8002798:	889b      	ldrh	r3, [r3, #4]
 800279a:	021b      	lsls	r3, r3, #8
 800279c:	b29a      	uxth	r2, r3
 800279e:	4b66      	ldr	r3, [pc, #408]	; (8002938 <LCD_Init+0x280>)
 80027a0:	809a      	strh	r2, [r3, #4]
		lcddev.id|=LCD_RD_DATA();  	//��ȡ41 	   			   
 80027a2:	f7fe fcab 	bl	80010fc <LCD_RD_DATA>
 80027a6:	4603      	mov	r3, r0
 80027a8:	461a      	mov	r2, r3
 80027aa:	4b63      	ldr	r3, [pc, #396]	; (8002938 <LCD_Init+0x280>)
 80027ac:	889b      	ldrh	r3, [r3, #4]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	b29a      	uxth	r2, r3
 80027b2:	4b61      	ldr	r3, [pc, #388]	; (8002938 <LCD_Init+0x280>)
 80027b4:	809a      	strh	r2, [r3, #4]
 		if(lcddev.id!=0X9341)		//��9341,�����ǲ���6804
 80027b6:	4b60      	ldr	r3, [pc, #384]	; (8002938 <LCD_Init+0x280>)
 80027b8:	889b      	ldrh	r3, [r3, #4]
 80027ba:	f249 3241 	movw	r2, #37697	; 0x9341
 80027be:	4293      	cmp	r3, r2
 80027c0:	f000 80a4 	beq.w	800290c <LCD_Init+0x254>
		{	
 			LCD_WR_REG(0XBF);				   
 80027c4:	20bf      	movs	r0, #191	; 0xbf
 80027c6:	f7fe fc51 	bl	800106c <LCD_WR_REG>
			LCD_RD_DATA(); 			//dummy read 	 
 80027ca:	f7fe fc97 	bl	80010fc <LCD_RD_DATA>
	 		LCD_RD_DATA();   	    //����0X01			   
 80027ce:	f7fe fc95 	bl	80010fc <LCD_RD_DATA>
	 		LCD_RD_DATA(); 			//����0XD0 			  	
 80027d2:	f7fe fc93 	bl	80010fc <LCD_RD_DATA>
	  		lcddev.id=LCD_RD_DATA();//�������0X68 
 80027d6:	f7fe fc91 	bl	80010fc <LCD_RD_DATA>
 80027da:	4603      	mov	r3, r0
 80027dc:	461a      	mov	r2, r3
 80027de:	4b56      	ldr	r3, [pc, #344]	; (8002938 <LCD_Init+0x280>)
 80027e0:	809a      	strh	r2, [r3, #4]
			lcddev.id<<=8;
 80027e2:	4b55      	ldr	r3, [pc, #340]	; (8002938 <LCD_Init+0x280>)
 80027e4:	889b      	ldrh	r3, [r3, #4]
 80027e6:	021b      	lsls	r3, r3, #8
 80027e8:	b29a      	uxth	r2, r3
 80027ea:	4b53      	ldr	r3, [pc, #332]	; (8002938 <LCD_Init+0x280>)
 80027ec:	809a      	strh	r2, [r3, #4]
	  		lcddev.id|=LCD_RD_DATA();//�������0X04	  
 80027ee:	f7fe fc85 	bl	80010fc <LCD_RD_DATA>
 80027f2:	4603      	mov	r3, r0
 80027f4:	461a      	mov	r2, r3
 80027f6:	4b50      	ldr	r3, [pc, #320]	; (8002938 <LCD_Init+0x280>)
 80027f8:	889b      	ldrh	r3, [r3, #4]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	b29a      	uxth	r2, r3
 80027fe:	4b4e      	ldr	r3, [pc, #312]	; (8002938 <LCD_Init+0x280>)
 8002800:	809a      	strh	r2, [r3, #4]
			if(lcddev.id!=0X6804)	//Ҳ����6804,���Կ����ǲ���NT35310
 8002802:	4b4d      	ldr	r3, [pc, #308]	; (8002938 <LCD_Init+0x280>)
 8002804:	889b      	ldrh	r3, [r3, #4]
 8002806:	f646 0204 	movw	r2, #26628	; 0x6804
 800280a:	4293      	cmp	r3, r2
 800280c:	d07e      	beq.n	800290c <LCD_Init+0x254>
			{ 
				LCD_WR_REG(0XD4);				   
 800280e:	20d4      	movs	r0, #212	; 0xd4
 8002810:	f7fe fc2c 	bl	800106c <LCD_WR_REG>
				LCD_RD_DATA(); 				//dummy read  
 8002814:	f7fe fc72 	bl	80010fc <LCD_RD_DATA>
				LCD_RD_DATA();   			//����0X01	 
 8002818:	f7fe fc70 	bl	80010fc <LCD_RD_DATA>
				lcddev.id=LCD_RD_DATA();	//����0X53	
 800281c:	f7fe fc6e 	bl	80010fc <LCD_RD_DATA>
 8002820:	4603      	mov	r3, r0
 8002822:	461a      	mov	r2, r3
 8002824:	4b44      	ldr	r3, [pc, #272]	; (8002938 <LCD_Init+0x280>)
 8002826:	809a      	strh	r2, [r3, #4]
				lcddev.id<<=8;	 
 8002828:	4b43      	ldr	r3, [pc, #268]	; (8002938 <LCD_Init+0x280>)
 800282a:	889b      	ldrh	r3, [r3, #4]
 800282c:	021b      	lsls	r3, r3, #8
 800282e:	b29a      	uxth	r2, r3
 8002830:	4b41      	ldr	r3, [pc, #260]	; (8002938 <LCD_Init+0x280>)
 8002832:	809a      	strh	r2, [r3, #4]
				lcddev.id|=LCD_RD_DATA();	//�������0X10	 
 8002834:	f7fe fc62 	bl	80010fc <LCD_RD_DATA>
 8002838:	4603      	mov	r3, r0
 800283a:	461a      	mov	r2, r3
 800283c:	4b3e      	ldr	r3, [pc, #248]	; (8002938 <LCD_Init+0x280>)
 800283e:	889b      	ldrh	r3, [r3, #4]
 8002840:	4313      	orrs	r3, r2
 8002842:	b29a      	uxth	r2, r3
 8002844:	4b3c      	ldr	r3, [pc, #240]	; (8002938 <LCD_Init+0x280>)
 8002846:	809a      	strh	r2, [r3, #4]
				if(lcddev.id!=0X5310)		//Ҳ����NT35310,���Կ����ǲ���NT35510
 8002848:	4b3b      	ldr	r3, [pc, #236]	; (8002938 <LCD_Init+0x280>)
 800284a:	889b      	ldrh	r3, [r3, #4]
 800284c:	f245 3210 	movw	r2, #21264	; 0x5310
 8002850:	4293      	cmp	r3, r2
 8002852:	d05b      	beq.n	800290c <LCD_Init+0x254>
				{
					LCD_WR_REG(0XDA00);	
 8002854:	f44f 405a 	mov.w	r0, #55808	; 0xda00
 8002858:	f7fe fc08 	bl	800106c <LCD_WR_REG>
					LCD_RD_DATA();   		//����0X00	 
 800285c:	f7fe fc4e 	bl	80010fc <LCD_RD_DATA>
					LCD_WR_REG(0XDB00);	
 8002860:	f44f 405b 	mov.w	r0, #56064	; 0xdb00
 8002864:	f7fe fc02 	bl	800106c <LCD_WR_REG>
					lcddev.id=LCD_RD_DATA();//����0X80
 8002868:	f7fe fc48 	bl	80010fc <LCD_RD_DATA>
 800286c:	4603      	mov	r3, r0
 800286e:	461a      	mov	r2, r3
 8002870:	4b31      	ldr	r3, [pc, #196]	; (8002938 <LCD_Init+0x280>)
 8002872:	809a      	strh	r2, [r3, #4]
					lcddev.id<<=8;	
 8002874:	4b30      	ldr	r3, [pc, #192]	; (8002938 <LCD_Init+0x280>)
 8002876:	889b      	ldrh	r3, [r3, #4]
 8002878:	021b      	lsls	r3, r3, #8
 800287a:	b29a      	uxth	r2, r3
 800287c:	4b2e      	ldr	r3, [pc, #184]	; (8002938 <LCD_Init+0x280>)
 800287e:	809a      	strh	r2, [r3, #4]
					LCD_WR_REG(0XDC00);	
 8002880:	f44f 405c 	mov.w	r0, #56320	; 0xdc00
 8002884:	f7fe fbf2 	bl	800106c <LCD_WR_REG>
					lcddev.id|=LCD_RD_DATA();//����0X00		
 8002888:	f7fe fc38 	bl	80010fc <LCD_RD_DATA>
 800288c:	4603      	mov	r3, r0
 800288e:	461a      	mov	r2, r3
 8002890:	4b29      	ldr	r3, [pc, #164]	; (8002938 <LCD_Init+0x280>)
 8002892:	889b      	ldrh	r3, [r3, #4]
 8002894:	4313      	orrs	r3, r2
 8002896:	b29a      	uxth	r2, r3
 8002898:	4b27      	ldr	r3, [pc, #156]	; (8002938 <LCD_Init+0x280>)
 800289a:	809a      	strh	r2, [r3, #4]
					if(lcddev.id==0x8000)lcddev.id=0x5510;//NT35510���ص�ID��8000H,Ϊ��������,����ǿ������Ϊ5510
 800289c:	4b26      	ldr	r3, [pc, #152]	; (8002938 <LCD_Init+0x280>)
 800289e:	889b      	ldrh	r3, [r3, #4]
 80028a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028a4:	d103      	bne.n	80028ae <LCD_Init+0x1f6>
 80028a6:	4b24      	ldr	r3, [pc, #144]	; (8002938 <LCD_Init+0x280>)
 80028a8:	f245 5210 	movw	r2, #21776	; 0x5510
 80028ac:	809a      	strh	r2, [r3, #4]
					if(lcddev.id!=0X5510)			//Ҳ����NT5510,���Կ����ǲ���SSD1963
 80028ae:	4b22      	ldr	r3, [pc, #136]	; (8002938 <LCD_Init+0x280>)
 80028b0:	889b      	ldrh	r3, [r3, #4]
 80028b2:	f245 5210 	movw	r2, #21776	; 0x5510
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d028      	beq.n	800290c <LCD_Init+0x254>
					{
						LCD_WR_REG(0XA1);
 80028ba:	20a1      	movs	r0, #161	; 0xa1
 80028bc:	f7fe fbd6 	bl	800106c <LCD_WR_REG>
						lcddev.id=LCD_RD_DATA();
 80028c0:	f7fe fc1c 	bl	80010fc <LCD_RD_DATA>
 80028c4:	4603      	mov	r3, r0
 80028c6:	461a      	mov	r2, r3
 80028c8:	4b1b      	ldr	r3, [pc, #108]	; (8002938 <LCD_Init+0x280>)
 80028ca:	809a      	strh	r2, [r3, #4]
						lcddev.id=LCD_RD_DATA();	//����0X57
 80028cc:	f7fe fc16 	bl	80010fc <LCD_RD_DATA>
 80028d0:	4603      	mov	r3, r0
 80028d2:	461a      	mov	r2, r3
 80028d4:	4b18      	ldr	r3, [pc, #96]	; (8002938 <LCD_Init+0x280>)
 80028d6:	809a      	strh	r2, [r3, #4]
						lcddev.id<<=8;	 
 80028d8:	4b17      	ldr	r3, [pc, #92]	; (8002938 <LCD_Init+0x280>)
 80028da:	889b      	ldrh	r3, [r3, #4]
 80028dc:	021b      	lsls	r3, r3, #8
 80028de:	b29a      	uxth	r2, r3
 80028e0:	4b15      	ldr	r3, [pc, #84]	; (8002938 <LCD_Init+0x280>)
 80028e2:	809a      	strh	r2, [r3, #4]
						lcddev.id|=LCD_RD_DATA();	//����0X61	
 80028e4:	f7fe fc0a 	bl	80010fc <LCD_RD_DATA>
 80028e8:	4603      	mov	r3, r0
 80028ea:	461a      	mov	r2, r3
 80028ec:	4b12      	ldr	r3, [pc, #72]	; (8002938 <LCD_Init+0x280>)
 80028ee:	889b      	ldrh	r3, [r3, #4]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	b29a      	uxth	r2, r3
 80028f4:	4b10      	ldr	r3, [pc, #64]	; (8002938 <LCD_Init+0x280>)
 80028f6:	809a      	strh	r2, [r3, #4]
						if(lcddev.id==0X5761)lcddev.id=0X1963;//SSD1963���ص�ID��5761H,Ϊ��������,����ǿ������Ϊ1963
 80028f8:	4b0f      	ldr	r3, [pc, #60]	; (8002938 <LCD_Init+0x280>)
 80028fa:	889b      	ldrh	r3, [r3, #4]
 80028fc:	f245 7261 	movw	r2, #22369	; 0x5761
 8002900:	4293      	cmp	r3, r2
 8002902:	d103      	bne.n	800290c <LCD_Init+0x254>
 8002904:	4b0c      	ldr	r3, [pc, #48]	; (8002938 <LCD_Init+0x280>)
 8002906:	f641 1263 	movw	r2, #6499	; 0x1963
 800290a:	809a      	strh	r2, [r3, #4]
					}
				}
			}
 		}  	
	}
 	printf(" LCD ID:%x\r\n",lcddev.id); //��ӡLCD ID  
 800290c:	4b0a      	ldr	r3, [pc, #40]	; (8002938 <LCD_Init+0x280>)
 800290e:	889b      	ldrh	r3, [r3, #4]
 8002910:	4619      	mov	r1, r3
 8002912:	480a      	ldr	r0, [pc, #40]	; (800293c <LCD_Init+0x284>)
 8002914:	f007 fa10 	bl	8009d38 <iprintf>
	if(lcddev.id==0X9341)	//9341��ʼ��
 8002918:	4b07      	ldr	r3, [pc, #28]	; (8002938 <LCD_Init+0x280>)
 800291a:	889b      	ldrh	r3, [r3, #4]
 800291c:	f249 3241 	movw	r2, #37697	; 0x9341
 8002920:	4293      	cmp	r3, r2
 8002922:	f040 8123 	bne.w	8002b6c <LCD_Init+0x4b4>
 8002926:	e00b      	b.n	8002940 <LCD_Init+0x288>
 8002928:	40021000 	.word	0x40021000
 800292c:	40011000 	.word	0x40011000
 8002930:	40010c00 	.word	0x40010c00
 8002934:	40010000 	.word	0x40010000
 8002938:	200024f8 	.word	0x200024f8
 800293c:	0800ab34 	.word	0x0800ab34
	{	 
		LCD_WR_REG(0xCF);  
 8002940:	20cf      	movs	r0, #207	; 0xcf
 8002942:	f7fe fb93 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATAX(0x00); 
 8002946:	2000      	movs	r0, #0
 8002948:	f7fe fbb4 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC1); 
 800294c:	20c1      	movs	r0, #193	; 0xc1
 800294e:	f7fe fbb1 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X30); 
 8002952:	2030      	movs	r0, #48	; 0x30
 8002954:	f7fe fbae 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_REG(0xED);  
 8002958:	20ed      	movs	r0, #237	; 0xed
 800295a:	f7fe fb87 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATAX(0x64); 
 800295e:	2064      	movs	r0, #100	; 0x64
 8002960:	f7fe fba8 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03); 
 8002964:	2003      	movs	r0, #3
 8002966:	f7fe fba5 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X12); 
 800296a:	2012      	movs	r0, #18
 800296c:	f7fe fba2 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X81); 
 8002970:	2081      	movs	r0, #129	; 0x81
 8002972:	f7fe fb9f 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_REG(0xE8);  
 8002976:	20e8      	movs	r0, #232	; 0xe8
 8002978:	f7fe fb78 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATAX(0x85); 
 800297c:	2085      	movs	r0, #133	; 0x85
 800297e:	f7fe fb99 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10); 
 8002982:	2010      	movs	r0, #16
 8002984:	f7fe fb96 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A); 
 8002988:	207a      	movs	r0, #122	; 0x7a
 800298a:	f7fe fb93 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_REG(0xCB);  
 800298e:	20cb      	movs	r0, #203	; 0xcb
 8002990:	f7fe fb6c 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATAX(0x39); 
 8002994:	2039      	movs	r0, #57	; 0x39
 8002996:	f7fe fb8d 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C); 
 800299a:	202c      	movs	r0, #44	; 0x2c
 800299c:	f7fe fb8a 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00); 
 80029a0:	2000      	movs	r0, #0
 80029a2:	f7fe fb87 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34); 
 80029a6:	2034      	movs	r0, #52	; 0x34
 80029a8:	f7fe fb84 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02); 
 80029ac:	2002      	movs	r0, #2
 80029ae:	f7fe fb81 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_REG(0xF7);  
 80029b2:	20f7      	movs	r0, #247	; 0xf7
 80029b4:	f7fe fb5a 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATAX(0x20); 
 80029b8:	2020      	movs	r0, #32
 80029ba:	f7fe fb7b 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_REG(0xEA);  
 80029be:	20ea      	movs	r0, #234	; 0xea
 80029c0:	f7fe fb54 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATAX(0x00); 
 80029c4:	2000      	movs	r0, #0
 80029c6:	f7fe fb75 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00); 
 80029ca:	2000      	movs	r0, #0
 80029cc:	f7fe fb72 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_REG(0xC0);    //Power control 
 80029d0:	20c0      	movs	r0, #192	; 0xc0
 80029d2:	f7fe fb4b 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATAX(0x1B);   //VRH[5:0] 
 80029d6:	201b      	movs	r0, #27
 80029d8:	f7fe fb6c 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_REG(0xC1);    //Power control 
 80029dc:	20c1      	movs	r0, #193	; 0xc1
 80029de:	f7fe fb45 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATAX(0x01);   //SAP[2:0];BT[3:0] 
 80029e2:	2001      	movs	r0, #1
 80029e4:	f7fe fb66 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_REG(0xC5);    //VCM control 
 80029e8:	20c5      	movs	r0, #197	; 0xc5
 80029ea:	f7fe fb3f 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATAX(0x30); 	 //3F
 80029ee:	2030      	movs	r0, #48	; 0x30
 80029f0:	f7fe fb60 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x30); 	 //3C
 80029f4:	2030      	movs	r0, #48	; 0x30
 80029f6:	f7fe fb5d 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_REG(0xC7);    //VCM control2 
 80029fa:	20c7      	movs	r0, #199	; 0xc7
 80029fc:	f7fe fb36 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATAX(0XB7); 
 8002a00:	20b7      	movs	r0, #183	; 0xb7
 8002a02:	f7fe fb57 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_REG(0x36);    // Memory Access Control 
 8002a06:	2036      	movs	r0, #54	; 0x36
 8002a08:	f7fe fb30 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATAX(0x48); 
 8002a0c:	2048      	movs	r0, #72	; 0x48
 8002a0e:	f7fe fb51 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_REG(0x3A);   
 8002a12:	203a      	movs	r0, #58	; 0x3a
 8002a14:	f7fe fb2a 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATAX(0x55); 
 8002a18:	2055      	movs	r0, #85	; 0x55
 8002a1a:	f7fe fb4b 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_REG(0xB1);   
 8002a1e:	20b1      	movs	r0, #177	; 0xb1
 8002a20:	f7fe fb24 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);   
 8002a24:	2000      	movs	r0, #0
 8002a26:	f7fe fb45 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1A); 
 8002a2a:	201a      	movs	r0, #26
 8002a2c:	f7fe fb42 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_REG(0xB6);    // Display Function Control 
 8002a30:	20b6      	movs	r0, #182	; 0xb6
 8002a32:	f7fe fb1b 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATAX(0x0A); 
 8002a36:	200a      	movs	r0, #10
 8002a38:	f7fe fb3c 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2); 
 8002a3c:	20a2      	movs	r0, #162	; 0xa2
 8002a3e:	f7fe fb39 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_REG(0xF2);    // 3Gamma Function Disable 
 8002a42:	20f2      	movs	r0, #242	; 0xf2
 8002a44:	f7fe fb12 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATAX(0x00); 
 8002a48:	2000      	movs	r0, #0
 8002a4a:	f7fe fb33 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_REG(0x26);    //Gamma curve selected 
 8002a4e:	2026      	movs	r0, #38	; 0x26
 8002a50:	f7fe fb0c 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATAX(0x01); 
 8002a54:	2001      	movs	r0, #1
 8002a56:	f7fe fb2d 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_REG(0xE0);    //Set Gamma 
 8002a5a:	20e0      	movs	r0, #224	; 0xe0
 8002a5c:	f7fe fb06 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATAX(0x0F); 
 8002a60:	200f      	movs	r0, #15
 8002a62:	f7fe fb27 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2A); 
 8002a66:	202a      	movs	r0, #42	; 0x2a
 8002a68:	f7fe fb24 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x28); 
 8002a6c:	2028      	movs	r0, #40	; 0x28
 8002a6e:	f7fe fb21 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x08); 
 8002a72:	2008      	movs	r0, #8
 8002a74:	f7fe fb1e 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0E); 
 8002a78:	200e      	movs	r0, #14
 8002a7a:	f7fe fb1b 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x08); 
 8002a7e:	2008      	movs	r0, #8
 8002a80:	f7fe fb18 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x54); 
 8002a84:	2054      	movs	r0, #84	; 0x54
 8002a86:	f7fe fb15 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0XA9); 
 8002a8a:	20a9      	movs	r0, #169	; 0xa9
 8002a8c:	f7fe fb12 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x43); 
 8002a90:	2043      	movs	r0, #67	; 0x43
 8002a92:	f7fe fb0f 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0A); 
 8002a96:	200a      	movs	r0, #10
 8002a98:	f7fe fb0c 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F); 
 8002a9c:	200f      	movs	r0, #15
 8002a9e:	f7fe fb09 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00); 
 8002aa2:	2000      	movs	r0, #0
 8002aa4:	f7fe fb06 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00); 
 8002aa8:	2000      	movs	r0, #0
 8002aaa:	f7fe fb03 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00); 
 8002aae:	2000      	movs	r0, #0
 8002ab0:	f7fe fb00 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00); 		 
 8002ab4:	2000      	movs	r0, #0
 8002ab6:	f7fe fafd 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_REG(0XE1);    //Set Gamma 
 8002aba:	20e1      	movs	r0, #225	; 0xe1
 8002abc:	f7fe fad6 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATAX(0x00); 
 8002ac0:	2000      	movs	r0, #0
 8002ac2:	f7fe faf7 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x15); 
 8002ac6:	2015      	movs	r0, #21
 8002ac8:	f7fe faf4 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17); 
 8002acc:	2017      	movs	r0, #23
 8002ace:	f7fe faf1 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x07); 
 8002ad2:	2007      	movs	r0, #7
 8002ad4:	f7fe faee 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x11); 
 8002ad8:	2011      	movs	r0, #17
 8002ada:	f7fe faeb 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x06); 
 8002ade:	2006      	movs	r0, #6
 8002ae0:	f7fe fae8 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2B); 
 8002ae4:	202b      	movs	r0, #43	; 0x2b
 8002ae6:	f7fe fae5 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56); 
 8002aea:	2056      	movs	r0, #86	; 0x56
 8002aec:	f7fe fae2 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C); 
 8002af0:	203c      	movs	r0, #60	; 0x3c
 8002af2:	f7fe fadf 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x05); 
 8002af6:	2005      	movs	r0, #5
 8002af8:	f7fe fadc 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10); 
 8002afc:	2010      	movs	r0, #16
 8002afe:	f7fe fad9 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F); 
 8002b02:	200f      	movs	r0, #15
 8002b04:	f7fe fad6 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F); 
 8002b08:	203f      	movs	r0, #63	; 0x3f
 8002b0a:	f7fe fad3 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F); 
 8002b0e:	203f      	movs	r0, #63	; 0x3f
 8002b10:	f7fe fad0 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F); 
 8002b14:	200f      	movs	r0, #15
 8002b16:	f7fe facd 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_REG(0x2B); 
 8002b1a:	202b      	movs	r0, #43	; 0x2b
 8002b1c:	f7fe faa6 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002b20:	2000      	movs	r0, #0
 8002b22:	f7fe fac7 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b26:	2000      	movs	r0, #0
 8002b28:	f7fe fac4 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 8002b2c:	2001      	movs	r0, #1
 8002b2e:	f7fe fac1 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3f);
 8002b32:	203f      	movs	r0, #63	; 0x3f
 8002b34:	f7fe fabe 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_REG(0x2A); 
 8002b38:	202a      	movs	r0, #42	; 0x2a
 8002b3a:	f7fe fa97 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002b3e:	2000      	movs	r0, #0
 8002b40:	f7fe fab8 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b44:	2000      	movs	r0, #0
 8002b46:	f7fe fab5 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b4a:	2000      	movs	r0, #0
 8002b4c:	f7fe fab2 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xef);	 
 8002b50:	20ef      	movs	r0, #239	; 0xef
 8002b52:	f7fe faaf 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_REG(0x11); //Exit Sleep
 8002b56:	2011      	movs	r0, #17
 8002b58:	f7fe fa88 	bl	800106c <LCD_WR_REG>
		delay_ms(120);
 8002b5c:	2078      	movs	r0, #120	; 0x78
 8002b5e:	f7fe f9b7 	bl	8000ed0 <delay_ms>
		LCD_WR_REG(0x29); //display on	
 8002b62:	2029      	movs	r0, #41	; 0x29
 8002b64:	f7fe fa82 	bl	800106c <LCD_WR_REG>
 8002b68:	f003 bcd8 	b.w	800651c <LCD_Init+0x3e64>
	}else if(lcddev.id==0x6804) //6804��ʼ��
 8002b6c:	4b58      	ldr	r3, [pc, #352]	; (8002cd0 <LCD_Init+0x618>)
 8002b6e:	889b      	ldrh	r3, [r3, #4]
 8002b70:	f646 0204 	movw	r2, #26628	; 0x6804
 8002b74:	4293      	cmp	r3, r2
 8002b76:	f040 80ad 	bne.w	8002cd4 <LCD_Init+0x61c>
	{
		LCD_WR_REG(0X11);
 8002b7a:	2011      	movs	r0, #17
 8002b7c:	f7fe fa76 	bl	800106c <LCD_WR_REG>
		delay_ms(20);
 8002b80:	2014      	movs	r0, #20
 8002b82:	f7fe f9a5 	bl	8000ed0 <delay_ms>
		LCD_WR_REG(0XD0);//VCI1  VCL  VGH  VGL DDVDH VREG1OUT power amplitude setting
 8002b86:	20d0      	movs	r0, #208	; 0xd0
 8002b88:	f7fe fa70 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATAX(0X07); 
 8002b8c:	2007      	movs	r0, #7
 8002b8e:	f7fe fa91 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X42); 
 8002b92:	2042      	movs	r0, #66	; 0x42
 8002b94:	f7fe fa8e 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X1D); 
 8002b98:	201d      	movs	r0, #29
 8002b9a:	f7fe fa8b 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_REG(0XD1);//VCOMH VCOM_AC amplitude setting
 8002b9e:	20d1      	movs	r0, #209	; 0xd1
 8002ba0:	f7fe fa64 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8002ba4:	2000      	movs	r0, #0
 8002ba6:	f7fe fa85 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X1a);
 8002baa:	201a      	movs	r0, #26
 8002bac:	f7fe fa82 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X09); 
 8002bb0:	2009      	movs	r0, #9
 8002bb2:	f7fe fa7f 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_REG(0XD2);//Operational Amplifier Circuit Constant Current Adjust , charge pump frequency setting
 8002bb6:	20d2      	movs	r0, #210	; 0xd2
 8002bb8:	f7fe fa58 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATAX(0X01);
 8002bbc:	2001      	movs	r0, #1
 8002bbe:	f7fe fa79 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X22);
 8002bc2:	2022      	movs	r0, #34	; 0x22
 8002bc4:	f7fe fa76 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_REG(0XC0);//REV SM GS 
 8002bc8:	20c0      	movs	r0, #192	; 0xc0
 8002bca:	f7fe fa4f 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATAX(0X10);
 8002bce:	2010      	movs	r0, #16
 8002bd0:	f7fe fa70 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X3B);
 8002bd4:	203b      	movs	r0, #59	; 0x3b
 8002bd6:	f7fe fa6d 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8002bda:	2000      	movs	r0, #0
 8002bdc:	f7fe fa6a 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X02);
 8002be0:	2002      	movs	r0, #2
 8002be2:	f7fe fa67 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X11);
 8002be6:	2011      	movs	r0, #17
 8002be8:	f7fe fa64 	bl	80010b4 <LCD_WR_DATAX>
		
		LCD_WR_REG(0XC5);// Frame rate setting = 72HZ  when setting 0x03
 8002bec:	20c5      	movs	r0, #197	; 0xc5
 8002bee:	f7fe fa3d 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATAX(0X03);
 8002bf2:	2003      	movs	r0, #3
 8002bf4:	f7fe fa5e 	bl	80010b4 <LCD_WR_DATAX>
		
		LCD_WR_REG(0XC8);//Gamma setting
 8002bf8:	20c8      	movs	r0, #200	; 0xc8
 8002bfa:	f7fe fa37 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8002bfe:	2000      	movs	r0, #0
 8002c00:	f7fe fa58 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X25);
 8002c04:	2025      	movs	r0, #37	; 0x25
 8002c06:	f7fe fa55 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X21);
 8002c0a:	2021      	movs	r0, #33	; 0x21
 8002c0c:	f7fe fa52 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X05);
 8002c10:	2005      	movs	r0, #5
 8002c12:	f7fe fa4f 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8002c16:	2000      	movs	r0, #0
 8002c18:	f7fe fa4c 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X0a);
 8002c1c:	200a      	movs	r0, #10
 8002c1e:	f7fe fa49 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X65);
 8002c22:	2065      	movs	r0, #101	; 0x65
 8002c24:	f7fe fa46 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X25);
 8002c28:	2025      	movs	r0, #37	; 0x25
 8002c2a:	f7fe fa43 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X77);
 8002c2e:	2077      	movs	r0, #119	; 0x77
 8002c30:	f7fe fa40 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X50);
 8002c34:	2050      	movs	r0, #80	; 0x50
 8002c36:	f7fe fa3d 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X0f);
 8002c3a:	200f      	movs	r0, #15
 8002c3c:	f7fe fa3a 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);	  
 8002c40:	2000      	movs	r0, #0
 8002c42:	f7fe fa37 	bl	80010b4 <LCD_WR_DATAX>
						  
   		LCD_WR_REG(0XF8);
 8002c46:	20f8      	movs	r0, #248	; 0xf8
 8002c48:	f7fe fa10 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATAX(0X01);	  
 8002c4c:	2001      	movs	r0, #1
 8002c4e:	f7fe fa31 	bl	80010b4 <LCD_WR_DATAX>

 		LCD_WR_REG(0XFE);
 8002c52:	20fe      	movs	r0, #254	; 0xfe
 8002c54:	f7fe fa0a 	bl	800106c <LCD_WR_REG>
 		LCD_WR_DATAX(0X00);
 8002c58:	2000      	movs	r0, #0
 8002c5a:	f7fe fa2b 	bl	80010b4 <LCD_WR_DATAX>
 		LCD_WR_DATAX(0X02);
 8002c5e:	2002      	movs	r0, #2
 8002c60:	f7fe fa28 	bl	80010b4 <LCD_WR_DATAX>
		
		LCD_WR_REG(0X20);//Exit invert mode
 8002c64:	2020      	movs	r0, #32
 8002c66:	f7fe fa01 	bl	800106c <LCD_WR_REG>

		LCD_WR_REG(0X36);
 8002c6a:	2036      	movs	r0, #54	; 0x36
 8002c6c:	f7fe f9fe 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATAX(0X08);//ԭ����a
 8002c70:	2008      	movs	r0, #8
 8002c72:	f7fe fa1f 	bl	80010b4 <LCD_WR_DATAX>
		
		LCD_WR_REG(0X3A);
 8002c76:	203a      	movs	r0, #58	; 0x3a
 8002c78:	f7fe f9f8 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATAX(0X55);//16λģʽ	  
 8002c7c:	2055      	movs	r0, #85	; 0x55
 8002c7e:	f7fe fa19 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_REG(0X2B);
 8002c82:	202b      	movs	r0, #43	; 0x2b
 8002c84:	f7fe f9f2 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8002c88:	2000      	movs	r0, #0
 8002c8a:	f7fe fa13 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8002c8e:	2000      	movs	r0, #0
 8002c90:	f7fe fa10 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X01);
 8002c94:	2001      	movs	r0, #1
 8002c96:	f7fe fa0d 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X3F);
 8002c9a:	203f      	movs	r0, #63	; 0x3f
 8002c9c:	f7fe fa0a 	bl	80010b4 <LCD_WR_DATAX>
		
		LCD_WR_REG(0X2A);
 8002ca0:	202a      	movs	r0, #42	; 0x2a
 8002ca2:	f7fe f9e3 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8002ca6:	2000      	movs	r0, #0
 8002ca8:	f7fe fa04 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8002cac:	2000      	movs	r0, #0
 8002cae:	f7fe fa01 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X01);
 8002cb2:	2001      	movs	r0, #1
 8002cb4:	f7fe f9fe 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0XDF);
 8002cb8:	20df      	movs	r0, #223	; 0xdf
 8002cba:	f7fe f9fb 	bl	80010b4 <LCD_WR_DATAX>
		delay_ms(120);
 8002cbe:	2078      	movs	r0, #120	; 0x78
 8002cc0:	f7fe f906 	bl	8000ed0 <delay_ms>
		LCD_WR_REG(0X29); 	 
 8002cc4:	2029      	movs	r0, #41	; 0x29
 8002cc6:	f7fe f9d1 	bl	800106c <LCD_WR_REG>
 8002cca:	f003 bc27 	b.w	800651c <LCD_Init+0x3e64>
 8002cce:	bf00      	nop
 8002cd0:	200024f8 	.word	0x200024f8
 	}else if(lcddev.id==0x5310)
 8002cd4:	4b03      	ldr	r3, [pc, #12]	; (8002ce4 <LCD_Init+0x62c>)
 8002cd6:	889b      	ldrh	r3, [r3, #4]
 8002cd8:	f245 3210 	movw	r2, #21264	; 0x5310
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	f040 877c 	bne.w	8003bda <LCD_Init+0x1522>
 8002ce2:	e001      	b.n	8002ce8 <LCD_Init+0x630>
 8002ce4:	200024f8 	.word	0x200024f8
	{  
		LCD_WR_REG(0xED);
 8002ce8:	20ed      	movs	r0, #237	; 0xed
 8002cea:	f7fe f9bf 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 8002cee:	2001      	movs	r0, #1
 8002cf0:	f7fe f9e0 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xFE);
 8002cf4:	20fe      	movs	r0, #254	; 0xfe
 8002cf6:	f7fe f9dd 	bl	80010b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xEE);
 8002cfa:	20ee      	movs	r0, #238	; 0xee
 8002cfc:	f7fe f9b6 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATAX(0xDE);
 8002d00:	20de      	movs	r0, #222	; 0xde
 8002d02:	f7fe f9d7 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 8002d06:	2021      	movs	r0, #33	; 0x21
 8002d08:	f7fe f9d4 	bl	80010b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xF1);
 8002d0c:	20f1      	movs	r0, #241	; 0xf1
 8002d0e:	f7fe f9ad 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 8002d12:	2001      	movs	r0, #1
 8002d14:	f7fe f9ce 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_REG(0xDF);
 8002d18:	20df      	movs	r0, #223	; 0xdf
 8002d1a:	f7fe f9a7 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATAX(0x10);
 8002d1e:	2010      	movs	r0, #16
 8002d20:	f7fe f9c8 	bl	80010b4 <LCD_WR_DATAX>

		//VCOMvoltage//
		LCD_WR_REG(0xC4);
 8002d24:	20c4      	movs	r0, #196	; 0xc4
 8002d26:	f7fe f9a1 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATAX(0x8F);	  //5f
 8002d2a:	208f      	movs	r0, #143	; 0x8f
 8002d2c:	f7fe f9c2 	bl	80010b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC6);
 8002d30:	20c6      	movs	r0, #198	; 0xc6
 8002d32:	f7fe f99b 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002d36:	2000      	movs	r0, #0
 8002d38:	f7fe f9bc 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 8002d3c:	20e2      	movs	r0, #226	; 0xe2
 8002d3e:	f7fe f9b9 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 8002d42:	20e2      	movs	r0, #226	; 0xe2
 8002d44:	f7fe f9b6 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 8002d48:	20e2      	movs	r0, #226	; 0xe2
 8002d4a:	f7fe f9b3 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_REG(0xBF);
 8002d4e:	20bf      	movs	r0, #191	; 0xbf
 8002d50:	f7fe f98c 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 8002d54:	20aa      	movs	r0, #170	; 0xaa
 8002d56:	f7fe f9ad 	bl	80010b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xB0);
 8002d5a:	20b0      	movs	r0, #176	; 0xb0
 8002d5c:	f7fe f986 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATAX(0x0D);
 8002d60:	200d      	movs	r0, #13
 8002d62:	f7fe f9a7 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d66:	2000      	movs	r0, #0
 8002d68:	f7fe f9a4 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0D);
 8002d6c:	200d      	movs	r0, #13
 8002d6e:	f7fe f9a1 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d72:	2000      	movs	r0, #0
 8002d74:	f7fe f99e 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x11);
 8002d78:	2011      	movs	r0, #17
 8002d7a:	f7fe f99b 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d7e:	2000      	movs	r0, #0
 8002d80:	f7fe f998 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x19);
 8002d84:	2019      	movs	r0, #25
 8002d86:	f7fe f995 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d8a:	2000      	movs	r0, #0
 8002d8c:	f7fe f992 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 8002d90:	2021      	movs	r0, #33	; 0x21
 8002d92:	f7fe f98f 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d96:	2000      	movs	r0, #0
 8002d98:	f7fe f98c 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2D);
 8002d9c:	202d      	movs	r0, #45	; 0x2d
 8002d9e:	f7fe f989 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002da2:	2000      	movs	r0, #0
 8002da4:	f7fe f986 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3D);
 8002da8:	203d      	movs	r0, #61	; 0x3d
 8002daa:	f7fe f983 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dae:	2000      	movs	r0, #0
 8002db0:	f7fe f980 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8002db4:	205d      	movs	r0, #93	; 0x5d
 8002db6:	f7fe f97d 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dba:	2000      	movs	r0, #0
 8002dbc:	f7fe f97a 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8002dc0:	205d      	movs	r0, #93	; 0x5d
 8002dc2:	f7fe f977 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dc6:	2000      	movs	r0, #0
 8002dc8:	f7fe f974 	bl	80010b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xB1);
 8002dcc:	20b1      	movs	r0, #177	; 0xb1
 8002dce:	f7fe f94d 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATAX(0x80);
 8002dd2:	2080      	movs	r0, #128	; 0x80
 8002dd4:	f7fe f96e 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dd8:	2000      	movs	r0, #0
 8002dda:	f7fe f96b 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 8002dde:	208b      	movs	r0, #139	; 0x8b
 8002de0:	f7fe f968 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002de4:	2000      	movs	r0, #0
 8002de6:	f7fe f965 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x96);
 8002dea:	2096      	movs	r0, #150	; 0x96
 8002dec:	f7fe f962 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002df0:	2000      	movs	r0, #0
 8002df2:	f7fe f95f 	bl	80010b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xB2);
 8002df6:	20b2      	movs	r0, #178	; 0xb2
 8002df8:	f7fe f938 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002dfc:	2000      	movs	r0, #0
 8002dfe:	f7fe f959 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e02:	2000      	movs	r0, #0
 8002e04:	f7fe f956 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8002e08:	2002      	movs	r0, #2
 8002e0a:	f7fe f953 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e0e:	2000      	movs	r0, #0
 8002e10:	f7fe f950 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 8002e14:	2003      	movs	r0, #3
 8002e16:	f7fe f94d 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e1a:	2000      	movs	r0, #0
 8002e1c:	f7fe f94a 	bl	80010b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xB3);
 8002e20:	20b3      	movs	r0, #179	; 0xb3
 8002e22:	f7fe f923 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002e26:	2000      	movs	r0, #0
 8002e28:	f7fe f944 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e2c:	2000      	movs	r0, #0
 8002e2e:	f7fe f941 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e32:	2000      	movs	r0, #0
 8002e34:	f7fe f93e 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e38:	2000      	movs	r0, #0
 8002e3a:	f7fe f93b 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e3e:	2000      	movs	r0, #0
 8002e40:	f7fe f938 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e44:	2000      	movs	r0, #0
 8002e46:	f7fe f935 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e4a:	2000      	movs	r0, #0
 8002e4c:	f7fe f932 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e50:	2000      	movs	r0, #0
 8002e52:	f7fe f92f 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e56:	2000      	movs	r0, #0
 8002e58:	f7fe f92c 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e5c:	2000      	movs	r0, #0
 8002e5e:	f7fe f929 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e62:	2000      	movs	r0, #0
 8002e64:	f7fe f926 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e68:	2000      	movs	r0, #0
 8002e6a:	f7fe f923 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e6e:	2000      	movs	r0, #0
 8002e70:	f7fe f920 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e74:	2000      	movs	r0, #0
 8002e76:	f7fe f91d 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e7a:	2000      	movs	r0, #0
 8002e7c:	f7fe f91a 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e80:	2000      	movs	r0, #0
 8002e82:	f7fe f917 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e86:	2000      	movs	r0, #0
 8002e88:	f7fe f914 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e8c:	2000      	movs	r0, #0
 8002e8e:	f7fe f911 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e92:	2000      	movs	r0, #0
 8002e94:	f7fe f90e 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e98:	2000      	movs	r0, #0
 8002e9a:	f7fe f90b 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e9e:	2000      	movs	r0, #0
 8002ea0:	f7fe f908 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ea4:	2000      	movs	r0, #0
 8002ea6:	f7fe f905 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002eaa:	2000      	movs	r0, #0
 8002eac:	f7fe f902 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002eb0:	2000      	movs	r0, #0
 8002eb2:	f7fe f8ff 	bl	80010b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xB4);
 8002eb6:	20b4      	movs	r0, #180	; 0xb4
 8002eb8:	f7fe f8d8 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATAX(0x8B);
 8002ebc:	208b      	movs	r0, #139	; 0x8b
 8002ebe:	f7fe f8f9 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ec2:	2000      	movs	r0, #0
 8002ec4:	f7fe f8f6 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x96);
 8002ec8:	2096      	movs	r0, #150	; 0x96
 8002eca:	f7fe f8f3 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ece:	2000      	movs	r0, #0
 8002ed0:	f7fe f8f0 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA1);
 8002ed4:	20a1      	movs	r0, #161	; 0xa1
 8002ed6:	f7fe f8ed 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002eda:	2000      	movs	r0, #0
 8002edc:	f7fe f8ea 	bl	80010b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xB5);
 8002ee0:	20b5      	movs	r0, #181	; 0xb5
 8002ee2:	f7fe f8c3 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATAX(0x02);
 8002ee6:	2002      	movs	r0, #2
 8002ee8:	f7fe f8e4 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002eec:	2000      	movs	r0, #0
 8002eee:	f7fe f8e1 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 8002ef2:	2003      	movs	r0, #3
 8002ef4:	f7fe f8de 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ef8:	2000      	movs	r0, #0
 8002efa:	f7fe f8db 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x04);
 8002efe:	2004      	movs	r0, #4
 8002f00:	f7fe f8d8 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f04:	2000      	movs	r0, #0
 8002f06:	f7fe f8d5 	bl	80010b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xB6);
 8002f0a:	20b6      	movs	r0, #182	; 0xb6
 8002f0c:	f7fe f8ae 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002f10:	2000      	movs	r0, #0
 8002f12:	f7fe f8cf 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f16:	2000      	movs	r0, #0
 8002f18:	f7fe f8cc 	bl	80010b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xB7);
 8002f1c:	20b7      	movs	r0, #183	; 0xb7
 8002f1e:	f7fe f8a5 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002f22:	2000      	movs	r0, #0
 8002f24:	f7fe f8c6 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f28:	2000      	movs	r0, #0
 8002f2a:	f7fe f8c3 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 8002f2e:	203f      	movs	r0, #63	; 0x3f
 8002f30:	f7fe f8c0 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f34:	2000      	movs	r0, #0
 8002f36:	f7fe f8bd 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5E);
 8002f3a:	205e      	movs	r0, #94	; 0x5e
 8002f3c:	f7fe f8ba 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f40:	2000      	movs	r0, #0
 8002f42:	f7fe f8b7 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 8002f46:	2064      	movs	r0, #100	; 0x64
 8002f48:	f7fe f8b4 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f4c:	2000      	movs	r0, #0
 8002f4e:	f7fe f8b1 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8C);
 8002f52:	208c      	movs	r0, #140	; 0x8c
 8002f54:	f7fe f8ae 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f58:	2000      	movs	r0, #0
 8002f5a:	f7fe f8ab 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xAC);
 8002f5e:	20ac      	movs	r0, #172	; 0xac
 8002f60:	f7fe f8a8 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f64:	2000      	movs	r0, #0
 8002f66:	f7fe f8a5 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 8002f6a:	20dc      	movs	r0, #220	; 0xdc
 8002f6c:	f7fe f8a2 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f70:	2000      	movs	r0, #0
 8002f72:	f7fe f89f 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x70);
 8002f76:	2070      	movs	r0, #112	; 0x70
 8002f78:	f7fe f89c 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f7c:	2000      	movs	r0, #0
 8002f7e:	f7fe f899 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x90);
 8002f82:	2090      	movs	r0, #144	; 0x90
 8002f84:	f7fe f896 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f88:	2000      	movs	r0, #0
 8002f8a:	f7fe f893 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xEB);
 8002f8e:	20eb      	movs	r0, #235	; 0xeb
 8002f90:	f7fe f890 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f94:	2000      	movs	r0, #0
 8002f96:	f7fe f88d 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 8002f9a:	20dc      	movs	r0, #220	; 0xdc
 8002f9c:	f7fe f88a 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fa0:	2000      	movs	r0, #0
 8002fa2:	f7fe f887 	bl	80010b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xB8);
 8002fa6:	20b8      	movs	r0, #184	; 0xb8
 8002fa8:	f7fe f860 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002fac:	2000      	movs	r0, #0
 8002fae:	f7fe f881 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fb2:	2000      	movs	r0, #0
 8002fb4:	f7fe f87e 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fb8:	2000      	movs	r0, #0
 8002fba:	f7fe f87b 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fbe:	2000      	movs	r0, #0
 8002fc0:	f7fe f878 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fc4:	2000      	movs	r0, #0
 8002fc6:	f7fe f875 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fca:	2000      	movs	r0, #0
 8002fcc:	f7fe f872 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fd0:	2000      	movs	r0, #0
 8002fd2:	f7fe f86f 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fd6:	2000      	movs	r0, #0
 8002fd8:	f7fe f86c 	bl	80010b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xBA);
 8002fdc:	20ba      	movs	r0, #186	; 0xba
 8002fde:	f7fe f845 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATAX(0x24);
 8002fe2:	2024      	movs	r0, #36	; 0x24
 8002fe4:	f7fe f866 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fe8:	2000      	movs	r0, #0
 8002fea:	f7fe f863 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fee:	2000      	movs	r0, #0
 8002ff0:	f7fe f860 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ff4:	2000      	movs	r0, #0
 8002ff6:	f7fe f85d 	bl	80010b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC1);
 8002ffa:	20c1      	movs	r0, #193	; 0xc1
 8002ffc:	f7fe f836 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8003000:	2020      	movs	r0, #32
 8003002:	f7fe f857 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003006:	2000      	movs	r0, #0
 8003008:	f7fe f854 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x54);
 800300c:	2054      	movs	r0, #84	; 0x54
 800300e:	f7fe f851 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003012:	2000      	movs	r0, #0
 8003014:	f7fe f84e 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xFF);
 8003018:	20ff      	movs	r0, #255	; 0xff
 800301a:	f7fe f84b 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800301e:	2000      	movs	r0, #0
 8003020:	f7fe f848 	bl	80010b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC2);
 8003024:	20c2      	movs	r0, #194	; 0xc2
 8003026:	f7fe f821 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATAX(0x0A);
 800302a:	200a      	movs	r0, #10
 800302c:	f7fe f842 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003030:	2000      	movs	r0, #0
 8003032:	f7fe f83f 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x04);
 8003036:	2004      	movs	r0, #4
 8003038:	f7fe f83c 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800303c:	2000      	movs	r0, #0
 800303e:	f7fe f839 	bl	80010b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC3);
 8003042:	20c3      	movs	r0, #195	; 0xc3
 8003044:	f7fe f812 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATAX(0x3C);
 8003048:	203c      	movs	r0, #60	; 0x3c
 800304a:	f7fe f833 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800304e:	2000      	movs	r0, #0
 8003050:	f7fe f830 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3A);
 8003054:	203a      	movs	r0, #58	; 0x3a
 8003056:	f7fe f82d 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800305a:	2000      	movs	r0, #0
 800305c:	f7fe f82a 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x39);
 8003060:	2039      	movs	r0, #57	; 0x39
 8003062:	f7fe f827 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003066:	2000      	movs	r0, #0
 8003068:	f7fe f824 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x37);
 800306c:	2037      	movs	r0, #55	; 0x37
 800306e:	f7fe f821 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003072:	2000      	movs	r0, #0
 8003074:	f7fe f81e 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8003078:	203c      	movs	r0, #60	; 0x3c
 800307a:	f7fe f81b 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800307e:	2000      	movs	r0, #0
 8003080:	f7fe f818 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8003084:	2036      	movs	r0, #54	; 0x36
 8003086:	f7fe f815 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800308a:	2000      	movs	r0, #0
 800308c:	f7fe f812 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x32);
 8003090:	2032      	movs	r0, #50	; 0x32
 8003092:	f7fe f80f 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003096:	2000      	movs	r0, #0
 8003098:	f7fe f80c 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2F);
 800309c:	202f      	movs	r0, #47	; 0x2f
 800309e:	f7fe f809 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030a2:	2000      	movs	r0, #0
 80030a4:	f7fe f806 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 80030a8:	202c      	movs	r0, #44	; 0x2c
 80030aa:	f7fe f803 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030ae:	2000      	movs	r0, #0
 80030b0:	f7fe f800 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 80030b4:	2029      	movs	r0, #41	; 0x29
 80030b6:	f7fd fffd 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030ba:	2000      	movs	r0, #0
 80030bc:	f7fd fffa 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x26);
 80030c0:	2026      	movs	r0, #38	; 0x26
 80030c2:	f7fd fff7 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030c6:	2000      	movs	r0, #0
 80030c8:	f7fd fff4 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 80030cc:	2024      	movs	r0, #36	; 0x24
 80030ce:	f7fd fff1 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030d2:	2000      	movs	r0, #0
 80030d4:	f7fd ffee 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 80030d8:	2024      	movs	r0, #36	; 0x24
 80030da:	f7fd ffeb 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030de:	2000      	movs	r0, #0
 80030e0:	f7fd ffe8 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 80030e4:	2023      	movs	r0, #35	; 0x23
 80030e6:	f7fd ffe5 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030ea:	2000      	movs	r0, #0
 80030ec:	f7fd ffe2 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 80030f0:	203c      	movs	r0, #60	; 0x3c
 80030f2:	f7fd ffdf 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030f6:	2000      	movs	r0, #0
 80030f8:	f7fd ffdc 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 80030fc:	2036      	movs	r0, #54	; 0x36
 80030fe:	f7fd ffd9 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003102:	2000      	movs	r0, #0
 8003104:	f7fd ffd6 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x32);
 8003108:	2032      	movs	r0, #50	; 0x32
 800310a:	f7fd ffd3 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800310e:	2000      	movs	r0, #0
 8003110:	f7fd ffd0 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2F);
 8003114:	202f      	movs	r0, #47	; 0x2f
 8003116:	f7fd ffcd 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800311a:	2000      	movs	r0, #0
 800311c:	f7fd ffca 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 8003120:	202c      	movs	r0, #44	; 0x2c
 8003122:	f7fd ffc7 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003126:	2000      	movs	r0, #0
 8003128:	f7fd ffc4 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 800312c:	2029      	movs	r0, #41	; 0x29
 800312e:	f7fd ffc1 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003132:	2000      	movs	r0, #0
 8003134:	f7fd ffbe 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x26);
 8003138:	2026      	movs	r0, #38	; 0x26
 800313a:	f7fd ffbb 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800313e:	2000      	movs	r0, #0
 8003140:	f7fd ffb8 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8003144:	2024      	movs	r0, #36	; 0x24
 8003146:	f7fd ffb5 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800314a:	2000      	movs	r0, #0
 800314c:	f7fd ffb2 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8003150:	2024      	movs	r0, #36	; 0x24
 8003152:	f7fd ffaf 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003156:	2000      	movs	r0, #0
 8003158:	f7fd ffac 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 800315c:	2023      	movs	r0, #35	; 0x23
 800315e:	f7fd ffa9 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003162:	2000      	movs	r0, #0
 8003164:	f7fd ffa6 	bl	80010b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC4);
 8003168:	20c4      	movs	r0, #196	; 0xc4
 800316a:	f7fd ff7f 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATAX(0x62);
 800316e:	2062      	movs	r0, #98	; 0x62
 8003170:	f7fd ffa0 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003174:	2000      	movs	r0, #0
 8003176:	f7fd ff9d 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x05);
 800317a:	2005      	movs	r0, #5
 800317c:	f7fd ff9a 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003180:	2000      	movs	r0, #0
 8003182:	f7fd ff97 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 8003186:	2084      	movs	r0, #132	; 0x84
 8003188:	f7fd ff94 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800318c:	2000      	movs	r0, #0
 800318e:	f7fd ff91 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF0);
 8003192:	20f0      	movs	r0, #240	; 0xf0
 8003194:	f7fd ff8e 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003198:	2000      	movs	r0, #0
 800319a:	f7fd ff8b 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x18);
 800319e:	2018      	movs	r0, #24
 80031a0:	f7fd ff88 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031a4:	2000      	movs	r0, #0
 80031a6:	f7fd ff85 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA4);
 80031aa:	20a4      	movs	r0, #164	; 0xa4
 80031ac:	f7fd ff82 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031b0:	2000      	movs	r0, #0
 80031b2:	f7fd ff7f 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x18);
 80031b6:	2018      	movs	r0, #24
 80031b8:	f7fd ff7c 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031bc:	2000      	movs	r0, #0
 80031be:	f7fd ff79 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 80031c2:	2050      	movs	r0, #80	; 0x50
 80031c4:	f7fd ff76 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031c8:	2000      	movs	r0, #0
 80031ca:	f7fd ff73 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0C);
 80031ce:	200c      	movs	r0, #12
 80031d0:	f7fd ff70 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031d4:	2000      	movs	r0, #0
 80031d6:	f7fd ff6d 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 80031da:	2017      	movs	r0, #23
 80031dc:	f7fd ff6a 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031e0:	2000      	movs	r0, #0
 80031e2:	f7fd ff67 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x95);
 80031e6:	2095      	movs	r0, #149	; 0x95
 80031e8:	f7fd ff64 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031ec:	2000      	movs	r0, #0
 80031ee:	f7fd ff61 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 80031f2:	20f3      	movs	r0, #243	; 0xf3
 80031f4:	f7fd ff5e 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031f8:	2000      	movs	r0, #0
 80031fa:	f7fd ff5b 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE6);
 80031fe:	20e6      	movs	r0, #230	; 0xe6
 8003200:	f7fd ff58 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003204:	2000      	movs	r0, #0
 8003206:	f7fd ff55 	bl	80010b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC5);
 800320a:	20c5      	movs	r0, #197	; 0xc5
 800320c:	f7fd ff2e 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATAX(0x32);
 8003210:	2032      	movs	r0, #50	; 0x32
 8003212:	f7fd ff4f 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003216:	2000      	movs	r0, #0
 8003218:	f7fd ff4c 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 800321c:	2044      	movs	r0, #68	; 0x44
 800321e:	f7fd ff49 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003222:	2000      	movs	r0, #0
 8003224:	f7fd ff46 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x65);
 8003228:	2065      	movs	r0, #101	; 0x65
 800322a:	f7fd ff43 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800322e:	2000      	movs	r0, #0
 8003230:	f7fd ff40 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 8003234:	2076      	movs	r0, #118	; 0x76
 8003236:	f7fd ff3d 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800323a:	2000      	movs	r0, #0
 800323c:	f7fd ff3a 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8003240:	2088      	movs	r0, #136	; 0x88
 8003242:	f7fd ff37 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003246:	2000      	movs	r0, #0
 8003248:	f7fd ff34 	bl	80010b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC6);
 800324c:	20c6      	movs	r0, #198	; 0xc6
 800324e:	f7fd ff0d 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8003252:	2020      	movs	r0, #32
 8003254:	f7fd ff2e 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003258:	2000      	movs	r0, #0
 800325a:	f7fd ff2b 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 800325e:	2017      	movs	r0, #23
 8003260:	f7fd ff28 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003264:	2000      	movs	r0, #0
 8003266:	f7fd ff25 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 800326a:	2001      	movs	r0, #1
 800326c:	f7fd ff22 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003270:	2000      	movs	r0, #0
 8003272:	f7fd ff1f 	bl	80010b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC7);
 8003276:	20c7      	movs	r0, #199	; 0xc7
 8003278:	f7fd fef8 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800327c:	2000      	movs	r0, #0
 800327e:	f7fd ff19 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003282:	2000      	movs	r0, #0
 8003284:	f7fd ff16 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003288:	2000      	movs	r0, #0
 800328a:	f7fd ff13 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800328e:	2000      	movs	r0, #0
 8003290:	f7fd ff10 	bl	80010b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC8);
 8003294:	20c8      	movs	r0, #200	; 0xc8
 8003296:	f7fd fee9 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800329a:	2000      	movs	r0, #0
 800329c:	f7fd ff0a 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032a0:	2000      	movs	r0, #0
 80032a2:	f7fd ff07 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032a6:	2000      	movs	r0, #0
 80032a8:	f7fd ff04 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032ac:	2000      	movs	r0, #0
 80032ae:	f7fd ff01 	bl	80010b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC9);
 80032b2:	20c9      	movs	r0, #201	; 0xc9
 80032b4:	f7fd feda 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80032b8:	2000      	movs	r0, #0
 80032ba:	f7fd fefb 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032be:	2000      	movs	r0, #0
 80032c0:	f7fd fef8 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032c4:	2000      	movs	r0, #0
 80032c6:	f7fd fef5 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032ca:	2000      	movs	r0, #0
 80032cc:	f7fd fef2 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032d0:	2000      	movs	r0, #0
 80032d2:	f7fd feef 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032d6:	2000      	movs	r0, #0
 80032d8:	f7fd feec 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032dc:	2000      	movs	r0, #0
 80032de:	f7fd fee9 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032e2:	2000      	movs	r0, #0
 80032e4:	f7fd fee6 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032e8:	2000      	movs	r0, #0
 80032ea:	f7fd fee3 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032ee:	2000      	movs	r0, #0
 80032f0:	f7fd fee0 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032f4:	2000      	movs	r0, #0
 80032f6:	f7fd fedd 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032fa:	2000      	movs	r0, #0
 80032fc:	f7fd feda 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003300:	2000      	movs	r0, #0
 8003302:	f7fd fed7 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003306:	2000      	movs	r0, #0
 8003308:	f7fd fed4 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800330c:	2000      	movs	r0, #0
 800330e:	f7fd fed1 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003312:	2000      	movs	r0, #0
 8003314:	f7fd fece 	bl	80010b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xE0);
 8003318:	20e0      	movs	r0, #224	; 0xe0
 800331a:	f7fd fea7 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATAX(0x16);
 800331e:	2016      	movs	r0, #22
 8003320:	f7fd fec8 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003324:	2000      	movs	r0, #0
 8003326:	f7fd fec5 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 800332a:	201c      	movs	r0, #28
 800332c:	f7fd fec2 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003330:	2000      	movs	r0, #0
 8003332:	f7fd febf 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 8003336:	2021      	movs	r0, #33	; 0x21
 8003338:	f7fd febc 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800333c:	2000      	movs	r0, #0
 800333e:	f7fd feb9 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8003342:	2036      	movs	r0, #54	; 0x36
 8003344:	f7fd feb6 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003348:	2000      	movs	r0, #0
 800334a:	f7fd feb3 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x46);
 800334e:	2046      	movs	r0, #70	; 0x46
 8003350:	f7fd feb0 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003354:	2000      	movs	r0, #0
 8003356:	f7fd fead 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x52);
 800335a:	2052      	movs	r0, #82	; 0x52
 800335c:	f7fd feaa 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003360:	2000      	movs	r0, #0
 8003362:	f7fd fea7 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 8003366:	2064      	movs	r0, #100	; 0x64
 8003368:	f7fd fea4 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800336c:	2000      	movs	r0, #0
 800336e:	f7fd fea1 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8003372:	207a      	movs	r0, #122	; 0x7a
 8003374:	f7fd fe9e 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003378:	2000      	movs	r0, #0
 800337a:	f7fd fe9b 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 800337e:	208b      	movs	r0, #139	; 0x8b
 8003380:	f7fd fe98 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003384:	2000      	movs	r0, #0
 8003386:	f7fd fe95 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 800338a:	2099      	movs	r0, #153	; 0x99
 800338c:	f7fd fe92 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003390:	2000      	movs	r0, #0
 8003392:	f7fd fe8f 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA8);
 8003396:	20a8      	movs	r0, #168	; 0xa8
 8003398:	f7fd fe8c 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800339c:	2000      	movs	r0, #0
 800339e:	f7fd fe89 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB9);
 80033a2:	20b9      	movs	r0, #185	; 0xb9
 80033a4:	f7fd fe86 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033a8:	2000      	movs	r0, #0
 80033aa:	f7fd fe83 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 80033ae:	20c4      	movs	r0, #196	; 0xc4
 80033b0:	f7fd fe80 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033b4:	2000      	movs	r0, #0
 80033b6:	f7fd fe7d 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCA);
 80033ba:	20ca      	movs	r0, #202	; 0xca
 80033bc:	f7fd fe7a 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033c0:	2000      	movs	r0, #0
 80033c2:	f7fd fe77 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD2);
 80033c6:	20d2      	movs	r0, #210	; 0xd2
 80033c8:	f7fd fe74 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033cc:	2000      	movs	r0, #0
 80033ce:	f7fd fe71 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD9);
 80033d2:	20d9      	movs	r0, #217	; 0xd9
 80033d4:	f7fd fe6e 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033d8:	2000      	movs	r0, #0
 80033da:	f7fd fe6b 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE0);
 80033de:	20e0      	movs	r0, #224	; 0xe0
 80033e0:	f7fd fe68 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033e4:	2000      	movs	r0, #0
 80033e6:	f7fd fe65 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 80033ea:	20f3      	movs	r0, #243	; 0xf3
 80033ec:	f7fd fe62 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033f0:	2000      	movs	r0, #0
 80033f2:	f7fd fe5f 	bl	80010b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xE1);
 80033f6:	20e1      	movs	r0, #225	; 0xe1
 80033f8:	f7fd fe38 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATAX(0x16);
 80033fc:	2016      	movs	r0, #22
 80033fe:	f7fd fe59 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003402:	2000      	movs	r0, #0
 8003404:	f7fd fe56 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8003408:	201c      	movs	r0, #28
 800340a:	f7fd fe53 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800340e:	2000      	movs	r0, #0
 8003410:	f7fd fe50 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x22);
 8003414:	2022      	movs	r0, #34	; 0x22
 8003416:	f7fd fe4d 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800341a:	2000      	movs	r0, #0
 800341c:	f7fd fe4a 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8003420:	2036      	movs	r0, #54	; 0x36
 8003422:	f7fd fe47 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003426:	2000      	movs	r0, #0
 8003428:	f7fd fe44 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 800342c:	2045      	movs	r0, #69	; 0x45
 800342e:	f7fd fe41 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003432:	2000      	movs	r0, #0
 8003434:	f7fd fe3e 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x52);
 8003438:	2052      	movs	r0, #82	; 0x52
 800343a:	f7fd fe3b 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800343e:	2000      	movs	r0, #0
 8003440:	f7fd fe38 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 8003444:	2064      	movs	r0, #100	; 0x64
 8003446:	f7fd fe35 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800344a:	2000      	movs	r0, #0
 800344c:	f7fd fe32 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8003450:	207a      	movs	r0, #122	; 0x7a
 8003452:	f7fd fe2f 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003456:	2000      	movs	r0, #0
 8003458:	f7fd fe2c 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 800345c:	208b      	movs	r0, #139	; 0x8b
 800345e:	f7fd fe29 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003462:	2000      	movs	r0, #0
 8003464:	f7fd fe26 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8003468:	2099      	movs	r0, #153	; 0x99
 800346a:	f7fd fe23 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800346e:	2000      	movs	r0, #0
 8003470:	f7fd fe20 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA8);
 8003474:	20a8      	movs	r0, #168	; 0xa8
 8003476:	f7fd fe1d 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800347a:	2000      	movs	r0, #0
 800347c:	f7fd fe1a 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB9);
 8003480:	20b9      	movs	r0, #185	; 0xb9
 8003482:	f7fd fe17 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003486:	2000      	movs	r0, #0
 8003488:	f7fd fe14 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 800348c:	20c4      	movs	r0, #196	; 0xc4
 800348e:	f7fd fe11 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003492:	2000      	movs	r0, #0
 8003494:	f7fd fe0e 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCA);
 8003498:	20ca      	movs	r0, #202	; 0xca
 800349a:	f7fd fe0b 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800349e:	2000      	movs	r0, #0
 80034a0:	f7fd fe08 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD2);
 80034a4:	20d2      	movs	r0, #210	; 0xd2
 80034a6:	f7fd fe05 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034aa:	2000      	movs	r0, #0
 80034ac:	f7fd fe02 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD8);
 80034b0:	20d8      	movs	r0, #216	; 0xd8
 80034b2:	f7fd fdff 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034b6:	2000      	movs	r0, #0
 80034b8:	f7fd fdfc 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE0);
 80034bc:	20e0      	movs	r0, #224	; 0xe0
 80034be:	f7fd fdf9 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034c2:	2000      	movs	r0, #0
 80034c4:	f7fd fdf6 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 80034c8:	20f3      	movs	r0, #243	; 0xf3
 80034ca:	f7fd fdf3 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034ce:	2000      	movs	r0, #0
 80034d0:	f7fd fdf0 	bl	80010b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xE2);
 80034d4:	20e2      	movs	r0, #226	; 0xe2
 80034d6:	f7fd fdc9 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATAX(0x05);
 80034da:	2005      	movs	r0, #5
 80034dc:	f7fd fdea 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034e0:	2000      	movs	r0, #0
 80034e2:	f7fd fde7 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0B);
 80034e6:	200b      	movs	r0, #11
 80034e8:	f7fd fde4 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034ec:	2000      	movs	r0, #0
 80034ee:	f7fd fde1 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1B);
 80034f2:	201b      	movs	r0, #27
 80034f4:	f7fd fdde 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034f8:	2000      	movs	r0, #0
 80034fa:	f7fd fddb 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 80034fe:	2034      	movs	r0, #52	; 0x34
 8003500:	f7fd fdd8 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003504:	2000      	movs	r0, #0
 8003506:	f7fd fdd5 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 800350a:	2044      	movs	r0, #68	; 0x44
 800350c:	f7fd fdd2 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003510:	2000      	movs	r0, #0
 8003512:	f7fd fdcf 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4F);
 8003516:	204f      	movs	r0, #79	; 0x4f
 8003518:	f7fd fdcc 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800351c:	2000      	movs	r0, #0
 800351e:	f7fd fdc9 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x61);
 8003522:	2061      	movs	r0, #97	; 0x61
 8003524:	f7fd fdc6 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003528:	2000      	movs	r0, #0
 800352a:	f7fd fdc3 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x79);
 800352e:	2079      	movs	r0, #121	; 0x79
 8003530:	f7fd fdc0 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003534:	2000      	movs	r0, #0
 8003536:	f7fd fdbd 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 800353a:	2088      	movs	r0, #136	; 0x88
 800353c:	f7fd fdba 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003540:	2000      	movs	r0, #0
 8003542:	f7fd fdb7 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x97);
 8003546:	2097      	movs	r0, #151	; 0x97
 8003548:	f7fd fdb4 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800354c:	2000      	movs	r0, #0
 800354e:	f7fd fdb1 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA6);
 8003552:	20a6      	movs	r0, #166	; 0xa6
 8003554:	f7fd fdae 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003558:	2000      	movs	r0, #0
 800355a:	f7fd fdab 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB7);
 800355e:	20b7      	movs	r0, #183	; 0xb7
 8003560:	f7fd fda8 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003564:	2000      	movs	r0, #0
 8003566:	f7fd fda5 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC2);
 800356a:	20c2      	movs	r0, #194	; 0xc2
 800356c:	f7fd fda2 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003570:	2000      	movs	r0, #0
 8003572:	f7fd fd9f 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC7);
 8003576:	20c7      	movs	r0, #199	; 0xc7
 8003578:	f7fd fd9c 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800357c:	2000      	movs	r0, #0
 800357e:	f7fd fd99 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD1);
 8003582:	20d1      	movs	r0, #209	; 0xd1
 8003584:	f7fd fd96 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003588:	2000      	movs	r0, #0
 800358a:	f7fd fd93 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD6);
 800358e:	20d6      	movs	r0, #214	; 0xd6
 8003590:	f7fd fd90 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003594:	2000      	movs	r0, #0
 8003596:	f7fd fd8d 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 800359a:	20dd      	movs	r0, #221	; 0xdd
 800359c:	f7fd fd8a 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035a0:	2000      	movs	r0, #0
 80035a2:	f7fd fd87 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 80035a6:	20f3      	movs	r0, #243	; 0xf3
 80035a8:	f7fd fd84 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035ac:	2000      	movs	r0, #0
 80035ae:	f7fd fd81 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_REG(0xE3);
 80035b2:	20e3      	movs	r0, #227	; 0xe3
 80035b4:	f7fd fd5a 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATAX(0x05);
 80035b8:	2005      	movs	r0, #5
 80035ba:	f7fd fd7b 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035be:	2000      	movs	r0, #0
 80035c0:	f7fd fd78 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA);
 80035c4:	200a      	movs	r0, #10
 80035c6:	f7fd fd75 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035ca:	2000      	movs	r0, #0
 80035cc:	f7fd fd72 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 80035d0:	201c      	movs	r0, #28
 80035d2:	f7fd fd6f 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035d6:	2000      	movs	r0, #0
 80035d8:	f7fd fd6c 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x33);
 80035dc:	2033      	movs	r0, #51	; 0x33
 80035de:	f7fd fd69 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035e2:	2000      	movs	r0, #0
 80035e4:	f7fd fd66 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 80035e8:	2044      	movs	r0, #68	; 0x44
 80035ea:	f7fd fd63 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035ee:	2000      	movs	r0, #0
 80035f0:	f7fd fd60 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 80035f4:	2050      	movs	r0, #80	; 0x50
 80035f6:	f7fd fd5d 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035fa:	2000      	movs	r0, #0
 80035fc:	f7fd fd5a 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x62);
 8003600:	2062      	movs	r0, #98	; 0x62
 8003602:	f7fd fd57 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003606:	2000      	movs	r0, #0
 8003608:	f7fd fd54 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x78);
 800360c:	2078      	movs	r0, #120	; 0x78
 800360e:	f7fd fd51 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003612:	2000      	movs	r0, #0
 8003614:	f7fd fd4e 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8003618:	2088      	movs	r0, #136	; 0x88
 800361a:	f7fd fd4b 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800361e:	2000      	movs	r0, #0
 8003620:	f7fd fd48 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x97);
 8003624:	2097      	movs	r0, #151	; 0x97
 8003626:	f7fd fd45 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800362a:	2000      	movs	r0, #0
 800362c:	f7fd fd42 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA6);
 8003630:	20a6      	movs	r0, #166	; 0xa6
 8003632:	f7fd fd3f 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003636:	2000      	movs	r0, #0
 8003638:	f7fd fd3c 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB7);
 800363c:	20b7      	movs	r0, #183	; 0xb7
 800363e:	f7fd fd39 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003642:	2000      	movs	r0, #0
 8003644:	f7fd fd36 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC2);
 8003648:	20c2      	movs	r0, #194	; 0xc2
 800364a:	f7fd fd33 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800364e:	2000      	movs	r0, #0
 8003650:	f7fd fd30 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC7);
 8003654:	20c7      	movs	r0, #199	; 0xc7
 8003656:	f7fd fd2d 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800365a:	2000      	movs	r0, #0
 800365c:	f7fd fd2a 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD1);
 8003660:	20d1      	movs	r0, #209	; 0xd1
 8003662:	f7fd fd27 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003666:	2000      	movs	r0, #0
 8003668:	f7fd fd24 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD5);
 800366c:	20d5      	movs	r0, #213	; 0xd5
 800366e:	f7fd fd21 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003672:	2000      	movs	r0, #0
 8003674:	f7fd fd1e 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 8003678:	20dd      	movs	r0, #221	; 0xdd
 800367a:	f7fd fd1b 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800367e:	2000      	movs	r0, #0
 8003680:	f7fd fd18 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8003684:	20f3      	movs	r0, #243	; 0xf3
 8003686:	f7fd fd15 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800368a:	2000      	movs	r0, #0
 800368c:	f7fd fd12 	bl	80010b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xE4);
 8003690:	20e4      	movs	r0, #228	; 0xe4
 8003692:	f7fd fceb 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 8003696:	2001      	movs	r0, #1
 8003698:	f7fd fd0c 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800369c:	2000      	movs	r0, #0
 800369e:	f7fd fd09 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 80036a2:	2001      	movs	r0, #1
 80036a4:	f7fd fd06 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80036a8:	2000      	movs	r0, #0
 80036aa:	f7fd fd03 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 80036ae:	2002      	movs	r0, #2
 80036b0:	f7fd fd00 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80036b4:	2000      	movs	r0, #0
 80036b6:	f7fd fcfd 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2A);
 80036ba:	202a      	movs	r0, #42	; 0x2a
 80036bc:	f7fd fcfa 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80036c0:	2000      	movs	r0, #0
 80036c2:	f7fd fcf7 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 80036c6:	203c      	movs	r0, #60	; 0x3c
 80036c8:	f7fd fcf4 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80036cc:	2000      	movs	r0, #0
 80036ce:	f7fd fcf1 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4B);
 80036d2:	204b      	movs	r0, #75	; 0x4b
 80036d4:	f7fd fcee 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80036d8:	2000      	movs	r0, #0
 80036da:	f7fd fceb 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 80036de:	205d      	movs	r0, #93	; 0x5d
 80036e0:	f7fd fce8 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80036e4:	2000      	movs	r0, #0
 80036e6:	f7fd fce5 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x74);
 80036ea:	2074      	movs	r0, #116	; 0x74
 80036ec:	f7fd fce2 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80036f0:	2000      	movs	r0, #0
 80036f2:	f7fd fcdf 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 80036f6:	2084      	movs	r0, #132	; 0x84
 80036f8:	f7fd fcdc 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80036fc:	2000      	movs	r0, #0
 80036fe:	f7fd fcd9 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x93);
 8003702:	2093      	movs	r0, #147	; 0x93
 8003704:	f7fd fcd6 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003708:	2000      	movs	r0, #0
 800370a:	f7fd fcd3 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 800370e:	20a2      	movs	r0, #162	; 0xa2
 8003710:	f7fd fcd0 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003714:	2000      	movs	r0, #0
 8003716:	f7fd fccd 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB3);
 800371a:	20b3      	movs	r0, #179	; 0xb3
 800371c:	f7fd fcca 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003720:	2000      	movs	r0, #0
 8003722:	f7fd fcc7 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBE);
 8003726:	20be      	movs	r0, #190	; 0xbe
 8003728:	f7fd fcc4 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800372c:	2000      	movs	r0, #0
 800372e:	f7fd fcc1 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8003732:	20c4      	movs	r0, #196	; 0xc4
 8003734:	f7fd fcbe 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003738:	2000      	movs	r0, #0
 800373a:	f7fd fcbb 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCD);
 800373e:	20cd      	movs	r0, #205	; 0xcd
 8003740:	f7fd fcb8 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003744:	2000      	movs	r0, #0
 8003746:	f7fd fcb5 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD3);
 800374a:	20d3      	movs	r0, #211	; 0xd3
 800374c:	f7fd fcb2 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003750:	2000      	movs	r0, #0
 8003752:	f7fd fcaf 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 8003756:	20dd      	movs	r0, #221	; 0xdd
 8003758:	f7fd fcac 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800375c:	2000      	movs	r0, #0
 800375e:	f7fd fca9 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8003762:	20f3      	movs	r0, #243	; 0xf3
 8003764:	f7fd fca6 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003768:	2000      	movs	r0, #0
 800376a:	f7fd fca3 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_REG(0xE5);
 800376e:	20e5      	movs	r0, #229	; 0xe5
 8003770:	f7fd fc7c 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003774:	2000      	movs	r0, #0
 8003776:	f7fd fc9d 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800377a:	2000      	movs	r0, #0
 800377c:	f7fd fc9a 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003780:	2000      	movs	r0, #0
 8003782:	f7fd fc97 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003786:	2000      	movs	r0, #0
 8003788:	f7fd fc94 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 800378c:	2002      	movs	r0, #2
 800378e:	f7fd fc91 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003792:	2000      	movs	r0, #0
 8003794:	f7fd fc8e 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8003798:	2029      	movs	r0, #41	; 0x29
 800379a:	f7fd fc8b 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800379e:	2000      	movs	r0, #0
 80037a0:	f7fd fc88 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 80037a4:	203c      	movs	r0, #60	; 0x3c
 80037a6:	f7fd fc85 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80037aa:	2000      	movs	r0, #0
 80037ac:	f7fd fc82 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4B);
 80037b0:	204b      	movs	r0, #75	; 0x4b
 80037b2:	f7fd fc7f 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80037b6:	2000      	movs	r0, #0
 80037b8:	f7fd fc7c 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 80037bc:	205d      	movs	r0, #93	; 0x5d
 80037be:	f7fd fc79 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80037c2:	2000      	movs	r0, #0
 80037c4:	f7fd fc76 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x74);
 80037c8:	2074      	movs	r0, #116	; 0x74
 80037ca:	f7fd fc73 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80037ce:	2000      	movs	r0, #0
 80037d0:	f7fd fc70 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 80037d4:	2084      	movs	r0, #132	; 0x84
 80037d6:	f7fd fc6d 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80037da:	2000      	movs	r0, #0
 80037dc:	f7fd fc6a 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x93);
 80037e0:	2093      	movs	r0, #147	; 0x93
 80037e2:	f7fd fc67 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80037e6:	2000      	movs	r0, #0
 80037e8:	f7fd fc64 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 80037ec:	20a2      	movs	r0, #162	; 0xa2
 80037ee:	f7fd fc61 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80037f2:	2000      	movs	r0, #0
 80037f4:	f7fd fc5e 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB3);
 80037f8:	20b3      	movs	r0, #179	; 0xb3
 80037fa:	f7fd fc5b 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80037fe:	2000      	movs	r0, #0
 8003800:	f7fd fc58 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBE);
 8003804:	20be      	movs	r0, #190	; 0xbe
 8003806:	f7fd fc55 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800380a:	2000      	movs	r0, #0
 800380c:	f7fd fc52 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8003810:	20c4      	movs	r0, #196	; 0xc4
 8003812:	f7fd fc4f 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003816:	2000      	movs	r0, #0
 8003818:	f7fd fc4c 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCD);
 800381c:	20cd      	movs	r0, #205	; 0xcd
 800381e:	f7fd fc49 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003822:	2000      	movs	r0, #0
 8003824:	f7fd fc46 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD3);
 8003828:	20d3      	movs	r0, #211	; 0xd3
 800382a:	f7fd fc43 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800382e:	2000      	movs	r0, #0
 8003830:	f7fd fc40 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 8003834:	20dc      	movs	r0, #220	; 0xdc
 8003836:	f7fd fc3d 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800383a:	2000      	movs	r0, #0
 800383c:	f7fd fc3a 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8003840:	20f3      	movs	r0, #243	; 0xf3
 8003842:	f7fd fc37 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003846:	2000      	movs	r0, #0
 8003848:	f7fd fc34 	bl	80010b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xE6);
 800384c:	20e6      	movs	r0, #230	; 0xe6
 800384e:	f7fd fc0d 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATAX(0x11);
 8003852:	2011      	movs	r0, #17
 8003854:	f7fd fc2e 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003858:	2000      	movs	r0, #0
 800385a:	f7fd fc2b 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 800385e:	2034      	movs	r0, #52	; 0x34
 8003860:	f7fd fc28 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003864:	2000      	movs	r0, #0
 8003866:	f7fd fc25 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 800386a:	2056      	movs	r0, #86	; 0x56
 800386c:	f7fd fc22 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003870:	2000      	movs	r0, #0
 8003872:	f7fd fc1f 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 8003876:	2076      	movs	r0, #118	; 0x76
 8003878:	f7fd fc1c 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800387c:	2000      	movs	r0, #0
 800387e:	f7fd fc19 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 8003882:	2077      	movs	r0, #119	; 0x77
 8003884:	f7fd fc16 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003888:	2000      	movs	r0, #0
 800388a:	f7fd fc13 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 800388e:	2066      	movs	r0, #102	; 0x66
 8003890:	f7fd fc10 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003894:	2000      	movs	r0, #0
 8003896:	f7fd fc0d 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 800389a:	2088      	movs	r0, #136	; 0x88
 800389c:	f7fd fc0a 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80038a0:	2000      	movs	r0, #0
 80038a2:	f7fd fc07 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 80038a6:	2099      	movs	r0, #153	; 0x99
 80038a8:	f7fd fc04 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80038ac:	2000      	movs	r0, #0
 80038ae:	f7fd fc01 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 80038b2:	20bb      	movs	r0, #187	; 0xbb
 80038b4:	f7fd fbfe 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80038b8:	2000      	movs	r0, #0
 80038ba:	f7fd fbfb 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 80038be:	2099      	movs	r0, #153	; 0x99
 80038c0:	f7fd fbf8 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80038c4:	2000      	movs	r0, #0
 80038c6:	f7fd fbf5 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 80038ca:	2066      	movs	r0, #102	; 0x66
 80038cc:	f7fd fbf2 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80038d0:	2000      	movs	r0, #0
 80038d2:	f7fd fbef 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 80038d6:	2055      	movs	r0, #85	; 0x55
 80038d8:	f7fd fbec 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80038dc:	2000      	movs	r0, #0
 80038de:	f7fd fbe9 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 80038e2:	2055      	movs	r0, #85	; 0x55
 80038e4:	f7fd fbe6 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80038e8:	2000      	movs	r0, #0
 80038ea:	f7fd fbe3 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 80038ee:	2045      	movs	r0, #69	; 0x45
 80038f0:	f7fd fbe0 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80038f4:	2000      	movs	r0, #0
 80038f6:	f7fd fbdd 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x43);
 80038fa:	2043      	movs	r0, #67	; 0x43
 80038fc:	f7fd fbda 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003900:	2000      	movs	r0, #0
 8003902:	f7fd fbd7 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8003906:	2044      	movs	r0, #68	; 0x44
 8003908:	f7fd fbd4 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800390c:	2000      	movs	r0, #0
 800390e:	f7fd fbd1 	bl	80010b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xE7);
 8003912:	20e7      	movs	r0, #231	; 0xe7
 8003914:	f7fd fbaa 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATAX(0x32);
 8003918:	2032      	movs	r0, #50	; 0x32
 800391a:	f7fd fbcb 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800391e:	2000      	movs	r0, #0
 8003920:	f7fd fbc8 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8003924:	2055      	movs	r0, #85	; 0x55
 8003926:	f7fd fbc5 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800392a:	2000      	movs	r0, #0
 800392c:	f7fd fbc2 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 8003930:	2076      	movs	r0, #118	; 0x76
 8003932:	f7fd fbbf 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003936:	2000      	movs	r0, #0
 8003938:	f7fd fbbc 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 800393c:	2066      	movs	r0, #102	; 0x66
 800393e:	f7fd fbb9 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003942:	2000      	movs	r0, #0
 8003944:	f7fd fbb6 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x67);
 8003948:	2067      	movs	r0, #103	; 0x67
 800394a:	f7fd fbb3 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800394e:	2000      	movs	r0, #0
 8003950:	f7fd fbb0 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x67);
 8003954:	2067      	movs	r0, #103	; 0x67
 8003956:	f7fd fbad 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800395a:	2000      	movs	r0, #0
 800395c:	f7fd fbaa 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x87);
 8003960:	2087      	movs	r0, #135	; 0x87
 8003962:	f7fd fba7 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003966:	2000      	movs	r0, #0
 8003968:	f7fd fba4 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 800396c:	2099      	movs	r0, #153	; 0x99
 800396e:	f7fd fba1 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003972:	2000      	movs	r0, #0
 8003974:	f7fd fb9e 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 8003978:	20bb      	movs	r0, #187	; 0xbb
 800397a:	f7fd fb9b 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800397e:	2000      	movs	r0, #0
 8003980:	f7fd fb98 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8003984:	2099      	movs	r0, #153	; 0x99
 8003986:	f7fd fb95 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800398a:	2000      	movs	r0, #0
 800398c:	f7fd fb92 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 8003990:	2077      	movs	r0, #119	; 0x77
 8003992:	f7fd fb8f 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003996:	2000      	movs	r0, #0
 8003998:	f7fd fb8c 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 800399c:	2044      	movs	r0, #68	; 0x44
 800399e:	f7fd fb89 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80039a2:	2000      	movs	r0, #0
 80039a4:	f7fd fb86 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 80039a8:	2056      	movs	r0, #86	; 0x56
 80039aa:	f7fd fb83 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80039ae:	2000      	movs	r0, #0
 80039b0:	f7fd fb80 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23); 
 80039b4:	2023      	movs	r0, #35	; 0x23
 80039b6:	f7fd fb7d 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80039ba:	2000      	movs	r0, #0
 80039bc:	f7fd fb7a 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x33);
 80039c0:	2033      	movs	r0, #51	; 0x33
 80039c2:	f7fd fb77 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80039c6:	2000      	movs	r0, #0
 80039c8:	f7fd fb74 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 80039cc:	2045      	movs	r0, #69	; 0x45
 80039ce:	f7fd fb71 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80039d2:	2000      	movs	r0, #0
 80039d4:	f7fd fb6e 	bl	80010b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xE8);
 80039d8:	20e8      	movs	r0, #232	; 0xe8
 80039da:	f7fd fb47 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80039de:	2000      	movs	r0, #0
 80039e0:	f7fd fb68 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80039e4:	2000      	movs	r0, #0
 80039e6:	f7fd fb65 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 80039ea:	2099      	movs	r0, #153	; 0x99
 80039ec:	f7fd fb62 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80039f0:	2000      	movs	r0, #0
 80039f2:	f7fd fb5f 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x87);
 80039f6:	2087      	movs	r0, #135	; 0x87
 80039f8:	f7fd fb5c 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80039fc:	2000      	movs	r0, #0
 80039fe:	f7fd fb59 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8003a02:	2088      	movs	r0, #136	; 0x88
 8003a04:	f7fd fb56 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003a08:	2000      	movs	r0, #0
 8003a0a:	f7fd fb53 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 8003a0e:	2077      	movs	r0, #119	; 0x77
 8003a10:	f7fd fb50 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003a14:	2000      	movs	r0, #0
 8003a16:	f7fd fb4d 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8003a1a:	2066      	movs	r0, #102	; 0x66
 8003a1c:	f7fd fb4a 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003a20:	2000      	movs	r0, #0
 8003a22:	f7fd fb47 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8003a26:	2088      	movs	r0, #136	; 0x88
 8003a28:	f7fd fb44 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003a2c:	2000      	movs	r0, #0
 8003a2e:	f7fd fb41 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xAA);
 8003a32:	20aa      	movs	r0, #170	; 0xaa
 8003a34:	f7fd fb3e 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003a38:	2000      	movs	r0, #0
 8003a3a:	f7fd fb3b 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 8003a3e:	20bb      	movs	r0, #187	; 0xbb
 8003a40:	f7fd fb38 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003a44:	2000      	movs	r0, #0
 8003a46:	f7fd fb35 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8003a4a:	2099      	movs	r0, #153	; 0x99
 8003a4c:	f7fd fb32 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003a50:	2000      	movs	r0, #0
 8003a52:	f7fd fb2f 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8003a56:	2066      	movs	r0, #102	; 0x66
 8003a58:	f7fd fb2c 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003a5c:	2000      	movs	r0, #0
 8003a5e:	f7fd fb29 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8003a62:	2055      	movs	r0, #85	; 0x55
 8003a64:	f7fd fb26 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003a68:	2000      	movs	r0, #0
 8003a6a:	f7fd fb23 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8003a6e:	2055      	movs	r0, #85	; 0x55
 8003a70:	f7fd fb20 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003a74:	2000      	movs	r0, #0
 8003a76:	f7fd fb1d 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8003a7a:	2044      	movs	r0, #68	; 0x44
 8003a7c:	f7fd fb1a 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003a80:	2000      	movs	r0, #0
 8003a82:	f7fd fb17 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8003a86:	2044      	movs	r0, #68	; 0x44
 8003a88:	f7fd fb14 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003a8c:	2000      	movs	r0, #0
 8003a8e:	f7fd fb11 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8003a92:	2055      	movs	r0, #85	; 0x55
 8003a94:	f7fd fb0e 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003a98:	2000      	movs	r0, #0
 8003a9a:	f7fd fb0b 	bl	80010b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xE9);
 8003a9e:	20e9      	movs	r0, #233	; 0xe9
 8003aa0:	f7fd fae4 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 8003aa4:	20aa      	movs	r0, #170	; 0xaa
 8003aa6:	f7fd fb05 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003aaa:	2000      	movs	r0, #0
 8003aac:	f7fd fb02 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003ab0:	2000      	movs	r0, #0
 8003ab2:	f7fd faff 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003ab6:	2000      	movs	r0, #0
 8003ab8:	f7fd fafc 	bl	80010b4 <LCD_WR_DATAX>

		LCD_WR_REG(0x00);
 8003abc:	2000      	movs	r0, #0
 8003abe:	f7fd fad5 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 8003ac2:	20aa      	movs	r0, #170	; 0xaa
 8003ac4:	f7fd faf6 	bl	80010b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xCF);
 8003ac8:	20cf      	movs	r0, #207	; 0xcf
 8003aca:	f7fd facf 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003ace:	2000      	movs	r0, #0
 8003ad0:	f7fd faf0 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003ad4:	2000      	movs	r0, #0
 8003ad6:	f7fd faed 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003ada:	2000      	movs	r0, #0
 8003adc:	f7fd faea 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003ae0:	2000      	movs	r0, #0
 8003ae2:	f7fd fae7 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003ae6:	2000      	movs	r0, #0
 8003ae8:	f7fd fae4 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003aec:	2000      	movs	r0, #0
 8003aee:	f7fd fae1 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003af2:	2000      	movs	r0, #0
 8003af4:	f7fd fade 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003af8:	2000      	movs	r0, #0
 8003afa:	f7fd fadb 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003afe:	2000      	movs	r0, #0
 8003b00:	f7fd fad8 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003b04:	2000      	movs	r0, #0
 8003b06:	f7fd fad5 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003b0a:	2000      	movs	r0, #0
 8003b0c:	f7fd fad2 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003b10:	2000      	movs	r0, #0
 8003b12:	f7fd facf 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003b16:	2000      	movs	r0, #0
 8003b18:	f7fd facc 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003b1c:	2000      	movs	r0, #0
 8003b1e:	f7fd fac9 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003b22:	2000      	movs	r0, #0
 8003b24:	f7fd fac6 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003b28:	2000      	movs	r0, #0
 8003b2a:	f7fd fac3 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003b2e:	2000      	movs	r0, #0
 8003b30:	f7fd fac0 	bl	80010b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xF0);
 8003b34:	20f0      	movs	r0, #240	; 0xf0
 8003b36:	f7fd fa99 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003b3a:	2000      	movs	r0, #0
 8003b3c:	f7fd faba 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 8003b40:	2050      	movs	r0, #80	; 0x50
 8003b42:	f7fd fab7 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003b46:	2000      	movs	r0, #0
 8003b48:	f7fd fab4 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003b4c:	2000      	movs	r0, #0
 8003b4e:	f7fd fab1 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003b52:	2000      	movs	r0, #0
 8003b54:	f7fd faae 	bl	80010b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xF3);
 8003b58:	20f3      	movs	r0, #243	; 0xf3
 8003b5a:	f7fd fa87 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003b5e:	2000      	movs	r0, #0
 8003b60:	f7fd faa8 	bl	80010b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xF9);
 8003b64:	20f9      	movs	r0, #249	; 0xf9
 8003b66:	f7fd fa81 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATAX(0x06);
 8003b6a:	2006      	movs	r0, #6
 8003b6c:	f7fd faa2 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 8003b70:	2010      	movs	r0, #16
 8003b72:	f7fd fa9f 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8003b76:	2029      	movs	r0, #41	; 0x29
 8003b78:	f7fd fa9c 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003b7c:	2000      	movs	r0, #0
 8003b7e:	f7fd fa99 	bl	80010b4 <LCD_WR_DATAX>

		LCD_WR_REG(0x3A);
 8003b82:	203a      	movs	r0, #58	; 0x3a
 8003b84:	f7fd fa72 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATAX(0x55);	//66
 8003b88:	2055      	movs	r0, #85	; 0x55
 8003b8a:	f7fd fa93 	bl	80010b4 <LCD_WR_DATAX>

		LCD_WR_REG(0x11);
 8003b8e:	2011      	movs	r0, #17
 8003b90:	f7fd fa6c 	bl	800106c <LCD_WR_REG>
		delay_ms(100);
 8003b94:	2064      	movs	r0, #100	; 0x64
 8003b96:	f7fd f99b 	bl	8000ed0 <delay_ms>
		LCD_WR_REG(0x29);
 8003b9a:	2029      	movs	r0, #41	; 0x29
 8003b9c:	f7fd fa66 	bl	800106c <LCD_WR_REG>
		LCD_WR_REG(0x35);
 8003ba0:	2035      	movs	r0, #53	; 0x35
 8003ba2:	f7fd fa63 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003ba6:	2000      	movs	r0, #0
 8003ba8:	f7fd fa84 	bl	80010b4 <LCD_WR_DATAX>

		LCD_WR_REG(0x51);
 8003bac:	2051      	movs	r0, #81	; 0x51
 8003bae:	f7fd fa5d 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATAX(0xFF);
 8003bb2:	20ff      	movs	r0, #255	; 0xff
 8003bb4:	f7fd fa7e 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_REG(0x53);
 8003bb8:	2053      	movs	r0, #83	; 0x53
 8003bba:	f7fd fa57 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATAX(0x2C);
 8003bbe:	202c      	movs	r0, #44	; 0x2c
 8003bc0:	f7fd fa78 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_REG(0x55);
 8003bc4:	2055      	movs	r0, #85	; 0x55
 8003bc6:	f7fd fa51 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATAX(0x82);
 8003bca:	2082      	movs	r0, #130	; 0x82
 8003bcc:	f7fd fa72 	bl	80010b4 <LCD_WR_DATAX>
		LCD_WR_REG(0x2c); 
 8003bd0:	202c      	movs	r0, #44	; 0x2c
 8003bd2:	f7fd fa4b 	bl	800106c <LCD_WR_REG>
 8003bd6:	f002 bca1 	b.w	800651c <LCD_Init+0x3e64>
	}else if(lcddev.id==0x5510)
 8003bda:	4b04      	ldr	r3, [pc, #16]	; (8003bec <LCD_Init+0x1534>)
 8003bdc:	889b      	ldrh	r3, [r3, #4]
 8003bde:	f245 5210 	movw	r2, #21776	; 0x5510
 8003be2:	4293      	cmp	r3, r2
 8003be4:	f040 8782 	bne.w	8004aec <LCD_Init+0x2434>
 8003be8:	e002      	b.n	8003bf0 <LCD_Init+0x1538>
 8003bea:	bf00      	nop
 8003bec:	200024f8 	.word	0x200024f8
	{
		LCD_WriteReg(0xF000,0x55);
 8003bf0:	2155      	movs	r1, #85	; 0x55
 8003bf2:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8003bf6:	f7fd fac5 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xF001,0xAA);
 8003bfa:	21aa      	movs	r1, #170	; 0xaa
 8003bfc:	f24f 0001 	movw	r0, #61441	; 0xf001
 8003c00:	f7fd fac0 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xF002,0x52);
 8003c04:	2152      	movs	r1, #82	; 0x52
 8003c06:	f24f 0002 	movw	r0, #61442	; 0xf002
 8003c0a:	f7fd fabb 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xF003,0x08);
 8003c0e:	2108      	movs	r1, #8
 8003c10:	f24f 0003 	movw	r0, #61443	; 0xf003
 8003c14:	f7fd fab6 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xF004,0x01);
 8003c18:	2101      	movs	r1, #1
 8003c1a:	f24f 0004 	movw	r0, #61444	; 0xf004
 8003c1e:	f7fd fab1 	bl	8001184 <LCD_WriteReg>
		//AVDD Set AVDD 5.2V
		LCD_WriteReg(0xB000,0x0D);
 8003c22:	210d      	movs	r1, #13
 8003c24:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 8003c28:	f7fd faac 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xB001,0x0D);
 8003c2c:	210d      	movs	r1, #13
 8003c2e:	f24b 0001 	movw	r0, #45057	; 0xb001
 8003c32:	f7fd faa7 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xB002,0x0D);
 8003c36:	210d      	movs	r1, #13
 8003c38:	f24b 0002 	movw	r0, #45058	; 0xb002
 8003c3c:	f7fd faa2 	bl	8001184 <LCD_WriteReg>
		//AVDD ratio
		LCD_WriteReg(0xB600,0x34);
 8003c40:	2134      	movs	r1, #52	; 0x34
 8003c42:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 8003c46:	f7fd fa9d 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xB601,0x34);
 8003c4a:	2134      	movs	r1, #52	; 0x34
 8003c4c:	f24b 6001 	movw	r0, #46593	; 0xb601
 8003c50:	f7fd fa98 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xB602,0x34);
 8003c54:	2134      	movs	r1, #52	; 0x34
 8003c56:	f24b 6002 	movw	r0, #46594	; 0xb602
 8003c5a:	f7fd fa93 	bl	8001184 <LCD_WriteReg>
		//AVEE -5.2V
		LCD_WriteReg(0xB100,0x0D);
 8003c5e:	210d      	movs	r1, #13
 8003c60:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8003c64:	f7fd fa8e 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xB101,0x0D);
 8003c68:	210d      	movs	r1, #13
 8003c6a:	f24b 1001 	movw	r0, #45313	; 0xb101
 8003c6e:	f7fd fa89 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xB102,0x0D);
 8003c72:	210d      	movs	r1, #13
 8003c74:	f24b 1002 	movw	r0, #45314	; 0xb102
 8003c78:	f7fd fa84 	bl	8001184 <LCD_WriteReg>
		//AVEE ratio
		LCD_WriteReg(0xB700,0x34);
 8003c7c:	2134      	movs	r1, #52	; 0x34
 8003c7e:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8003c82:	f7fd fa7f 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xB701,0x34);
 8003c86:	2134      	movs	r1, #52	; 0x34
 8003c88:	f24b 7001 	movw	r0, #46849	; 0xb701
 8003c8c:	f7fd fa7a 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xB702,0x34);
 8003c90:	2134      	movs	r1, #52	; 0x34
 8003c92:	f24b 7002 	movw	r0, #46850	; 0xb702
 8003c96:	f7fd fa75 	bl	8001184 <LCD_WriteReg>
		//VCL -2.5V
		LCD_WriteReg(0xB200,0x00);
 8003c9a:	2100      	movs	r1, #0
 8003c9c:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 8003ca0:	f7fd fa70 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xB201,0x00);
 8003ca4:	2100      	movs	r1, #0
 8003ca6:	f24b 2001 	movw	r0, #45569	; 0xb201
 8003caa:	f7fd fa6b 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xB202,0x00);
 8003cae:	2100      	movs	r1, #0
 8003cb0:	f24b 2002 	movw	r0, #45570	; 0xb202
 8003cb4:	f7fd fa66 	bl	8001184 <LCD_WriteReg>
		//VCL ratio
		LCD_WriteReg(0xB800,0x24);
 8003cb8:	2124      	movs	r1, #36	; 0x24
 8003cba:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 8003cbe:	f7fd fa61 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xB801,0x24);
 8003cc2:	2124      	movs	r1, #36	; 0x24
 8003cc4:	f64b 0001 	movw	r0, #47105	; 0xb801
 8003cc8:	f7fd fa5c 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xB802,0x24);
 8003ccc:	2124      	movs	r1, #36	; 0x24
 8003cce:	f64b 0002 	movw	r0, #47106	; 0xb802
 8003cd2:	f7fd fa57 	bl	8001184 <LCD_WriteReg>
		//VGH 15V (Free pump)
		LCD_WriteReg(0xBF00,0x01);
 8003cd6:	2101      	movs	r1, #1
 8003cd8:	f44f 403f 	mov.w	r0, #48896	; 0xbf00
 8003cdc:	f7fd fa52 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xB300,0x0F);
 8003ce0:	210f      	movs	r1, #15
 8003ce2:	f44f 4033 	mov.w	r0, #45824	; 0xb300
 8003ce6:	f7fd fa4d 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xB301,0x0F);
 8003cea:	210f      	movs	r1, #15
 8003cec:	f24b 3001 	movw	r0, #45825	; 0xb301
 8003cf0:	f7fd fa48 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xB302,0x0F);
 8003cf4:	210f      	movs	r1, #15
 8003cf6:	f24b 3002 	movw	r0, #45826	; 0xb302
 8003cfa:	f7fd fa43 	bl	8001184 <LCD_WriteReg>
		//VGH ratio
		LCD_WriteReg(0xB900,0x34);
 8003cfe:	2134      	movs	r1, #52	; 0x34
 8003d00:	f44f 4039 	mov.w	r0, #47360	; 0xb900
 8003d04:	f7fd fa3e 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xB901,0x34);
 8003d08:	2134      	movs	r1, #52	; 0x34
 8003d0a:	f64b 1001 	movw	r0, #47361	; 0xb901
 8003d0e:	f7fd fa39 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xB902,0x34);
 8003d12:	2134      	movs	r1, #52	; 0x34
 8003d14:	f64b 1002 	movw	r0, #47362	; 0xb902
 8003d18:	f7fd fa34 	bl	8001184 <LCD_WriteReg>
		//VGL_REG -10V
		LCD_WriteReg(0xB500,0x08);
 8003d1c:	2108      	movs	r1, #8
 8003d1e:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 8003d22:	f7fd fa2f 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xB501,0x08);
 8003d26:	2108      	movs	r1, #8
 8003d28:	f24b 5001 	movw	r0, #46337	; 0xb501
 8003d2c:	f7fd fa2a 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xB502,0x08);
 8003d30:	2108      	movs	r1, #8
 8003d32:	f24b 5002 	movw	r0, #46338	; 0xb502
 8003d36:	f7fd fa25 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xC200,0x03);
 8003d3a:	2103      	movs	r1, #3
 8003d3c:	f44f 4042 	mov.w	r0, #49664	; 0xc200
 8003d40:	f7fd fa20 	bl	8001184 <LCD_WriteReg>
		//VGLX ratio
		LCD_WriteReg(0xBA00,0x24);
 8003d44:	2124      	movs	r1, #36	; 0x24
 8003d46:	f44f 403a 	mov.w	r0, #47616	; 0xba00
 8003d4a:	f7fd fa1b 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xBA01,0x24);
 8003d4e:	2124      	movs	r1, #36	; 0x24
 8003d50:	f64b 2001 	movw	r0, #47617	; 0xba01
 8003d54:	f7fd fa16 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xBA02,0x24);
 8003d58:	2124      	movs	r1, #36	; 0x24
 8003d5a:	f64b 2002 	movw	r0, #47618	; 0xba02
 8003d5e:	f7fd fa11 	bl	8001184 <LCD_WriteReg>
		//VGMP/VGSP 4.5V/0V
		LCD_WriteReg(0xBC00,0x00);
 8003d62:	2100      	movs	r1, #0
 8003d64:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8003d68:	f7fd fa0c 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xBC01,0x78);
 8003d6c:	2178      	movs	r1, #120	; 0x78
 8003d6e:	f64b 4001 	movw	r0, #48129	; 0xbc01
 8003d72:	f7fd fa07 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xBC02,0x00);
 8003d76:	2100      	movs	r1, #0
 8003d78:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8003d7c:	f7fd fa02 	bl	8001184 <LCD_WriteReg>
		//VGMN/VGSN -4.5V/0V
		LCD_WriteReg(0xBD00,0x00);
 8003d80:	2100      	movs	r1, #0
 8003d82:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
 8003d86:	f7fd f9fd 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xBD01,0x78);
 8003d8a:	2178      	movs	r1, #120	; 0x78
 8003d8c:	f64b 5001 	movw	r0, #48385	; 0xbd01
 8003d90:	f7fd f9f8 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xBD02,0x00);
 8003d94:	2100      	movs	r1, #0
 8003d96:	f64b 5002 	movw	r0, #48386	; 0xbd02
 8003d9a:	f7fd f9f3 	bl	8001184 <LCD_WriteReg>
		//VCOM
		LCD_WriteReg(0xBE00,0x00);
 8003d9e:	2100      	movs	r1, #0
 8003da0:	f44f 403e 	mov.w	r0, #48640	; 0xbe00
 8003da4:	f7fd f9ee 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xBE01,0x64);
 8003da8:	2164      	movs	r1, #100	; 0x64
 8003daa:	f64b 6001 	movw	r0, #48641	; 0xbe01
 8003dae:	f7fd f9e9 	bl	8001184 <LCD_WriteReg>
		//Gamma Setting
		LCD_WriteReg(0xD100,0x00);
 8003db2:	2100      	movs	r1, #0
 8003db4:	f44f 4051 	mov.w	r0, #53504	; 0xd100
 8003db8:	f7fd f9e4 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD101,0x33);
 8003dbc:	2133      	movs	r1, #51	; 0x33
 8003dbe:	f24d 1001 	movw	r0, #53505	; 0xd101
 8003dc2:	f7fd f9df 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD102,0x00);
 8003dc6:	2100      	movs	r1, #0
 8003dc8:	f24d 1002 	movw	r0, #53506	; 0xd102
 8003dcc:	f7fd f9da 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD103,0x34);
 8003dd0:	2134      	movs	r1, #52	; 0x34
 8003dd2:	f24d 1003 	movw	r0, #53507	; 0xd103
 8003dd6:	f7fd f9d5 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD104,0x00);
 8003dda:	2100      	movs	r1, #0
 8003ddc:	f24d 1004 	movw	r0, #53508	; 0xd104
 8003de0:	f7fd f9d0 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD105,0x3A);
 8003de4:	213a      	movs	r1, #58	; 0x3a
 8003de6:	f24d 1005 	movw	r0, #53509	; 0xd105
 8003dea:	f7fd f9cb 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD106,0x00);
 8003dee:	2100      	movs	r1, #0
 8003df0:	f24d 1006 	movw	r0, #53510	; 0xd106
 8003df4:	f7fd f9c6 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD107,0x4A);
 8003df8:	214a      	movs	r1, #74	; 0x4a
 8003dfa:	f24d 1007 	movw	r0, #53511	; 0xd107
 8003dfe:	f7fd f9c1 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD108,0x00);
 8003e02:	2100      	movs	r1, #0
 8003e04:	f24d 1008 	movw	r0, #53512	; 0xd108
 8003e08:	f7fd f9bc 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD109,0x5C);
 8003e0c:	215c      	movs	r1, #92	; 0x5c
 8003e0e:	f24d 1009 	movw	r0, #53513	; 0xd109
 8003e12:	f7fd f9b7 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD10A,0x00);
 8003e16:	2100      	movs	r1, #0
 8003e18:	f24d 100a 	movw	r0, #53514	; 0xd10a
 8003e1c:	f7fd f9b2 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD10B,0x81);
 8003e20:	2181      	movs	r1, #129	; 0x81
 8003e22:	f24d 100b 	movw	r0, #53515	; 0xd10b
 8003e26:	f7fd f9ad 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD10C,0x00);
 8003e2a:	2100      	movs	r1, #0
 8003e2c:	f24d 100c 	movw	r0, #53516	; 0xd10c
 8003e30:	f7fd f9a8 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD10D,0xA6);
 8003e34:	21a6      	movs	r1, #166	; 0xa6
 8003e36:	f24d 100d 	movw	r0, #53517	; 0xd10d
 8003e3a:	f7fd f9a3 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD10E,0x00);
 8003e3e:	2100      	movs	r1, #0
 8003e40:	f24d 100e 	movw	r0, #53518	; 0xd10e
 8003e44:	f7fd f99e 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD10F,0xE5);
 8003e48:	21e5      	movs	r1, #229	; 0xe5
 8003e4a:	f24d 100f 	movw	r0, #53519	; 0xd10f
 8003e4e:	f7fd f999 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD110,0x01);
 8003e52:	2101      	movs	r1, #1
 8003e54:	f24d 1010 	movw	r0, #53520	; 0xd110
 8003e58:	f7fd f994 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD111,0x13);
 8003e5c:	2113      	movs	r1, #19
 8003e5e:	f24d 1011 	movw	r0, #53521	; 0xd111
 8003e62:	f7fd f98f 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD112,0x01);
 8003e66:	2101      	movs	r1, #1
 8003e68:	f24d 1012 	movw	r0, #53522	; 0xd112
 8003e6c:	f7fd f98a 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD113,0x54);
 8003e70:	2154      	movs	r1, #84	; 0x54
 8003e72:	f24d 1013 	movw	r0, #53523	; 0xd113
 8003e76:	f7fd f985 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD114,0x01);
 8003e7a:	2101      	movs	r1, #1
 8003e7c:	f24d 1014 	movw	r0, #53524	; 0xd114
 8003e80:	f7fd f980 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD115,0x82);
 8003e84:	2182      	movs	r1, #130	; 0x82
 8003e86:	f24d 1015 	movw	r0, #53525	; 0xd115
 8003e8a:	f7fd f97b 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD116,0x01);
 8003e8e:	2101      	movs	r1, #1
 8003e90:	f24d 1016 	movw	r0, #53526	; 0xd116
 8003e94:	f7fd f976 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD117,0xCA);
 8003e98:	21ca      	movs	r1, #202	; 0xca
 8003e9a:	f24d 1017 	movw	r0, #53527	; 0xd117
 8003e9e:	f7fd f971 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD118,0x02);
 8003ea2:	2102      	movs	r1, #2
 8003ea4:	f24d 1018 	movw	r0, #53528	; 0xd118
 8003ea8:	f7fd f96c 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD119,0x00);
 8003eac:	2100      	movs	r1, #0
 8003eae:	f24d 1019 	movw	r0, #53529	; 0xd119
 8003eb2:	f7fd f967 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD11A,0x02);
 8003eb6:	2102      	movs	r1, #2
 8003eb8:	f24d 101a 	movw	r0, #53530	; 0xd11a
 8003ebc:	f7fd f962 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD11B,0x01);
 8003ec0:	2101      	movs	r1, #1
 8003ec2:	f24d 101b 	movw	r0, #53531	; 0xd11b
 8003ec6:	f7fd f95d 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD11C,0x02);
 8003eca:	2102      	movs	r1, #2
 8003ecc:	f24d 101c 	movw	r0, #53532	; 0xd11c
 8003ed0:	f7fd f958 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD11D,0x34);
 8003ed4:	2134      	movs	r1, #52	; 0x34
 8003ed6:	f24d 101d 	movw	r0, #53533	; 0xd11d
 8003eda:	f7fd f953 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD11E,0x02);
 8003ede:	2102      	movs	r1, #2
 8003ee0:	f24d 101e 	movw	r0, #53534	; 0xd11e
 8003ee4:	f7fd f94e 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD11F,0x67);
 8003ee8:	2167      	movs	r1, #103	; 0x67
 8003eea:	f24d 101f 	movw	r0, #53535	; 0xd11f
 8003eee:	f7fd f949 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD120,0x02);
 8003ef2:	2102      	movs	r1, #2
 8003ef4:	f24d 1020 	movw	r0, #53536	; 0xd120
 8003ef8:	f7fd f944 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD121,0x84);
 8003efc:	2184      	movs	r1, #132	; 0x84
 8003efe:	f24d 1021 	movw	r0, #53537	; 0xd121
 8003f02:	f7fd f93f 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD122,0x02);
 8003f06:	2102      	movs	r1, #2
 8003f08:	f24d 1022 	movw	r0, #53538	; 0xd122
 8003f0c:	f7fd f93a 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD123,0xA4);
 8003f10:	21a4      	movs	r1, #164	; 0xa4
 8003f12:	f24d 1023 	movw	r0, #53539	; 0xd123
 8003f16:	f7fd f935 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD124,0x02);
 8003f1a:	2102      	movs	r1, #2
 8003f1c:	f24d 1024 	movw	r0, #53540	; 0xd124
 8003f20:	f7fd f930 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD125,0xB7);
 8003f24:	21b7      	movs	r1, #183	; 0xb7
 8003f26:	f24d 1025 	movw	r0, #53541	; 0xd125
 8003f2a:	f7fd f92b 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD126,0x02);
 8003f2e:	2102      	movs	r1, #2
 8003f30:	f24d 1026 	movw	r0, #53542	; 0xd126
 8003f34:	f7fd f926 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD127,0xCF);
 8003f38:	21cf      	movs	r1, #207	; 0xcf
 8003f3a:	f24d 1027 	movw	r0, #53543	; 0xd127
 8003f3e:	f7fd f921 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD128,0x02);
 8003f42:	2102      	movs	r1, #2
 8003f44:	f24d 1028 	movw	r0, #53544	; 0xd128
 8003f48:	f7fd f91c 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD129,0xDE);
 8003f4c:	21de      	movs	r1, #222	; 0xde
 8003f4e:	f24d 1029 	movw	r0, #53545	; 0xd129
 8003f52:	f7fd f917 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD12A,0x02);
 8003f56:	2102      	movs	r1, #2
 8003f58:	f24d 102a 	movw	r0, #53546	; 0xd12a
 8003f5c:	f7fd f912 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD12B,0xF2);
 8003f60:	21f2      	movs	r1, #242	; 0xf2
 8003f62:	f24d 102b 	movw	r0, #53547	; 0xd12b
 8003f66:	f7fd f90d 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD12C,0x02);
 8003f6a:	2102      	movs	r1, #2
 8003f6c:	f24d 102c 	movw	r0, #53548	; 0xd12c
 8003f70:	f7fd f908 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD12D,0xFE);
 8003f74:	21fe      	movs	r1, #254	; 0xfe
 8003f76:	f24d 102d 	movw	r0, #53549	; 0xd12d
 8003f7a:	f7fd f903 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD12E,0x03);
 8003f7e:	2103      	movs	r1, #3
 8003f80:	f24d 102e 	movw	r0, #53550	; 0xd12e
 8003f84:	f7fd f8fe 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD12F,0x10);
 8003f88:	2110      	movs	r1, #16
 8003f8a:	f24d 102f 	movw	r0, #53551	; 0xd12f
 8003f8e:	f7fd f8f9 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD130,0x03);
 8003f92:	2103      	movs	r1, #3
 8003f94:	f24d 1030 	movw	r0, #53552	; 0xd130
 8003f98:	f7fd f8f4 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD131,0x33);
 8003f9c:	2133      	movs	r1, #51	; 0x33
 8003f9e:	f24d 1031 	movw	r0, #53553	; 0xd131
 8003fa2:	f7fd f8ef 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD132,0x03);
 8003fa6:	2103      	movs	r1, #3
 8003fa8:	f24d 1032 	movw	r0, #53554	; 0xd132
 8003fac:	f7fd f8ea 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD133,0x6D);
 8003fb0:	216d      	movs	r1, #109	; 0x6d
 8003fb2:	f24d 1033 	movw	r0, #53555	; 0xd133
 8003fb6:	f7fd f8e5 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD200,0x00);
 8003fba:	2100      	movs	r1, #0
 8003fbc:	f44f 4052 	mov.w	r0, #53760	; 0xd200
 8003fc0:	f7fd f8e0 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD201,0x33);
 8003fc4:	2133      	movs	r1, #51	; 0x33
 8003fc6:	f24d 2001 	movw	r0, #53761	; 0xd201
 8003fca:	f7fd f8db 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD202,0x00);
 8003fce:	2100      	movs	r1, #0
 8003fd0:	f24d 2002 	movw	r0, #53762	; 0xd202
 8003fd4:	f7fd f8d6 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD203,0x34);
 8003fd8:	2134      	movs	r1, #52	; 0x34
 8003fda:	f24d 2003 	movw	r0, #53763	; 0xd203
 8003fde:	f7fd f8d1 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD204,0x00);
 8003fe2:	2100      	movs	r1, #0
 8003fe4:	f24d 2004 	movw	r0, #53764	; 0xd204
 8003fe8:	f7fd f8cc 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD205,0x3A);
 8003fec:	213a      	movs	r1, #58	; 0x3a
 8003fee:	f24d 2005 	movw	r0, #53765	; 0xd205
 8003ff2:	f7fd f8c7 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD206,0x00);
 8003ff6:	2100      	movs	r1, #0
 8003ff8:	f24d 2006 	movw	r0, #53766	; 0xd206
 8003ffc:	f7fd f8c2 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD207,0x4A);
 8004000:	214a      	movs	r1, #74	; 0x4a
 8004002:	f24d 2007 	movw	r0, #53767	; 0xd207
 8004006:	f7fd f8bd 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD208,0x00);
 800400a:	2100      	movs	r1, #0
 800400c:	f24d 2008 	movw	r0, #53768	; 0xd208
 8004010:	f7fd f8b8 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD209,0x5C);
 8004014:	215c      	movs	r1, #92	; 0x5c
 8004016:	f24d 2009 	movw	r0, #53769	; 0xd209
 800401a:	f7fd f8b3 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD20A,0x00);
 800401e:	2100      	movs	r1, #0
 8004020:	f24d 200a 	movw	r0, #53770	; 0xd20a
 8004024:	f7fd f8ae 	bl	8001184 <LCD_WriteReg>

		LCD_WriteReg(0xD20B,0x81);
 8004028:	2181      	movs	r1, #129	; 0x81
 800402a:	f24d 200b 	movw	r0, #53771	; 0xd20b
 800402e:	f7fd f8a9 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD20C,0x00);
 8004032:	2100      	movs	r1, #0
 8004034:	f24d 200c 	movw	r0, #53772	; 0xd20c
 8004038:	f7fd f8a4 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD20D,0xA6);
 800403c:	21a6      	movs	r1, #166	; 0xa6
 800403e:	f24d 200d 	movw	r0, #53773	; 0xd20d
 8004042:	f7fd f89f 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD20E,0x00);
 8004046:	2100      	movs	r1, #0
 8004048:	f24d 200e 	movw	r0, #53774	; 0xd20e
 800404c:	f7fd f89a 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD20F,0xE5);
 8004050:	21e5      	movs	r1, #229	; 0xe5
 8004052:	f24d 200f 	movw	r0, #53775	; 0xd20f
 8004056:	f7fd f895 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD210,0x01);
 800405a:	2101      	movs	r1, #1
 800405c:	f24d 2010 	movw	r0, #53776	; 0xd210
 8004060:	f7fd f890 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD211,0x13);
 8004064:	2113      	movs	r1, #19
 8004066:	f24d 2011 	movw	r0, #53777	; 0xd211
 800406a:	f7fd f88b 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD212,0x01);
 800406e:	2101      	movs	r1, #1
 8004070:	f24d 2012 	movw	r0, #53778	; 0xd212
 8004074:	f7fd f886 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD213,0x54);
 8004078:	2154      	movs	r1, #84	; 0x54
 800407a:	f24d 2013 	movw	r0, #53779	; 0xd213
 800407e:	f7fd f881 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD214,0x01);
 8004082:	2101      	movs	r1, #1
 8004084:	f24d 2014 	movw	r0, #53780	; 0xd214
 8004088:	f7fd f87c 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD215,0x82);
 800408c:	2182      	movs	r1, #130	; 0x82
 800408e:	f24d 2015 	movw	r0, #53781	; 0xd215
 8004092:	f7fd f877 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD216,0x01);
 8004096:	2101      	movs	r1, #1
 8004098:	f24d 2016 	movw	r0, #53782	; 0xd216
 800409c:	f7fd f872 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD217,0xCA);
 80040a0:	21ca      	movs	r1, #202	; 0xca
 80040a2:	f24d 2017 	movw	r0, #53783	; 0xd217
 80040a6:	f7fd f86d 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD218,0x02);
 80040aa:	2102      	movs	r1, #2
 80040ac:	f24d 2018 	movw	r0, #53784	; 0xd218
 80040b0:	f7fd f868 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD219,0x00);
 80040b4:	2100      	movs	r1, #0
 80040b6:	f24d 2019 	movw	r0, #53785	; 0xd219
 80040ba:	f7fd f863 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD21A,0x02);
 80040be:	2102      	movs	r1, #2
 80040c0:	f24d 201a 	movw	r0, #53786	; 0xd21a
 80040c4:	f7fd f85e 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD21B,0x01);
 80040c8:	2101      	movs	r1, #1
 80040ca:	f24d 201b 	movw	r0, #53787	; 0xd21b
 80040ce:	f7fd f859 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD21C,0x02);
 80040d2:	2102      	movs	r1, #2
 80040d4:	f24d 201c 	movw	r0, #53788	; 0xd21c
 80040d8:	f7fd f854 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD21D,0x34);
 80040dc:	2134      	movs	r1, #52	; 0x34
 80040de:	f24d 201d 	movw	r0, #53789	; 0xd21d
 80040e2:	f7fd f84f 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD21E,0x02);
 80040e6:	2102      	movs	r1, #2
 80040e8:	f24d 201e 	movw	r0, #53790	; 0xd21e
 80040ec:	f7fd f84a 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD21F,0x67);
 80040f0:	2167      	movs	r1, #103	; 0x67
 80040f2:	f24d 201f 	movw	r0, #53791	; 0xd21f
 80040f6:	f7fd f845 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD220,0x02);
 80040fa:	2102      	movs	r1, #2
 80040fc:	f24d 2020 	movw	r0, #53792	; 0xd220
 8004100:	f7fd f840 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD221,0x84);
 8004104:	2184      	movs	r1, #132	; 0x84
 8004106:	f24d 2021 	movw	r0, #53793	; 0xd221
 800410a:	f7fd f83b 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD222,0x02);
 800410e:	2102      	movs	r1, #2
 8004110:	f24d 2022 	movw	r0, #53794	; 0xd222
 8004114:	f7fd f836 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD223,0xA4);
 8004118:	21a4      	movs	r1, #164	; 0xa4
 800411a:	f24d 2023 	movw	r0, #53795	; 0xd223
 800411e:	f7fd f831 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD224,0x02);
 8004122:	2102      	movs	r1, #2
 8004124:	f24d 2024 	movw	r0, #53796	; 0xd224
 8004128:	f7fd f82c 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD225,0xB7);
 800412c:	21b7      	movs	r1, #183	; 0xb7
 800412e:	f24d 2025 	movw	r0, #53797	; 0xd225
 8004132:	f7fd f827 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD226,0x02);
 8004136:	2102      	movs	r1, #2
 8004138:	f24d 2026 	movw	r0, #53798	; 0xd226
 800413c:	f7fd f822 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD227,0xCF);
 8004140:	21cf      	movs	r1, #207	; 0xcf
 8004142:	f24d 2027 	movw	r0, #53799	; 0xd227
 8004146:	f7fd f81d 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD228,0x02);
 800414a:	2102      	movs	r1, #2
 800414c:	f24d 2028 	movw	r0, #53800	; 0xd228
 8004150:	f7fd f818 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD229,0xDE);
 8004154:	21de      	movs	r1, #222	; 0xde
 8004156:	f24d 2029 	movw	r0, #53801	; 0xd229
 800415a:	f7fd f813 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD22A,0x02);
 800415e:	2102      	movs	r1, #2
 8004160:	f24d 202a 	movw	r0, #53802	; 0xd22a
 8004164:	f7fd f80e 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD22B,0xF2);
 8004168:	21f2      	movs	r1, #242	; 0xf2
 800416a:	f24d 202b 	movw	r0, #53803	; 0xd22b
 800416e:	f7fd f809 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD22C,0x02);
 8004172:	2102      	movs	r1, #2
 8004174:	f24d 202c 	movw	r0, #53804	; 0xd22c
 8004178:	f7fd f804 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD22D,0xFE);
 800417c:	21fe      	movs	r1, #254	; 0xfe
 800417e:	f24d 202d 	movw	r0, #53805	; 0xd22d
 8004182:	f7fc ffff 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD22E,0x03);
 8004186:	2103      	movs	r1, #3
 8004188:	f24d 202e 	movw	r0, #53806	; 0xd22e
 800418c:	f7fc fffa 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD22F,0x10);
 8004190:	2110      	movs	r1, #16
 8004192:	f24d 202f 	movw	r0, #53807	; 0xd22f
 8004196:	f7fc fff5 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD230,0x03);
 800419a:	2103      	movs	r1, #3
 800419c:	f24d 2030 	movw	r0, #53808	; 0xd230
 80041a0:	f7fc fff0 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD231,0x33);
 80041a4:	2133      	movs	r1, #51	; 0x33
 80041a6:	f24d 2031 	movw	r0, #53809	; 0xd231
 80041aa:	f7fc ffeb 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD232,0x03);
 80041ae:	2103      	movs	r1, #3
 80041b0:	f24d 2032 	movw	r0, #53810	; 0xd232
 80041b4:	f7fc ffe6 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD233,0x6D);
 80041b8:	216d      	movs	r1, #109	; 0x6d
 80041ba:	f24d 2033 	movw	r0, #53811	; 0xd233
 80041be:	f7fc ffe1 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD300,0x00);
 80041c2:	2100      	movs	r1, #0
 80041c4:	f44f 4053 	mov.w	r0, #54016	; 0xd300
 80041c8:	f7fc ffdc 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD301,0x33);
 80041cc:	2133      	movs	r1, #51	; 0x33
 80041ce:	f24d 3001 	movw	r0, #54017	; 0xd301
 80041d2:	f7fc ffd7 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD302,0x00);
 80041d6:	2100      	movs	r1, #0
 80041d8:	f24d 3002 	movw	r0, #54018	; 0xd302
 80041dc:	f7fc ffd2 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD303,0x34);
 80041e0:	2134      	movs	r1, #52	; 0x34
 80041e2:	f24d 3003 	movw	r0, #54019	; 0xd303
 80041e6:	f7fc ffcd 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD304,0x00);
 80041ea:	2100      	movs	r1, #0
 80041ec:	f24d 3004 	movw	r0, #54020	; 0xd304
 80041f0:	f7fc ffc8 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD305,0x3A);
 80041f4:	213a      	movs	r1, #58	; 0x3a
 80041f6:	f24d 3005 	movw	r0, #54021	; 0xd305
 80041fa:	f7fc ffc3 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD306,0x00);
 80041fe:	2100      	movs	r1, #0
 8004200:	f24d 3006 	movw	r0, #54022	; 0xd306
 8004204:	f7fc ffbe 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD307,0x4A);
 8004208:	214a      	movs	r1, #74	; 0x4a
 800420a:	f24d 3007 	movw	r0, #54023	; 0xd307
 800420e:	f7fc ffb9 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD308,0x00);
 8004212:	2100      	movs	r1, #0
 8004214:	f24d 3008 	movw	r0, #54024	; 0xd308
 8004218:	f7fc ffb4 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD309,0x5C);
 800421c:	215c      	movs	r1, #92	; 0x5c
 800421e:	f24d 3009 	movw	r0, #54025	; 0xd309
 8004222:	f7fc ffaf 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD30A,0x00);
 8004226:	2100      	movs	r1, #0
 8004228:	f24d 300a 	movw	r0, #54026	; 0xd30a
 800422c:	f7fc ffaa 	bl	8001184 <LCD_WriteReg>

		LCD_WriteReg(0xD30B,0x81);
 8004230:	2181      	movs	r1, #129	; 0x81
 8004232:	f24d 300b 	movw	r0, #54027	; 0xd30b
 8004236:	f7fc ffa5 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD30C,0x00);
 800423a:	2100      	movs	r1, #0
 800423c:	f24d 300c 	movw	r0, #54028	; 0xd30c
 8004240:	f7fc ffa0 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD30D,0xA6);
 8004244:	21a6      	movs	r1, #166	; 0xa6
 8004246:	f24d 300d 	movw	r0, #54029	; 0xd30d
 800424a:	f7fc ff9b 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD30E,0x00);
 800424e:	2100      	movs	r1, #0
 8004250:	f24d 300e 	movw	r0, #54030	; 0xd30e
 8004254:	f7fc ff96 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD30F,0xE5);
 8004258:	21e5      	movs	r1, #229	; 0xe5
 800425a:	f24d 300f 	movw	r0, #54031	; 0xd30f
 800425e:	f7fc ff91 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD310,0x01);
 8004262:	2101      	movs	r1, #1
 8004264:	f24d 3010 	movw	r0, #54032	; 0xd310
 8004268:	f7fc ff8c 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD311,0x13);
 800426c:	2113      	movs	r1, #19
 800426e:	f24d 3011 	movw	r0, #54033	; 0xd311
 8004272:	f7fc ff87 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD312,0x01);
 8004276:	2101      	movs	r1, #1
 8004278:	f24d 3012 	movw	r0, #54034	; 0xd312
 800427c:	f7fc ff82 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD313,0x54);
 8004280:	2154      	movs	r1, #84	; 0x54
 8004282:	f24d 3013 	movw	r0, #54035	; 0xd313
 8004286:	f7fc ff7d 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD314,0x01);
 800428a:	2101      	movs	r1, #1
 800428c:	f24d 3014 	movw	r0, #54036	; 0xd314
 8004290:	f7fc ff78 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD315,0x82);
 8004294:	2182      	movs	r1, #130	; 0x82
 8004296:	f24d 3015 	movw	r0, #54037	; 0xd315
 800429a:	f7fc ff73 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD316,0x01);
 800429e:	2101      	movs	r1, #1
 80042a0:	f24d 3016 	movw	r0, #54038	; 0xd316
 80042a4:	f7fc ff6e 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD317,0xCA);
 80042a8:	21ca      	movs	r1, #202	; 0xca
 80042aa:	f24d 3017 	movw	r0, #54039	; 0xd317
 80042ae:	f7fc ff69 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD318,0x02);
 80042b2:	2102      	movs	r1, #2
 80042b4:	f24d 3018 	movw	r0, #54040	; 0xd318
 80042b8:	f7fc ff64 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD319,0x00);
 80042bc:	2100      	movs	r1, #0
 80042be:	f24d 3019 	movw	r0, #54041	; 0xd319
 80042c2:	f7fc ff5f 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD31A,0x02);
 80042c6:	2102      	movs	r1, #2
 80042c8:	f24d 301a 	movw	r0, #54042	; 0xd31a
 80042cc:	f7fc ff5a 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD31B,0x01);
 80042d0:	2101      	movs	r1, #1
 80042d2:	f24d 301b 	movw	r0, #54043	; 0xd31b
 80042d6:	f7fc ff55 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD31C,0x02);
 80042da:	2102      	movs	r1, #2
 80042dc:	f24d 301c 	movw	r0, #54044	; 0xd31c
 80042e0:	f7fc ff50 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD31D,0x34);
 80042e4:	2134      	movs	r1, #52	; 0x34
 80042e6:	f24d 301d 	movw	r0, #54045	; 0xd31d
 80042ea:	f7fc ff4b 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD31E,0x02);
 80042ee:	2102      	movs	r1, #2
 80042f0:	f24d 301e 	movw	r0, #54046	; 0xd31e
 80042f4:	f7fc ff46 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD31F,0x67);
 80042f8:	2167      	movs	r1, #103	; 0x67
 80042fa:	f24d 301f 	movw	r0, #54047	; 0xd31f
 80042fe:	f7fc ff41 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD320,0x02);
 8004302:	2102      	movs	r1, #2
 8004304:	f24d 3020 	movw	r0, #54048	; 0xd320
 8004308:	f7fc ff3c 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD321,0x84);
 800430c:	2184      	movs	r1, #132	; 0x84
 800430e:	f24d 3021 	movw	r0, #54049	; 0xd321
 8004312:	f7fc ff37 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD322,0x02);
 8004316:	2102      	movs	r1, #2
 8004318:	f24d 3022 	movw	r0, #54050	; 0xd322
 800431c:	f7fc ff32 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD323,0xA4);
 8004320:	21a4      	movs	r1, #164	; 0xa4
 8004322:	f24d 3023 	movw	r0, #54051	; 0xd323
 8004326:	f7fc ff2d 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD324,0x02);
 800432a:	2102      	movs	r1, #2
 800432c:	f24d 3024 	movw	r0, #54052	; 0xd324
 8004330:	f7fc ff28 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD325,0xB7);
 8004334:	21b7      	movs	r1, #183	; 0xb7
 8004336:	f24d 3025 	movw	r0, #54053	; 0xd325
 800433a:	f7fc ff23 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD326,0x02);
 800433e:	2102      	movs	r1, #2
 8004340:	f24d 3026 	movw	r0, #54054	; 0xd326
 8004344:	f7fc ff1e 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD327,0xCF);
 8004348:	21cf      	movs	r1, #207	; 0xcf
 800434a:	f24d 3027 	movw	r0, #54055	; 0xd327
 800434e:	f7fc ff19 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD328,0x02);
 8004352:	2102      	movs	r1, #2
 8004354:	f24d 3028 	movw	r0, #54056	; 0xd328
 8004358:	f7fc ff14 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD329,0xDE);
 800435c:	21de      	movs	r1, #222	; 0xde
 800435e:	f24d 3029 	movw	r0, #54057	; 0xd329
 8004362:	f7fc ff0f 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD32A,0x02);
 8004366:	2102      	movs	r1, #2
 8004368:	f24d 302a 	movw	r0, #54058	; 0xd32a
 800436c:	f7fc ff0a 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD32B,0xF2);
 8004370:	21f2      	movs	r1, #242	; 0xf2
 8004372:	f24d 302b 	movw	r0, #54059	; 0xd32b
 8004376:	f7fc ff05 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD32C,0x02);
 800437a:	2102      	movs	r1, #2
 800437c:	f24d 302c 	movw	r0, #54060	; 0xd32c
 8004380:	f7fc ff00 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD32D,0xFE);
 8004384:	21fe      	movs	r1, #254	; 0xfe
 8004386:	f24d 302d 	movw	r0, #54061	; 0xd32d
 800438a:	f7fc fefb 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD32E,0x03);
 800438e:	2103      	movs	r1, #3
 8004390:	f24d 302e 	movw	r0, #54062	; 0xd32e
 8004394:	f7fc fef6 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD32F,0x10);
 8004398:	2110      	movs	r1, #16
 800439a:	f24d 302f 	movw	r0, #54063	; 0xd32f
 800439e:	f7fc fef1 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD330,0x03);
 80043a2:	2103      	movs	r1, #3
 80043a4:	f24d 3030 	movw	r0, #54064	; 0xd330
 80043a8:	f7fc feec 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD331,0x33);
 80043ac:	2133      	movs	r1, #51	; 0x33
 80043ae:	f24d 3031 	movw	r0, #54065	; 0xd331
 80043b2:	f7fc fee7 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD332,0x03);
 80043b6:	2103      	movs	r1, #3
 80043b8:	f24d 3032 	movw	r0, #54066	; 0xd332
 80043bc:	f7fc fee2 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD333,0x6D);
 80043c0:	216d      	movs	r1, #109	; 0x6d
 80043c2:	f24d 3033 	movw	r0, #54067	; 0xd333
 80043c6:	f7fc fedd 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD400,0x00);
 80043ca:	2100      	movs	r1, #0
 80043cc:	f44f 4054 	mov.w	r0, #54272	; 0xd400
 80043d0:	f7fc fed8 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD401,0x33);
 80043d4:	2133      	movs	r1, #51	; 0x33
 80043d6:	f24d 4001 	movw	r0, #54273	; 0xd401
 80043da:	f7fc fed3 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD402,0x00);
 80043de:	2100      	movs	r1, #0
 80043e0:	f24d 4002 	movw	r0, #54274	; 0xd402
 80043e4:	f7fc fece 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD403,0x34);
 80043e8:	2134      	movs	r1, #52	; 0x34
 80043ea:	f24d 4003 	movw	r0, #54275	; 0xd403
 80043ee:	f7fc fec9 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD404,0x00);
 80043f2:	2100      	movs	r1, #0
 80043f4:	f24d 4004 	movw	r0, #54276	; 0xd404
 80043f8:	f7fc fec4 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD405,0x3A);
 80043fc:	213a      	movs	r1, #58	; 0x3a
 80043fe:	f24d 4005 	movw	r0, #54277	; 0xd405
 8004402:	f7fc febf 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD406,0x00);
 8004406:	2100      	movs	r1, #0
 8004408:	f24d 4006 	movw	r0, #54278	; 0xd406
 800440c:	f7fc feba 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD407,0x4A);
 8004410:	214a      	movs	r1, #74	; 0x4a
 8004412:	f24d 4007 	movw	r0, #54279	; 0xd407
 8004416:	f7fc feb5 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD408,0x00);
 800441a:	2100      	movs	r1, #0
 800441c:	f24d 4008 	movw	r0, #54280	; 0xd408
 8004420:	f7fc feb0 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD409,0x5C);
 8004424:	215c      	movs	r1, #92	; 0x5c
 8004426:	f24d 4009 	movw	r0, #54281	; 0xd409
 800442a:	f7fc feab 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD40A,0x00);
 800442e:	2100      	movs	r1, #0
 8004430:	f24d 400a 	movw	r0, #54282	; 0xd40a
 8004434:	f7fc fea6 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD40B,0x81);
 8004438:	2181      	movs	r1, #129	; 0x81
 800443a:	f24d 400b 	movw	r0, #54283	; 0xd40b
 800443e:	f7fc fea1 	bl	8001184 <LCD_WriteReg>

		LCD_WriteReg(0xD40C,0x00);
 8004442:	2100      	movs	r1, #0
 8004444:	f24d 400c 	movw	r0, #54284	; 0xd40c
 8004448:	f7fc fe9c 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD40D,0xA6);
 800444c:	21a6      	movs	r1, #166	; 0xa6
 800444e:	f24d 400d 	movw	r0, #54285	; 0xd40d
 8004452:	f7fc fe97 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD40E,0x00);
 8004456:	2100      	movs	r1, #0
 8004458:	f24d 400e 	movw	r0, #54286	; 0xd40e
 800445c:	f7fc fe92 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD40F,0xE5);
 8004460:	21e5      	movs	r1, #229	; 0xe5
 8004462:	f24d 400f 	movw	r0, #54287	; 0xd40f
 8004466:	f7fc fe8d 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD410,0x01);
 800446a:	2101      	movs	r1, #1
 800446c:	f24d 4010 	movw	r0, #54288	; 0xd410
 8004470:	f7fc fe88 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD411,0x13);
 8004474:	2113      	movs	r1, #19
 8004476:	f24d 4011 	movw	r0, #54289	; 0xd411
 800447a:	f7fc fe83 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD412,0x01);
 800447e:	2101      	movs	r1, #1
 8004480:	f24d 4012 	movw	r0, #54290	; 0xd412
 8004484:	f7fc fe7e 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD413,0x54);
 8004488:	2154      	movs	r1, #84	; 0x54
 800448a:	f24d 4013 	movw	r0, #54291	; 0xd413
 800448e:	f7fc fe79 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD414,0x01);
 8004492:	2101      	movs	r1, #1
 8004494:	f24d 4014 	movw	r0, #54292	; 0xd414
 8004498:	f7fc fe74 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD415,0x82);
 800449c:	2182      	movs	r1, #130	; 0x82
 800449e:	f24d 4015 	movw	r0, #54293	; 0xd415
 80044a2:	f7fc fe6f 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD416,0x01);
 80044a6:	2101      	movs	r1, #1
 80044a8:	f24d 4016 	movw	r0, #54294	; 0xd416
 80044ac:	f7fc fe6a 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD417,0xCA);
 80044b0:	21ca      	movs	r1, #202	; 0xca
 80044b2:	f24d 4017 	movw	r0, #54295	; 0xd417
 80044b6:	f7fc fe65 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD418,0x02);
 80044ba:	2102      	movs	r1, #2
 80044bc:	f24d 4018 	movw	r0, #54296	; 0xd418
 80044c0:	f7fc fe60 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD419,0x00);
 80044c4:	2100      	movs	r1, #0
 80044c6:	f24d 4019 	movw	r0, #54297	; 0xd419
 80044ca:	f7fc fe5b 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD41A,0x02);
 80044ce:	2102      	movs	r1, #2
 80044d0:	f24d 401a 	movw	r0, #54298	; 0xd41a
 80044d4:	f7fc fe56 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD41B,0x01);
 80044d8:	2101      	movs	r1, #1
 80044da:	f24d 401b 	movw	r0, #54299	; 0xd41b
 80044de:	f7fc fe51 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD41C,0x02);
 80044e2:	2102      	movs	r1, #2
 80044e4:	f24d 401c 	movw	r0, #54300	; 0xd41c
 80044e8:	f7fc fe4c 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD41D,0x34);
 80044ec:	2134      	movs	r1, #52	; 0x34
 80044ee:	f24d 401d 	movw	r0, #54301	; 0xd41d
 80044f2:	f7fc fe47 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD41E,0x02);
 80044f6:	2102      	movs	r1, #2
 80044f8:	f24d 401e 	movw	r0, #54302	; 0xd41e
 80044fc:	f7fc fe42 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD41F,0x67);
 8004500:	2167      	movs	r1, #103	; 0x67
 8004502:	f24d 401f 	movw	r0, #54303	; 0xd41f
 8004506:	f7fc fe3d 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD420,0x02);
 800450a:	2102      	movs	r1, #2
 800450c:	f24d 4020 	movw	r0, #54304	; 0xd420
 8004510:	f7fc fe38 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD421,0x84);
 8004514:	2184      	movs	r1, #132	; 0x84
 8004516:	f24d 4021 	movw	r0, #54305	; 0xd421
 800451a:	f7fc fe33 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD422,0x02);
 800451e:	2102      	movs	r1, #2
 8004520:	f24d 4022 	movw	r0, #54306	; 0xd422
 8004524:	f7fc fe2e 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD423,0xA4);
 8004528:	21a4      	movs	r1, #164	; 0xa4
 800452a:	f24d 4023 	movw	r0, #54307	; 0xd423
 800452e:	f7fc fe29 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD424,0x02);
 8004532:	2102      	movs	r1, #2
 8004534:	f24d 4024 	movw	r0, #54308	; 0xd424
 8004538:	f7fc fe24 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD425,0xB7);
 800453c:	21b7      	movs	r1, #183	; 0xb7
 800453e:	f24d 4025 	movw	r0, #54309	; 0xd425
 8004542:	f7fc fe1f 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD426,0x02);
 8004546:	2102      	movs	r1, #2
 8004548:	f24d 4026 	movw	r0, #54310	; 0xd426
 800454c:	f7fc fe1a 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD427,0xCF);
 8004550:	21cf      	movs	r1, #207	; 0xcf
 8004552:	f24d 4027 	movw	r0, #54311	; 0xd427
 8004556:	f7fc fe15 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD428,0x02);
 800455a:	2102      	movs	r1, #2
 800455c:	f24d 4028 	movw	r0, #54312	; 0xd428
 8004560:	f7fc fe10 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD429,0xDE);
 8004564:	21de      	movs	r1, #222	; 0xde
 8004566:	f24d 4029 	movw	r0, #54313	; 0xd429
 800456a:	f7fc fe0b 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD42A,0x02);
 800456e:	2102      	movs	r1, #2
 8004570:	f24d 402a 	movw	r0, #54314	; 0xd42a
 8004574:	f7fc fe06 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD42B,0xF2);
 8004578:	21f2      	movs	r1, #242	; 0xf2
 800457a:	f24d 402b 	movw	r0, #54315	; 0xd42b
 800457e:	f7fc fe01 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD42C,0x02);
 8004582:	2102      	movs	r1, #2
 8004584:	f24d 402c 	movw	r0, #54316	; 0xd42c
 8004588:	f7fc fdfc 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD42D,0xFE);
 800458c:	21fe      	movs	r1, #254	; 0xfe
 800458e:	f24d 402d 	movw	r0, #54317	; 0xd42d
 8004592:	f7fc fdf7 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD42E,0x03);
 8004596:	2103      	movs	r1, #3
 8004598:	f24d 402e 	movw	r0, #54318	; 0xd42e
 800459c:	f7fc fdf2 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD42F,0x10);
 80045a0:	2110      	movs	r1, #16
 80045a2:	f24d 402f 	movw	r0, #54319	; 0xd42f
 80045a6:	f7fc fded 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD430,0x03);
 80045aa:	2103      	movs	r1, #3
 80045ac:	f24d 4030 	movw	r0, #54320	; 0xd430
 80045b0:	f7fc fde8 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD431,0x33);
 80045b4:	2133      	movs	r1, #51	; 0x33
 80045b6:	f24d 4031 	movw	r0, #54321	; 0xd431
 80045ba:	f7fc fde3 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD432,0x03);
 80045be:	2103      	movs	r1, #3
 80045c0:	f24d 4032 	movw	r0, #54322	; 0xd432
 80045c4:	f7fc fdde 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD433,0x6D);
 80045c8:	216d      	movs	r1, #109	; 0x6d
 80045ca:	f24d 4033 	movw	r0, #54323	; 0xd433
 80045ce:	f7fc fdd9 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD500,0x00);
 80045d2:	2100      	movs	r1, #0
 80045d4:	f44f 4055 	mov.w	r0, #54528	; 0xd500
 80045d8:	f7fc fdd4 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD501,0x33);
 80045dc:	2133      	movs	r1, #51	; 0x33
 80045de:	f24d 5001 	movw	r0, #54529	; 0xd501
 80045e2:	f7fc fdcf 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD502,0x00);
 80045e6:	2100      	movs	r1, #0
 80045e8:	f24d 5002 	movw	r0, #54530	; 0xd502
 80045ec:	f7fc fdca 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD503,0x34);
 80045f0:	2134      	movs	r1, #52	; 0x34
 80045f2:	f24d 5003 	movw	r0, #54531	; 0xd503
 80045f6:	f7fc fdc5 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD504,0x00);
 80045fa:	2100      	movs	r1, #0
 80045fc:	f24d 5004 	movw	r0, #54532	; 0xd504
 8004600:	f7fc fdc0 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD505,0x3A);
 8004604:	213a      	movs	r1, #58	; 0x3a
 8004606:	f24d 5005 	movw	r0, #54533	; 0xd505
 800460a:	f7fc fdbb 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD506,0x00);
 800460e:	2100      	movs	r1, #0
 8004610:	f24d 5006 	movw	r0, #54534	; 0xd506
 8004614:	f7fc fdb6 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD507,0x4A);
 8004618:	214a      	movs	r1, #74	; 0x4a
 800461a:	f24d 5007 	movw	r0, #54535	; 0xd507
 800461e:	f7fc fdb1 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD508,0x00);
 8004622:	2100      	movs	r1, #0
 8004624:	f24d 5008 	movw	r0, #54536	; 0xd508
 8004628:	f7fc fdac 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD509,0x5C);
 800462c:	215c      	movs	r1, #92	; 0x5c
 800462e:	f24d 5009 	movw	r0, #54537	; 0xd509
 8004632:	f7fc fda7 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD50A,0x00);
 8004636:	2100      	movs	r1, #0
 8004638:	f24d 500a 	movw	r0, #54538	; 0xd50a
 800463c:	f7fc fda2 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD50B,0x81);
 8004640:	2181      	movs	r1, #129	; 0x81
 8004642:	f24d 500b 	movw	r0, #54539	; 0xd50b
 8004646:	f7fc fd9d 	bl	8001184 <LCD_WriteReg>

		LCD_WriteReg(0xD50C,0x00);
 800464a:	2100      	movs	r1, #0
 800464c:	f24d 500c 	movw	r0, #54540	; 0xd50c
 8004650:	f7fc fd98 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD50D,0xA6);
 8004654:	21a6      	movs	r1, #166	; 0xa6
 8004656:	f24d 500d 	movw	r0, #54541	; 0xd50d
 800465a:	f7fc fd93 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD50E,0x00);
 800465e:	2100      	movs	r1, #0
 8004660:	f24d 500e 	movw	r0, #54542	; 0xd50e
 8004664:	f7fc fd8e 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD50F,0xE5);
 8004668:	21e5      	movs	r1, #229	; 0xe5
 800466a:	f24d 500f 	movw	r0, #54543	; 0xd50f
 800466e:	f7fc fd89 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD510,0x01);
 8004672:	2101      	movs	r1, #1
 8004674:	f24d 5010 	movw	r0, #54544	; 0xd510
 8004678:	f7fc fd84 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD511,0x13);
 800467c:	2113      	movs	r1, #19
 800467e:	f24d 5011 	movw	r0, #54545	; 0xd511
 8004682:	f7fc fd7f 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD512,0x01);
 8004686:	2101      	movs	r1, #1
 8004688:	f24d 5012 	movw	r0, #54546	; 0xd512
 800468c:	f7fc fd7a 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD513,0x54);
 8004690:	2154      	movs	r1, #84	; 0x54
 8004692:	f24d 5013 	movw	r0, #54547	; 0xd513
 8004696:	f7fc fd75 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD514,0x01);
 800469a:	2101      	movs	r1, #1
 800469c:	f24d 5014 	movw	r0, #54548	; 0xd514
 80046a0:	f7fc fd70 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD515,0x82);
 80046a4:	2182      	movs	r1, #130	; 0x82
 80046a6:	f24d 5015 	movw	r0, #54549	; 0xd515
 80046aa:	f7fc fd6b 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD516,0x01);
 80046ae:	2101      	movs	r1, #1
 80046b0:	f24d 5016 	movw	r0, #54550	; 0xd516
 80046b4:	f7fc fd66 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD517,0xCA);
 80046b8:	21ca      	movs	r1, #202	; 0xca
 80046ba:	f24d 5017 	movw	r0, #54551	; 0xd517
 80046be:	f7fc fd61 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD518,0x02);
 80046c2:	2102      	movs	r1, #2
 80046c4:	f24d 5018 	movw	r0, #54552	; 0xd518
 80046c8:	f7fc fd5c 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD519,0x00);
 80046cc:	2100      	movs	r1, #0
 80046ce:	f24d 5019 	movw	r0, #54553	; 0xd519
 80046d2:	f7fc fd57 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD51A,0x02);
 80046d6:	2102      	movs	r1, #2
 80046d8:	f24d 501a 	movw	r0, #54554	; 0xd51a
 80046dc:	f7fc fd52 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD51B,0x01);
 80046e0:	2101      	movs	r1, #1
 80046e2:	f24d 501b 	movw	r0, #54555	; 0xd51b
 80046e6:	f7fc fd4d 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD51C,0x02);
 80046ea:	2102      	movs	r1, #2
 80046ec:	f24d 501c 	movw	r0, #54556	; 0xd51c
 80046f0:	f7fc fd48 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD51D,0x34);
 80046f4:	2134      	movs	r1, #52	; 0x34
 80046f6:	f24d 501d 	movw	r0, #54557	; 0xd51d
 80046fa:	f7fc fd43 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD51E,0x02);
 80046fe:	2102      	movs	r1, #2
 8004700:	f24d 501e 	movw	r0, #54558	; 0xd51e
 8004704:	f7fc fd3e 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD51F,0x67);
 8004708:	2167      	movs	r1, #103	; 0x67
 800470a:	f24d 501f 	movw	r0, #54559	; 0xd51f
 800470e:	f7fc fd39 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD520,0x02);
 8004712:	2102      	movs	r1, #2
 8004714:	f24d 5020 	movw	r0, #54560	; 0xd520
 8004718:	f7fc fd34 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD521,0x84);
 800471c:	2184      	movs	r1, #132	; 0x84
 800471e:	f24d 5021 	movw	r0, #54561	; 0xd521
 8004722:	f7fc fd2f 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD522,0x02);
 8004726:	2102      	movs	r1, #2
 8004728:	f24d 5022 	movw	r0, #54562	; 0xd522
 800472c:	f7fc fd2a 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD523,0xA4);
 8004730:	21a4      	movs	r1, #164	; 0xa4
 8004732:	f24d 5023 	movw	r0, #54563	; 0xd523
 8004736:	f7fc fd25 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD524,0x02);
 800473a:	2102      	movs	r1, #2
 800473c:	f24d 5024 	movw	r0, #54564	; 0xd524
 8004740:	f7fc fd20 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD525,0xB7);
 8004744:	21b7      	movs	r1, #183	; 0xb7
 8004746:	f24d 5025 	movw	r0, #54565	; 0xd525
 800474a:	f7fc fd1b 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD526,0x02);
 800474e:	2102      	movs	r1, #2
 8004750:	f24d 5026 	movw	r0, #54566	; 0xd526
 8004754:	f7fc fd16 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD527,0xCF);
 8004758:	21cf      	movs	r1, #207	; 0xcf
 800475a:	f24d 5027 	movw	r0, #54567	; 0xd527
 800475e:	f7fc fd11 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD528,0x02);
 8004762:	2102      	movs	r1, #2
 8004764:	f24d 5028 	movw	r0, #54568	; 0xd528
 8004768:	f7fc fd0c 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD529,0xDE);
 800476c:	21de      	movs	r1, #222	; 0xde
 800476e:	f24d 5029 	movw	r0, #54569	; 0xd529
 8004772:	f7fc fd07 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD52A,0x02);
 8004776:	2102      	movs	r1, #2
 8004778:	f24d 502a 	movw	r0, #54570	; 0xd52a
 800477c:	f7fc fd02 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD52B,0xF2);
 8004780:	21f2      	movs	r1, #242	; 0xf2
 8004782:	f24d 502b 	movw	r0, #54571	; 0xd52b
 8004786:	f7fc fcfd 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD52C,0x02);
 800478a:	2102      	movs	r1, #2
 800478c:	f24d 502c 	movw	r0, #54572	; 0xd52c
 8004790:	f7fc fcf8 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD52D,0xFE);
 8004794:	21fe      	movs	r1, #254	; 0xfe
 8004796:	f24d 502d 	movw	r0, #54573	; 0xd52d
 800479a:	f7fc fcf3 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD52E,0x03);
 800479e:	2103      	movs	r1, #3
 80047a0:	f24d 502e 	movw	r0, #54574	; 0xd52e
 80047a4:	f7fc fcee 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD52F,0x10);
 80047a8:	2110      	movs	r1, #16
 80047aa:	f24d 502f 	movw	r0, #54575	; 0xd52f
 80047ae:	f7fc fce9 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD530,0x03);
 80047b2:	2103      	movs	r1, #3
 80047b4:	f24d 5030 	movw	r0, #54576	; 0xd530
 80047b8:	f7fc fce4 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD531,0x33);
 80047bc:	2133      	movs	r1, #51	; 0x33
 80047be:	f24d 5031 	movw	r0, #54577	; 0xd531
 80047c2:	f7fc fcdf 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD532,0x03);
 80047c6:	2103      	movs	r1, #3
 80047c8:	f24d 5032 	movw	r0, #54578	; 0xd532
 80047cc:	f7fc fcda 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD533,0x6D);
 80047d0:	216d      	movs	r1, #109	; 0x6d
 80047d2:	f24d 5033 	movw	r0, #54579	; 0xd533
 80047d6:	f7fc fcd5 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD600,0x00);
 80047da:	2100      	movs	r1, #0
 80047dc:	f44f 4056 	mov.w	r0, #54784	; 0xd600
 80047e0:	f7fc fcd0 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD601,0x33);
 80047e4:	2133      	movs	r1, #51	; 0x33
 80047e6:	f24d 6001 	movw	r0, #54785	; 0xd601
 80047ea:	f7fc fccb 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD602,0x00);
 80047ee:	2100      	movs	r1, #0
 80047f0:	f24d 6002 	movw	r0, #54786	; 0xd602
 80047f4:	f7fc fcc6 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD603,0x34);
 80047f8:	2134      	movs	r1, #52	; 0x34
 80047fa:	f24d 6003 	movw	r0, #54787	; 0xd603
 80047fe:	f7fc fcc1 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD604,0x00);
 8004802:	2100      	movs	r1, #0
 8004804:	f24d 6004 	movw	r0, #54788	; 0xd604
 8004808:	f7fc fcbc 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD605,0x3A);
 800480c:	213a      	movs	r1, #58	; 0x3a
 800480e:	f24d 6005 	movw	r0, #54789	; 0xd605
 8004812:	f7fc fcb7 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD606,0x00);
 8004816:	2100      	movs	r1, #0
 8004818:	f24d 6006 	movw	r0, #54790	; 0xd606
 800481c:	f7fc fcb2 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD607,0x4A);
 8004820:	214a      	movs	r1, #74	; 0x4a
 8004822:	f24d 6007 	movw	r0, #54791	; 0xd607
 8004826:	f7fc fcad 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD608,0x00);
 800482a:	2100      	movs	r1, #0
 800482c:	f24d 6008 	movw	r0, #54792	; 0xd608
 8004830:	f7fc fca8 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD609,0x5C);
 8004834:	215c      	movs	r1, #92	; 0x5c
 8004836:	f24d 6009 	movw	r0, #54793	; 0xd609
 800483a:	f7fc fca3 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD60A,0x00);
 800483e:	2100      	movs	r1, #0
 8004840:	f24d 600a 	movw	r0, #54794	; 0xd60a
 8004844:	f7fc fc9e 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD60B,0x81);
 8004848:	2181      	movs	r1, #129	; 0x81
 800484a:	f24d 600b 	movw	r0, #54795	; 0xd60b
 800484e:	f7fc fc99 	bl	8001184 <LCD_WriteReg>

		LCD_WriteReg(0xD60C,0x00);
 8004852:	2100      	movs	r1, #0
 8004854:	f24d 600c 	movw	r0, #54796	; 0xd60c
 8004858:	f7fc fc94 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD60D,0xA6);
 800485c:	21a6      	movs	r1, #166	; 0xa6
 800485e:	f24d 600d 	movw	r0, #54797	; 0xd60d
 8004862:	f7fc fc8f 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD60E,0x00);
 8004866:	2100      	movs	r1, #0
 8004868:	f24d 600e 	movw	r0, #54798	; 0xd60e
 800486c:	f7fc fc8a 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD60F,0xE5);
 8004870:	21e5      	movs	r1, #229	; 0xe5
 8004872:	f24d 600f 	movw	r0, #54799	; 0xd60f
 8004876:	f7fc fc85 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD610,0x01);
 800487a:	2101      	movs	r1, #1
 800487c:	f24d 6010 	movw	r0, #54800	; 0xd610
 8004880:	f7fc fc80 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD611,0x13);
 8004884:	2113      	movs	r1, #19
 8004886:	f24d 6011 	movw	r0, #54801	; 0xd611
 800488a:	f7fc fc7b 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD612,0x01);
 800488e:	2101      	movs	r1, #1
 8004890:	f24d 6012 	movw	r0, #54802	; 0xd612
 8004894:	f7fc fc76 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD613,0x54);
 8004898:	2154      	movs	r1, #84	; 0x54
 800489a:	f24d 6013 	movw	r0, #54803	; 0xd613
 800489e:	f7fc fc71 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD614,0x01);
 80048a2:	2101      	movs	r1, #1
 80048a4:	f24d 6014 	movw	r0, #54804	; 0xd614
 80048a8:	f7fc fc6c 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD615,0x82);
 80048ac:	2182      	movs	r1, #130	; 0x82
 80048ae:	f24d 6015 	movw	r0, #54805	; 0xd615
 80048b2:	f7fc fc67 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD616,0x01);
 80048b6:	2101      	movs	r1, #1
 80048b8:	f24d 6016 	movw	r0, #54806	; 0xd616
 80048bc:	f7fc fc62 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD617,0xCA);
 80048c0:	21ca      	movs	r1, #202	; 0xca
 80048c2:	f24d 6017 	movw	r0, #54807	; 0xd617
 80048c6:	f7fc fc5d 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD618,0x02);
 80048ca:	2102      	movs	r1, #2
 80048cc:	f24d 6018 	movw	r0, #54808	; 0xd618
 80048d0:	f7fc fc58 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD619,0x00);
 80048d4:	2100      	movs	r1, #0
 80048d6:	f24d 6019 	movw	r0, #54809	; 0xd619
 80048da:	f7fc fc53 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD61A,0x02);
 80048de:	2102      	movs	r1, #2
 80048e0:	f24d 601a 	movw	r0, #54810	; 0xd61a
 80048e4:	f7fc fc4e 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD61B,0x01);
 80048e8:	2101      	movs	r1, #1
 80048ea:	f24d 601b 	movw	r0, #54811	; 0xd61b
 80048ee:	f7fc fc49 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD61C,0x02);
 80048f2:	2102      	movs	r1, #2
 80048f4:	f24d 601c 	movw	r0, #54812	; 0xd61c
 80048f8:	f7fc fc44 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD61D,0x34);
 80048fc:	2134      	movs	r1, #52	; 0x34
 80048fe:	f24d 601d 	movw	r0, #54813	; 0xd61d
 8004902:	f7fc fc3f 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD61E,0x02);
 8004906:	2102      	movs	r1, #2
 8004908:	f24d 601e 	movw	r0, #54814	; 0xd61e
 800490c:	f7fc fc3a 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD61F,0x67);
 8004910:	2167      	movs	r1, #103	; 0x67
 8004912:	f24d 601f 	movw	r0, #54815	; 0xd61f
 8004916:	f7fc fc35 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD620,0x02);
 800491a:	2102      	movs	r1, #2
 800491c:	f24d 6020 	movw	r0, #54816	; 0xd620
 8004920:	f7fc fc30 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD621,0x84);
 8004924:	2184      	movs	r1, #132	; 0x84
 8004926:	f24d 6021 	movw	r0, #54817	; 0xd621
 800492a:	f7fc fc2b 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD622,0x02);
 800492e:	2102      	movs	r1, #2
 8004930:	f24d 6022 	movw	r0, #54818	; 0xd622
 8004934:	f7fc fc26 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD623,0xA4);
 8004938:	21a4      	movs	r1, #164	; 0xa4
 800493a:	f24d 6023 	movw	r0, #54819	; 0xd623
 800493e:	f7fc fc21 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD624,0x02);
 8004942:	2102      	movs	r1, #2
 8004944:	f24d 6024 	movw	r0, #54820	; 0xd624
 8004948:	f7fc fc1c 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD625,0xB7);
 800494c:	21b7      	movs	r1, #183	; 0xb7
 800494e:	f24d 6025 	movw	r0, #54821	; 0xd625
 8004952:	f7fc fc17 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD626,0x02);
 8004956:	2102      	movs	r1, #2
 8004958:	f24d 6026 	movw	r0, #54822	; 0xd626
 800495c:	f7fc fc12 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD627,0xCF);
 8004960:	21cf      	movs	r1, #207	; 0xcf
 8004962:	f24d 6027 	movw	r0, #54823	; 0xd627
 8004966:	f7fc fc0d 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD628,0x02);
 800496a:	2102      	movs	r1, #2
 800496c:	f24d 6028 	movw	r0, #54824	; 0xd628
 8004970:	f7fc fc08 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD629,0xDE);
 8004974:	21de      	movs	r1, #222	; 0xde
 8004976:	f24d 6029 	movw	r0, #54825	; 0xd629
 800497a:	f7fc fc03 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD62A,0x02);
 800497e:	2102      	movs	r1, #2
 8004980:	f24d 602a 	movw	r0, #54826	; 0xd62a
 8004984:	f7fc fbfe 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD62B,0xF2);
 8004988:	21f2      	movs	r1, #242	; 0xf2
 800498a:	f24d 602b 	movw	r0, #54827	; 0xd62b
 800498e:	f7fc fbf9 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD62C,0x02);
 8004992:	2102      	movs	r1, #2
 8004994:	f24d 602c 	movw	r0, #54828	; 0xd62c
 8004998:	f7fc fbf4 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD62D,0xFE);
 800499c:	21fe      	movs	r1, #254	; 0xfe
 800499e:	f24d 602d 	movw	r0, #54829	; 0xd62d
 80049a2:	f7fc fbef 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD62E,0x03);
 80049a6:	2103      	movs	r1, #3
 80049a8:	f24d 602e 	movw	r0, #54830	; 0xd62e
 80049ac:	f7fc fbea 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD62F,0x10);
 80049b0:	2110      	movs	r1, #16
 80049b2:	f24d 602f 	movw	r0, #54831	; 0xd62f
 80049b6:	f7fc fbe5 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD630,0x03);
 80049ba:	2103      	movs	r1, #3
 80049bc:	f24d 6030 	movw	r0, #54832	; 0xd630
 80049c0:	f7fc fbe0 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD631,0x33);
 80049c4:	2133      	movs	r1, #51	; 0x33
 80049c6:	f24d 6031 	movw	r0, #54833	; 0xd631
 80049ca:	f7fc fbdb 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD632,0x03);
 80049ce:	2103      	movs	r1, #3
 80049d0:	f24d 6032 	movw	r0, #54834	; 0xd632
 80049d4:	f7fc fbd6 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xD633,0x6D);
 80049d8:	216d      	movs	r1, #109	; 0x6d
 80049da:	f24d 6033 	movw	r0, #54835	; 0xd633
 80049de:	f7fc fbd1 	bl	8001184 <LCD_WriteReg>
		//LV2 Page 0 enable
		LCD_WriteReg(0xF000,0x55);
 80049e2:	2155      	movs	r1, #85	; 0x55
 80049e4:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 80049e8:	f7fc fbcc 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xF001,0xAA);
 80049ec:	21aa      	movs	r1, #170	; 0xaa
 80049ee:	f24f 0001 	movw	r0, #61441	; 0xf001
 80049f2:	f7fc fbc7 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xF002,0x52);
 80049f6:	2152      	movs	r1, #82	; 0x52
 80049f8:	f24f 0002 	movw	r0, #61442	; 0xf002
 80049fc:	f7fc fbc2 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xF003,0x08);
 8004a00:	2108      	movs	r1, #8
 8004a02:	f24f 0003 	movw	r0, #61443	; 0xf003
 8004a06:	f7fc fbbd 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xF004,0x00);
 8004a0a:	2100      	movs	r1, #0
 8004a0c:	f24f 0004 	movw	r0, #61444	; 0xf004
 8004a10:	f7fc fbb8 	bl	8001184 <LCD_WriteReg>
		//Display control
		LCD_WriteReg(0xB100, 0xCC);
 8004a14:	21cc      	movs	r1, #204	; 0xcc
 8004a16:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8004a1a:	f7fc fbb3 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x00);
 8004a1e:	2100      	movs	r1, #0
 8004a20:	f24b 1001 	movw	r0, #45313	; 0xb101
 8004a24:	f7fc fbae 	bl	8001184 <LCD_WriteReg>
		//Source hold time
		LCD_WriteReg(0xB600,0x05);
 8004a28:	2105      	movs	r1, #5
 8004a2a:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 8004a2e:	f7fc fba9 	bl	8001184 <LCD_WriteReg>
		//Gate EQ control
		LCD_WriteReg(0xB700,0x70);
 8004a32:	2170      	movs	r1, #112	; 0x70
 8004a34:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8004a38:	f7fc fba4 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xB701,0x70);
 8004a3c:	2170      	movs	r1, #112	; 0x70
 8004a3e:	f24b 7001 	movw	r0, #46849	; 0xb701
 8004a42:	f7fc fb9f 	bl	8001184 <LCD_WriteReg>
		//Source EQ control (Mode 2)
		LCD_WriteReg(0xB800,0x01);
 8004a46:	2101      	movs	r1, #1
 8004a48:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 8004a4c:	f7fc fb9a 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xB801,0x03);
 8004a50:	2103      	movs	r1, #3
 8004a52:	f64b 0001 	movw	r0, #47105	; 0xb801
 8004a56:	f7fc fb95 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xB802,0x03);
 8004a5a:	2103      	movs	r1, #3
 8004a5c:	f64b 0002 	movw	r0, #47106	; 0xb802
 8004a60:	f7fc fb90 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xB803,0x03);
 8004a64:	2103      	movs	r1, #3
 8004a66:	f64b 0003 	movw	r0, #47107	; 0xb803
 8004a6a:	f7fc fb8b 	bl	8001184 <LCD_WriteReg>
		//Inversion mode (2-dot)
		LCD_WriteReg(0xBC00,0x02);
 8004a6e:	2102      	movs	r1, #2
 8004a70:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8004a74:	f7fc fb86 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xBC01,0x00);
 8004a78:	2100      	movs	r1, #0
 8004a7a:	f64b 4001 	movw	r0, #48129	; 0xbc01
 8004a7e:	f7fc fb81 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xBC02,0x00);
 8004a82:	2100      	movs	r1, #0
 8004a84:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8004a88:	f7fc fb7c 	bl	8001184 <LCD_WriteReg>
		//Timing control 4H w/ 4-delay
		LCD_WriteReg(0xC900,0xD0);
 8004a8c:	21d0      	movs	r1, #208	; 0xd0
 8004a8e:	f44f 4049 	mov.w	r0, #51456	; 0xc900
 8004a92:	f7fc fb77 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xC901,0x02);
 8004a96:	2102      	movs	r1, #2
 8004a98:	f64c 1001 	movw	r0, #51457	; 0xc901
 8004a9c:	f7fc fb72 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xC902,0x50);
 8004aa0:	2150      	movs	r1, #80	; 0x50
 8004aa2:	f64c 1002 	movw	r0, #51458	; 0xc902
 8004aa6:	f7fc fb6d 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xC903,0x50);
 8004aaa:	2150      	movs	r1, #80	; 0x50
 8004aac:	f64c 1003 	movw	r0, #51459	; 0xc903
 8004ab0:	f7fc fb68 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xC904,0x50);
 8004ab4:	2150      	movs	r1, #80	; 0x50
 8004ab6:	f64c 1004 	movw	r0, #51460	; 0xc904
 8004aba:	f7fc fb63 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x3500,0x00);
 8004abe:	2100      	movs	r1, #0
 8004ac0:	f44f 5054 	mov.w	r0, #13568	; 0x3500
 8004ac4:	f7fc fb5e 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x3A00,0x55);  //16-bit/pixel
 8004ac8:	2155      	movs	r1, #85	; 0x55
 8004aca:	f44f 5068 	mov.w	r0, #14848	; 0x3a00
 8004ace:	f7fc fb59 	bl	8001184 <LCD_WriteReg>
		LCD_WR_REG(0x1100);
 8004ad2:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 8004ad6:	f7fc fac9 	bl	800106c <LCD_WR_REG>
		delay_us(120);
 8004ada:	2078      	movs	r0, #120	; 0x78
 8004adc:	f7fc f9ba 	bl	8000e54 <delay_us>
		LCD_WR_REG(0x2900);
 8004ae0:	f44f 5024 	mov.w	r0, #10496	; 0x2900
 8004ae4:	f7fc fac2 	bl	800106c <LCD_WR_REG>
 8004ae8:	f001 bd18 	b.w	800651c <LCD_Init+0x3e64>
	}else if(lcddev.id==0x9325)//9325
 8004aec:	4bec      	ldr	r3, [pc, #944]	; (8004ea0 <LCD_Init+0x27e8>)
 8004aee:	889b      	ldrh	r3, [r3, #4]
 8004af0:	f249 3225 	movw	r2, #37669	; 0x9325
 8004af4:	4293      	cmp	r3, r2
 8004af6:	f040 80d7 	bne.w	8004ca8 <LCD_Init+0x25f0>
	{
		LCD_WriteReg(0x00E5,0x78F0); 
 8004afa:	f647 01f0 	movw	r1, #30960	; 0x78f0
 8004afe:	20e5      	movs	r0, #229	; 0xe5
 8004b00:	f7fc fb40 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0001,0x0100); 
 8004b04:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004b08:	2001      	movs	r0, #1
 8004b0a:	f7fc fb3b 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0002,0x0700); 
 8004b0e:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004b12:	2002      	movs	r0, #2
 8004b14:	f7fc fb36 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0003,0x1030); 
 8004b18:	f241 0130 	movw	r1, #4144	; 0x1030
 8004b1c:	2003      	movs	r0, #3
 8004b1e:	f7fc fb31 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0004,0x0000); 
 8004b22:	2100      	movs	r1, #0
 8004b24:	2004      	movs	r0, #4
 8004b26:	f7fc fb2d 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0008,0x0202);  
 8004b2a:	f240 2102 	movw	r1, #514	; 0x202
 8004b2e:	2008      	movs	r0, #8
 8004b30:	f7fc fb28 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0009,0x0000);
 8004b34:	2100      	movs	r1, #0
 8004b36:	2009      	movs	r0, #9
 8004b38:	f7fc fb24 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x000A,0x0000); 
 8004b3c:	2100      	movs	r1, #0
 8004b3e:	200a      	movs	r0, #10
 8004b40:	f7fc fb20 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x000C,0x0000); 
 8004b44:	2100      	movs	r1, #0
 8004b46:	200c      	movs	r0, #12
 8004b48:	f7fc fb1c 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x000D,0x0000);
 8004b4c:	2100      	movs	r1, #0
 8004b4e:	200d      	movs	r0, #13
 8004b50:	f7fc fb18 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x000F,0x0000);
 8004b54:	2100      	movs	r1, #0
 8004b56:	200f      	movs	r0, #15
 8004b58:	f7fc fb14 	bl	8001184 <LCD_WriteReg>
		//power on sequence VGHVGL
		LCD_WriteReg(0x0010,0x0000);   
 8004b5c:	2100      	movs	r1, #0
 8004b5e:	2010      	movs	r0, #16
 8004b60:	f7fc fb10 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0011,0x0007);  
 8004b64:	2107      	movs	r1, #7
 8004b66:	2011      	movs	r0, #17
 8004b68:	f7fc fb0c 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0012,0x0000);  
 8004b6c:	2100      	movs	r1, #0
 8004b6e:	2012      	movs	r0, #18
 8004b70:	f7fc fb08 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0013,0x0000); 
 8004b74:	2100      	movs	r1, #0
 8004b76:	2013      	movs	r0, #19
 8004b78:	f7fc fb04 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0007,0x0000); 
 8004b7c:	2100      	movs	r1, #0
 8004b7e:	2007      	movs	r0, #7
 8004b80:	f7fc fb00 	bl	8001184 <LCD_WriteReg>
		//vgh 
		LCD_WriteReg(0x0010,0x1690);   
 8004b84:	f241 6190 	movw	r1, #5776	; 0x1690
 8004b88:	2010      	movs	r0, #16
 8004b8a:	f7fc fafb 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0011,0x0227);
 8004b8e:	f240 2127 	movw	r1, #551	; 0x227
 8004b92:	2011      	movs	r0, #17
 8004b94:	f7fc faf6 	bl	8001184 <LCD_WriteReg>
		//delayms(100);
		//vregiout 
		LCD_WriteReg(0x0012,0x009D); //0x001b
 8004b98:	219d      	movs	r1, #157	; 0x9d
 8004b9a:	2012      	movs	r0, #18
 8004b9c:	f7fc faf2 	bl	8001184 <LCD_WriteReg>
		//delayms(100); 
		//vom amplitude
		LCD_WriteReg(0x0013,0x1900);
 8004ba0:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 8004ba4:	2013      	movs	r0, #19
 8004ba6:	f7fc faed 	bl	8001184 <LCD_WriteReg>
		//delayms(100); 
		//vom H
		LCD_WriteReg(0x0029,0x0025); 
 8004baa:	2125      	movs	r1, #37	; 0x25
 8004bac:	2029      	movs	r0, #41	; 0x29
 8004bae:	f7fc fae9 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x002B,0x000D); 
 8004bb2:	210d      	movs	r1, #13
 8004bb4:	202b      	movs	r0, #43	; 0x2b
 8004bb6:	f7fc fae5 	bl	8001184 <LCD_WriteReg>
		//gamma
		LCD_WriteReg(0x0030,0x0007);
 8004bba:	2107      	movs	r1, #7
 8004bbc:	2030      	movs	r0, #48	; 0x30
 8004bbe:	f7fc fae1 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0031,0x0303);
 8004bc2:	f240 3103 	movw	r1, #771	; 0x303
 8004bc6:	2031      	movs	r0, #49	; 0x31
 8004bc8:	f7fc fadc 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0032,0x0003);// 0006
 8004bcc:	2103      	movs	r1, #3
 8004bce:	2032      	movs	r0, #50	; 0x32
 8004bd0:	f7fc fad8 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0035,0x0206);
 8004bd4:	f240 2106 	movw	r1, #518	; 0x206
 8004bd8:	2035      	movs	r0, #53	; 0x35
 8004bda:	f7fc fad3 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0036,0x0008);
 8004bde:	2108      	movs	r1, #8
 8004be0:	2036      	movs	r0, #54	; 0x36
 8004be2:	f7fc facf 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0037,0x0406); 
 8004be6:	f240 4106 	movw	r1, #1030	; 0x406
 8004bea:	2037      	movs	r0, #55	; 0x37
 8004bec:	f7fc faca 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0038,0x0304);//0200
 8004bf0:	f44f 7141 	mov.w	r1, #772	; 0x304
 8004bf4:	2038      	movs	r0, #56	; 0x38
 8004bf6:	f7fc fac5 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0039,0x0007); 
 8004bfa:	2107      	movs	r1, #7
 8004bfc:	2039      	movs	r0, #57	; 0x39
 8004bfe:	f7fc fac1 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x003C,0x0602);// 0504
 8004c02:	f240 6102 	movw	r1, #1538	; 0x602
 8004c06:	203c      	movs	r0, #60	; 0x3c
 8004c08:	f7fc fabc 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x003D,0x0008); 
 8004c0c:	2108      	movs	r1, #8
 8004c0e:	203d      	movs	r0, #61	; 0x3d
 8004c10:	f7fc fab8 	bl	8001184 <LCD_WriteReg>
		//ram
		LCD_WriteReg(0x0050,0x0000); 
 8004c14:	2100      	movs	r1, #0
 8004c16:	2050      	movs	r0, #80	; 0x50
 8004c18:	f7fc fab4 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0051,0x00EF);
 8004c1c:	21ef      	movs	r1, #239	; 0xef
 8004c1e:	2051      	movs	r0, #81	; 0x51
 8004c20:	f7fc fab0 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0052,0x0000); 
 8004c24:	2100      	movs	r1, #0
 8004c26:	2052      	movs	r0, #82	; 0x52
 8004c28:	f7fc faac 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0053,0x013F);  
 8004c2c:	f240 113f 	movw	r1, #319	; 0x13f
 8004c30:	2053      	movs	r0, #83	; 0x53
 8004c32:	f7fc faa7 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0060,0xA700); 
 8004c36:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 8004c3a:	2060      	movs	r0, #96	; 0x60
 8004c3c:	f7fc faa2 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0061,0x0001); 
 8004c40:	2101      	movs	r1, #1
 8004c42:	2061      	movs	r0, #97	; 0x61
 8004c44:	f7fc fa9e 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x006A,0x0000); 
 8004c48:	2100      	movs	r1, #0
 8004c4a:	206a      	movs	r0, #106	; 0x6a
 8004c4c:	f7fc fa9a 	bl	8001184 <LCD_WriteReg>
		//
		LCD_WriteReg(0x0080,0x0000); 
 8004c50:	2100      	movs	r1, #0
 8004c52:	2080      	movs	r0, #128	; 0x80
 8004c54:	f7fc fa96 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0081,0x0000); 
 8004c58:	2100      	movs	r1, #0
 8004c5a:	2081      	movs	r0, #129	; 0x81
 8004c5c:	f7fc fa92 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0082,0x0000); 
 8004c60:	2100      	movs	r1, #0
 8004c62:	2082      	movs	r0, #130	; 0x82
 8004c64:	f7fc fa8e 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0083,0x0000); 
 8004c68:	2100      	movs	r1, #0
 8004c6a:	2083      	movs	r0, #131	; 0x83
 8004c6c:	f7fc fa8a 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0084,0x0000); 
 8004c70:	2100      	movs	r1, #0
 8004c72:	2084      	movs	r0, #132	; 0x84
 8004c74:	f7fc fa86 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0085,0x0000); 
 8004c78:	2100      	movs	r1, #0
 8004c7a:	2085      	movs	r0, #133	; 0x85
 8004c7c:	f7fc fa82 	bl	8001184 <LCD_WriteReg>
		//
		LCD_WriteReg(0x0090,0x0010); 
 8004c80:	2110      	movs	r1, #16
 8004c82:	2090      	movs	r0, #144	; 0x90
 8004c84:	f7fc fa7e 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0092,0x0600); 
 8004c88:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004c8c:	2092      	movs	r0, #146	; 0x92
 8004c8e:	f7fc fa79 	bl	8001184 <LCD_WriteReg>
		
		LCD_WriteReg(0x0007,0x0133);
 8004c92:	f240 1133 	movw	r1, #307	; 0x133
 8004c96:	2007      	movs	r0, #7
 8004c98:	f7fc fa74 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x00,0x0022);//
 8004c9c:	2122      	movs	r1, #34	; 0x22
 8004c9e:	2000      	movs	r0, #0
 8004ca0:	f7fc fa70 	bl	8001184 <LCD_WriteReg>
 8004ca4:	f001 bc3a 	b.w	800651c <LCD_Init+0x3e64>
	}else if(lcddev.id==0x9328)//ILI9328   OK  
 8004ca8:	4b7d      	ldr	r3, [pc, #500]	; (8004ea0 <LCD_Init+0x27e8>)
 8004caa:	889b      	ldrh	r3, [r3, #4]
 8004cac:	f249 3228 	movw	r2, #37672	; 0x9328
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	f040 80f7 	bne.w	8004ea4 <LCD_Init+0x27ec>
	{
  		LCD_WriteReg(0x00EC,0x108F);// internal timeing      
 8004cb6:	f241 018f 	movw	r1, #4239	; 0x108f
 8004cba:	20ec      	movs	r0, #236	; 0xec
 8004cbc:	f7fc fa62 	bl	8001184 <LCD_WriteReg>
 		LCD_WriteReg(0x00EF,0x1234);// ADD        
 8004cc0:	f241 2134 	movw	r1, #4660	; 0x1234
 8004cc4:	20ef      	movs	r0, #239	; 0xef
 8004cc6:	f7fc fa5d 	bl	8001184 <LCD_WriteReg>
		//LCD_WriteReg(0x00e7,0x0010);      
        //LCD_WriteReg(0x0000,0x0001);//�����ڲ�ʱ��
        LCD_WriteReg(0x0001,0x0100);     
 8004cca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004cce:	2001      	movs	r0, #1
 8004cd0:	f7fc fa58 	bl	8001184 <LCD_WriteReg>
        LCD_WriteReg(0x0002,0x0700);//��Դ����                    
 8004cd4:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004cd8:	2002      	movs	r0, #2
 8004cda:	f7fc fa53 	bl	8001184 <LCD_WriteReg>
		// 1  1   0    D->U	L->R
		// 0  0   1	   R->L U->D
		// 1  0   1    U->D	R->L
		// 0  1   1    L->R U->D �����������.
		// 1  1   1	   U->D	L->R
        LCD_WriteReg(0x0003,(1<<12)|(3<<4)|(0<<3) );//65K    
 8004cde:	f241 0130 	movw	r1, #4144	; 0x1030
 8004ce2:	2003      	movs	r0, #3
 8004ce4:	f7fc fa4e 	bl	8001184 <LCD_WriteReg>
        LCD_WriteReg(0x0004,0x0000);                                   
 8004ce8:	2100      	movs	r1, #0
 8004cea:	2004      	movs	r0, #4
 8004cec:	f7fc fa4a 	bl	8001184 <LCD_WriteReg>
        LCD_WriteReg(0x0008,0x0202);	           
 8004cf0:	f240 2102 	movw	r1, #514	; 0x202
 8004cf4:	2008      	movs	r0, #8
 8004cf6:	f7fc fa45 	bl	8001184 <LCD_WriteReg>
        LCD_WriteReg(0x0009,0x0000);         
 8004cfa:	2100      	movs	r1, #0
 8004cfc:	2009      	movs	r0, #9
 8004cfe:	f7fc fa41 	bl	8001184 <LCD_WriteReg>
        LCD_WriteReg(0x000a,0x0000);//display setting         
 8004d02:	2100      	movs	r1, #0
 8004d04:	200a      	movs	r0, #10
 8004d06:	f7fc fa3d 	bl	8001184 <LCD_WriteReg>
        LCD_WriteReg(0x000c,0x0001);//display setting          
 8004d0a:	2101      	movs	r1, #1
 8004d0c:	200c      	movs	r0, #12
 8004d0e:	f7fc fa39 	bl	8001184 <LCD_WriteReg>
        LCD_WriteReg(0x000d,0x0000);//0f3c          
 8004d12:	2100      	movs	r1, #0
 8004d14:	200d      	movs	r0, #13
 8004d16:	f7fc fa35 	bl	8001184 <LCD_WriteReg>
        LCD_WriteReg(0x000f,0x0000);
 8004d1a:	2100      	movs	r1, #0
 8004d1c:	200f      	movs	r0, #15
 8004d1e:	f7fc fa31 	bl	8001184 <LCD_WriteReg>
		//��Դ����
        LCD_WriteReg(0x0010,0x0000);   
 8004d22:	2100      	movs	r1, #0
 8004d24:	2010      	movs	r0, #16
 8004d26:	f7fc fa2d 	bl	8001184 <LCD_WriteReg>
        LCD_WriteReg(0x0011,0x0007);
 8004d2a:	2107      	movs	r1, #7
 8004d2c:	2011      	movs	r0, #17
 8004d2e:	f7fc fa29 	bl	8001184 <LCD_WriteReg>
        LCD_WriteReg(0x0012,0x0000);                                                                 
 8004d32:	2100      	movs	r1, #0
 8004d34:	2012      	movs	r0, #18
 8004d36:	f7fc fa25 	bl	8001184 <LCD_WriteReg>
        LCD_WriteReg(0x0013,0x0000);                 
 8004d3a:	2100      	movs	r1, #0
 8004d3c:	2013      	movs	r0, #19
 8004d3e:	f7fc fa21 	bl	8001184 <LCD_WriteReg>
     	LCD_WriteReg(0x0007,0x0001);                 
 8004d42:	2101      	movs	r1, #1
 8004d44:	2007      	movs	r0, #7
 8004d46:	f7fc fa1d 	bl	8001184 <LCD_WriteReg>
       	delay_ms(50); 
 8004d4a:	2032      	movs	r0, #50	; 0x32
 8004d4c:	f7fc f8c0 	bl	8000ed0 <delay_ms>
        LCD_WriteReg(0x0010,0x1490);   
 8004d50:	f241 4190 	movw	r1, #5264	; 0x1490
 8004d54:	2010      	movs	r0, #16
 8004d56:	f7fc fa15 	bl	8001184 <LCD_WriteReg>
        LCD_WriteReg(0x0011,0x0227);
 8004d5a:	f240 2127 	movw	r1, #551	; 0x227
 8004d5e:	2011      	movs	r0, #17
 8004d60:	f7fc fa10 	bl	8001184 <LCD_WriteReg>
        delay_ms(50); 
 8004d64:	2032      	movs	r0, #50	; 0x32
 8004d66:	f7fc f8b3 	bl	8000ed0 <delay_ms>
        LCD_WriteReg(0x0012,0x008A);                  
 8004d6a:	218a      	movs	r1, #138	; 0x8a
 8004d6c:	2012      	movs	r0, #18
 8004d6e:	f7fc fa09 	bl	8001184 <LCD_WriteReg>
        delay_ms(50); 
 8004d72:	2032      	movs	r0, #50	; 0x32
 8004d74:	f7fc f8ac 	bl	8000ed0 <delay_ms>
        LCD_WriteReg(0x0013,0x1a00);   
 8004d78:	f44f 51d0 	mov.w	r1, #6656	; 0x1a00
 8004d7c:	2013      	movs	r0, #19
 8004d7e:	f7fc fa01 	bl	8001184 <LCD_WriteReg>
        LCD_WriteReg(0x0029,0x0006);
 8004d82:	2106      	movs	r1, #6
 8004d84:	2029      	movs	r0, #41	; 0x29
 8004d86:	f7fc f9fd 	bl	8001184 <LCD_WriteReg>
        LCD_WriteReg(0x002b,0x000d);
 8004d8a:	210d      	movs	r1, #13
 8004d8c:	202b      	movs	r0, #43	; 0x2b
 8004d8e:	f7fc f9f9 	bl	8001184 <LCD_WriteReg>
        delay_ms(50); 
 8004d92:	2032      	movs	r0, #50	; 0x32
 8004d94:	f7fc f89c 	bl	8000ed0 <delay_ms>
        LCD_WriteReg(0x0020,0x0000);                                                            
 8004d98:	2100      	movs	r1, #0
 8004d9a:	2020      	movs	r0, #32
 8004d9c:	f7fc f9f2 	bl	8001184 <LCD_WriteReg>
        LCD_WriteReg(0x0021,0x0000);           
 8004da0:	2100      	movs	r1, #0
 8004da2:	2021      	movs	r0, #33	; 0x21
 8004da4:	f7fc f9ee 	bl	8001184 <LCD_WriteReg>
		delay_ms(50); 
 8004da8:	2032      	movs	r0, #50	; 0x32
 8004daa:	f7fc f891 	bl	8000ed0 <delay_ms>
		//٤��У��
        LCD_WriteReg(0x0030,0x0000); 
 8004dae:	2100      	movs	r1, #0
 8004db0:	2030      	movs	r0, #48	; 0x30
 8004db2:	f7fc f9e7 	bl	8001184 <LCD_WriteReg>
        LCD_WriteReg(0x0031,0x0604);   
 8004db6:	f240 6104 	movw	r1, #1540	; 0x604
 8004dba:	2031      	movs	r0, #49	; 0x31
 8004dbc:	f7fc f9e2 	bl	8001184 <LCD_WriteReg>
        LCD_WriteReg(0x0032,0x0305);
 8004dc0:	f240 3105 	movw	r1, #773	; 0x305
 8004dc4:	2032      	movs	r0, #50	; 0x32
 8004dc6:	f7fc f9dd 	bl	8001184 <LCD_WriteReg>
        LCD_WriteReg(0x0035,0x0000);
 8004dca:	2100      	movs	r1, #0
 8004dcc:	2035      	movs	r0, #53	; 0x35
 8004dce:	f7fc f9d9 	bl	8001184 <LCD_WriteReg>
        LCD_WriteReg(0x0036,0x0C09); 
 8004dd2:	f640 4109 	movw	r1, #3081	; 0xc09
 8004dd6:	2036      	movs	r0, #54	; 0x36
 8004dd8:	f7fc f9d4 	bl	8001184 <LCD_WriteReg>
        LCD_WriteReg(0x0037,0x0204);
 8004ddc:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004de0:	2037      	movs	r0, #55	; 0x37
 8004de2:	f7fc f9cf 	bl	8001184 <LCD_WriteReg>
        LCD_WriteReg(0x0038,0x0301);        
 8004de6:	f240 3101 	movw	r1, #769	; 0x301
 8004dea:	2038      	movs	r0, #56	; 0x38
 8004dec:	f7fc f9ca 	bl	8001184 <LCD_WriteReg>
        LCD_WriteReg(0x0039,0x0707);     
 8004df0:	f240 7107 	movw	r1, #1799	; 0x707
 8004df4:	2039      	movs	r0, #57	; 0x39
 8004df6:	f7fc f9c5 	bl	8001184 <LCD_WriteReg>
        LCD_WriteReg(0x003c,0x0000);
 8004dfa:	2100      	movs	r1, #0
 8004dfc:	203c      	movs	r0, #60	; 0x3c
 8004dfe:	f7fc f9c1 	bl	8001184 <LCD_WriteReg>
        LCD_WriteReg(0x003d,0x0a0a);
 8004e02:	f640 210a 	movw	r1, #2570	; 0xa0a
 8004e06:	203d      	movs	r0, #61	; 0x3d
 8004e08:	f7fc f9bc 	bl	8001184 <LCD_WriteReg>
        delay_ms(50); 
 8004e0c:	2032      	movs	r0, #50	; 0x32
 8004e0e:	f7fc f85f 	bl	8000ed0 <delay_ms>
        LCD_WriteReg(0x0050,0x0000); //ˮƽGRAM��ʼλ�� 
 8004e12:	2100      	movs	r1, #0
 8004e14:	2050      	movs	r0, #80	; 0x50
 8004e16:	f7fc f9b5 	bl	8001184 <LCD_WriteReg>
        LCD_WriteReg(0x0051,0x00ef); //ˮƽGRAM��ֹλ��                    
 8004e1a:	21ef      	movs	r1, #239	; 0xef
 8004e1c:	2051      	movs	r0, #81	; 0x51
 8004e1e:	f7fc f9b1 	bl	8001184 <LCD_WriteReg>
        LCD_WriteReg(0x0052,0x0000); //��ֱGRAM��ʼλ��                    
 8004e22:	2100      	movs	r1, #0
 8004e24:	2052      	movs	r0, #82	; 0x52
 8004e26:	f7fc f9ad 	bl	8001184 <LCD_WriteReg>
        LCD_WriteReg(0x0053,0x013f); //��ֱGRAM��ֹλ��  
 8004e2a:	f240 113f 	movw	r1, #319	; 0x13f
 8004e2e:	2053      	movs	r0, #83	; 0x53
 8004e30:	f7fc f9a8 	bl	8001184 <LCD_WriteReg>
 
         LCD_WriteReg(0x0060,0xa700);        
 8004e34:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 8004e38:	2060      	movs	r0, #96	; 0x60
 8004e3a:	f7fc f9a3 	bl	8001184 <LCD_WriteReg>
        LCD_WriteReg(0x0061,0x0001); 
 8004e3e:	2101      	movs	r1, #1
 8004e40:	2061      	movs	r0, #97	; 0x61
 8004e42:	f7fc f99f 	bl	8001184 <LCD_WriteReg>
        LCD_WriteReg(0x006a,0x0000);
 8004e46:	2100      	movs	r1, #0
 8004e48:	206a      	movs	r0, #106	; 0x6a
 8004e4a:	f7fc f99b 	bl	8001184 <LCD_WriteReg>
        LCD_WriteReg(0x0080,0x0000);
 8004e4e:	2100      	movs	r1, #0
 8004e50:	2080      	movs	r0, #128	; 0x80
 8004e52:	f7fc f997 	bl	8001184 <LCD_WriteReg>
        LCD_WriteReg(0x0081,0x0000);
 8004e56:	2100      	movs	r1, #0
 8004e58:	2081      	movs	r0, #129	; 0x81
 8004e5a:	f7fc f993 	bl	8001184 <LCD_WriteReg>
        LCD_WriteReg(0x0082,0x0000);
 8004e5e:	2100      	movs	r1, #0
 8004e60:	2082      	movs	r0, #130	; 0x82
 8004e62:	f7fc f98f 	bl	8001184 <LCD_WriteReg>
        LCD_WriteReg(0x0083,0x0000);
 8004e66:	2100      	movs	r1, #0
 8004e68:	2083      	movs	r0, #131	; 0x83
 8004e6a:	f7fc f98b 	bl	8001184 <LCD_WriteReg>
        LCD_WriteReg(0x0084,0x0000);
 8004e6e:	2100      	movs	r1, #0
 8004e70:	2084      	movs	r0, #132	; 0x84
 8004e72:	f7fc f987 	bl	8001184 <LCD_WriteReg>
        LCD_WriteReg(0x0085,0x0000);
 8004e76:	2100      	movs	r1, #0
 8004e78:	2085      	movs	r0, #133	; 0x85
 8004e7a:	f7fc f983 	bl	8001184 <LCD_WriteReg>
      
        LCD_WriteReg(0x0090,0x0010);     
 8004e7e:	2110      	movs	r1, #16
 8004e80:	2090      	movs	r0, #144	; 0x90
 8004e82:	f7fc f97f 	bl	8001184 <LCD_WriteReg>
        LCD_WriteReg(0x0092,0x0600);  
 8004e86:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004e8a:	2092      	movs	r0, #146	; 0x92
 8004e8c:	f7fc f97a 	bl	8001184 <LCD_WriteReg>
        //������ʾ����    
        LCD_WriteReg(0x0007,0x0133); 
 8004e90:	f240 1133 	movw	r1, #307	; 0x133
 8004e94:	2007      	movs	r0, #7
 8004e96:	f7fc f975 	bl	8001184 <LCD_WriteReg>
 8004e9a:	f001 bb3f 	b.w	800651c <LCD_Init+0x3e64>
 8004e9e:	bf00      	nop
 8004ea0:	200024f8 	.word	0x200024f8
	}else if(lcddev.id==0x9320)//����OK.
 8004ea4:	4bce      	ldr	r3, [pc, #824]	; (80051e0 <LCD_Init+0x2b28>)
 8004ea6:	889b      	ldrh	r3, [r3, #4]
 8004ea8:	f249 3220 	movw	r2, #37664	; 0x9320
 8004eac:	4293      	cmp	r3, r2
 8004eae:	f040 80ad 	bne.w	800500c <LCD_Init+0x2954>
	{
		LCD_WriteReg(0x00,0x0000);
 8004eb2:	2100      	movs	r1, #0
 8004eb4:	2000      	movs	r0, #0
 8004eb6:	f7fc f965 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x01,0x0100);	//Driver Output Contral.
 8004eba:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004ebe:	2001      	movs	r0, #1
 8004ec0:	f7fc f960 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x02,0x0700);	//LCD Driver Waveform Contral.
 8004ec4:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004ec8:	2002      	movs	r0, #2
 8004eca:	f7fc f95b 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x03,0x1030);//Entry Mode Set.
 8004ece:	f241 0130 	movw	r1, #4144	; 0x1030
 8004ed2:	2003      	movs	r0, #3
 8004ed4:	f7fc f956 	bl	8001184 <LCD_WriteReg>
		//LCD_WriteReg(0x03,0x1018);	//Entry Mode Set.
	
		LCD_WriteReg(0x04,0x0000);	//Scalling Contral.
 8004ed8:	2100      	movs	r1, #0
 8004eda:	2004      	movs	r0, #4
 8004edc:	f7fc f952 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x08,0x0202);	//Display Contral 2.(0x0207)
 8004ee0:	f240 2102 	movw	r1, #514	; 0x202
 8004ee4:	2008      	movs	r0, #8
 8004ee6:	f7fc f94d 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x09,0x0000);	//Display Contral 3.(0x0000)
 8004eea:	2100      	movs	r1, #0
 8004eec:	2009      	movs	r0, #9
 8004eee:	f7fc f949 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0a,0x0000);	//Frame Cycle Contal.(0x0000)
 8004ef2:	2100      	movs	r1, #0
 8004ef4:	200a      	movs	r0, #10
 8004ef6:	f7fc f945 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0c,(1<<0));	//Extern Display Interface Contral 1.(0x0000)
 8004efa:	2101      	movs	r1, #1
 8004efc:	200c      	movs	r0, #12
 8004efe:	f7fc f941 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0d,0x0000);	//Frame Maker Position.
 8004f02:	2100      	movs	r1, #0
 8004f04:	200d      	movs	r0, #13
 8004f06:	f7fc f93d 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0f,0x0000);	//Extern Display Interface Contral 2.	    
 8004f0a:	2100      	movs	r1, #0
 8004f0c:	200f      	movs	r0, #15
 8004f0e:	f7fc f939 	bl	8001184 <LCD_WriteReg>
		delay_ms(50); 
 8004f12:	2032      	movs	r0, #50	; 0x32
 8004f14:	f7fb ffdc 	bl	8000ed0 <delay_ms>
		LCD_WriteReg(0x07,0x0101);	//Display Contral.
 8004f18:	f240 1101 	movw	r1, #257	; 0x101
 8004f1c:	2007      	movs	r0, #7
 8004f1e:	f7fc f931 	bl	8001184 <LCD_WriteReg>
		delay_ms(50); 								  
 8004f22:	2032      	movs	r0, #50	; 0x32
 8004f24:	f7fb ffd4 	bl	8000ed0 <delay_ms>
		LCD_WriteReg(0x10,(1<<12)|(0<<8)|(1<<7)|(1<<6)|(0<<4));	//Power Control 1.(0x16b0)
 8004f28:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 8004f2c:	2010      	movs	r0, #16
 8004f2e:	f7fc f929 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x11,0x0007);								//Power Control 2.(0x0001)
 8004f32:	2107      	movs	r1, #7
 8004f34:	2011      	movs	r0, #17
 8004f36:	f7fc f925 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x12,(1<<8)|(1<<4)|(0<<0));				//Power Control 3.(0x0138)
 8004f3a:	f44f 7188 	mov.w	r1, #272	; 0x110
 8004f3e:	2012      	movs	r0, #18
 8004f40:	f7fc f920 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x13,0x0b00);								//Power Control 4.
 8004f44:	f44f 6130 	mov.w	r1, #2816	; 0xb00
 8004f48:	2013      	movs	r0, #19
 8004f4a:	f7fc f91b 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x29,0x0000);								//Power Control 7.
 8004f4e:	2100      	movs	r1, #0
 8004f50:	2029      	movs	r0, #41	; 0x29
 8004f52:	f7fc f917 	bl	8001184 <LCD_WriteReg>
	
		LCD_WriteReg(0x2b,(1<<14)|(1<<4));	    
 8004f56:	f244 0110 	movw	r1, #16400	; 0x4010
 8004f5a:	202b      	movs	r0, #43	; 0x2b
 8004f5c:	f7fc f912 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x50,0);	//Set X Star
 8004f60:	2100      	movs	r1, #0
 8004f62:	2050      	movs	r0, #80	; 0x50
 8004f64:	f7fc f90e 	bl	8001184 <LCD_WriteReg>
		//ˮƽGRAM��ֹλ��Set X End.
		LCD_WriteReg(0x51,239);	//Set Y Star
 8004f68:	21ef      	movs	r1, #239	; 0xef
 8004f6a:	2051      	movs	r0, #81	; 0x51
 8004f6c:	f7fc f90a 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x52,0);	//Set Y End.t.
 8004f70:	2100      	movs	r1, #0
 8004f72:	2052      	movs	r0, #82	; 0x52
 8004f74:	f7fc f906 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x53,319);	//
 8004f78:	f240 113f 	movw	r1, #319	; 0x13f
 8004f7c:	2053      	movs	r0, #83	; 0x53
 8004f7e:	f7fc f901 	bl	8001184 <LCD_WriteReg>
	
		LCD_WriteReg(0x60,0x2700);	//Driver Output Control.
 8004f82:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004f86:	2060      	movs	r0, #96	; 0x60
 8004f88:	f7fc f8fc 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x61,0x0001);	//Driver Output Control.
 8004f8c:	2101      	movs	r1, #1
 8004f8e:	2061      	movs	r0, #97	; 0x61
 8004f90:	f7fc f8f8 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x6a,0x0000);	//Vertical Srcoll Control.
 8004f94:	2100      	movs	r1, #0
 8004f96:	206a      	movs	r0, #106	; 0x6a
 8004f98:	f7fc f8f4 	bl	8001184 <LCD_WriteReg>
	
		LCD_WriteReg(0x80,0x0000);	//Display Position? Partial Display 1.
 8004f9c:	2100      	movs	r1, #0
 8004f9e:	2080      	movs	r0, #128	; 0x80
 8004fa0:	f7fc f8f0 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x81,0x0000);	//RAM Address Start? Partial Display 1.
 8004fa4:	2100      	movs	r1, #0
 8004fa6:	2081      	movs	r0, #129	; 0x81
 8004fa8:	f7fc f8ec 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x82,0x0000);	//RAM Address End-Partial Display 1.
 8004fac:	2100      	movs	r1, #0
 8004fae:	2082      	movs	r0, #130	; 0x82
 8004fb0:	f7fc f8e8 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x83,0x0000);	//Displsy Position? Partial Display 2.
 8004fb4:	2100      	movs	r1, #0
 8004fb6:	2083      	movs	r0, #131	; 0x83
 8004fb8:	f7fc f8e4 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x84,0x0000);	//RAM Address Start? Partial Display 2.
 8004fbc:	2100      	movs	r1, #0
 8004fbe:	2084      	movs	r0, #132	; 0x84
 8004fc0:	f7fc f8e0 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x85,0x0000);	//RAM Address End? Partial Display 2.
 8004fc4:	2100      	movs	r1, #0
 8004fc6:	2085      	movs	r0, #133	; 0x85
 8004fc8:	f7fc f8dc 	bl	8001184 <LCD_WriteReg>
	
		LCD_WriteReg(0x90,(0<<7)|(16<<0));	//Frame Cycle Contral.(0x0013)
 8004fcc:	2110      	movs	r1, #16
 8004fce:	2090      	movs	r0, #144	; 0x90
 8004fd0:	f7fc f8d8 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x92,0x0000);	//Panel Interface Contral 2.(0x0000)
 8004fd4:	2100      	movs	r1, #0
 8004fd6:	2092      	movs	r0, #146	; 0x92
 8004fd8:	f7fc f8d4 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x93,0x0001);	//Panel Interface Contral 3.
 8004fdc:	2101      	movs	r1, #1
 8004fde:	2093      	movs	r0, #147	; 0x93
 8004fe0:	f7fc f8d0 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x95,0x0110);	//Frame Cycle Contral.(0x0110)
 8004fe4:	f44f 7188 	mov.w	r1, #272	; 0x110
 8004fe8:	2095      	movs	r0, #149	; 0x95
 8004fea:	f7fc f8cb 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x97,(0<<8));	//
 8004fee:	2100      	movs	r1, #0
 8004ff0:	2097      	movs	r0, #151	; 0x97
 8004ff2:	f7fc f8c7 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x98,0x0000);	//Frame Cycle Contral.	   
 8004ff6:	2100      	movs	r1, #0
 8004ff8:	2098      	movs	r0, #152	; 0x98
 8004ffa:	f7fc f8c3 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x07,0x0173);	//(0x0173)
 8004ffe:	f240 1173 	movw	r1, #371	; 0x173
 8005002:	2007      	movs	r0, #7
 8005004:	f7fc f8be 	bl	8001184 <LCD_WriteReg>
 8005008:	f001 ba88 	b.w	800651c <LCD_Init+0x3e64>
	}else if(lcddev.id==0X9331)//OK |/|/|			 
 800500c:	4b74      	ldr	r3, [pc, #464]	; (80051e0 <LCD_Init+0x2b28>)
 800500e:	889b      	ldrh	r3, [r3, #4]
 8005010:	f249 3231 	movw	r2, #37681	; 0x9331
 8005014:	4293      	cmp	r3, r2
 8005016:	f040 80e5 	bne.w	80051e4 <LCD_Init+0x2b2c>
	{
		LCD_WriteReg(0x00E7, 0x1014);
 800501a:	f241 0114 	movw	r1, #4116	; 0x1014
 800501e:	20e7      	movs	r0, #231	; 0xe7
 8005020:	f7fc f8b0 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100); // set SS and SM bit
 8005024:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005028:	2001      	movs	r0, #1
 800502a:	f7fc f8ab 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200); // set 1 line inversion
 800502e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005032:	2002      	movs	r0, #2
 8005034:	f7fc f8a6 	bl	8001184 <LCD_WriteReg>
        LCD_WriteReg(0x0003,(1<<12)|(3<<4)|(1<<3));//65K    
 8005038:	f241 0138 	movw	r1, #4152	; 0x1038
 800503c:	2003      	movs	r0, #3
 800503e:	f7fc f8a1 	bl	8001184 <LCD_WriteReg>
		//LCD_WriteReg(0x0003, 0x1030); // set GRAM write direction and BGR=1.
		LCD_WriteReg(0x0008, 0x0202); // set the back porch and front porch
 8005042:	f240 2102 	movw	r1, #514	; 0x202
 8005046:	2008      	movs	r0, #8
 8005048:	f7fc f89c 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000); // set non-display area refresh cycle ISC[3:0]
 800504c:	2100      	movs	r1, #0
 800504e:	2009      	movs	r0, #9
 8005050:	f7fc f898 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000); // FMARK function
 8005054:	2100      	movs	r1, #0
 8005056:	200a      	movs	r0, #10
 8005058:	f7fc f894 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000); // RGB interface setting
 800505c:	2100      	movs	r1, #0
 800505e:	200c      	movs	r0, #12
 8005060:	f7fc f890 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000); // Frame marker Position
 8005064:	2100      	movs	r1, #0
 8005066:	200d      	movs	r0, #13
 8005068:	f7fc f88c 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); // RGB interface polarity
 800506c:	2100      	movs	r1, #0
 800506e:	200f      	movs	r0, #15
 8005070:	f7fc f888 	bl	8001184 <LCD_WriteReg>
		//*************Power On sequence ****************//
		LCD_WriteReg(0x0010, 0x0000); // SAP, BT[3:0], AP, DSTB, SLP, STB
 8005074:	2100      	movs	r1, #0
 8005076:	2010      	movs	r0, #16
 8005078:	f7fc f884 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007); // DC1[2:0], DC0[2:0], VC[2:0]
 800507c:	2107      	movs	r1, #7
 800507e:	2011      	movs	r0, #17
 8005080:	f7fc f880 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000); // VREG1OUT voltage
 8005084:	2100      	movs	r1, #0
 8005086:	2012      	movs	r0, #18
 8005088:	f7fc f87c 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000); // VDV[4:0] for VCOM amplitude
 800508c:	2100      	movs	r1, #0
 800508e:	2013      	movs	r0, #19
 8005090:	f7fc f878 	bl	8001184 <LCD_WriteReg>
		delay_ms(200); // Dis-charge capacitor power voltage
 8005094:	20c8      	movs	r0, #200	; 0xc8
 8005096:	f7fb ff1b 	bl	8000ed0 <delay_ms>
		LCD_WriteReg(0x0010, 0x1690); // SAP, BT[3:0], AP, DSTB, SLP, STB
 800509a:	f241 6190 	movw	r1, #5776	; 0x1690
 800509e:	2010      	movs	r0, #16
 80050a0:	f7fc f870 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227); // DC1[2:0], DC0[2:0], VC[2:0]
 80050a4:	f240 2127 	movw	r1, #551	; 0x227
 80050a8:	2011      	movs	r0, #17
 80050aa:	f7fc f86b 	bl	8001184 <LCD_WriteReg>
		delay_ms(50); // Delay 50ms
 80050ae:	2032      	movs	r0, #50	; 0x32
 80050b0:	f7fb ff0e 	bl	8000ed0 <delay_ms>
		LCD_WriteReg(0x0012, 0x000C); // Internal reference voltage= Vci;
 80050b4:	210c      	movs	r1, #12
 80050b6:	2012      	movs	r0, #18
 80050b8:	f7fc f864 	bl	8001184 <LCD_WriteReg>
		delay_ms(50); // Delay 50ms
 80050bc:	2032      	movs	r0, #50	; 0x32
 80050be:	f7fb ff07 	bl	8000ed0 <delay_ms>
		LCD_WriteReg(0x0013, 0x0800); // Set VDV[4:0] for VCOM amplitude
 80050c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80050c6:	2013      	movs	r0, #19
 80050c8:	f7fc f85c 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0011); // Set VCM[5:0] for VCOMH
 80050cc:	2111      	movs	r1, #17
 80050ce:	2029      	movs	r0, #41	; 0x29
 80050d0:	f7fc f858 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000B); // Set Frame Rate
 80050d4:	210b      	movs	r1, #11
 80050d6:	202b      	movs	r0, #43	; 0x2b
 80050d8:	f7fc f854 	bl	8001184 <LCD_WriteReg>
		delay_ms(50); // Delay 50ms
 80050dc:	2032      	movs	r0, #50	; 0x32
 80050de:	f7fb fef7 	bl	8000ed0 <delay_ms>
		LCD_WriteReg(0x0020, 0x0000); // GRAM horizontal Address
 80050e2:	2100      	movs	r1, #0
 80050e4:	2020      	movs	r0, #32
 80050e6:	f7fc f84d 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x013f); // GRAM Vertical Address
 80050ea:	f240 113f 	movw	r1, #319	; 0x13f
 80050ee:	2021      	movs	r0, #33	; 0x21
 80050f0:	f7fc f848 	bl	8001184 <LCD_WriteReg>
		// ----------- Adjust the Gamma Curve ----------//
		LCD_WriteReg(0x0030, 0x0000);
 80050f4:	2100      	movs	r1, #0
 80050f6:	2030      	movs	r0, #48	; 0x30
 80050f8:	f7fc f844 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0106);
 80050fc:	f44f 7183 	mov.w	r1, #262	; 0x106
 8005100:	2031      	movs	r0, #49	; 0x31
 8005102:	f7fc f83f 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0000);
 8005106:	2100      	movs	r1, #0
 8005108:	2032      	movs	r0, #50	; 0x32
 800510a:	f7fc f83b 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 800510e:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005112:	2035      	movs	r0, #53	; 0x35
 8005114:	f7fc f836 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x160A);
 8005118:	f241 610a 	movw	r1, #5642	; 0x160a
 800511c:	2036      	movs	r0, #54	; 0x36
 800511e:	f7fc f831 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707);
 8005122:	f240 7107 	movw	r1, #1799	; 0x707
 8005126:	2037      	movs	r0, #55	; 0x37
 8005128:	f7fc f82c 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0106);
 800512c:	f44f 7183 	mov.w	r1, #262	; 0x106
 8005130:	2038      	movs	r0, #56	; 0x38
 8005132:	f7fc f827 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 8005136:	f240 7107 	movw	r1, #1799	; 0x707
 800513a:	2039      	movs	r0, #57	; 0x39
 800513c:	f7fc f822 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0402);
 8005140:	f240 4102 	movw	r1, #1026	; 0x402
 8005144:	203c      	movs	r0, #60	; 0x3c
 8005146:	f7fc f81d 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0C0F);
 800514a:	f640 410f 	movw	r1, #3087	; 0xc0f
 800514e:	203d      	movs	r0, #61	; 0x3d
 8005150:	f7fc f818 	bl	8001184 <LCD_WriteReg>
		//------------------ Set GRAM area ---------------//
		LCD_WriteReg(0x0050, 0x0000); // Horizontal GRAM Start Address
 8005154:	2100      	movs	r1, #0
 8005156:	2050      	movs	r0, #80	; 0x50
 8005158:	f7fc f814 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF); // Horizontal GRAM End Address
 800515c:	21ef      	movs	r1, #239	; 0xef
 800515e:	2051      	movs	r0, #81	; 0x51
 8005160:	f7fc f810 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); // Vertical GRAM Start Address
 8005164:	2100      	movs	r1, #0
 8005166:	2052      	movs	r0, #82	; 0x52
 8005168:	f7fc f80c 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F); // Vertical GRAM Start Address
 800516c:	f240 113f 	movw	r1, #319	; 0x13f
 8005170:	2053      	movs	r0, #83	; 0x53
 8005172:	f7fc f807 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700); // Gate Scan Line
 8005176:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 800517a:	2060      	movs	r0, #96	; 0x60
 800517c:	f7fc f802 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001); // NDL,VLE, REV 
 8005180:	2101      	movs	r1, #1
 8005182:	2061      	movs	r0, #97	; 0x61
 8005184:	f7fb fffe 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000); // set scrolling line
 8005188:	2100      	movs	r1, #0
 800518a:	206a      	movs	r0, #106	; 0x6a
 800518c:	f7fb fffa 	bl	8001184 <LCD_WriteReg>
		//-------------- Partial Display Control ---------//
		LCD_WriteReg(0x0080, 0x0000);
 8005190:	2100      	movs	r1, #0
 8005192:	2080      	movs	r0, #128	; 0x80
 8005194:	f7fb fff6 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8005198:	2100      	movs	r1, #0
 800519a:	2081      	movs	r0, #129	; 0x81
 800519c:	f7fb fff2 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 80051a0:	2100      	movs	r1, #0
 80051a2:	2082      	movs	r0, #130	; 0x82
 80051a4:	f7fb ffee 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 80051a8:	2100      	movs	r1, #0
 80051aa:	2083      	movs	r0, #131	; 0x83
 80051ac:	f7fb ffea 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 80051b0:	2100      	movs	r1, #0
 80051b2:	2084      	movs	r0, #132	; 0x84
 80051b4:	f7fb ffe6 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 80051b8:	2100      	movs	r1, #0
 80051ba:	2085      	movs	r0, #133	; 0x85
 80051bc:	f7fb ffe2 	bl	8001184 <LCD_WriteReg>
		//-------------- Panel Control -------------------//
		LCD_WriteReg(0x0090, 0x0010);
 80051c0:	2110      	movs	r1, #16
 80051c2:	2090      	movs	r0, #144	; 0x90
 80051c4:	f7fb ffde 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 80051c8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80051cc:	2092      	movs	r0, #146	; 0x92
 80051ce:	f7fb ffd9 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0133); // 262K color and display ON
 80051d2:	f240 1133 	movw	r1, #307	; 0x133
 80051d6:	2007      	movs	r0, #7
 80051d8:	f7fb ffd4 	bl	8001184 <LCD_WriteReg>
 80051dc:	f001 b99e 	b.w	800651c <LCD_Init+0x3e64>
 80051e0:	200024f8 	.word	0x200024f8
	}else if(lcddev.id==0x5408)
 80051e4:	4be2      	ldr	r3, [pc, #904]	; (8005570 <LCD_Init+0x2eb8>)
 80051e6:	889b      	ldrh	r3, [r3, #4]
 80051e8:	f245 4208 	movw	r2, #21512	; 0x5408
 80051ec:	4293      	cmp	r3, r2
 80051ee:	f040 80a3 	bne.w	8005338 <LCD_Init+0x2c80>
	{
		LCD_WriteReg(0x01,0x0100);								  
 80051f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80051f6:	2001      	movs	r0, #1
 80051f8:	f7fb ffc4 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x02,0x0700);//LCD Driving Waveform Contral 
 80051fc:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8005200:	2002      	movs	r0, #2
 8005202:	f7fb ffbf 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x03,0x1030);//Entry Mode���� 	   
 8005206:	f241 0130 	movw	r1, #4144	; 0x1030
 800520a:	2003      	movs	r0, #3
 800520c:	f7fb ffba 	bl	8001184 <LCD_WriteReg>
		//ָ������������϶��µ��Զ���ģʽ
		//Normal Mode(Window Mode disable)
		//RGB��ʽ
		//16λ����2�δ����8��������
		LCD_WriteReg(0x04,0x0000); //Scalling Control register     
 8005210:	2100      	movs	r1, #0
 8005212:	2004      	movs	r0, #4
 8005214:	f7fb ffb6 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x08,0x0207); //Display Control 2 
 8005218:	f240 2107 	movw	r1, #519	; 0x207
 800521c:	2008      	movs	r0, #8
 800521e:	f7fb ffb1 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x09,0x0000); //Display Control 3	 
 8005222:	2100      	movs	r1, #0
 8005224:	2009      	movs	r0, #9
 8005226:	f7fb ffad 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0A,0x0000); //Frame Cycle Control	 
 800522a:	2100      	movs	r1, #0
 800522c:	200a      	movs	r0, #10
 800522e:	f7fb ffa9 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0C,0x0000); //External Display Interface Control 1 
 8005232:	2100      	movs	r1, #0
 8005234:	200c      	movs	r0, #12
 8005236:	f7fb ffa5 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0D,0x0000); //Frame Maker Position		 
 800523a:	2100      	movs	r1, #0
 800523c:	200d      	movs	r0, #13
 800523e:	f7fb ffa1 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0F,0x0000); //External Display Interface Control 2 
 8005242:	2100      	movs	r1, #0
 8005244:	200f      	movs	r0, #15
 8005246:	f7fb ff9d 	bl	8001184 <LCD_WriteReg>
 		delay_ms(20);
 800524a:	2014      	movs	r0, #20
 800524c:	f7fb fe40 	bl	8000ed0 <delay_ms>
		//TFT Һ����ɫͼ����ʾ����14
		LCD_WriteReg(0x10,0x16B0); //0x14B0 //Power Control 1
 8005250:	f241 61b0 	movw	r1, #5808	; 0x16b0
 8005254:	2010      	movs	r0, #16
 8005256:	f7fb ff95 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x11,0x0001); //0x0007 //Power Control 2
 800525a:	2101      	movs	r1, #1
 800525c:	2011      	movs	r0, #17
 800525e:	f7fb ff91 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x17,0x0001); //0x0000 //Power Control 3
 8005262:	2101      	movs	r1, #1
 8005264:	2017      	movs	r0, #23
 8005266:	f7fb ff8d 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x12,0x0138); //0x013B //Power Control 4
 800526a:	f44f 719c 	mov.w	r1, #312	; 0x138
 800526e:	2012      	movs	r0, #18
 8005270:	f7fb ff88 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x13,0x0800); //0x0800 //Power Control 5
 8005274:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005278:	2013      	movs	r0, #19
 800527a:	f7fb ff83 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x29,0x0009); //NVM read data 2
 800527e:	2109      	movs	r1, #9
 8005280:	2029      	movs	r0, #41	; 0x29
 8005282:	f7fb ff7f 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x2a,0x0009); //NVM read data 3
 8005286:	2109      	movs	r1, #9
 8005288:	202a      	movs	r0, #42	; 0x2a
 800528a:	f7fb ff7b 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0xa4,0x0000);	 
 800528e:	2100      	movs	r1, #0
 8005290:	20a4      	movs	r0, #164	; 0xa4
 8005292:	f7fb ff77 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x50,0x0000); //���ò������ڵ�X�Ὺʼ��
 8005296:	2100      	movs	r1, #0
 8005298:	2050      	movs	r0, #80	; 0x50
 800529a:	f7fb ff73 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x51,0x00EF); //���ò������ڵ�X�������
 800529e:	21ef      	movs	r1, #239	; 0xef
 80052a0:	2051      	movs	r0, #81	; 0x51
 80052a2:	f7fb ff6f 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x52,0x0000); //���ò������ڵ�Y�Ὺʼ��
 80052a6:	2100      	movs	r1, #0
 80052a8:	2052      	movs	r0, #82	; 0x52
 80052aa:	f7fb ff6b 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x53,0x013F); //���ò������ڵ�Y�������
 80052ae:	f240 113f 	movw	r1, #319	; 0x13f
 80052b2:	2053      	movs	r0, #83	; 0x53
 80052b4:	f7fb ff66 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x60,0x2700); //Driver Output Control
 80052b8:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80052bc:	2060      	movs	r0, #96	; 0x60
 80052be:	f7fb ff61 	bl	8001184 <LCD_WriteReg>
		//������Ļ�ĵ����Լ�ɨ�����ʼ��
		LCD_WriteReg(0x61,0x0001); //Driver Output Control
 80052c2:	2101      	movs	r1, #1
 80052c4:	2061      	movs	r0, #97	; 0x61
 80052c6:	f7fb ff5d 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x6A,0x0000); //Vertical Scroll Control
 80052ca:	2100      	movs	r1, #0
 80052cc:	206a      	movs	r0, #106	; 0x6a
 80052ce:	f7fb ff59 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x80,0x0000); //Display Position �C Partial Display 1
 80052d2:	2100      	movs	r1, #0
 80052d4:	2080      	movs	r0, #128	; 0x80
 80052d6:	f7fb ff55 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x81,0x0000); //RAM Address Start �C Partial Display 1
 80052da:	2100      	movs	r1, #0
 80052dc:	2081      	movs	r0, #129	; 0x81
 80052de:	f7fb ff51 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x82,0x0000); //RAM address End - Partial Display 1
 80052e2:	2100      	movs	r1, #0
 80052e4:	2082      	movs	r0, #130	; 0x82
 80052e6:	f7fb ff4d 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x83,0x0000); //Display Position �C Partial Display 2
 80052ea:	2100      	movs	r1, #0
 80052ec:	2083      	movs	r0, #131	; 0x83
 80052ee:	f7fb ff49 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x84,0x0000); //RAM Address Start �C Partial Display 2
 80052f2:	2100      	movs	r1, #0
 80052f4:	2084      	movs	r0, #132	; 0x84
 80052f6:	f7fb ff45 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x85,0x0000); //RAM address End �C Partail Display2
 80052fa:	2100      	movs	r1, #0
 80052fc:	2085      	movs	r0, #133	; 0x85
 80052fe:	f7fb ff41 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x90,0x0013); //Frame Cycle Control
 8005302:	2113      	movs	r1, #19
 8005304:	2090      	movs	r0, #144	; 0x90
 8005306:	f7fb ff3d 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x92,0x0000);  //Panel Interface Control 2
 800530a:	2100      	movs	r1, #0
 800530c:	2092      	movs	r0, #146	; 0x92
 800530e:	f7fb ff39 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x93,0x0003); //Panel Interface control 3
 8005312:	2103      	movs	r1, #3
 8005314:	2093      	movs	r0, #147	; 0x93
 8005316:	f7fb ff35 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x95,0x0110);  //Frame Cycle Control
 800531a:	f44f 7188 	mov.w	r1, #272	; 0x110
 800531e:	2095      	movs	r0, #149	; 0x95
 8005320:	f7fb ff30 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x07,0x0173);		 
 8005324:	f240 1173 	movw	r1, #371	; 0x173
 8005328:	2007      	movs	r0, #7
 800532a:	f7fb ff2b 	bl	8001184 <LCD_WriteReg>
		delay_ms(50);
 800532e:	2032      	movs	r0, #50	; 0x32
 8005330:	f7fb fdce 	bl	8000ed0 <delay_ms>
 8005334:	f001 b8f2 	b.w	800651c <LCD_Init+0x3e64>
	}else if(lcddev.id==0x1505)//OK
 8005338:	4b8d      	ldr	r3, [pc, #564]	; (8005570 <LCD_Init+0x2eb8>)
 800533a:	889b      	ldrh	r3, [r3, #4]
 800533c:	f241 5205 	movw	r2, #5381	; 0x1505
 8005340:	4293      	cmp	r3, r2
 8005342:	f040 8117 	bne.w	8005574 <LCD_Init+0x2ebc>
	{
		// second release on 3/5  ,luminance is acceptable,water wave appear during camera preview
        LCD_WriteReg(0x0007,0x0000);
 8005346:	2100      	movs	r1, #0
 8005348:	2007      	movs	r0, #7
 800534a:	f7fb ff1b 	bl	8001184 <LCD_WriteReg>
        delay_ms(50); 
 800534e:	2032      	movs	r0, #50	; 0x32
 8005350:	f7fb fdbe 	bl	8000ed0 <delay_ms>
        LCD_WriteReg(0x0012,0x011C);//0x011A   why need to set several times?
 8005354:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8005358:	2012      	movs	r0, #18
 800535a:	f7fb ff13 	bl	8001184 <LCD_WriteReg>
        LCD_WriteReg(0x00A4,0x0001);//NVM	 
 800535e:	2101      	movs	r1, #1
 8005360:	20a4      	movs	r0, #164	; 0xa4
 8005362:	f7fb ff0f 	bl	8001184 <LCD_WriteReg>
        LCD_WriteReg(0x0008,0x000F);
 8005366:	210f      	movs	r1, #15
 8005368:	2008      	movs	r0, #8
 800536a:	f7fb ff0b 	bl	8001184 <LCD_WriteReg>
        LCD_WriteReg(0x000A,0x0008);
 800536e:	2108      	movs	r1, #8
 8005370:	200a      	movs	r0, #10
 8005372:	f7fb ff07 	bl	8001184 <LCD_WriteReg>
        LCD_WriteReg(0x000D,0x0008);	    
 8005376:	2108      	movs	r1, #8
 8005378:	200d      	movs	r0, #13
 800537a:	f7fb ff03 	bl	8001184 <LCD_WriteReg>
  		//٤��У��
        LCD_WriteReg(0x0030,0x0707);
 800537e:	f240 7107 	movw	r1, #1799	; 0x707
 8005382:	2030      	movs	r0, #48	; 0x30
 8005384:	f7fb fefe 	bl	8001184 <LCD_WriteReg>
        LCD_WriteReg(0x0031,0x0007); //0x0707
 8005388:	2107      	movs	r1, #7
 800538a:	2031      	movs	r0, #49	; 0x31
 800538c:	f7fb fefa 	bl	8001184 <LCD_WriteReg>
        LCD_WriteReg(0x0032,0x0603); 
 8005390:	f240 6103 	movw	r1, #1539	; 0x603
 8005394:	2032      	movs	r0, #50	; 0x32
 8005396:	f7fb fef5 	bl	8001184 <LCD_WriteReg>
        LCD_WriteReg(0x0033,0x0700); 
 800539a:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800539e:	2033      	movs	r0, #51	; 0x33
 80053a0:	f7fb fef0 	bl	8001184 <LCD_WriteReg>
        LCD_WriteReg(0x0034,0x0202); 
 80053a4:	f240 2102 	movw	r1, #514	; 0x202
 80053a8:	2034      	movs	r0, #52	; 0x34
 80053aa:	f7fb feeb 	bl	8001184 <LCD_WriteReg>
        LCD_WriteReg(0x0035,0x0002); //?0x0606
 80053ae:	2102      	movs	r1, #2
 80053b0:	2035      	movs	r0, #53	; 0x35
 80053b2:	f7fb fee7 	bl	8001184 <LCD_WriteReg>
        LCD_WriteReg(0x0036,0x1F0F);
 80053b6:	f641 710f 	movw	r1, #7951	; 0x1f0f
 80053ba:	2036      	movs	r0, #54	; 0x36
 80053bc:	f7fb fee2 	bl	8001184 <LCD_WriteReg>
        LCD_WriteReg(0x0037,0x0707); //0x0f0f  0x0105
 80053c0:	f240 7107 	movw	r1, #1799	; 0x707
 80053c4:	2037      	movs	r0, #55	; 0x37
 80053c6:	f7fb fedd 	bl	8001184 <LCD_WriteReg>
        LCD_WriteReg(0x0038,0x0000); 
 80053ca:	2100      	movs	r1, #0
 80053cc:	2038      	movs	r0, #56	; 0x38
 80053ce:	f7fb fed9 	bl	8001184 <LCD_WriteReg>
        LCD_WriteReg(0x0039,0x0000); 
 80053d2:	2100      	movs	r1, #0
 80053d4:	2039      	movs	r0, #57	; 0x39
 80053d6:	f7fb fed5 	bl	8001184 <LCD_WriteReg>
        LCD_WriteReg(0x003A,0x0707); 
 80053da:	f240 7107 	movw	r1, #1799	; 0x707
 80053de:	203a      	movs	r0, #58	; 0x3a
 80053e0:	f7fb fed0 	bl	8001184 <LCD_WriteReg>
        LCD_WriteReg(0x003B,0x0000); //0x0303
 80053e4:	2100      	movs	r1, #0
 80053e6:	203b      	movs	r0, #59	; 0x3b
 80053e8:	f7fb fecc 	bl	8001184 <LCD_WriteReg>
        LCD_WriteReg(0x003C,0x0007); //?0x0707
 80053ec:	2107      	movs	r1, #7
 80053ee:	203c      	movs	r0, #60	; 0x3c
 80053f0:	f7fb fec8 	bl	8001184 <LCD_WriteReg>
        LCD_WriteReg(0x003D,0x0000); //0x1313//0x1f08
 80053f4:	2100      	movs	r1, #0
 80053f6:	203d      	movs	r0, #61	; 0x3d
 80053f8:	f7fb fec4 	bl	8001184 <LCD_WriteReg>
        delay_ms(50); 
 80053fc:	2032      	movs	r0, #50	; 0x32
 80053fe:	f7fb fd67 	bl	8000ed0 <delay_ms>
        LCD_WriteReg(0x0007,0x0001);
 8005402:	2101      	movs	r1, #1
 8005404:	2007      	movs	r0, #7
 8005406:	f7fb febd 	bl	8001184 <LCD_WriteReg>
        LCD_WriteReg(0x0017,0x0001);//������Դ
 800540a:	2101      	movs	r1, #1
 800540c:	2017      	movs	r0, #23
 800540e:	f7fb feb9 	bl	8001184 <LCD_WriteReg>
        delay_ms(50); 
 8005412:	2032      	movs	r0, #50	; 0x32
 8005414:	f7fb fd5c 	bl	8000ed0 <delay_ms>
  		//��Դ����
        LCD_WriteReg(0x0010,0x17A0); 
 8005418:	f44f 51bd 	mov.w	r1, #6048	; 0x17a0
 800541c:	2010      	movs	r0, #16
 800541e:	f7fb feb1 	bl	8001184 <LCD_WriteReg>
        LCD_WriteReg(0x0011,0x0217);//reference voltage VC[2:0]   Vciout = 1.00*Vcivl
 8005422:	f240 2117 	movw	r1, #535	; 0x217
 8005426:	2011      	movs	r0, #17
 8005428:	f7fb feac 	bl	8001184 <LCD_WriteReg>
        LCD_WriteReg(0x0012,0x011E);//0x011c  //Vreg1out = Vcilvl*1.80   is it the same as Vgama1out ?
 800542c:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8005430:	2012      	movs	r0, #18
 8005432:	f7fb fea7 	bl	8001184 <LCD_WriteReg>
        LCD_WriteReg(0x0013,0x0F00);//VDV[4:0]-->VCOM Amplitude VcomL = VcomH - Vcom Ampl
 8005436:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 800543a:	2013      	movs	r0, #19
 800543c:	f7fb fea2 	bl	8001184 <LCD_WriteReg>
        LCD_WriteReg(0x002A,0x0000);  
 8005440:	2100      	movs	r1, #0
 8005442:	202a      	movs	r0, #42	; 0x2a
 8005444:	f7fb fe9e 	bl	8001184 <LCD_WriteReg>
        LCD_WriteReg(0x0029,0x000A);//0x0001F  Vcomh = VCM1[4:0]*Vreg1out    gate source voltage??
 8005448:	210a      	movs	r1, #10
 800544a:	2029      	movs	r0, #41	; 0x29
 800544c:	f7fb fe9a 	bl	8001184 <LCD_WriteReg>
        LCD_WriteReg(0x0012,0x013E);// 0x013C  power supply on
 8005450:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8005454:	2012      	movs	r0, #18
 8005456:	f7fb fe95 	bl	8001184 <LCD_WriteReg>
        //Coordinates Control//
        LCD_WriteReg(0x0050,0x0000);//0x0e00
 800545a:	2100      	movs	r1, #0
 800545c:	2050      	movs	r0, #80	; 0x50
 800545e:	f7fb fe91 	bl	8001184 <LCD_WriteReg>
        LCD_WriteReg(0x0051,0x00EF); 
 8005462:	21ef      	movs	r1, #239	; 0xef
 8005464:	2051      	movs	r0, #81	; 0x51
 8005466:	f7fb fe8d 	bl	8001184 <LCD_WriteReg>
        LCD_WriteReg(0x0052,0x0000); 
 800546a:	2100      	movs	r1, #0
 800546c:	2052      	movs	r0, #82	; 0x52
 800546e:	f7fb fe89 	bl	8001184 <LCD_WriteReg>
        LCD_WriteReg(0x0053,0x013F); 
 8005472:	f240 113f 	movw	r1, #319	; 0x13f
 8005476:	2053      	movs	r0, #83	; 0x53
 8005478:	f7fb fe84 	bl	8001184 <LCD_WriteReg>
    	//Pannel Image Control//
        LCD_WriteReg(0x0060,0x2700); 
 800547c:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8005480:	2060      	movs	r0, #96	; 0x60
 8005482:	f7fb fe7f 	bl	8001184 <LCD_WriteReg>
        LCD_WriteReg(0x0061,0x0001); 
 8005486:	2101      	movs	r1, #1
 8005488:	2061      	movs	r0, #97	; 0x61
 800548a:	f7fb fe7b 	bl	8001184 <LCD_WriteReg>
        LCD_WriteReg(0x006A,0x0000); 
 800548e:	2100      	movs	r1, #0
 8005490:	206a      	movs	r0, #106	; 0x6a
 8005492:	f7fb fe77 	bl	8001184 <LCD_WriteReg>
        LCD_WriteReg(0x0080,0x0000); 
 8005496:	2100      	movs	r1, #0
 8005498:	2080      	movs	r0, #128	; 0x80
 800549a:	f7fb fe73 	bl	8001184 <LCD_WriteReg>
    	//Partial Image Control//
        LCD_WriteReg(0x0081,0x0000); 
 800549e:	2100      	movs	r1, #0
 80054a0:	2081      	movs	r0, #129	; 0x81
 80054a2:	f7fb fe6f 	bl	8001184 <LCD_WriteReg>
        LCD_WriteReg(0x0082,0x0000); 
 80054a6:	2100      	movs	r1, #0
 80054a8:	2082      	movs	r0, #130	; 0x82
 80054aa:	f7fb fe6b 	bl	8001184 <LCD_WriteReg>
        LCD_WriteReg(0x0083,0x0000); 
 80054ae:	2100      	movs	r1, #0
 80054b0:	2083      	movs	r0, #131	; 0x83
 80054b2:	f7fb fe67 	bl	8001184 <LCD_WriteReg>
        LCD_WriteReg(0x0084,0x0000); 
 80054b6:	2100      	movs	r1, #0
 80054b8:	2084      	movs	r0, #132	; 0x84
 80054ba:	f7fb fe63 	bl	8001184 <LCD_WriteReg>
        LCD_WriteReg(0x0085,0x0000); 
 80054be:	2100      	movs	r1, #0
 80054c0:	2085      	movs	r0, #133	; 0x85
 80054c2:	f7fb fe5f 	bl	8001184 <LCD_WriteReg>
  		//Panel Interface Control//
        LCD_WriteReg(0x0090,0x0013);//0x0010 frenqucy
 80054c6:	2113      	movs	r1, #19
 80054c8:	2090      	movs	r0, #144	; 0x90
 80054ca:	f7fb fe5b 	bl	8001184 <LCD_WriteReg>
        LCD_WriteReg(0x0092,0x0300); 
 80054ce:	f44f 7140 	mov.w	r1, #768	; 0x300
 80054d2:	2092      	movs	r0, #146	; 0x92
 80054d4:	f7fb fe56 	bl	8001184 <LCD_WriteReg>
        LCD_WriteReg(0x0093,0x0005); 
 80054d8:	2105      	movs	r1, #5
 80054da:	2093      	movs	r0, #147	; 0x93
 80054dc:	f7fb fe52 	bl	8001184 <LCD_WriteReg>
        LCD_WriteReg(0x0095,0x0000); 
 80054e0:	2100      	movs	r1, #0
 80054e2:	2095      	movs	r0, #149	; 0x95
 80054e4:	f7fb fe4e 	bl	8001184 <LCD_WriteReg>
        LCD_WriteReg(0x0097,0x0000); 
 80054e8:	2100      	movs	r1, #0
 80054ea:	2097      	movs	r0, #151	; 0x97
 80054ec:	f7fb fe4a 	bl	8001184 <LCD_WriteReg>
        LCD_WriteReg(0x0098,0x0000); 
 80054f0:	2100      	movs	r1, #0
 80054f2:	2098      	movs	r0, #152	; 0x98
 80054f4:	f7fb fe46 	bl	8001184 <LCD_WriteReg>
  
        LCD_WriteReg(0x0001,0x0100); 
 80054f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80054fc:	2001      	movs	r0, #1
 80054fe:	f7fb fe41 	bl	8001184 <LCD_WriteReg>
        LCD_WriteReg(0x0002,0x0700); 
 8005502:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8005506:	2002      	movs	r0, #2
 8005508:	f7fb fe3c 	bl	8001184 <LCD_WriteReg>
        LCD_WriteReg(0x0003,0x1038);//ɨ�跽�� ��->��  ��->�� 
 800550c:	f241 0138 	movw	r1, #4152	; 0x1038
 8005510:	2003      	movs	r0, #3
 8005512:	f7fb fe37 	bl	8001184 <LCD_WriteReg>
        LCD_WriteReg(0x0004,0x0000); 
 8005516:	2100      	movs	r1, #0
 8005518:	2004      	movs	r0, #4
 800551a:	f7fb fe33 	bl	8001184 <LCD_WriteReg>
        LCD_WriteReg(0x000C,0x0000); 
 800551e:	2100      	movs	r1, #0
 8005520:	200c      	movs	r0, #12
 8005522:	f7fb fe2f 	bl	8001184 <LCD_WriteReg>
        LCD_WriteReg(0x000F,0x0000); 
 8005526:	2100      	movs	r1, #0
 8005528:	200f      	movs	r0, #15
 800552a:	f7fb fe2b 	bl	8001184 <LCD_WriteReg>
        LCD_WriteReg(0x0020,0x0000); 
 800552e:	2100      	movs	r1, #0
 8005530:	2020      	movs	r0, #32
 8005532:	f7fb fe27 	bl	8001184 <LCD_WriteReg>
        LCD_WriteReg(0x0021,0x0000); 
 8005536:	2100      	movs	r1, #0
 8005538:	2021      	movs	r0, #33	; 0x21
 800553a:	f7fb fe23 	bl	8001184 <LCD_WriteReg>
        LCD_WriteReg(0x0007,0x0021); 
 800553e:	2121      	movs	r1, #33	; 0x21
 8005540:	2007      	movs	r0, #7
 8005542:	f7fb fe1f 	bl	8001184 <LCD_WriteReg>
        delay_ms(20);
 8005546:	2014      	movs	r0, #20
 8005548:	f7fb fcc2 	bl	8000ed0 <delay_ms>
        LCD_WriteReg(0x0007,0x0061); 
 800554c:	2161      	movs	r1, #97	; 0x61
 800554e:	2007      	movs	r0, #7
 8005550:	f7fb fe18 	bl	8001184 <LCD_WriteReg>
        delay_ms(20);
 8005554:	2014      	movs	r0, #20
 8005556:	f7fb fcbb 	bl	8000ed0 <delay_ms>
        LCD_WriteReg(0x0007,0x0173); 
 800555a:	f240 1173 	movw	r1, #371	; 0x173
 800555e:	2007      	movs	r0, #7
 8005560:	f7fb fe10 	bl	8001184 <LCD_WriteReg>
        delay_ms(20);
 8005564:	2014      	movs	r0, #20
 8005566:	f7fb fcb3 	bl	8000ed0 <delay_ms>
 800556a:	f000 bfd7 	b.w	800651c <LCD_Init+0x3e64>
 800556e:	bf00      	nop
 8005570:	200024f8 	.word	0x200024f8
	}else if(lcddev.id==0xB505)
 8005574:	4bf0      	ldr	r3, [pc, #960]	; (8005938 <LCD_Init+0x3280>)
 8005576:	889b      	ldrh	r3, [r3, #4]
 8005578:	f24b 5205 	movw	r2, #46341	; 0xb505
 800557c:	4293      	cmp	r3, r2
 800557e:	f040 8103 	bne.w	8005788 <LCD_Init+0x30d0>
	{
		LCD_WriteReg(0x0000,0x0000);
 8005582:	2100      	movs	r1, #0
 8005584:	2000      	movs	r0, #0
 8005586:	f7fb fdfd 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 800558a:	2100      	movs	r1, #0
 800558c:	2000      	movs	r0, #0
 800558e:	f7fb fdf9 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 8005592:	2100      	movs	r1, #0
 8005594:	2000      	movs	r0, #0
 8005596:	f7fb fdf5 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 800559a:	2100      	movs	r1, #0
 800559c:	2000      	movs	r0, #0
 800559e:	f7fb fdf1 	bl	8001184 <LCD_WriteReg>
		
		LCD_WriteReg(0x00a4,0x0001);
 80055a2:	2101      	movs	r1, #1
 80055a4:	20a4      	movs	r0, #164	; 0xa4
 80055a6:	f7fb fded 	bl	8001184 <LCD_WriteReg>
		delay_ms(20);		  
 80055aa:	2014      	movs	r0, #20
 80055ac:	f7fb fc90 	bl	8000ed0 <delay_ms>
		LCD_WriteReg(0x0060,0x2700);
 80055b0:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80055b4:	2060      	movs	r0, #96	; 0x60
 80055b6:	f7fb fde5 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0008,0x0202);
 80055ba:	f240 2102 	movw	r1, #514	; 0x202
 80055be:	2008      	movs	r0, #8
 80055c0:	f7fb fde0 	bl	8001184 <LCD_WriteReg>
		
		LCD_WriteReg(0x0030,0x0214);
 80055c4:	f44f 7105 	mov.w	r1, #532	; 0x214
 80055c8:	2030      	movs	r0, #48	; 0x30
 80055ca:	f7fb fddb 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0031,0x3715);
 80055ce:	f243 7115 	movw	r1, #14101	; 0x3715
 80055d2:	2031      	movs	r0, #49	; 0x31
 80055d4:	f7fb fdd6 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0032,0x0604);
 80055d8:	f240 6104 	movw	r1, #1540	; 0x604
 80055dc:	2032      	movs	r0, #50	; 0x32
 80055de:	f7fb fdd1 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0033,0x0e16);
 80055e2:	f640 6116 	movw	r1, #3606	; 0xe16
 80055e6:	2033      	movs	r0, #51	; 0x33
 80055e8:	f7fb fdcc 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0034,0x2211);
 80055ec:	f242 2111 	movw	r1, #8721	; 0x2211
 80055f0:	2034      	movs	r0, #52	; 0x34
 80055f2:	f7fb fdc7 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0035,0x1500);
 80055f6:	f44f 51a8 	mov.w	r1, #5376	; 0x1500
 80055fa:	2035      	movs	r0, #53	; 0x35
 80055fc:	f7fb fdc2 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0036,0x8507);
 8005600:	f248 5107 	movw	r1, #34055	; 0x8507
 8005604:	2036      	movs	r0, #54	; 0x36
 8005606:	f7fb fdbd 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0037,0x1407);
 800560a:	f241 4107 	movw	r1, #5127	; 0x1407
 800560e:	2037      	movs	r0, #55	; 0x37
 8005610:	f7fb fdb8 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0038,0x1403);
 8005614:	f241 4103 	movw	r1, #5123	; 0x1403
 8005618:	2038      	movs	r0, #56	; 0x38
 800561a:	f7fb fdb3 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0039,0x0020);
 800561e:	2120      	movs	r1, #32
 8005620:	2039      	movs	r0, #57	; 0x39
 8005622:	f7fb fdaf 	bl	8001184 <LCD_WriteReg>
		
		LCD_WriteReg(0x0090,0x001a);
 8005626:	211a      	movs	r1, #26
 8005628:	2090      	movs	r0, #144	; 0x90
 800562a:	f7fb fdab 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0010,0x0000);
 800562e:	2100      	movs	r1, #0
 8005630:	2010      	movs	r0, #16
 8005632:	f7fb fda7 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0011,0x0007);
 8005636:	2107      	movs	r1, #7
 8005638:	2011      	movs	r0, #17
 800563a:	f7fb fda3 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0012,0x0000);
 800563e:	2100      	movs	r1, #0
 8005640:	2012      	movs	r0, #18
 8005642:	f7fb fd9f 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0013,0x0000);
 8005646:	2100      	movs	r1, #0
 8005648:	2013      	movs	r0, #19
 800564a:	f7fb fd9b 	bl	8001184 <LCD_WriteReg>
		delay_ms(20);
 800564e:	2014      	movs	r0, #20
 8005650:	f7fb fc3e 	bl	8000ed0 <delay_ms>
		
		LCD_WriteReg(0x0010,0x0730);
 8005654:	f44f 61e6 	mov.w	r1, #1840	; 0x730
 8005658:	2010      	movs	r0, #16
 800565a:	f7fb fd93 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0011,0x0137);
 800565e:	f240 1137 	movw	r1, #311	; 0x137
 8005662:	2011      	movs	r0, #17
 8005664:	f7fb fd8e 	bl	8001184 <LCD_WriteReg>
		delay_ms(20);
 8005668:	2014      	movs	r0, #20
 800566a:	f7fb fc31 	bl	8000ed0 <delay_ms>
		
		LCD_WriteReg(0x0012,0x01b8);
 800566e:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8005672:	2012      	movs	r0, #18
 8005674:	f7fb fd86 	bl	8001184 <LCD_WriteReg>
		delay_ms(20);
 8005678:	2014      	movs	r0, #20
 800567a:	f7fb fc29 	bl	8000ed0 <delay_ms>
		
		LCD_WriteReg(0x0013,0x0f00);
 800567e:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8005682:	2013      	movs	r0, #19
 8005684:	f7fb fd7e 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x002a,0x0080);
 8005688:	2180      	movs	r1, #128	; 0x80
 800568a:	202a      	movs	r0, #42	; 0x2a
 800568c:	f7fb fd7a 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0029,0x0048);
 8005690:	2148      	movs	r1, #72	; 0x48
 8005692:	2029      	movs	r0, #41	; 0x29
 8005694:	f7fb fd76 	bl	8001184 <LCD_WriteReg>
		delay_ms(20);
 8005698:	2014      	movs	r0, #20
 800569a:	f7fb fc19 	bl	8000ed0 <delay_ms>
		
		LCD_WriteReg(0x0001,0x0100);
 800569e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80056a2:	2001      	movs	r0, #1
 80056a4:	f7fb fd6e 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0002,0x0700);
 80056a8:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80056ac:	2002      	movs	r0, #2
 80056ae:	f7fb fd69 	bl	8001184 <LCD_WriteReg>
        LCD_WriteReg(0x0003,0x1038);//ɨ�跽�� ��->��  ��->�� 
 80056b2:	f241 0138 	movw	r1, #4152	; 0x1038
 80056b6:	2003      	movs	r0, #3
 80056b8:	f7fb fd64 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0008,0x0202);
 80056bc:	f240 2102 	movw	r1, #514	; 0x202
 80056c0:	2008      	movs	r0, #8
 80056c2:	f7fb fd5f 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x000a,0x0000);
 80056c6:	2100      	movs	r1, #0
 80056c8:	200a      	movs	r0, #10
 80056ca:	f7fb fd5b 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x000c,0x0000);
 80056ce:	2100      	movs	r1, #0
 80056d0:	200c      	movs	r0, #12
 80056d2:	f7fb fd57 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x000d,0x0000);
 80056d6:	2100      	movs	r1, #0
 80056d8:	200d      	movs	r0, #13
 80056da:	f7fb fd53 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x000e,0x0030);
 80056de:	2130      	movs	r1, #48	; 0x30
 80056e0:	200e      	movs	r0, #14
 80056e2:	f7fb fd4f 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0050,0x0000);
 80056e6:	2100      	movs	r1, #0
 80056e8:	2050      	movs	r0, #80	; 0x50
 80056ea:	f7fb fd4b 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0051,0x00ef);
 80056ee:	21ef      	movs	r1, #239	; 0xef
 80056f0:	2051      	movs	r0, #81	; 0x51
 80056f2:	f7fb fd47 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0052,0x0000);
 80056f6:	2100      	movs	r1, #0
 80056f8:	2052      	movs	r0, #82	; 0x52
 80056fa:	f7fb fd43 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0053,0x013f);
 80056fe:	f240 113f 	movw	r1, #319	; 0x13f
 8005702:	2053      	movs	r0, #83	; 0x53
 8005704:	f7fb fd3e 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0060,0x2700);
 8005708:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 800570c:	2060      	movs	r0, #96	; 0x60
 800570e:	f7fb fd39 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0061,0x0001);
 8005712:	2101      	movs	r1, #1
 8005714:	2061      	movs	r0, #97	; 0x61
 8005716:	f7fb fd35 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x006a,0x0000);
 800571a:	2100      	movs	r1, #0
 800571c:	206a      	movs	r0, #106	; 0x6a
 800571e:	f7fb fd31 	bl	8001184 <LCD_WriteReg>
		//LCD_WriteReg(0x0080,0x0000);
		//LCD_WriteReg(0x0081,0x0000);
		LCD_WriteReg(0x0090,0X0011);
 8005722:	2111      	movs	r1, #17
 8005724:	2090      	movs	r0, #144	; 0x90
 8005726:	f7fb fd2d 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0092,0x0600);
 800572a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800572e:	2092      	movs	r0, #146	; 0x92
 8005730:	f7fb fd28 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0093,0x0402);
 8005734:	f240 4102 	movw	r1, #1026	; 0x402
 8005738:	2093      	movs	r0, #147	; 0x93
 800573a:	f7fb fd23 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0094,0x0002);
 800573e:	2102      	movs	r1, #2
 8005740:	2094      	movs	r0, #148	; 0x94
 8005742:	f7fb fd1f 	bl	8001184 <LCD_WriteReg>
		delay_ms(20);
 8005746:	2014      	movs	r0, #20
 8005748:	f7fb fbc2 	bl	8000ed0 <delay_ms>
		
		LCD_WriteReg(0x0007,0x0001);
 800574c:	2101      	movs	r1, #1
 800574e:	2007      	movs	r0, #7
 8005750:	f7fb fd18 	bl	8001184 <LCD_WriteReg>
		delay_ms(20);
 8005754:	2014      	movs	r0, #20
 8005756:	f7fb fbbb 	bl	8000ed0 <delay_ms>
		LCD_WriteReg(0x0007,0x0061);
 800575a:	2161      	movs	r1, #97	; 0x61
 800575c:	2007      	movs	r0, #7
 800575e:	f7fb fd11 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0007,0x0173);
 8005762:	f240 1173 	movw	r1, #371	; 0x173
 8005766:	2007      	movs	r0, #7
 8005768:	f7fb fd0c 	bl	8001184 <LCD_WriteReg>
		
		LCD_WriteReg(0x0020,0x0000);
 800576c:	2100      	movs	r1, #0
 800576e:	2020      	movs	r0, #32
 8005770:	f7fb fd08 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0021,0x0000);	  
 8005774:	2100      	movs	r1, #0
 8005776:	2021      	movs	r0, #33	; 0x21
 8005778:	f7fb fd04 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x00,0x22);  
 800577c:	2122      	movs	r1, #34	; 0x22
 800577e:	2000      	movs	r0, #0
 8005780:	f7fb fd00 	bl	8001184 <LCD_WriteReg>
 8005784:	f000 beca 	b.w	800651c <LCD_Init+0x3e64>
	}else if(lcddev.id==0xC505)
 8005788:	4b6b      	ldr	r3, [pc, #428]	; (8005938 <LCD_Init+0x3280>)
 800578a:	889b      	ldrh	r3, [r3, #4]
 800578c:	f24c 5205 	movw	r2, #50437	; 0xc505
 8005790:	4293      	cmp	r3, r2
 8005792:	f040 80d3 	bne.w	800593c <LCD_Init+0x3284>
	{
		LCD_WriteReg(0x0000,0x0000);
 8005796:	2100      	movs	r1, #0
 8005798:	2000      	movs	r0, #0
 800579a:	f7fb fcf3 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 800579e:	2100      	movs	r1, #0
 80057a0:	2000      	movs	r0, #0
 80057a2:	f7fb fcef 	bl	8001184 <LCD_WriteReg>
		delay_ms(20);		  
 80057a6:	2014      	movs	r0, #20
 80057a8:	f7fb fb92 	bl	8000ed0 <delay_ms>
		LCD_WriteReg(0x0000,0x0000);
 80057ac:	2100      	movs	r1, #0
 80057ae:	2000      	movs	r0, #0
 80057b0:	f7fb fce8 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 80057b4:	2100      	movs	r1, #0
 80057b6:	2000      	movs	r0, #0
 80057b8:	f7fb fce4 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 80057bc:	2100      	movs	r1, #0
 80057be:	2000      	movs	r0, #0
 80057c0:	f7fb fce0 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 80057c4:	2100      	movs	r1, #0
 80057c6:	2000      	movs	r0, #0
 80057c8:	f7fb fcdc 	bl	8001184 <LCD_WriteReg>
 		LCD_WriteReg(0x00a4,0x0001);
 80057cc:	2101      	movs	r1, #1
 80057ce:	20a4      	movs	r0, #164	; 0xa4
 80057d0:	f7fb fcd8 	bl	8001184 <LCD_WriteReg>
		delay_ms(20);		  
 80057d4:	2014      	movs	r0, #20
 80057d6:	f7fb fb7b 	bl	8000ed0 <delay_ms>
		LCD_WriteReg(0x0060,0x2700);
 80057da:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80057de:	2060      	movs	r0, #96	; 0x60
 80057e0:	f7fb fcd0 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0008,0x0806);
 80057e4:	f640 0106 	movw	r1, #2054	; 0x806
 80057e8:	2008      	movs	r0, #8
 80057ea:	f7fb fccb 	bl	8001184 <LCD_WriteReg>
		
		LCD_WriteReg(0x0030,0x0703);//gamma setting
 80057ee:	f240 7103 	movw	r1, #1795	; 0x703
 80057f2:	2030      	movs	r0, #48	; 0x30
 80057f4:	f7fb fcc6 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0031,0x0001);
 80057f8:	2101      	movs	r1, #1
 80057fa:	2031      	movs	r0, #49	; 0x31
 80057fc:	f7fb fcc2 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0032,0x0004);
 8005800:	2104      	movs	r1, #4
 8005802:	2032      	movs	r0, #50	; 0x32
 8005804:	f7fb fcbe 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0033,0x0102);
 8005808:	f44f 7181 	mov.w	r1, #258	; 0x102
 800580c:	2033      	movs	r0, #51	; 0x33
 800580e:	f7fb fcb9 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0034,0x0300);
 8005812:	f44f 7140 	mov.w	r1, #768	; 0x300
 8005816:	2034      	movs	r0, #52	; 0x34
 8005818:	f7fb fcb4 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0035,0x0103);
 800581c:	f240 1103 	movw	r1, #259	; 0x103
 8005820:	2035      	movs	r0, #53	; 0x35
 8005822:	f7fb fcaf 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0036,0x001F);
 8005826:	211f      	movs	r1, #31
 8005828:	2036      	movs	r0, #54	; 0x36
 800582a:	f7fb fcab 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0037,0x0703);
 800582e:	f240 7103 	movw	r1, #1795	; 0x703
 8005832:	2037      	movs	r0, #55	; 0x37
 8005834:	f7fb fca6 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0038,0x0001);
 8005838:	2101      	movs	r1, #1
 800583a:	2038      	movs	r0, #56	; 0x38
 800583c:	f7fb fca2 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0039,0x0004);
 8005840:	2104      	movs	r1, #4
 8005842:	2039      	movs	r0, #57	; 0x39
 8005844:	f7fb fc9e 	bl	8001184 <LCD_WriteReg>
		
		LCD_WriteReg(0x0090, 0x0015);	//80Hz
 8005848:	2115      	movs	r1, #21
 800584a:	2090      	movs	r0, #144	; 0x90
 800584c:	f7fb fc9a 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0X0410);	//BT,AP
 8005850:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8005854:	2010      	movs	r0, #16
 8005856:	f7fb fc95 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0011,0x0247);	//DC1,DC0,VC
 800585a:	f240 2147 	movw	r1, #583	; 0x247
 800585e:	2011      	movs	r0, #17
 8005860:	f7fb fc90 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x01BC);
 8005864:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8005868:	2012      	movs	r0, #18
 800586a:	f7fb fc8b 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0e00);
 800586e:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 8005872:	2013      	movs	r0, #19
 8005874:	f7fb fc86 	bl	8001184 <LCD_WriteReg>
		delay_ms(120);
 8005878:	2078      	movs	r0, #120	; 0x78
 800587a:	f7fb fb29 	bl	8000ed0 <delay_ms>
		LCD_WriteReg(0x0001, 0x0100);
 800587e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005882:	2001      	movs	r0, #1
 8005884:	f7fb fc7e 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200);
 8005888:	f44f 7100 	mov.w	r1, #512	; 0x200
 800588c:	2002      	movs	r0, #2
 800588e:	f7fb fc79 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 8005892:	f241 0130 	movw	r1, #4144	; 0x1030
 8005896:	2003      	movs	r0, #3
 8005898:	f7fb fc74 	bl	8001184 <LCD_WriteReg>
		
		LCD_WriteReg(0x000A, 0x0008);
 800589c:	2108      	movs	r1, #8
 800589e:	200a      	movs	r0, #10
 80058a0:	f7fb fc70 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 80058a4:	2100      	movs	r1, #0
 80058a6:	200c      	movs	r0, #12
 80058a8:	f7fb fc6c 	bl	8001184 <LCD_WriteReg>
		
		LCD_WriteReg(0x000E, 0x0020);
 80058ac:	2120      	movs	r1, #32
 80058ae:	200e      	movs	r0, #14
 80058b0:	f7fb fc68 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 80058b4:	2100      	movs	r1, #0
 80058b6:	200f      	movs	r0, #15
 80058b8:	f7fb fc64 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);	//H Start
 80058bc:	2100      	movs	r1, #0
 80058be:	2020      	movs	r0, #32
 80058c0:	f7fb fc60 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);	//V Start
 80058c4:	2100      	movs	r1, #0
 80058c6:	2021      	movs	r0, #33	; 0x21
 80058c8:	f7fb fc5c 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x002A,0x003D);	//vcom2
 80058cc:	213d      	movs	r1, #61	; 0x3d
 80058ce:	202a      	movs	r0, #42	; 0x2a
 80058d0:	f7fb fc58 	bl	8001184 <LCD_WriteReg>
		delay_ms(20);
 80058d4:	2014      	movs	r0, #20
 80058d6:	f7fb fafb 	bl	8000ed0 <delay_ms>
		LCD_WriteReg(0x0029, 0x002d);
 80058da:	212d      	movs	r1, #45	; 0x2d
 80058dc:	2029      	movs	r0, #41	; 0x29
 80058de:	f7fb fc51 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 80058e2:	2100      	movs	r1, #0
 80058e4:	2050      	movs	r0, #80	; 0x50
 80058e6:	f7fb fc4d 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0xD0EF);
 80058ea:	f24d 01ef 	movw	r1, #53487	; 0xd0ef
 80058ee:	2051      	movs	r0, #81	; 0x51
 80058f0:	f7fb fc48 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 80058f4:	2100      	movs	r1, #0
 80058f6:	2052      	movs	r0, #82	; 0x52
 80058f8:	f7fb fc44 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 80058fc:	f240 113f 	movw	r1, #319	; 0x13f
 8005900:	2053      	movs	r0, #83	; 0x53
 8005902:	f7fb fc3f 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0000);
 8005906:	2100      	movs	r1, #0
 8005908:	2061      	movs	r0, #97	; 0x61
 800590a:	f7fb fc3b 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 800590e:	2100      	movs	r1, #0
 8005910:	206a      	movs	r0, #106	; 0x6a
 8005912:	f7fb fc37 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0092,0x0300); 
 8005916:	f44f 7140 	mov.w	r1, #768	; 0x300
 800591a:	2092      	movs	r0, #146	; 0x92
 800591c:	f7fb fc32 	bl	8001184 <LCD_WriteReg>
 
 		LCD_WriteReg(0x0093, 0x0005);
 8005920:	2105      	movs	r1, #5
 8005922:	2093      	movs	r0, #147	; 0x93
 8005924:	f7fb fc2e 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0100);
 8005928:	f44f 7180 	mov.w	r1, #256	; 0x100
 800592c:	2007      	movs	r0, #7
 800592e:	f7fb fc29 	bl	8001184 <LCD_WriteReg>
 8005932:	f000 bdf3 	b.w	800651c <LCD_Init+0x3e64>
 8005936:	bf00      	nop
 8005938:	200024f8 	.word	0x200024f8
	}else if(lcddev.id==0x8989)//OK |/|/|
 800593c:	4bc2      	ldr	r3, [pc, #776]	; (8005c48 <LCD_Init+0x3590>)
 800593e:	889b      	ldrh	r3, [r3, #4]
 8005940:	f648 1289 	movw	r2, #35209	; 0x8989
 8005944:	4293      	cmp	r3, r2
 8005946:	f040 80bc 	bne.w	8005ac2 <LCD_Init+0x340a>
	{	   
		LCD_WriteReg(0x0000,0x0001);//�򿪾���
 800594a:	2101      	movs	r1, #1
 800594c:	2000      	movs	r0, #0
 800594e:	f7fb fc19 	bl	8001184 <LCD_WriteReg>
    	LCD_WriteReg(0x0003,0xA8A4);//0xA8A4
 8005952:	f64a 01a4 	movw	r1, #43172	; 0xa8a4
 8005956:	2003      	movs	r0, #3
 8005958:	f7fb fc14 	bl	8001184 <LCD_WriteReg>
    	LCD_WriteReg(0x000C,0x0000);    
 800595c:	2100      	movs	r1, #0
 800595e:	200c      	movs	r0, #12
 8005960:	f7fb fc10 	bl	8001184 <LCD_WriteReg>
    	LCD_WriteReg(0x000D,0x080C);   
 8005964:	f640 010c 	movw	r1, #2060	; 0x80c
 8005968:	200d      	movs	r0, #13
 800596a:	f7fb fc0b 	bl	8001184 <LCD_WriteReg>
    	LCD_WriteReg(0x000E,0x2B00);    
 800596e:	f44f 512c 	mov.w	r1, #11008	; 0x2b00
 8005972:	200e      	movs	r0, #14
 8005974:	f7fb fc06 	bl	8001184 <LCD_WriteReg>
    	LCD_WriteReg(0x001E,0x00B0);    
 8005978:	21b0      	movs	r1, #176	; 0xb0
 800597a:	201e      	movs	r0, #30
 800597c:	f7fb fc02 	bl	8001184 <LCD_WriteReg>
    	LCD_WriteReg(0x0001,0x2B3F);//�����������320*240  0x6B3F
 8005980:	f642 313f 	movw	r1, #11071	; 0x2b3f
 8005984:	2001      	movs	r0, #1
 8005986:	f7fb fbfd 	bl	8001184 <LCD_WriteReg>
    	LCD_WriteReg(0x0002,0x0600);
 800598a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800598e:	2002      	movs	r0, #2
 8005990:	f7fb fbf8 	bl	8001184 <LCD_WriteReg>
    	LCD_WriteReg(0x0010,0x0000);  
 8005994:	2100      	movs	r1, #0
 8005996:	2010      	movs	r0, #16
 8005998:	f7fb fbf4 	bl	8001184 <LCD_WriteReg>
    	LCD_WriteReg(0x0011,0x6078); //�������ݸ�ʽ  16λɫ 		���� 0x6058
 800599c:	f246 0178 	movw	r1, #24696	; 0x6078
 80059a0:	2011      	movs	r0, #17
 80059a2:	f7fb fbef 	bl	8001184 <LCD_WriteReg>
    	LCD_WriteReg(0x0005,0x0000);  
 80059a6:	2100      	movs	r1, #0
 80059a8:	2005      	movs	r0, #5
 80059aa:	f7fb fbeb 	bl	8001184 <LCD_WriteReg>
    	LCD_WriteReg(0x0006,0x0000);  
 80059ae:	2100      	movs	r1, #0
 80059b0:	2006      	movs	r0, #6
 80059b2:	f7fb fbe7 	bl	8001184 <LCD_WriteReg>
    	LCD_WriteReg(0x0016,0xEF1C);  
 80059b6:	f64e 711c 	movw	r1, #61212	; 0xef1c
 80059ba:	2016      	movs	r0, #22
 80059bc:	f7fb fbe2 	bl	8001184 <LCD_WriteReg>
    	LCD_WriteReg(0x0017,0x0003);  
 80059c0:	2103      	movs	r1, #3
 80059c2:	2017      	movs	r0, #23
 80059c4:	f7fb fbde 	bl	8001184 <LCD_WriteReg>
    	LCD_WriteReg(0x0007,0x0233); //0x0233       
 80059c8:	f240 2133 	movw	r1, #563	; 0x233
 80059cc:	2007      	movs	r0, #7
 80059ce:	f7fb fbd9 	bl	8001184 <LCD_WriteReg>
    	LCD_WriteReg(0x000B,0x0000);  
 80059d2:	2100      	movs	r1, #0
 80059d4:	200b      	movs	r0, #11
 80059d6:	f7fb fbd5 	bl	8001184 <LCD_WriteReg>
    	LCD_WriteReg(0x000F,0x0000); //ɨ�迪ʼ��ַ
 80059da:	2100      	movs	r1, #0
 80059dc:	200f      	movs	r0, #15
 80059de:	f7fb fbd1 	bl	8001184 <LCD_WriteReg>
    	LCD_WriteReg(0x0041,0x0000);  
 80059e2:	2100      	movs	r1, #0
 80059e4:	2041      	movs	r0, #65	; 0x41
 80059e6:	f7fb fbcd 	bl	8001184 <LCD_WriteReg>
    	LCD_WriteReg(0x0042,0x0000);  
 80059ea:	2100      	movs	r1, #0
 80059ec:	2042      	movs	r0, #66	; 0x42
 80059ee:	f7fb fbc9 	bl	8001184 <LCD_WriteReg>
    	LCD_WriteReg(0x0048,0x0000);  
 80059f2:	2100      	movs	r1, #0
 80059f4:	2048      	movs	r0, #72	; 0x48
 80059f6:	f7fb fbc5 	bl	8001184 <LCD_WriteReg>
    	LCD_WriteReg(0x0049,0x013F);  
 80059fa:	f240 113f 	movw	r1, #319	; 0x13f
 80059fe:	2049      	movs	r0, #73	; 0x49
 8005a00:	f7fb fbc0 	bl	8001184 <LCD_WriteReg>
    	LCD_WriteReg(0x004A,0x0000);  
 8005a04:	2100      	movs	r1, #0
 8005a06:	204a      	movs	r0, #74	; 0x4a
 8005a08:	f7fb fbbc 	bl	8001184 <LCD_WriteReg>
    	LCD_WriteReg(0x004B,0x0000);  
 8005a0c:	2100      	movs	r1, #0
 8005a0e:	204b      	movs	r0, #75	; 0x4b
 8005a10:	f7fb fbb8 	bl	8001184 <LCD_WriteReg>
    	LCD_WriteReg(0x0044,0xEF00);  
 8005a14:	f44f 416f 	mov.w	r1, #61184	; 0xef00
 8005a18:	2044      	movs	r0, #68	; 0x44
 8005a1a:	f7fb fbb3 	bl	8001184 <LCD_WriteReg>
    	LCD_WriteReg(0x0045,0x0000);  
 8005a1e:	2100      	movs	r1, #0
 8005a20:	2045      	movs	r0, #69	; 0x45
 8005a22:	f7fb fbaf 	bl	8001184 <LCD_WriteReg>
    	LCD_WriteReg(0x0046,0x013F);  
 8005a26:	f240 113f 	movw	r1, #319	; 0x13f
 8005a2a:	2046      	movs	r0, #70	; 0x46
 8005a2c:	f7fb fbaa 	bl	8001184 <LCD_WriteReg>
    	LCD_WriteReg(0x0030,0x0707);  
 8005a30:	f240 7107 	movw	r1, #1799	; 0x707
 8005a34:	2030      	movs	r0, #48	; 0x30
 8005a36:	f7fb fba5 	bl	8001184 <LCD_WriteReg>
    	LCD_WriteReg(0x0031,0x0204);  
 8005a3a:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005a3e:	2031      	movs	r0, #49	; 0x31
 8005a40:	f7fb fba0 	bl	8001184 <LCD_WriteReg>
    	LCD_WriteReg(0x0032,0x0204);  
 8005a44:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005a48:	2032      	movs	r0, #50	; 0x32
 8005a4a:	f7fb fb9b 	bl	8001184 <LCD_WriteReg>
    	LCD_WriteReg(0x0033,0x0502);  
 8005a4e:	f240 5102 	movw	r1, #1282	; 0x502
 8005a52:	2033      	movs	r0, #51	; 0x33
 8005a54:	f7fb fb96 	bl	8001184 <LCD_WriteReg>
    	LCD_WriteReg(0x0034,0x0507);  
 8005a58:	f240 5107 	movw	r1, #1287	; 0x507
 8005a5c:	2034      	movs	r0, #52	; 0x34
 8005a5e:	f7fb fb91 	bl	8001184 <LCD_WriteReg>
    	LCD_WriteReg(0x0035,0x0204);  
 8005a62:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005a66:	2035      	movs	r0, #53	; 0x35
 8005a68:	f7fb fb8c 	bl	8001184 <LCD_WriteReg>
    	LCD_WriteReg(0x0036,0x0204);  
 8005a6c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005a70:	2036      	movs	r0, #54	; 0x36
 8005a72:	f7fb fb87 	bl	8001184 <LCD_WriteReg>
    	LCD_WriteReg(0x0037,0x0502);  
 8005a76:	f240 5102 	movw	r1, #1282	; 0x502
 8005a7a:	2037      	movs	r0, #55	; 0x37
 8005a7c:	f7fb fb82 	bl	8001184 <LCD_WriteReg>
    	LCD_WriteReg(0x003A,0x0302);  
 8005a80:	f240 3102 	movw	r1, #770	; 0x302
 8005a84:	203a      	movs	r0, #58	; 0x3a
 8005a86:	f7fb fb7d 	bl	8001184 <LCD_WriteReg>
    	LCD_WriteReg(0x003B,0x0302);  
 8005a8a:	f240 3102 	movw	r1, #770	; 0x302
 8005a8e:	203b      	movs	r0, #59	; 0x3b
 8005a90:	f7fb fb78 	bl	8001184 <LCD_WriteReg>
    	LCD_WriteReg(0x0023,0x0000);  
 8005a94:	2100      	movs	r1, #0
 8005a96:	2023      	movs	r0, #35	; 0x23
 8005a98:	f7fb fb74 	bl	8001184 <LCD_WriteReg>
    	LCD_WriteReg(0x0024,0x0000);  
 8005a9c:	2100      	movs	r1, #0
 8005a9e:	2024      	movs	r0, #36	; 0x24
 8005aa0:	f7fb fb70 	bl	8001184 <LCD_WriteReg>
    	LCD_WriteReg(0x0025,0x8000);  
 8005aa4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005aa8:	2025      	movs	r0, #37	; 0x25
 8005aaa:	f7fb fb6b 	bl	8001184 <LCD_WriteReg>
    	LCD_WriteReg(0x004f,0);        //����ַ0
 8005aae:	2100      	movs	r1, #0
 8005ab0:	204f      	movs	r0, #79	; 0x4f
 8005ab2:	f7fb fb67 	bl	8001184 <LCD_WriteReg>
    	LCD_WriteReg(0x004e,0);        //����ַ0
 8005ab6:	2100      	movs	r1, #0
 8005ab8:	204e      	movs	r0, #78	; 0x4e
 8005aba:	f7fb fb63 	bl	8001184 <LCD_WriteReg>
 8005abe:	f000 bd2d 	b.w	800651c <LCD_Init+0x3e64>
	}else if(lcddev.id==0x4531)//OK |/|/|
 8005ac2:	4b61      	ldr	r3, [pc, #388]	; (8005c48 <LCD_Init+0x3590>)
 8005ac4:	889b      	ldrh	r3, [r3, #4]
 8005ac6:	f244 5231 	movw	r2, #17713	; 0x4531
 8005aca:	4293      	cmp	r3, r2
 8005acc:	f040 80be 	bne.w	8005c4c <LCD_Init+0x3594>
	{
		LCD_WriteReg(0X00,0X0001);   
 8005ad0:	2101      	movs	r1, #1
 8005ad2:	2000      	movs	r0, #0
 8005ad4:	f7fb fb56 	bl	8001184 <LCD_WriteReg>
		delay_ms(10);   
 8005ad8:	200a      	movs	r0, #10
 8005ada:	f7fb f9f9 	bl	8000ed0 <delay_ms>
		LCD_WriteReg(0X10,0X1628);   
 8005ade:	f241 6128 	movw	r1, #5672	; 0x1628
 8005ae2:	2010      	movs	r0, #16
 8005ae4:	f7fb fb4e 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0X12,0X000e);//0x0006    
 8005ae8:	210e      	movs	r1, #14
 8005aea:	2012      	movs	r0, #18
 8005aec:	f7fb fb4a 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0X13,0X0A39);   
 8005af0:	f640 2139 	movw	r1, #2617	; 0xa39
 8005af4:	2013      	movs	r0, #19
 8005af6:	f7fb fb45 	bl	8001184 <LCD_WriteReg>
		delay_ms(10);   
 8005afa:	200a      	movs	r0, #10
 8005afc:	f7fb f9e8 	bl	8000ed0 <delay_ms>
		LCD_WriteReg(0X11,0X0040);   
 8005b00:	2140      	movs	r1, #64	; 0x40
 8005b02:	2011      	movs	r0, #17
 8005b04:	f7fb fb3e 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0X15,0X0050);   
 8005b08:	2150      	movs	r1, #80	; 0x50
 8005b0a:	2015      	movs	r0, #21
 8005b0c:	f7fb fb3a 	bl	8001184 <LCD_WriteReg>
		delay_ms(10);   
 8005b10:	200a      	movs	r0, #10
 8005b12:	f7fb f9dd 	bl	8000ed0 <delay_ms>
		LCD_WriteReg(0X12,0X001e);//16    
 8005b16:	211e      	movs	r1, #30
 8005b18:	2012      	movs	r0, #18
 8005b1a:	f7fb fb33 	bl	8001184 <LCD_WriteReg>
		delay_ms(10);   
 8005b1e:	200a      	movs	r0, #10
 8005b20:	f7fb f9d6 	bl	8000ed0 <delay_ms>
		LCD_WriteReg(0X10,0X1620);   
 8005b24:	f44f 51b1 	mov.w	r1, #5664	; 0x1620
 8005b28:	2010      	movs	r0, #16
 8005b2a:	f7fb fb2b 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0X13,0X2A39);   
 8005b2e:	f642 2139 	movw	r1, #10809	; 0x2a39
 8005b32:	2013      	movs	r0, #19
 8005b34:	f7fb fb26 	bl	8001184 <LCD_WriteReg>
		delay_ms(10);   
 8005b38:	200a      	movs	r0, #10
 8005b3a:	f7fb f9c9 	bl	8000ed0 <delay_ms>
		LCD_WriteReg(0X01,0X0100);   
 8005b3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005b42:	2001      	movs	r0, #1
 8005b44:	f7fb fb1e 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0X02,0X0300);   
 8005b48:	f44f 7140 	mov.w	r1, #768	; 0x300
 8005b4c:	2002      	movs	r0, #2
 8005b4e:	f7fb fb19 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0X03,0X1038);//�ı䷽���   
 8005b52:	f241 0138 	movw	r1, #4152	; 0x1038
 8005b56:	2003      	movs	r0, #3
 8005b58:	f7fb fb14 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0X08,0X0202);   
 8005b5c:	f240 2102 	movw	r1, #514	; 0x202
 8005b60:	2008      	movs	r0, #8
 8005b62:	f7fb fb0f 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0X0A,0X0008);   
 8005b66:	2108      	movs	r1, #8
 8005b68:	200a      	movs	r0, #10
 8005b6a:	f7fb fb0b 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0X30,0X0000);   
 8005b6e:	2100      	movs	r1, #0
 8005b70:	2030      	movs	r0, #48	; 0x30
 8005b72:	f7fb fb07 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0X31,0X0402);   
 8005b76:	f240 4102 	movw	r1, #1026	; 0x402
 8005b7a:	2031      	movs	r0, #49	; 0x31
 8005b7c:	f7fb fb02 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0X32,0X0106);   
 8005b80:	f44f 7183 	mov.w	r1, #262	; 0x106
 8005b84:	2032      	movs	r0, #50	; 0x32
 8005b86:	f7fb fafd 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0X33,0X0503);   
 8005b8a:	f240 5103 	movw	r1, #1283	; 0x503
 8005b8e:	2033      	movs	r0, #51	; 0x33
 8005b90:	f7fb faf8 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0X34,0X0104);   
 8005b94:	f44f 7182 	mov.w	r1, #260	; 0x104
 8005b98:	2034      	movs	r0, #52	; 0x34
 8005b9a:	f7fb faf3 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0X35,0X0301);   
 8005b9e:	f240 3101 	movw	r1, #769	; 0x301
 8005ba2:	2035      	movs	r0, #53	; 0x35
 8005ba4:	f7fb faee 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0X36,0X0707);   
 8005ba8:	f240 7107 	movw	r1, #1799	; 0x707
 8005bac:	2036      	movs	r0, #54	; 0x36
 8005bae:	f7fb fae9 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0X37,0X0305);   
 8005bb2:	f240 3105 	movw	r1, #773	; 0x305
 8005bb6:	2037      	movs	r0, #55	; 0x37
 8005bb8:	f7fb fae4 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0X38,0X0208);   
 8005bbc:	f44f 7102 	mov.w	r1, #520	; 0x208
 8005bc0:	2038      	movs	r0, #56	; 0x38
 8005bc2:	f7fb fadf 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0X39,0X0F0B);   
 8005bc6:	f640 710b 	movw	r1, #3851	; 0xf0b
 8005bca:	2039      	movs	r0, #57	; 0x39
 8005bcc:	f7fb fada 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0X41,0X0002);   
 8005bd0:	2102      	movs	r1, #2
 8005bd2:	2041      	movs	r0, #65	; 0x41
 8005bd4:	f7fb fad6 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0X60,0X2700);   
 8005bd8:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8005bdc:	2060      	movs	r0, #96	; 0x60
 8005bde:	f7fb fad1 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0X61,0X0001);   
 8005be2:	2101      	movs	r1, #1
 8005be4:	2061      	movs	r0, #97	; 0x61
 8005be6:	f7fb facd 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0X90,0X0210);   
 8005bea:	f44f 7104 	mov.w	r1, #528	; 0x210
 8005bee:	2090      	movs	r0, #144	; 0x90
 8005bf0:	f7fb fac8 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0X92,0X010A);   
 8005bf4:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8005bf8:	2092      	movs	r0, #146	; 0x92
 8005bfa:	f7fb fac3 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0X93,0X0004);   
 8005bfe:	2104      	movs	r1, #4
 8005c00:	2093      	movs	r0, #147	; 0x93
 8005c02:	f7fb fabf 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0XA0,0X0100);   
 8005c06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005c0a:	20a0      	movs	r0, #160	; 0xa0
 8005c0c:	f7fb faba 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0001);   
 8005c10:	2101      	movs	r1, #1
 8005c12:	2007      	movs	r0, #7
 8005c14:	f7fb fab6 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0021);   
 8005c18:	2121      	movs	r1, #33	; 0x21
 8005c1a:	2007      	movs	r0, #7
 8005c1c:	f7fb fab2 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0023);   
 8005c20:	2123      	movs	r1, #35	; 0x23
 8005c22:	2007      	movs	r0, #7
 8005c24:	f7fb faae 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0033);   
 8005c28:	2133      	movs	r1, #51	; 0x33
 8005c2a:	2007      	movs	r0, #7
 8005c2c:	f7fb faaa 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0133);   
 8005c30:	f240 1133 	movw	r1, #307	; 0x133
 8005c34:	2007      	movs	r0, #7
 8005c36:	f7fb faa5 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0XA0,0X0000); 
 8005c3a:	2100      	movs	r1, #0
 8005c3c:	20a0      	movs	r0, #160	; 0xa0
 8005c3e:	f7fb faa1 	bl	8001184 <LCD_WriteReg>
 8005c42:	f000 bc6b 	b.w	800651c <LCD_Init+0x3e64>
 8005c46:	bf00      	nop
 8005c48:	200024f8 	.word	0x200024f8
	}else if(lcddev.id==0x4535)
 8005c4c:	4b5b      	ldr	r3, [pc, #364]	; (8005dbc <LCD_Init+0x3704>)
 8005c4e:	889b      	ldrh	r3, [r3, #4]
 8005c50:	f244 5235 	movw	r2, #17717	; 0x4535
 8005c54:	4293      	cmp	r3, r2
 8005c56:	f040 80b3 	bne.w	8005dc0 <LCD_Init+0x3708>
	{			      
		LCD_WriteReg(0X15,0X0030);   
 8005c5a:	2130      	movs	r1, #48	; 0x30
 8005c5c:	2015      	movs	r0, #21
 8005c5e:	f7fb fa91 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0X9A,0X0010);   
 8005c62:	2110      	movs	r1, #16
 8005c64:	209a      	movs	r0, #154	; 0x9a
 8005c66:	f7fb fa8d 	bl	8001184 <LCD_WriteReg>
 		LCD_WriteReg(0X11,0X0020);   
 8005c6a:	2120      	movs	r1, #32
 8005c6c:	2011      	movs	r0, #17
 8005c6e:	f7fb fa89 	bl	8001184 <LCD_WriteReg>
 		LCD_WriteReg(0X10,0X3428);   
 8005c72:	f243 4128 	movw	r1, #13352	; 0x3428
 8005c76:	2010      	movs	r0, #16
 8005c78:	f7fb fa84 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0X12,0X0002);//16    
 8005c7c:	2102      	movs	r1, #2
 8005c7e:	2012      	movs	r0, #18
 8005c80:	f7fb fa80 	bl	8001184 <LCD_WriteReg>
 		LCD_WriteReg(0X13,0X1038);   
 8005c84:	f241 0138 	movw	r1, #4152	; 0x1038
 8005c88:	2013      	movs	r0, #19
 8005c8a:	f7fb fa7b 	bl	8001184 <LCD_WriteReg>
		delay_ms(40);   
 8005c8e:	2028      	movs	r0, #40	; 0x28
 8005c90:	f7fb f91e 	bl	8000ed0 <delay_ms>
		LCD_WriteReg(0X12,0X0012);//16    
 8005c94:	2112      	movs	r1, #18
 8005c96:	2012      	movs	r0, #18
 8005c98:	f7fb fa74 	bl	8001184 <LCD_WriteReg>
		delay_ms(40);   
 8005c9c:	2028      	movs	r0, #40	; 0x28
 8005c9e:	f7fb f917 	bl	8000ed0 <delay_ms>
  		LCD_WriteReg(0X10,0X3420);   
 8005ca2:	f243 4120 	movw	r1, #13344	; 0x3420
 8005ca6:	2010      	movs	r0, #16
 8005ca8:	f7fb fa6c 	bl	8001184 <LCD_WriteReg>
 		LCD_WriteReg(0X13,0X3038);   
 8005cac:	f243 0138 	movw	r1, #12344	; 0x3038
 8005cb0:	2013      	movs	r0, #19
 8005cb2:	f7fb fa67 	bl	8001184 <LCD_WriteReg>
		delay_ms(70);   
 8005cb6:	2046      	movs	r0, #70	; 0x46
 8005cb8:	f7fb f90a 	bl	8000ed0 <delay_ms>
		LCD_WriteReg(0X30,0X0000);   
 8005cbc:	2100      	movs	r1, #0
 8005cbe:	2030      	movs	r0, #48	; 0x30
 8005cc0:	f7fb fa60 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0X31,0X0402);   
 8005cc4:	f240 4102 	movw	r1, #1026	; 0x402
 8005cc8:	2031      	movs	r0, #49	; 0x31
 8005cca:	f7fb fa5b 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0X32,0X0307);   
 8005cce:	f240 3107 	movw	r1, #775	; 0x307
 8005cd2:	2032      	movs	r0, #50	; 0x32
 8005cd4:	f7fb fa56 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0X33,0X0304);   
 8005cd8:	f44f 7141 	mov.w	r1, #772	; 0x304
 8005cdc:	2033      	movs	r0, #51	; 0x33
 8005cde:	f7fb fa51 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0X34,0X0004);   
 8005ce2:	2104      	movs	r1, #4
 8005ce4:	2034      	movs	r0, #52	; 0x34
 8005ce6:	f7fb fa4d 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0X35,0X0401);   
 8005cea:	f240 4101 	movw	r1, #1025	; 0x401
 8005cee:	2035      	movs	r0, #53	; 0x35
 8005cf0:	f7fb fa48 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0X36,0X0707);   
 8005cf4:	f240 7107 	movw	r1, #1799	; 0x707
 8005cf8:	2036      	movs	r0, #54	; 0x36
 8005cfa:	f7fb fa43 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0X37,0X0305);   
 8005cfe:	f240 3105 	movw	r1, #773	; 0x305
 8005d02:	2037      	movs	r0, #55	; 0x37
 8005d04:	f7fb fa3e 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0X38,0X0610);   
 8005d08:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8005d0c:	2038      	movs	r0, #56	; 0x38
 8005d0e:	f7fb fa39 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0X39,0X0610); 
 8005d12:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8005d16:	2039      	movs	r0, #57	; 0x39
 8005d18:	f7fb fa34 	bl	8001184 <LCD_WriteReg>
		  
		LCD_WriteReg(0X01,0X0100);   
 8005d1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005d20:	2001      	movs	r0, #1
 8005d22:	f7fb fa2f 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0X02,0X0300);   
 8005d26:	f44f 7140 	mov.w	r1, #768	; 0x300
 8005d2a:	2002      	movs	r0, #2
 8005d2c:	f7fb fa2a 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0X03,0X1030);//�ı䷽���   
 8005d30:	f241 0130 	movw	r1, #4144	; 0x1030
 8005d34:	2003      	movs	r0, #3
 8005d36:	f7fb fa25 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0X08,0X0808);   
 8005d3a:	f640 0108 	movw	r1, #2056	; 0x808
 8005d3e:	2008      	movs	r0, #8
 8005d40:	f7fb fa20 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0X0A,0X0008);   
 8005d44:	2108      	movs	r1, #8
 8005d46:	200a      	movs	r0, #10
 8005d48:	f7fb fa1c 	bl	8001184 <LCD_WriteReg>
 		LCD_WriteReg(0X60,0X2700);   
 8005d4c:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8005d50:	2060      	movs	r0, #96	; 0x60
 8005d52:	f7fb fa17 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0X61,0X0001);   
 8005d56:	2101      	movs	r1, #1
 8005d58:	2061      	movs	r0, #97	; 0x61
 8005d5a:	f7fb fa13 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0X90,0X013E);   
 8005d5e:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8005d62:	2090      	movs	r0, #144	; 0x90
 8005d64:	f7fb fa0e 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0X92,0X0100);   
 8005d68:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005d6c:	2092      	movs	r0, #146	; 0x92
 8005d6e:	f7fb fa09 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0X93,0X0100);   
 8005d72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005d76:	2093      	movs	r0, #147	; 0x93
 8005d78:	f7fb fa04 	bl	8001184 <LCD_WriteReg>
 		LCD_WriteReg(0XA0,0X3000);   
 8005d7c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005d80:	20a0      	movs	r0, #160	; 0xa0
 8005d82:	f7fb f9ff 	bl	8001184 <LCD_WriteReg>
 		LCD_WriteReg(0XA3,0X0010);   
 8005d86:	2110      	movs	r1, #16
 8005d88:	20a3      	movs	r0, #163	; 0xa3
 8005d8a:	f7fb f9fb 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0001);   
 8005d8e:	2101      	movs	r1, #1
 8005d90:	2007      	movs	r0, #7
 8005d92:	f7fb f9f7 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0021);   
 8005d96:	2121      	movs	r1, #33	; 0x21
 8005d98:	2007      	movs	r0, #7
 8005d9a:	f7fb f9f3 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0023);   
 8005d9e:	2123      	movs	r1, #35	; 0x23
 8005da0:	2007      	movs	r0, #7
 8005da2:	f7fb f9ef 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0033);   
 8005da6:	2133      	movs	r1, #51	; 0x33
 8005da8:	2007      	movs	r0, #7
 8005daa:	f7fb f9eb 	bl	8001184 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0133);   
 8005dae:	f240 1133 	movw	r1, #307	; 0x133
 8005db2:	2007      	movs	r0, #7
 8005db4:	f7fb f9e6 	bl	8001184 <LCD_WriteReg>
 8005db8:	e3b0      	b.n	800651c <LCD_Init+0x3e64>
 8005dba:	bf00      	nop
 8005dbc:	200024f8 	.word	0x200024f8
	}else if(lcddev.id==0X1963)
 8005dc0:	4ba8      	ldr	r3, [pc, #672]	; (8006064 <LCD_Init+0x39ac>)
 8005dc2:	889b      	ldrh	r3, [r3, #4]
 8005dc4:	f641 1263 	movw	r2, #6499	; 0x1963
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	f040 83a7 	bne.w	800651c <LCD_Init+0x3e64>
	{
		LCD_WR_REG(0xE2);		//Set PLL with OSC = 10MHz (hardware),	Multiplier N = 35, 250MHz < VCO < 800MHz = OSC*(N+1), VCO = 300MHz
 8005dce:	20e2      	movs	r0, #226	; 0xe2
 8005dd0:	f7fb f94c 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATA(0x1D);		//����1 
 8005dd4:	4ba4      	ldr	r3, [pc, #656]	; (8006068 <LCD_Init+0x39b0>)
 8005dd6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005dda:	611a      	str	r2, [r3, #16]
 8005ddc:	4ba2      	ldr	r3, [pc, #648]	; (8006068 <LCD_Init+0x39b0>)
 8005dde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005de2:	615a      	str	r2, [r3, #20]
 8005de4:	4ba1      	ldr	r3, [pc, #644]	; (800606c <LCD_Init+0x39b4>)
 8005de6:	221d      	movs	r2, #29
 8005de8:	60da      	str	r2, [r3, #12]
 8005dea:	4b9f      	ldr	r3, [pc, #636]	; (8006068 <LCD_Init+0x39b0>)
 8005dec:	2280      	movs	r2, #128	; 0x80
 8005dee:	615a      	str	r2, [r3, #20]
 8005df0:	4b9d      	ldr	r3, [pc, #628]	; (8006068 <LCD_Init+0x39b0>)
 8005df2:	2280      	movs	r2, #128	; 0x80
 8005df4:	611a      	str	r2, [r3, #16]
 8005df6:	4b9c      	ldr	r3, [pc, #624]	; (8006068 <LCD_Init+0x39b0>)
 8005df8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005dfc:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x02);		//����2 Divider M = 2, PLL = 300/(M+1) = 100MHz
 8005dfe:	4b9a      	ldr	r3, [pc, #616]	; (8006068 <LCD_Init+0x39b0>)
 8005e00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e04:	611a      	str	r2, [r3, #16]
 8005e06:	4b98      	ldr	r3, [pc, #608]	; (8006068 <LCD_Init+0x39b0>)
 8005e08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e0c:	615a      	str	r2, [r3, #20]
 8005e0e:	4b97      	ldr	r3, [pc, #604]	; (800606c <LCD_Init+0x39b4>)
 8005e10:	2202      	movs	r2, #2
 8005e12:	60da      	str	r2, [r3, #12]
 8005e14:	4b94      	ldr	r3, [pc, #592]	; (8006068 <LCD_Init+0x39b0>)
 8005e16:	2280      	movs	r2, #128	; 0x80
 8005e18:	615a      	str	r2, [r3, #20]
 8005e1a:	4b93      	ldr	r3, [pc, #588]	; (8006068 <LCD_Init+0x39b0>)
 8005e1c:	2280      	movs	r2, #128	; 0x80
 8005e1e:	611a      	str	r2, [r3, #16]
 8005e20:	4b91      	ldr	r3, [pc, #580]	; (8006068 <LCD_Init+0x39b0>)
 8005e22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e26:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x04);		//����3 Validate M and N values   
 8005e28:	4b8f      	ldr	r3, [pc, #572]	; (8006068 <LCD_Init+0x39b0>)
 8005e2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e2e:	611a      	str	r2, [r3, #16]
 8005e30:	4b8d      	ldr	r3, [pc, #564]	; (8006068 <LCD_Init+0x39b0>)
 8005e32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e36:	615a      	str	r2, [r3, #20]
 8005e38:	4b8c      	ldr	r3, [pc, #560]	; (800606c <LCD_Init+0x39b4>)
 8005e3a:	2204      	movs	r2, #4
 8005e3c:	60da      	str	r2, [r3, #12]
 8005e3e:	4b8a      	ldr	r3, [pc, #552]	; (8006068 <LCD_Init+0x39b0>)
 8005e40:	2280      	movs	r2, #128	; 0x80
 8005e42:	615a      	str	r2, [r3, #20]
 8005e44:	4b88      	ldr	r3, [pc, #544]	; (8006068 <LCD_Init+0x39b0>)
 8005e46:	2280      	movs	r2, #128	; 0x80
 8005e48:	611a      	str	r2, [r3, #16]
 8005e4a:	4b87      	ldr	r3, [pc, #540]	; (8006068 <LCD_Init+0x39b0>)
 8005e4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e50:	611a      	str	r2, [r3, #16]
		delay_us(100);
 8005e52:	2064      	movs	r0, #100	; 0x64
 8005e54:	f7fa fffe 	bl	8000e54 <delay_us>
		LCD_WR_REG(0xE0);		// Start PLL command
 8005e58:	20e0      	movs	r0, #224	; 0xe0
 8005e5a:	f7fb f907 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATA(0x01);		// enable PLL
 8005e5e:	4b82      	ldr	r3, [pc, #520]	; (8006068 <LCD_Init+0x39b0>)
 8005e60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e64:	611a      	str	r2, [r3, #16]
 8005e66:	4b80      	ldr	r3, [pc, #512]	; (8006068 <LCD_Init+0x39b0>)
 8005e68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e6c:	615a      	str	r2, [r3, #20]
 8005e6e:	4b7f      	ldr	r3, [pc, #508]	; (800606c <LCD_Init+0x39b4>)
 8005e70:	2201      	movs	r2, #1
 8005e72:	60da      	str	r2, [r3, #12]
 8005e74:	4b7c      	ldr	r3, [pc, #496]	; (8006068 <LCD_Init+0x39b0>)
 8005e76:	2280      	movs	r2, #128	; 0x80
 8005e78:	615a      	str	r2, [r3, #20]
 8005e7a:	4b7b      	ldr	r3, [pc, #492]	; (8006068 <LCD_Init+0x39b0>)
 8005e7c:	2280      	movs	r2, #128	; 0x80
 8005e7e:	611a      	str	r2, [r3, #16]
 8005e80:	4b79      	ldr	r3, [pc, #484]	; (8006068 <LCD_Init+0x39b0>)
 8005e82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e86:	611a      	str	r2, [r3, #16]
		delay_ms(10);
 8005e88:	200a      	movs	r0, #10
 8005e8a:	f7fb f821 	bl	8000ed0 <delay_ms>
		LCD_WR_REG(0xE0);		// Start PLL command again
 8005e8e:	20e0      	movs	r0, #224	; 0xe0
 8005e90:	f7fb f8ec 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATA(0x03);		// now, use PLL output as system clock	
 8005e94:	4b74      	ldr	r3, [pc, #464]	; (8006068 <LCD_Init+0x39b0>)
 8005e96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e9a:	611a      	str	r2, [r3, #16]
 8005e9c:	4b72      	ldr	r3, [pc, #456]	; (8006068 <LCD_Init+0x39b0>)
 8005e9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ea2:	615a      	str	r2, [r3, #20]
 8005ea4:	4b71      	ldr	r3, [pc, #452]	; (800606c <LCD_Init+0x39b4>)
 8005ea6:	2203      	movs	r2, #3
 8005ea8:	60da      	str	r2, [r3, #12]
 8005eaa:	4b6f      	ldr	r3, [pc, #444]	; (8006068 <LCD_Init+0x39b0>)
 8005eac:	2280      	movs	r2, #128	; 0x80
 8005eae:	615a      	str	r2, [r3, #20]
 8005eb0:	4b6d      	ldr	r3, [pc, #436]	; (8006068 <LCD_Init+0x39b0>)
 8005eb2:	2280      	movs	r2, #128	; 0x80
 8005eb4:	611a      	str	r2, [r3, #16]
 8005eb6:	4b6c      	ldr	r3, [pc, #432]	; (8006068 <LCD_Init+0x39b0>)
 8005eb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ebc:	611a      	str	r2, [r3, #16]
		delay_ms(12);  
 8005ebe:	200c      	movs	r0, #12
 8005ec0:	f7fb f806 	bl	8000ed0 <delay_ms>
		LCD_WR_REG(0x01);		//��λ
 8005ec4:	2001      	movs	r0, #1
 8005ec6:	f7fb f8d1 	bl	800106c <LCD_WR_REG>
		delay_ms(10);
 8005eca:	200a      	movs	r0, #10
 8005ecc:	f7fb f800 	bl	8000ed0 <delay_ms>
		
		LCD_WR_REG(0xE6);		//��������Ƶ��,33Mhz
 8005ed0:	20e6      	movs	r0, #230	; 0xe6
 8005ed2:	f7fb f8cb 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATA(0x2F);
 8005ed6:	4b64      	ldr	r3, [pc, #400]	; (8006068 <LCD_Init+0x39b0>)
 8005ed8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005edc:	611a      	str	r2, [r3, #16]
 8005ede:	4b62      	ldr	r3, [pc, #392]	; (8006068 <LCD_Init+0x39b0>)
 8005ee0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ee4:	615a      	str	r2, [r3, #20]
 8005ee6:	4b61      	ldr	r3, [pc, #388]	; (800606c <LCD_Init+0x39b4>)
 8005ee8:	222f      	movs	r2, #47	; 0x2f
 8005eea:	60da      	str	r2, [r3, #12]
 8005eec:	4b5e      	ldr	r3, [pc, #376]	; (8006068 <LCD_Init+0x39b0>)
 8005eee:	2280      	movs	r2, #128	; 0x80
 8005ef0:	615a      	str	r2, [r3, #20]
 8005ef2:	4b5d      	ldr	r3, [pc, #372]	; (8006068 <LCD_Init+0x39b0>)
 8005ef4:	2280      	movs	r2, #128	; 0x80
 8005ef6:	611a      	str	r2, [r3, #16]
 8005ef8:	4b5b      	ldr	r3, [pc, #364]	; (8006068 <LCD_Init+0x39b0>)
 8005efa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005efe:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFF);
 8005f00:	4b59      	ldr	r3, [pc, #356]	; (8006068 <LCD_Init+0x39b0>)
 8005f02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005f06:	611a      	str	r2, [r3, #16]
 8005f08:	4b57      	ldr	r3, [pc, #348]	; (8006068 <LCD_Init+0x39b0>)
 8005f0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f0e:	615a      	str	r2, [r3, #20]
 8005f10:	4b56      	ldr	r3, [pc, #344]	; (800606c <LCD_Init+0x39b4>)
 8005f12:	22ff      	movs	r2, #255	; 0xff
 8005f14:	60da      	str	r2, [r3, #12]
 8005f16:	4b54      	ldr	r3, [pc, #336]	; (8006068 <LCD_Init+0x39b0>)
 8005f18:	2280      	movs	r2, #128	; 0x80
 8005f1a:	615a      	str	r2, [r3, #20]
 8005f1c:	4b52      	ldr	r3, [pc, #328]	; (8006068 <LCD_Init+0x39b0>)
 8005f1e:	2280      	movs	r2, #128	; 0x80
 8005f20:	611a      	str	r2, [r3, #16]
 8005f22:	4b51      	ldr	r3, [pc, #324]	; (8006068 <LCD_Init+0x39b0>)
 8005f24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f28:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFF);
 8005f2a:	4b4f      	ldr	r3, [pc, #316]	; (8006068 <LCD_Init+0x39b0>)
 8005f2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005f30:	611a      	str	r2, [r3, #16]
 8005f32:	4b4d      	ldr	r3, [pc, #308]	; (8006068 <LCD_Init+0x39b0>)
 8005f34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f38:	615a      	str	r2, [r3, #20]
 8005f3a:	4b4c      	ldr	r3, [pc, #304]	; (800606c <LCD_Init+0x39b4>)
 8005f3c:	22ff      	movs	r2, #255	; 0xff
 8005f3e:	60da      	str	r2, [r3, #12]
 8005f40:	4b49      	ldr	r3, [pc, #292]	; (8006068 <LCD_Init+0x39b0>)
 8005f42:	2280      	movs	r2, #128	; 0x80
 8005f44:	615a      	str	r2, [r3, #20]
 8005f46:	4b48      	ldr	r3, [pc, #288]	; (8006068 <LCD_Init+0x39b0>)
 8005f48:	2280      	movs	r2, #128	; 0x80
 8005f4a:	611a      	str	r2, [r3, #16]
 8005f4c:	4b46      	ldr	r3, [pc, #280]	; (8006068 <LCD_Init+0x39b0>)
 8005f4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f52:	611a      	str	r2, [r3, #16]
		
		LCD_WR_REG(0xB0);		//����LCDģʽ
 8005f54:	20b0      	movs	r0, #176	; 0xb0
 8005f56:	f7fb f889 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATA(0x20);		//24λģʽ
 8005f5a:	4b43      	ldr	r3, [pc, #268]	; (8006068 <LCD_Init+0x39b0>)
 8005f5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005f60:	611a      	str	r2, [r3, #16]
 8005f62:	4b41      	ldr	r3, [pc, #260]	; (8006068 <LCD_Init+0x39b0>)
 8005f64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f68:	615a      	str	r2, [r3, #20]
 8005f6a:	4b40      	ldr	r3, [pc, #256]	; (800606c <LCD_Init+0x39b4>)
 8005f6c:	2220      	movs	r2, #32
 8005f6e:	60da      	str	r2, [r3, #12]
 8005f70:	4b3d      	ldr	r3, [pc, #244]	; (8006068 <LCD_Init+0x39b0>)
 8005f72:	2280      	movs	r2, #128	; 0x80
 8005f74:	615a      	str	r2, [r3, #20]
 8005f76:	4b3c      	ldr	r3, [pc, #240]	; (8006068 <LCD_Init+0x39b0>)
 8005f78:	2280      	movs	r2, #128	; 0x80
 8005f7a:	611a      	str	r2, [r3, #16]
 8005f7c:	4b3a      	ldr	r3, [pc, #232]	; (8006068 <LCD_Init+0x39b0>)
 8005f7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f82:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);		//TFT ģʽ 
 8005f84:	4b38      	ldr	r3, [pc, #224]	; (8006068 <LCD_Init+0x39b0>)
 8005f86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005f8a:	611a      	str	r2, [r3, #16]
 8005f8c:	4b36      	ldr	r3, [pc, #216]	; (8006068 <LCD_Init+0x39b0>)
 8005f8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f92:	615a      	str	r2, [r3, #20]
 8005f94:	4b35      	ldr	r3, [pc, #212]	; (800606c <LCD_Init+0x39b4>)
 8005f96:	2200      	movs	r2, #0
 8005f98:	60da      	str	r2, [r3, #12]
 8005f9a:	4b33      	ldr	r3, [pc, #204]	; (8006068 <LCD_Init+0x39b0>)
 8005f9c:	2280      	movs	r2, #128	; 0x80
 8005f9e:	615a      	str	r2, [r3, #20]
 8005fa0:	4b31      	ldr	r3, [pc, #196]	; (8006068 <LCD_Init+0x39b0>)
 8005fa2:	2280      	movs	r2, #128	; 0x80
 8005fa4:	611a      	str	r2, [r3, #16]
 8005fa6:	4b30      	ldr	r3, [pc, #192]	; (8006068 <LCD_Init+0x39b0>)
 8005fa8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fac:	611a      	str	r2, [r3, #16]
	
		LCD_WR_DATA((SSD_HOR_RESOLUTION-1)>>8);//����LCDˮƽ����
 8005fae:	4b2e      	ldr	r3, [pc, #184]	; (8006068 <LCD_Init+0x39b0>)
 8005fb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005fb4:	611a      	str	r2, [r3, #16]
 8005fb6:	4b2c      	ldr	r3, [pc, #176]	; (8006068 <LCD_Init+0x39b0>)
 8005fb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fbc:	615a      	str	r2, [r3, #20]
 8005fbe:	4b2b      	ldr	r3, [pc, #172]	; (800606c <LCD_Init+0x39b4>)
 8005fc0:	2203      	movs	r2, #3
 8005fc2:	60da      	str	r2, [r3, #12]
 8005fc4:	4b28      	ldr	r3, [pc, #160]	; (8006068 <LCD_Init+0x39b0>)
 8005fc6:	2280      	movs	r2, #128	; 0x80
 8005fc8:	615a      	str	r2, [r3, #20]
 8005fca:	4b27      	ldr	r3, [pc, #156]	; (8006068 <LCD_Init+0x39b0>)
 8005fcc:	2280      	movs	r2, #128	; 0x80
 8005fce:	611a      	str	r2, [r3, #16]
 8005fd0:	4b25      	ldr	r3, [pc, #148]	; (8006068 <LCD_Init+0x39b0>)
 8005fd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fd6:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HOR_RESOLUTION-1);		 
 8005fd8:	4b23      	ldr	r3, [pc, #140]	; (8006068 <LCD_Init+0x39b0>)
 8005fda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005fde:	611a      	str	r2, [r3, #16]
 8005fe0:	4b21      	ldr	r3, [pc, #132]	; (8006068 <LCD_Init+0x39b0>)
 8005fe2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fe6:	615a      	str	r2, [r3, #20]
 8005fe8:	4b20      	ldr	r3, [pc, #128]	; (800606c <LCD_Init+0x39b4>)
 8005fea:	f240 321f 	movw	r2, #799	; 0x31f
 8005fee:	60da      	str	r2, [r3, #12]
 8005ff0:	4b1d      	ldr	r3, [pc, #116]	; (8006068 <LCD_Init+0x39b0>)
 8005ff2:	2280      	movs	r2, #128	; 0x80
 8005ff4:	615a      	str	r2, [r3, #20]
 8005ff6:	4b1c      	ldr	r3, [pc, #112]	; (8006068 <LCD_Init+0x39b0>)
 8005ff8:	2280      	movs	r2, #128	; 0x80
 8005ffa:	611a      	str	r2, [r3, #16]
 8005ffc:	4b1a      	ldr	r3, [pc, #104]	; (8006068 <LCD_Init+0x39b0>)
 8005ffe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006002:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((SSD_VER_RESOLUTION-1)>>8);//����LCD��ֱ����
 8006004:	4b18      	ldr	r3, [pc, #96]	; (8006068 <LCD_Init+0x39b0>)
 8006006:	f44f 7280 	mov.w	r2, #256	; 0x100
 800600a:	611a      	str	r2, [r3, #16]
 800600c:	4b16      	ldr	r3, [pc, #88]	; (8006068 <LCD_Init+0x39b0>)
 800600e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006012:	615a      	str	r2, [r3, #20]
 8006014:	4b15      	ldr	r3, [pc, #84]	; (800606c <LCD_Init+0x39b4>)
 8006016:	2201      	movs	r2, #1
 8006018:	60da      	str	r2, [r3, #12]
 800601a:	4b13      	ldr	r3, [pc, #76]	; (8006068 <LCD_Init+0x39b0>)
 800601c:	2280      	movs	r2, #128	; 0x80
 800601e:	615a      	str	r2, [r3, #20]
 8006020:	4b11      	ldr	r3, [pc, #68]	; (8006068 <LCD_Init+0x39b0>)
 8006022:	2280      	movs	r2, #128	; 0x80
 8006024:	611a      	str	r2, [r3, #16]
 8006026:	4b10      	ldr	r3, [pc, #64]	; (8006068 <LCD_Init+0x39b0>)
 8006028:	f44f 7200 	mov.w	r2, #512	; 0x200
 800602c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VER_RESOLUTION-1);		 
 800602e:	4b0e      	ldr	r3, [pc, #56]	; (8006068 <LCD_Init+0x39b0>)
 8006030:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006034:	611a      	str	r2, [r3, #16]
 8006036:	4b0c      	ldr	r3, [pc, #48]	; (8006068 <LCD_Init+0x39b0>)
 8006038:	f44f 7200 	mov.w	r2, #512	; 0x200
 800603c:	615a      	str	r2, [r3, #20]
 800603e:	4b0b      	ldr	r3, [pc, #44]	; (800606c <LCD_Init+0x39b4>)
 8006040:	f240 12df 	movw	r2, #479	; 0x1df
 8006044:	60da      	str	r2, [r3, #12]
 8006046:	4b08      	ldr	r3, [pc, #32]	; (8006068 <LCD_Init+0x39b0>)
 8006048:	2280      	movs	r2, #128	; 0x80
 800604a:	615a      	str	r2, [r3, #20]
 800604c:	4b06      	ldr	r3, [pc, #24]	; (8006068 <LCD_Init+0x39b0>)
 800604e:	2280      	movs	r2, #128	; 0x80
 8006050:	611a      	str	r2, [r3, #16]
 8006052:	4b05      	ldr	r3, [pc, #20]	; (8006068 <LCD_Init+0x39b0>)
 8006054:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006058:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);		//RGB���� 
 800605a:	4b03      	ldr	r3, [pc, #12]	; (8006068 <LCD_Init+0x39b0>)
 800605c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006060:	e006      	b.n	8006070 <LCD_Init+0x39b8>
 8006062:	bf00      	nop
 8006064:	200024f8 	.word	0x200024f8
 8006068:	40011000 	.word	0x40011000
 800606c:	40010c00 	.word	0x40010c00
 8006070:	611a      	str	r2, [r3, #16]
 8006072:	4ba3      	ldr	r3, [pc, #652]	; (8006300 <LCD_Init+0x3c48>)
 8006074:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006078:	615a      	str	r2, [r3, #20]
 800607a:	4ba2      	ldr	r3, [pc, #648]	; (8006304 <LCD_Init+0x3c4c>)
 800607c:	2200      	movs	r2, #0
 800607e:	60da      	str	r2, [r3, #12]
 8006080:	4b9f      	ldr	r3, [pc, #636]	; (8006300 <LCD_Init+0x3c48>)
 8006082:	2280      	movs	r2, #128	; 0x80
 8006084:	615a      	str	r2, [r3, #20]
 8006086:	4b9e      	ldr	r3, [pc, #632]	; (8006300 <LCD_Init+0x3c48>)
 8006088:	2280      	movs	r2, #128	; 0x80
 800608a:	611a      	str	r2, [r3, #16]
 800608c:	4b9c      	ldr	r3, [pc, #624]	; (8006300 <LCD_Init+0x3c48>)
 800608e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006092:	611a      	str	r2, [r3, #16]
		
		LCD_WR_REG(0xB4);		//Set horizontal period
 8006094:	20b4      	movs	r0, #180	; 0xb4
 8006096:	f7fa ffe9 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATA((SSD_HT-1)>>8);
 800609a:	4b99      	ldr	r3, [pc, #612]	; (8006300 <LCD_Init+0x3c48>)
 800609c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80060a0:	611a      	str	r2, [r3, #16]
 80060a2:	4b97      	ldr	r3, [pc, #604]	; (8006300 <LCD_Init+0x3c48>)
 80060a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060a8:	615a      	str	r2, [r3, #20]
 80060aa:	4b96      	ldr	r3, [pc, #600]	; (8006304 <LCD_Init+0x3c4c>)
 80060ac:	2204      	movs	r2, #4
 80060ae:	60da      	str	r2, [r3, #12]
 80060b0:	4b93      	ldr	r3, [pc, #588]	; (8006300 <LCD_Init+0x3c48>)
 80060b2:	2280      	movs	r2, #128	; 0x80
 80060b4:	615a      	str	r2, [r3, #20]
 80060b6:	4b92      	ldr	r3, [pc, #584]	; (8006300 <LCD_Init+0x3c48>)
 80060b8:	2280      	movs	r2, #128	; 0x80
 80060ba:	611a      	str	r2, [r3, #16]
 80060bc:	4b90      	ldr	r3, [pc, #576]	; (8006300 <LCD_Init+0x3c48>)
 80060be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060c2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HT-1);
 80060c4:	4b8e      	ldr	r3, [pc, #568]	; (8006300 <LCD_Init+0x3c48>)
 80060c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80060ca:	611a      	str	r2, [r3, #16]
 80060cc:	4b8c      	ldr	r3, [pc, #560]	; (8006300 <LCD_Init+0x3c48>)
 80060ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060d2:	615a      	str	r2, [r3, #20]
 80060d4:	4b8b      	ldr	r3, [pc, #556]	; (8006304 <LCD_Init+0x3c4c>)
 80060d6:	f240 421f 	movw	r2, #1055	; 0x41f
 80060da:	60da      	str	r2, [r3, #12]
 80060dc:	4b88      	ldr	r3, [pc, #544]	; (8006300 <LCD_Init+0x3c48>)
 80060de:	2280      	movs	r2, #128	; 0x80
 80060e0:	615a      	str	r2, [r3, #20]
 80060e2:	4b87      	ldr	r3, [pc, #540]	; (8006300 <LCD_Init+0x3c48>)
 80060e4:	2280      	movs	r2, #128	; 0x80
 80060e6:	611a      	str	r2, [r3, #16]
 80060e8:	4b85      	ldr	r3, [pc, #532]	; (8006300 <LCD_Init+0x3c48>)
 80060ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060ee:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HPS>>8);
 80060f0:	4b83      	ldr	r3, [pc, #524]	; (8006300 <LCD_Init+0x3c48>)
 80060f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80060f6:	611a      	str	r2, [r3, #16]
 80060f8:	4b81      	ldr	r3, [pc, #516]	; (8006300 <LCD_Init+0x3c48>)
 80060fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060fe:	615a      	str	r2, [r3, #20]
 8006100:	4b80      	ldr	r3, [pc, #512]	; (8006304 <LCD_Init+0x3c4c>)
 8006102:	2200      	movs	r2, #0
 8006104:	60da      	str	r2, [r3, #12]
 8006106:	4b7e      	ldr	r3, [pc, #504]	; (8006300 <LCD_Init+0x3c48>)
 8006108:	2280      	movs	r2, #128	; 0x80
 800610a:	615a      	str	r2, [r3, #20]
 800610c:	4b7c      	ldr	r3, [pc, #496]	; (8006300 <LCD_Init+0x3c48>)
 800610e:	2280      	movs	r2, #128	; 0x80
 8006110:	611a      	str	r2, [r3, #16]
 8006112:	4b7b      	ldr	r3, [pc, #492]	; (8006300 <LCD_Init+0x3c48>)
 8006114:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006118:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HPS);
 800611a:	4b79      	ldr	r3, [pc, #484]	; (8006300 <LCD_Init+0x3c48>)
 800611c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006120:	611a      	str	r2, [r3, #16]
 8006122:	4b77      	ldr	r3, [pc, #476]	; (8006300 <LCD_Init+0x3c48>)
 8006124:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006128:	615a      	str	r2, [r3, #20]
 800612a:	4b76      	ldr	r3, [pc, #472]	; (8006304 <LCD_Init+0x3c4c>)
 800612c:	222e      	movs	r2, #46	; 0x2e
 800612e:	60da      	str	r2, [r3, #12]
 8006130:	4b73      	ldr	r3, [pc, #460]	; (8006300 <LCD_Init+0x3c48>)
 8006132:	2280      	movs	r2, #128	; 0x80
 8006134:	615a      	str	r2, [r3, #20]
 8006136:	4b72      	ldr	r3, [pc, #456]	; (8006300 <LCD_Init+0x3c48>)
 8006138:	2280      	movs	r2, #128	; 0x80
 800613a:	611a      	str	r2, [r3, #16]
 800613c:	4b70      	ldr	r3, [pc, #448]	; (8006300 <LCD_Init+0x3c48>)
 800613e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006142:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HOR_PULSE_WIDTH-1);
 8006144:	4b6e      	ldr	r3, [pc, #440]	; (8006300 <LCD_Init+0x3c48>)
 8006146:	f44f 7280 	mov.w	r2, #256	; 0x100
 800614a:	611a      	str	r2, [r3, #16]
 800614c:	4b6c      	ldr	r3, [pc, #432]	; (8006300 <LCD_Init+0x3c48>)
 800614e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006152:	615a      	str	r2, [r3, #20]
 8006154:	4b6b      	ldr	r3, [pc, #428]	; (8006304 <LCD_Init+0x3c4c>)
 8006156:	2200      	movs	r2, #0
 8006158:	60da      	str	r2, [r3, #12]
 800615a:	4b69      	ldr	r3, [pc, #420]	; (8006300 <LCD_Init+0x3c48>)
 800615c:	2280      	movs	r2, #128	; 0x80
 800615e:	615a      	str	r2, [r3, #20]
 8006160:	4b67      	ldr	r3, [pc, #412]	; (8006300 <LCD_Init+0x3c48>)
 8006162:	2280      	movs	r2, #128	; 0x80
 8006164:	611a      	str	r2, [r3, #16]
 8006166:	4b66      	ldr	r3, [pc, #408]	; (8006300 <LCD_Init+0x3c48>)
 8006168:	f44f 7200 	mov.w	r2, #512	; 0x200
 800616c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 800616e:	4b64      	ldr	r3, [pc, #400]	; (8006300 <LCD_Init+0x3c48>)
 8006170:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006174:	611a      	str	r2, [r3, #16]
 8006176:	4b62      	ldr	r3, [pc, #392]	; (8006300 <LCD_Init+0x3c48>)
 8006178:	f44f 7200 	mov.w	r2, #512	; 0x200
 800617c:	615a      	str	r2, [r3, #20]
 800617e:	4b61      	ldr	r3, [pc, #388]	; (8006304 <LCD_Init+0x3c4c>)
 8006180:	2200      	movs	r2, #0
 8006182:	60da      	str	r2, [r3, #12]
 8006184:	4b5e      	ldr	r3, [pc, #376]	; (8006300 <LCD_Init+0x3c48>)
 8006186:	2280      	movs	r2, #128	; 0x80
 8006188:	615a      	str	r2, [r3, #20]
 800618a:	4b5d      	ldr	r3, [pc, #372]	; (8006300 <LCD_Init+0x3c48>)
 800618c:	2280      	movs	r2, #128	; 0x80
 800618e:	611a      	str	r2, [r3, #16]
 8006190:	4b5b      	ldr	r3, [pc, #364]	; (8006300 <LCD_Init+0x3c48>)
 8006192:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006196:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8006198:	4b59      	ldr	r3, [pc, #356]	; (8006300 <LCD_Init+0x3c48>)
 800619a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800619e:	611a      	str	r2, [r3, #16]
 80061a0:	4b57      	ldr	r3, [pc, #348]	; (8006300 <LCD_Init+0x3c48>)
 80061a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061a6:	615a      	str	r2, [r3, #20]
 80061a8:	4b56      	ldr	r3, [pc, #344]	; (8006304 <LCD_Init+0x3c4c>)
 80061aa:	2200      	movs	r2, #0
 80061ac:	60da      	str	r2, [r3, #12]
 80061ae:	4b54      	ldr	r3, [pc, #336]	; (8006300 <LCD_Init+0x3c48>)
 80061b0:	2280      	movs	r2, #128	; 0x80
 80061b2:	615a      	str	r2, [r3, #20]
 80061b4:	4b52      	ldr	r3, [pc, #328]	; (8006300 <LCD_Init+0x3c48>)
 80061b6:	2280      	movs	r2, #128	; 0x80
 80061b8:	611a      	str	r2, [r3, #16]
 80061ba:	4b51      	ldr	r3, [pc, #324]	; (8006300 <LCD_Init+0x3c48>)
 80061bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061c0:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 80061c2:	4b4f      	ldr	r3, [pc, #316]	; (8006300 <LCD_Init+0x3c48>)
 80061c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80061c8:	611a      	str	r2, [r3, #16]
 80061ca:	4b4d      	ldr	r3, [pc, #308]	; (8006300 <LCD_Init+0x3c48>)
 80061cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061d0:	615a      	str	r2, [r3, #20]
 80061d2:	4b4c      	ldr	r3, [pc, #304]	; (8006304 <LCD_Init+0x3c4c>)
 80061d4:	2200      	movs	r2, #0
 80061d6:	60da      	str	r2, [r3, #12]
 80061d8:	4b49      	ldr	r3, [pc, #292]	; (8006300 <LCD_Init+0x3c48>)
 80061da:	2280      	movs	r2, #128	; 0x80
 80061dc:	615a      	str	r2, [r3, #20]
 80061de:	4b48      	ldr	r3, [pc, #288]	; (8006300 <LCD_Init+0x3c48>)
 80061e0:	2280      	movs	r2, #128	; 0x80
 80061e2:	611a      	str	r2, [r3, #16]
 80061e4:	4b46      	ldr	r3, [pc, #280]	; (8006300 <LCD_Init+0x3c48>)
 80061e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061ea:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(0xB6);		//Set vertical period
 80061ec:	20b6      	movs	r0, #182	; 0xb6
 80061ee:	f7fa ff3d 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATA((SSD_VT-1)>>8);
 80061f2:	4b43      	ldr	r3, [pc, #268]	; (8006300 <LCD_Init+0x3c48>)
 80061f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80061f8:	611a      	str	r2, [r3, #16]
 80061fa:	4b41      	ldr	r3, [pc, #260]	; (8006300 <LCD_Init+0x3c48>)
 80061fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006200:	615a      	str	r2, [r3, #20]
 8006202:	4b40      	ldr	r3, [pc, #256]	; (8006304 <LCD_Init+0x3c4c>)
 8006204:	2202      	movs	r2, #2
 8006206:	60da      	str	r2, [r3, #12]
 8006208:	4b3d      	ldr	r3, [pc, #244]	; (8006300 <LCD_Init+0x3c48>)
 800620a:	2280      	movs	r2, #128	; 0x80
 800620c:	615a      	str	r2, [r3, #20]
 800620e:	4b3c      	ldr	r3, [pc, #240]	; (8006300 <LCD_Init+0x3c48>)
 8006210:	2280      	movs	r2, #128	; 0x80
 8006212:	611a      	str	r2, [r3, #16]
 8006214:	4b3a      	ldr	r3, [pc, #232]	; (8006300 <LCD_Init+0x3c48>)
 8006216:	f44f 7200 	mov.w	r2, #512	; 0x200
 800621a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VT-1);
 800621c:	4b38      	ldr	r3, [pc, #224]	; (8006300 <LCD_Init+0x3c48>)
 800621e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006222:	611a      	str	r2, [r3, #16]
 8006224:	4b36      	ldr	r3, [pc, #216]	; (8006300 <LCD_Init+0x3c48>)
 8006226:	f44f 7200 	mov.w	r2, #512	; 0x200
 800622a:	615a      	str	r2, [r3, #20]
 800622c:	4b35      	ldr	r3, [pc, #212]	; (8006304 <LCD_Init+0x3c4c>)
 800622e:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8006232:	60da      	str	r2, [r3, #12]
 8006234:	4b32      	ldr	r3, [pc, #200]	; (8006300 <LCD_Init+0x3c48>)
 8006236:	2280      	movs	r2, #128	; 0x80
 8006238:	615a      	str	r2, [r3, #20]
 800623a:	4b31      	ldr	r3, [pc, #196]	; (8006300 <LCD_Init+0x3c48>)
 800623c:	2280      	movs	r2, #128	; 0x80
 800623e:	611a      	str	r2, [r3, #16]
 8006240:	4b2f      	ldr	r3, [pc, #188]	; (8006300 <LCD_Init+0x3c48>)
 8006242:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006246:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VPS>>8);
 8006248:	4b2d      	ldr	r3, [pc, #180]	; (8006300 <LCD_Init+0x3c48>)
 800624a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800624e:	611a      	str	r2, [r3, #16]
 8006250:	4b2b      	ldr	r3, [pc, #172]	; (8006300 <LCD_Init+0x3c48>)
 8006252:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006256:	615a      	str	r2, [r3, #20]
 8006258:	4b2a      	ldr	r3, [pc, #168]	; (8006304 <LCD_Init+0x3c4c>)
 800625a:	2200      	movs	r2, #0
 800625c:	60da      	str	r2, [r3, #12]
 800625e:	4b28      	ldr	r3, [pc, #160]	; (8006300 <LCD_Init+0x3c48>)
 8006260:	2280      	movs	r2, #128	; 0x80
 8006262:	615a      	str	r2, [r3, #20]
 8006264:	4b26      	ldr	r3, [pc, #152]	; (8006300 <LCD_Init+0x3c48>)
 8006266:	2280      	movs	r2, #128	; 0x80
 8006268:	611a      	str	r2, [r3, #16]
 800626a:	4b25      	ldr	r3, [pc, #148]	; (8006300 <LCD_Init+0x3c48>)
 800626c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006270:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VPS);
 8006272:	4b23      	ldr	r3, [pc, #140]	; (8006300 <LCD_Init+0x3c48>)
 8006274:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006278:	611a      	str	r2, [r3, #16]
 800627a:	4b21      	ldr	r3, [pc, #132]	; (8006300 <LCD_Init+0x3c48>)
 800627c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006280:	615a      	str	r2, [r3, #20]
 8006282:	4b20      	ldr	r3, [pc, #128]	; (8006304 <LCD_Init+0x3c4c>)
 8006284:	2217      	movs	r2, #23
 8006286:	60da      	str	r2, [r3, #12]
 8006288:	4b1d      	ldr	r3, [pc, #116]	; (8006300 <LCD_Init+0x3c48>)
 800628a:	2280      	movs	r2, #128	; 0x80
 800628c:	615a      	str	r2, [r3, #20]
 800628e:	4b1c      	ldr	r3, [pc, #112]	; (8006300 <LCD_Init+0x3c48>)
 8006290:	2280      	movs	r2, #128	; 0x80
 8006292:	611a      	str	r2, [r3, #16]
 8006294:	4b1a      	ldr	r3, [pc, #104]	; (8006300 <LCD_Init+0x3c48>)
 8006296:	f44f 7200 	mov.w	r2, #512	; 0x200
 800629a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VER_FRONT_PORCH-1);
 800629c:	4b18      	ldr	r3, [pc, #96]	; (8006300 <LCD_Init+0x3c48>)
 800629e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80062a2:	611a      	str	r2, [r3, #16]
 80062a4:	4b16      	ldr	r3, [pc, #88]	; (8006300 <LCD_Init+0x3c48>)
 80062a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062aa:	615a      	str	r2, [r3, #20]
 80062ac:	4b15      	ldr	r3, [pc, #84]	; (8006304 <LCD_Init+0x3c4c>)
 80062ae:	2215      	movs	r2, #21
 80062b0:	60da      	str	r2, [r3, #12]
 80062b2:	4b13      	ldr	r3, [pc, #76]	; (8006300 <LCD_Init+0x3c48>)
 80062b4:	2280      	movs	r2, #128	; 0x80
 80062b6:	615a      	str	r2, [r3, #20]
 80062b8:	4b11      	ldr	r3, [pc, #68]	; (8006300 <LCD_Init+0x3c48>)
 80062ba:	2280      	movs	r2, #128	; 0x80
 80062bc:	611a      	str	r2, [r3, #16]
 80062be:	4b10      	ldr	r3, [pc, #64]	; (8006300 <LCD_Init+0x3c48>)
 80062c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062c4:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 80062c6:	4b0e      	ldr	r3, [pc, #56]	; (8006300 <LCD_Init+0x3c48>)
 80062c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80062cc:	611a      	str	r2, [r3, #16]
 80062ce:	4b0c      	ldr	r3, [pc, #48]	; (8006300 <LCD_Init+0x3c48>)
 80062d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062d4:	615a      	str	r2, [r3, #20]
 80062d6:	4b0b      	ldr	r3, [pc, #44]	; (8006304 <LCD_Init+0x3c4c>)
 80062d8:	2200      	movs	r2, #0
 80062da:	60da      	str	r2, [r3, #12]
 80062dc:	4b08      	ldr	r3, [pc, #32]	; (8006300 <LCD_Init+0x3c48>)
 80062de:	2280      	movs	r2, #128	; 0x80
 80062e0:	615a      	str	r2, [r3, #20]
 80062e2:	4b07      	ldr	r3, [pc, #28]	; (8006300 <LCD_Init+0x3c48>)
 80062e4:	2280      	movs	r2, #128	; 0x80
 80062e6:	611a      	str	r2, [r3, #16]
 80062e8:	4b05      	ldr	r3, [pc, #20]	; (8006300 <LCD_Init+0x3c48>)
 80062ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062ee:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 80062f0:	4b03      	ldr	r3, [pc, #12]	; (8006300 <LCD_Init+0x3c48>)
 80062f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80062f6:	611a      	str	r2, [r3, #16]
 80062f8:	4b01      	ldr	r3, [pc, #4]	; (8006300 <LCD_Init+0x3c48>)
 80062fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062fe:	e003      	b.n	8006308 <LCD_Init+0x3c50>
 8006300:	40011000 	.word	0x40011000
 8006304:	40010c00 	.word	0x40010c00
 8006308:	615a      	str	r2, [r3, #20]
 800630a:	4b8b      	ldr	r3, [pc, #556]	; (8006538 <LCD_Init+0x3e80>)
 800630c:	2200      	movs	r2, #0
 800630e:	60da      	str	r2, [r3, #12]
 8006310:	4b8a      	ldr	r3, [pc, #552]	; (800653c <LCD_Init+0x3e84>)
 8006312:	2280      	movs	r2, #128	; 0x80
 8006314:	615a      	str	r2, [r3, #20]
 8006316:	4b89      	ldr	r3, [pc, #548]	; (800653c <LCD_Init+0x3e84>)
 8006318:	2280      	movs	r2, #128	; 0x80
 800631a:	611a      	str	r2, [r3, #16]
 800631c:	4b87      	ldr	r3, [pc, #540]	; (800653c <LCD_Init+0x3e84>)
 800631e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006322:	611a      	str	r2, [r3, #16]
		
		LCD_WR_REG(0xF0);	//����SSD1963��CPU�ӿ�Ϊ16bit  
 8006324:	20f0      	movs	r0, #240	; 0xf0
 8006326:	f7fa fea1 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//16-bit(565 format) data for 16bpp 
 800632a:	4b84      	ldr	r3, [pc, #528]	; (800653c <LCD_Init+0x3e84>)
 800632c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006330:	611a      	str	r2, [r3, #16]
 8006332:	4b82      	ldr	r3, [pc, #520]	; (800653c <LCD_Init+0x3e84>)
 8006334:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006338:	615a      	str	r2, [r3, #20]
 800633a:	4b7f      	ldr	r3, [pc, #508]	; (8006538 <LCD_Init+0x3e80>)
 800633c:	2203      	movs	r2, #3
 800633e:	60da      	str	r2, [r3, #12]
 8006340:	4b7e      	ldr	r3, [pc, #504]	; (800653c <LCD_Init+0x3e84>)
 8006342:	2280      	movs	r2, #128	; 0x80
 8006344:	615a      	str	r2, [r3, #20]
 8006346:	4b7d      	ldr	r3, [pc, #500]	; (800653c <LCD_Init+0x3e84>)
 8006348:	2280      	movs	r2, #128	; 0x80
 800634a:	611a      	str	r2, [r3, #16]
 800634c:	4b7b      	ldr	r3, [pc, #492]	; (800653c <LCD_Init+0x3e84>)
 800634e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006352:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0x29);	//������ʾ
 8006354:	2029      	movs	r0, #41	; 0x29
 8006356:	f7fa fe89 	bl	800106c <LCD_WR_REG>
		//����PWM���  ����ͨ��ռ�ձȿɵ� 
		LCD_WR_REG(0xD0);	//�����Զ���ƽ��DBC
 800635a:	20d0      	movs	r0, #208	; 0xd0
 800635c:	f7fa fe86 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATA(0x00);	//disable
 8006360:	4b76      	ldr	r3, [pc, #472]	; (800653c <LCD_Init+0x3e84>)
 8006362:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006366:	611a      	str	r2, [r3, #16]
 8006368:	4b74      	ldr	r3, [pc, #464]	; (800653c <LCD_Init+0x3e84>)
 800636a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800636e:	615a      	str	r2, [r3, #20]
 8006370:	4b71      	ldr	r3, [pc, #452]	; (8006538 <LCD_Init+0x3e80>)
 8006372:	2200      	movs	r2, #0
 8006374:	60da      	str	r2, [r3, #12]
 8006376:	4b71      	ldr	r3, [pc, #452]	; (800653c <LCD_Init+0x3e84>)
 8006378:	2280      	movs	r2, #128	; 0x80
 800637a:	615a      	str	r2, [r3, #20]
 800637c:	4b6f      	ldr	r3, [pc, #444]	; (800653c <LCD_Init+0x3e84>)
 800637e:	2280      	movs	r2, #128	; 0x80
 8006380:	611a      	str	r2, [r3, #16]
 8006382:	4b6e      	ldr	r3, [pc, #440]	; (800653c <LCD_Init+0x3e84>)
 8006384:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006388:	611a      	str	r2, [r3, #16]
	
		LCD_WR_REG(0xBE);	//����PWM���
 800638a:	20be      	movs	r0, #190	; 0xbe
 800638c:	f7fa fe6e 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATA(0x05);	//1����PWMƵ��
 8006390:	4b6a      	ldr	r3, [pc, #424]	; (800653c <LCD_Init+0x3e84>)
 8006392:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006396:	611a      	str	r2, [r3, #16]
 8006398:	4b68      	ldr	r3, [pc, #416]	; (800653c <LCD_Init+0x3e84>)
 800639a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800639e:	615a      	str	r2, [r3, #20]
 80063a0:	4b65      	ldr	r3, [pc, #404]	; (8006538 <LCD_Init+0x3e80>)
 80063a2:	2205      	movs	r2, #5
 80063a4:	60da      	str	r2, [r3, #12]
 80063a6:	4b65      	ldr	r3, [pc, #404]	; (800653c <LCD_Init+0x3e84>)
 80063a8:	2280      	movs	r2, #128	; 0x80
 80063aa:	615a      	str	r2, [r3, #20]
 80063ac:	4b63      	ldr	r3, [pc, #396]	; (800653c <LCD_Init+0x3e84>)
 80063ae:	2280      	movs	r2, #128	; 0x80
 80063b0:	611a      	str	r2, [r3, #16]
 80063b2:	4b62      	ldr	r3, [pc, #392]	; (800653c <LCD_Init+0x3e84>)
 80063b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063b8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFE);	//2����PWMռ�ձ�
 80063ba:	4b60      	ldr	r3, [pc, #384]	; (800653c <LCD_Init+0x3e84>)
 80063bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80063c0:	611a      	str	r2, [r3, #16]
 80063c2:	4b5e      	ldr	r3, [pc, #376]	; (800653c <LCD_Init+0x3e84>)
 80063c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063c8:	615a      	str	r2, [r3, #20]
 80063ca:	4b5b      	ldr	r3, [pc, #364]	; (8006538 <LCD_Init+0x3e80>)
 80063cc:	22fe      	movs	r2, #254	; 0xfe
 80063ce:	60da      	str	r2, [r3, #12]
 80063d0:	4b5a      	ldr	r3, [pc, #360]	; (800653c <LCD_Init+0x3e84>)
 80063d2:	2280      	movs	r2, #128	; 0x80
 80063d4:	615a      	str	r2, [r3, #20]
 80063d6:	4b59      	ldr	r3, [pc, #356]	; (800653c <LCD_Init+0x3e84>)
 80063d8:	2280      	movs	r2, #128	; 0x80
 80063da:	611a      	str	r2, [r3, #16]
 80063dc:	4b57      	ldr	r3, [pc, #348]	; (800653c <LCD_Init+0x3e84>)
 80063de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063e2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x01);	//3����C
 80063e4:	4b55      	ldr	r3, [pc, #340]	; (800653c <LCD_Init+0x3e84>)
 80063e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80063ea:	611a      	str	r2, [r3, #16]
 80063ec:	4b53      	ldr	r3, [pc, #332]	; (800653c <LCD_Init+0x3e84>)
 80063ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063f2:	615a      	str	r2, [r3, #20]
 80063f4:	4b50      	ldr	r3, [pc, #320]	; (8006538 <LCD_Init+0x3e80>)
 80063f6:	2201      	movs	r2, #1
 80063f8:	60da      	str	r2, [r3, #12]
 80063fa:	4b50      	ldr	r3, [pc, #320]	; (800653c <LCD_Init+0x3e84>)
 80063fc:	2280      	movs	r2, #128	; 0x80
 80063fe:	615a      	str	r2, [r3, #20]
 8006400:	4b4e      	ldr	r3, [pc, #312]	; (800653c <LCD_Init+0x3e84>)
 8006402:	2280      	movs	r2, #128	; 0x80
 8006404:	611a      	str	r2, [r3, #16]
 8006406:	4b4d      	ldr	r3, [pc, #308]	; (800653c <LCD_Init+0x3e84>)
 8006408:	f44f 7200 	mov.w	r2, #512	; 0x200
 800640c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//4����D
 800640e:	4b4b      	ldr	r3, [pc, #300]	; (800653c <LCD_Init+0x3e84>)
 8006410:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006414:	611a      	str	r2, [r3, #16]
 8006416:	4b49      	ldr	r3, [pc, #292]	; (800653c <LCD_Init+0x3e84>)
 8006418:	f44f 7200 	mov.w	r2, #512	; 0x200
 800641c:	615a      	str	r2, [r3, #20]
 800641e:	4b46      	ldr	r3, [pc, #280]	; (8006538 <LCD_Init+0x3e80>)
 8006420:	2200      	movs	r2, #0
 8006422:	60da      	str	r2, [r3, #12]
 8006424:	4b45      	ldr	r3, [pc, #276]	; (800653c <LCD_Init+0x3e84>)
 8006426:	2280      	movs	r2, #128	; 0x80
 8006428:	615a      	str	r2, [r3, #20]
 800642a:	4b44      	ldr	r3, [pc, #272]	; (800653c <LCD_Init+0x3e84>)
 800642c:	2280      	movs	r2, #128	; 0x80
 800642e:	611a      	str	r2, [r3, #16]
 8006430:	4b42      	ldr	r3, [pc, #264]	; (800653c <LCD_Init+0x3e84>)
 8006432:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006436:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//5����E 
 8006438:	4b40      	ldr	r3, [pc, #256]	; (800653c <LCD_Init+0x3e84>)
 800643a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800643e:	611a      	str	r2, [r3, #16]
 8006440:	4b3e      	ldr	r3, [pc, #248]	; (800653c <LCD_Init+0x3e84>)
 8006442:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006446:	615a      	str	r2, [r3, #20]
 8006448:	4b3b      	ldr	r3, [pc, #236]	; (8006538 <LCD_Init+0x3e80>)
 800644a:	2200      	movs	r2, #0
 800644c:	60da      	str	r2, [r3, #12]
 800644e:	4b3b      	ldr	r3, [pc, #236]	; (800653c <LCD_Init+0x3e84>)
 8006450:	2280      	movs	r2, #128	; 0x80
 8006452:	615a      	str	r2, [r3, #20]
 8006454:	4b39      	ldr	r3, [pc, #228]	; (800653c <LCD_Init+0x3e84>)
 8006456:	2280      	movs	r2, #128	; 0x80
 8006458:	611a      	str	r2, [r3, #16]
 800645a:	4b38      	ldr	r3, [pc, #224]	; (800653c <LCD_Init+0x3e84>)
 800645c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006460:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//6����F 
 8006462:	4b36      	ldr	r3, [pc, #216]	; (800653c <LCD_Init+0x3e84>)
 8006464:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006468:	611a      	str	r2, [r3, #16]
 800646a:	4b34      	ldr	r3, [pc, #208]	; (800653c <LCD_Init+0x3e84>)
 800646c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006470:	615a      	str	r2, [r3, #20]
 8006472:	4b31      	ldr	r3, [pc, #196]	; (8006538 <LCD_Init+0x3e80>)
 8006474:	2200      	movs	r2, #0
 8006476:	60da      	str	r2, [r3, #12]
 8006478:	4b30      	ldr	r3, [pc, #192]	; (800653c <LCD_Init+0x3e84>)
 800647a:	2280      	movs	r2, #128	; 0x80
 800647c:	615a      	str	r2, [r3, #20]
 800647e:	4b2f      	ldr	r3, [pc, #188]	; (800653c <LCD_Init+0x3e84>)
 8006480:	2280      	movs	r2, #128	; 0x80
 8006482:	611a      	str	r2, [r3, #16]
 8006484:	4b2d      	ldr	r3, [pc, #180]	; (800653c <LCD_Init+0x3e84>)
 8006486:	f44f 7200 	mov.w	r2, #512	; 0x200
 800648a:	611a      	str	r2, [r3, #16]
		
		LCD_WR_REG(0xB8);	//����GPIO����
 800648c:	20b8      	movs	r0, #184	; 0xb8
 800648e:	f7fa fded 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//2��IO�����ó����
 8006492:	4b2a      	ldr	r3, [pc, #168]	; (800653c <LCD_Init+0x3e84>)
 8006494:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006498:	611a      	str	r2, [r3, #16]
 800649a:	4b28      	ldr	r3, [pc, #160]	; (800653c <LCD_Init+0x3e84>)
 800649c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064a0:	615a      	str	r2, [r3, #20]
 80064a2:	4b25      	ldr	r3, [pc, #148]	; (8006538 <LCD_Init+0x3e80>)
 80064a4:	2203      	movs	r2, #3
 80064a6:	60da      	str	r2, [r3, #12]
 80064a8:	4b24      	ldr	r3, [pc, #144]	; (800653c <LCD_Init+0x3e84>)
 80064aa:	2280      	movs	r2, #128	; 0x80
 80064ac:	615a      	str	r2, [r3, #20]
 80064ae:	4b23      	ldr	r3, [pc, #140]	; (800653c <LCD_Init+0x3e84>)
 80064b0:	2280      	movs	r2, #128	; 0x80
 80064b2:	611a      	str	r2, [r3, #16]
 80064b4:	4b21      	ldr	r3, [pc, #132]	; (800653c <LCD_Init+0x3e84>)
 80064b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064ba:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x01);	//GPIOʹ��������IO���� 
 80064bc:	4b1f      	ldr	r3, [pc, #124]	; (800653c <LCD_Init+0x3e84>)
 80064be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80064c2:	611a      	str	r2, [r3, #16]
 80064c4:	4b1d      	ldr	r3, [pc, #116]	; (800653c <LCD_Init+0x3e84>)
 80064c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064ca:	615a      	str	r2, [r3, #20]
 80064cc:	4b1a      	ldr	r3, [pc, #104]	; (8006538 <LCD_Init+0x3e80>)
 80064ce:	2201      	movs	r2, #1
 80064d0:	60da      	str	r2, [r3, #12]
 80064d2:	4b1a      	ldr	r3, [pc, #104]	; (800653c <LCD_Init+0x3e84>)
 80064d4:	2280      	movs	r2, #128	; 0x80
 80064d6:	615a      	str	r2, [r3, #20]
 80064d8:	4b18      	ldr	r3, [pc, #96]	; (800653c <LCD_Init+0x3e84>)
 80064da:	2280      	movs	r2, #128	; 0x80
 80064dc:	611a      	str	r2, [r3, #16]
 80064de:	4b17      	ldr	r3, [pc, #92]	; (800653c <LCD_Init+0x3e84>)
 80064e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064e4:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(0xBA);
 80064e6:	20ba      	movs	r0, #186	; 0xba
 80064e8:	f7fa fdc0 	bl	800106c <LCD_WR_REG>
		LCD_WR_DATA(0X01);	//GPIO[1:0]=01,����LCD����
 80064ec:	4b13      	ldr	r3, [pc, #76]	; (800653c <LCD_Init+0x3e84>)
 80064ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80064f2:	611a      	str	r2, [r3, #16]
 80064f4:	4b11      	ldr	r3, [pc, #68]	; (800653c <LCD_Init+0x3e84>)
 80064f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064fa:	615a      	str	r2, [r3, #20]
 80064fc:	4b0e      	ldr	r3, [pc, #56]	; (8006538 <LCD_Init+0x3e80>)
 80064fe:	2201      	movs	r2, #1
 8006500:	60da      	str	r2, [r3, #12]
 8006502:	4b0e      	ldr	r3, [pc, #56]	; (800653c <LCD_Init+0x3e84>)
 8006504:	2280      	movs	r2, #128	; 0x80
 8006506:	615a      	str	r2, [r3, #20]
 8006508:	4b0c      	ldr	r3, [pc, #48]	; (800653c <LCD_Init+0x3e84>)
 800650a:	2280      	movs	r2, #128	; 0x80
 800650c:	611a      	str	r2, [r3, #16]
 800650e:	4b0b      	ldr	r3, [pc, #44]	; (800653c <LCD_Init+0x3e84>)
 8006510:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006514:	611a      	str	r2, [r3, #16]
		
		LCD_SSD_BackLightSet(100);//��������Ϊ����
 8006516:	2064      	movs	r0, #100	; 0x64
 8006518:	f7fb ff1e 	bl	8002358 <LCD_SSD_BackLightSet>
	}	
	LCD_Display_Dir(0);		 	//Ĭ��Ϊ����
 800651c:	2000      	movs	r0, #0
 800651e:	f7fb ffbf 	bl	80024a0 <LCD_Display_Dir>
	LCD_LED=1;					//��������
 8006522:	4b07      	ldr	r3, [pc, #28]	; (8006540 <LCD_Init+0x3e88>)
 8006524:	2201      	movs	r2, #1
 8006526:	601a      	str	r2, [r3, #0]
	LCD_Clear(WHITE);
 8006528:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800652c:	f000 f80a 	bl	8006544 <LCD_Clear>
}  		  
 8006530:	bf00      	nop
 8006532:	3720      	adds	r7, #32
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}
 8006538:	40010c00 	.word	0x40010c00
 800653c:	40011000 	.word	0x40011000
 8006540:	422201a8 	.word	0x422201a8

08006544 <LCD_Clear>:
  
//��������
//color:Ҫ���������ɫ
void LCD_Clear(u16 color)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b084      	sub	sp, #16
 8006548:	af00      	add	r7, sp, #0
 800654a:	4603      	mov	r3, r0
 800654c:	80fb      	strh	r3, [r7, #6]
	u32 index=0;      
 800654e:	2300      	movs	r3, #0
 8006550:	60fb      	str	r3, [r7, #12]
	u32 totalpoint=lcddev.width;
 8006552:	4b2a      	ldr	r3, [pc, #168]	; (80065fc <LCD_Clear+0xb8>)
 8006554:	881b      	ldrh	r3, [r3, #0]
 8006556:	60bb      	str	r3, [r7, #8]
	totalpoint*=lcddev.height; 			//�õ��ܵ���
 8006558:	4b28      	ldr	r3, [pc, #160]	; (80065fc <LCD_Clear+0xb8>)
 800655a:	885b      	ldrh	r3, [r3, #2]
 800655c:	461a      	mov	r2, r3
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	fb02 f303 	mul.w	r3, r2, r3
 8006564:	60bb      	str	r3, [r7, #8]
	if((lcddev.id==0X6804)&&(lcddev.dir==1))//6804������ʱ�����⴦��  
 8006566:	4b25      	ldr	r3, [pc, #148]	; (80065fc <LCD_Clear+0xb8>)
 8006568:	889b      	ldrh	r3, [r3, #4]
 800656a:	f646 0204 	movw	r2, #26628	; 0x6804
 800656e:	4293      	cmp	r3, r2
 8006570:	d11a      	bne.n	80065a8 <LCD_Clear+0x64>
 8006572:	4b22      	ldr	r3, [pc, #136]	; (80065fc <LCD_Clear+0xb8>)
 8006574:	799b      	ldrb	r3, [r3, #6]
 8006576:	2b01      	cmp	r3, #1
 8006578:	d116      	bne.n	80065a8 <LCD_Clear+0x64>
	{						    
 		lcddev.dir=0;	 
 800657a:	4b20      	ldr	r3, [pc, #128]	; (80065fc <LCD_Clear+0xb8>)
 800657c:	2200      	movs	r2, #0
 800657e:	719a      	strb	r2, [r3, #6]
 		lcddev.setxcmd=0X2A;
 8006580:	4b1e      	ldr	r3, [pc, #120]	; (80065fc <LCD_Clear+0xb8>)
 8006582:	222a      	movs	r2, #42	; 0x2a
 8006584:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd=0X2B;  	 			
 8006586:	4b1d      	ldr	r3, [pc, #116]	; (80065fc <LCD_Clear+0xb8>)
 8006588:	222b      	movs	r2, #43	; 0x2b
 800658a:	819a      	strh	r2, [r3, #12]
		LCD_SetCursor(0x00,0x0000);		//���ù��λ��  
 800658c:	2100      	movs	r1, #0
 800658e:	2000      	movs	r0, #0
 8006590:	f7fa fe3e 	bl	8001210 <LCD_SetCursor>
 		lcddev.dir=1;	 
 8006594:	4b19      	ldr	r3, [pc, #100]	; (80065fc <LCD_Clear+0xb8>)
 8006596:	2201      	movs	r2, #1
 8006598:	719a      	strb	r2, [r3, #6]
  		lcddev.setxcmd=0X2B;
 800659a:	4b18      	ldr	r3, [pc, #96]	; (80065fc <LCD_Clear+0xb8>)
 800659c:	222b      	movs	r2, #43	; 0x2b
 800659e:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd=0X2A;  	 
 80065a0:	4b16      	ldr	r3, [pc, #88]	; (80065fc <LCD_Clear+0xb8>)
 80065a2:	222a      	movs	r2, #42	; 0x2a
 80065a4:	819a      	strh	r2, [r3, #12]
 80065a6:	e003      	b.n	80065b0 <LCD_Clear+0x6c>
 	}else LCD_SetCursor(0x00,0x0000);	//���ù��λ�� 
 80065a8:	2100      	movs	r1, #0
 80065aa:	2000      	movs	r0, #0
 80065ac:	f7fa fe30 	bl	8001210 <LCD_SetCursor>
	LCD_WriteRAM_Prepare();     		//��ʼд��GRAM	  	  
 80065b0:	f7fa fe22 	bl	80011f8 <LCD_WriteRAM_Prepare>
	for(index=0;index<totalpoint;index++)LCD_WR_DATA(color);	
 80065b4:	2300      	movs	r3, #0
 80065b6:	60fb      	str	r3, [r7, #12]
 80065b8:	e017      	b.n	80065ea <LCD_Clear+0xa6>
 80065ba:	4b11      	ldr	r3, [pc, #68]	; (8006600 <LCD_Clear+0xbc>)
 80065bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80065c0:	611a      	str	r2, [r3, #16]
 80065c2:	4b0f      	ldr	r3, [pc, #60]	; (8006600 <LCD_Clear+0xbc>)
 80065c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065c8:	615a      	str	r2, [r3, #20]
 80065ca:	4a0e      	ldr	r2, [pc, #56]	; (8006604 <LCD_Clear+0xc0>)
 80065cc:	88fb      	ldrh	r3, [r7, #6]
 80065ce:	60d3      	str	r3, [r2, #12]
 80065d0:	4b0b      	ldr	r3, [pc, #44]	; (8006600 <LCD_Clear+0xbc>)
 80065d2:	2280      	movs	r2, #128	; 0x80
 80065d4:	615a      	str	r2, [r3, #20]
 80065d6:	4b0a      	ldr	r3, [pc, #40]	; (8006600 <LCD_Clear+0xbc>)
 80065d8:	2280      	movs	r2, #128	; 0x80
 80065da:	611a      	str	r2, [r3, #16]
 80065dc:	4b08      	ldr	r3, [pc, #32]	; (8006600 <LCD_Clear+0xbc>)
 80065de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065e2:	611a      	str	r2, [r3, #16]
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	3301      	adds	r3, #1
 80065e8:	60fb      	str	r3, [r7, #12]
 80065ea:	68fa      	ldr	r2, [r7, #12]
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	429a      	cmp	r2, r3
 80065f0:	d3e3      	bcc.n	80065ba <LCD_Clear+0x76>
}  
 80065f2:	bf00      	nop
 80065f4:	3710      	adds	r7, #16
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
 80065fa:	bf00      	nop
 80065fc:	200024f8 	.word	0x200024f8
 8006600:	40011000 	.word	0x40011000
 8006604:	40010c00 	.word	0x40010c00

08006608 <LCD_Fill>:
//��ָ�����������ָ����ɫ
//�����С:(xend-xsta+1)*(yend-ysta+1)
//xsta
//color:Ҫ������ɫ
void LCD_Fill(u16 sx,u16 sy,u16 ex,u16 ey,u16 color)
{          
 8006608:	b590      	push	{r4, r7, lr}
 800660a:	b087      	sub	sp, #28
 800660c:	af02      	add	r7, sp, #8
 800660e:	4604      	mov	r4, r0
 8006610:	4608      	mov	r0, r1
 8006612:	4611      	mov	r1, r2
 8006614:	461a      	mov	r2, r3
 8006616:	4623      	mov	r3, r4
 8006618:	80fb      	strh	r3, [r7, #6]
 800661a:	4603      	mov	r3, r0
 800661c:	80bb      	strh	r3, [r7, #4]
 800661e:	460b      	mov	r3, r1
 8006620:	807b      	strh	r3, [r7, #2]
 8006622:	4613      	mov	r3, r2
 8006624:	803b      	strh	r3, [r7, #0]
	u16 i,j;
	u16 xlen=0;
 8006626:	2300      	movs	r3, #0
 8006628:	817b      	strh	r3, [r7, #10]
	u16 temp;
	if((lcddev.id==0X6804)&&(lcddev.dir==1))	//6804������ʱ�����⴦��  
 800662a:	4b3a      	ldr	r3, [pc, #232]	; (8006714 <LCD_Fill+0x10c>)
 800662c:	889b      	ldrh	r3, [r3, #4]
 800662e:	f646 0204 	movw	r2, #26628	; 0x6804
 8006632:	4293      	cmp	r3, r2
 8006634:	d133      	bne.n	800669e <LCD_Fill+0x96>
 8006636:	4b37      	ldr	r3, [pc, #220]	; (8006714 <LCD_Fill+0x10c>)
 8006638:	799b      	ldrb	r3, [r3, #6]
 800663a:	2b01      	cmp	r3, #1
 800663c:	d12f      	bne.n	800669e <LCD_Fill+0x96>
	{
		temp=sx;
 800663e:	88fb      	ldrh	r3, [r7, #6]
 8006640:	813b      	strh	r3, [r7, #8]
		sx=sy;
 8006642:	88bb      	ldrh	r3, [r7, #4]
 8006644:	80fb      	strh	r3, [r7, #6]
		sy=lcddev.width-ex-1;	  
 8006646:	4b33      	ldr	r3, [pc, #204]	; (8006714 <LCD_Fill+0x10c>)
 8006648:	881a      	ldrh	r2, [r3, #0]
 800664a:	887b      	ldrh	r3, [r7, #2]
 800664c:	1ad3      	subs	r3, r2, r3
 800664e:	b29b      	uxth	r3, r3
 8006650:	3b01      	subs	r3, #1
 8006652:	80bb      	strh	r3, [r7, #4]
		ex=ey;
 8006654:	883b      	ldrh	r3, [r7, #0]
 8006656:	807b      	strh	r3, [r7, #2]
		ey=lcddev.width-temp-1;
 8006658:	4b2e      	ldr	r3, [pc, #184]	; (8006714 <LCD_Fill+0x10c>)
 800665a:	881a      	ldrh	r2, [r3, #0]
 800665c:	893b      	ldrh	r3, [r7, #8]
 800665e:	1ad3      	subs	r3, r2, r3
 8006660:	b29b      	uxth	r3, r3
 8006662:	3b01      	subs	r3, #1
 8006664:	803b      	strh	r3, [r7, #0]
 		lcddev.dir=0;	 
 8006666:	4b2b      	ldr	r3, [pc, #172]	; (8006714 <LCD_Fill+0x10c>)
 8006668:	2200      	movs	r2, #0
 800666a:	719a      	strb	r2, [r3, #6]
 		lcddev.setxcmd=0X2A;
 800666c:	4b29      	ldr	r3, [pc, #164]	; (8006714 <LCD_Fill+0x10c>)
 800666e:	222a      	movs	r2, #42	; 0x2a
 8006670:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd=0X2B;  	 			
 8006672:	4b28      	ldr	r3, [pc, #160]	; (8006714 <LCD_Fill+0x10c>)
 8006674:	222b      	movs	r2, #43	; 0x2b
 8006676:	819a      	strh	r2, [r3, #12]
		LCD_Fill(sx,sy,ex,ey,color);  
 8006678:	883c      	ldrh	r4, [r7, #0]
 800667a:	887a      	ldrh	r2, [r7, #2]
 800667c:	88b9      	ldrh	r1, [r7, #4]
 800667e:	88f8      	ldrh	r0, [r7, #6]
 8006680:	8c3b      	ldrh	r3, [r7, #32]
 8006682:	9300      	str	r3, [sp, #0]
 8006684:	4623      	mov	r3, r4
 8006686:	f7ff ffbf 	bl	8006608 <LCD_Fill>
 		lcddev.dir=1;	 
 800668a:	4b22      	ldr	r3, [pc, #136]	; (8006714 <LCD_Fill+0x10c>)
 800668c:	2201      	movs	r2, #1
 800668e:	719a      	strb	r2, [r3, #6]
  		lcddev.setxcmd=0X2B;
 8006690:	4b20      	ldr	r3, [pc, #128]	; (8006714 <LCD_Fill+0x10c>)
 8006692:	222b      	movs	r2, #43	; 0x2b
 8006694:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd=0X2A;  	 
 8006696:	4b1f      	ldr	r3, [pc, #124]	; (8006714 <LCD_Fill+0x10c>)
 8006698:	222a      	movs	r2, #42	; 0x2a
 800669a:	819a      	strh	r2, [r3, #12]
 800669c:	e036      	b.n	800670c <LCD_Fill+0x104>
 	}else
	{
		xlen=ex-sx+1;	 
 800669e:	887a      	ldrh	r2, [r7, #2]
 80066a0:	88fb      	ldrh	r3, [r7, #6]
 80066a2:	1ad3      	subs	r3, r2, r3
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	3301      	adds	r3, #1
 80066a8:	817b      	strh	r3, [r7, #10]
		for(i=sy;i<=ey;i++)
 80066aa:	88bb      	ldrh	r3, [r7, #4]
 80066ac:	81fb      	strh	r3, [r7, #14]
 80066ae:	e029      	b.n	8006704 <LCD_Fill+0xfc>
		{
		 	LCD_SetCursor(sx,i);      				//���ù��λ�� 
 80066b0:	89fa      	ldrh	r2, [r7, #14]
 80066b2:	88fb      	ldrh	r3, [r7, #6]
 80066b4:	4611      	mov	r1, r2
 80066b6:	4618      	mov	r0, r3
 80066b8:	f7fa fdaa 	bl	8001210 <LCD_SetCursor>
			LCD_WriteRAM_Prepare();     			//��ʼд��GRAM	  
 80066bc:	f7fa fd9c 	bl	80011f8 <LCD_WriteRAM_Prepare>
			for(j=0;j<xlen;j++)LCD_WR_DATA(color);	//���ù��λ�� 	    
 80066c0:	2300      	movs	r3, #0
 80066c2:	81bb      	strh	r3, [r7, #12]
 80066c4:	e017      	b.n	80066f6 <LCD_Fill+0xee>
 80066c6:	4b14      	ldr	r3, [pc, #80]	; (8006718 <LCD_Fill+0x110>)
 80066c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80066cc:	611a      	str	r2, [r3, #16]
 80066ce:	4b12      	ldr	r3, [pc, #72]	; (8006718 <LCD_Fill+0x110>)
 80066d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066d4:	615a      	str	r2, [r3, #20]
 80066d6:	4a11      	ldr	r2, [pc, #68]	; (800671c <LCD_Fill+0x114>)
 80066d8:	8c3b      	ldrh	r3, [r7, #32]
 80066da:	60d3      	str	r3, [r2, #12]
 80066dc:	4b0e      	ldr	r3, [pc, #56]	; (8006718 <LCD_Fill+0x110>)
 80066de:	2280      	movs	r2, #128	; 0x80
 80066e0:	615a      	str	r2, [r3, #20]
 80066e2:	4b0d      	ldr	r3, [pc, #52]	; (8006718 <LCD_Fill+0x110>)
 80066e4:	2280      	movs	r2, #128	; 0x80
 80066e6:	611a      	str	r2, [r3, #16]
 80066e8:	4b0b      	ldr	r3, [pc, #44]	; (8006718 <LCD_Fill+0x110>)
 80066ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066ee:	611a      	str	r2, [r3, #16]
 80066f0:	89bb      	ldrh	r3, [r7, #12]
 80066f2:	3301      	adds	r3, #1
 80066f4:	81bb      	strh	r3, [r7, #12]
 80066f6:	89ba      	ldrh	r2, [r7, #12]
 80066f8:	897b      	ldrh	r3, [r7, #10]
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d3e3      	bcc.n	80066c6 <LCD_Fill+0xbe>
		for(i=sy;i<=ey;i++)
 80066fe:	89fb      	ldrh	r3, [r7, #14]
 8006700:	3301      	adds	r3, #1
 8006702:	81fb      	strh	r3, [r7, #14]
 8006704:	89fa      	ldrh	r2, [r7, #14]
 8006706:	883b      	ldrh	r3, [r7, #0]
 8006708:	429a      	cmp	r2, r3
 800670a:	d9d1      	bls.n	80066b0 <LCD_Fill+0xa8>
		}
	}
}  
 800670c:	bf00      	nop
 800670e:	3714      	adds	r7, #20
 8006710:	46bd      	mov	sp, r7
 8006712:	bd90      	pop	{r4, r7, pc}
 8006714:	200024f8 	.word	0x200024f8
 8006718:	40011000 	.word	0x40011000
 800671c:	40010c00 	.word	0x40010c00

08006720 <LCD_DrawLine>:
} 
//����
//x1,y1:�������
//x2,y2:�յ�����  
void LCD_DrawLine(u16 x1, u16 y1, u16 x2, u16 y2)
{
 8006720:	b590      	push	{r4, r7, lr}
 8006722:	b08d      	sub	sp, #52	; 0x34
 8006724:	af00      	add	r7, sp, #0
 8006726:	4604      	mov	r4, r0
 8006728:	4608      	mov	r0, r1
 800672a:	4611      	mov	r1, r2
 800672c:	461a      	mov	r2, r3
 800672e:	4623      	mov	r3, r4
 8006730:	80fb      	strh	r3, [r7, #6]
 8006732:	4603      	mov	r3, r0
 8006734:	80bb      	strh	r3, [r7, #4]
 8006736:	460b      	mov	r3, r1
 8006738:	807b      	strh	r3, [r7, #2]
 800673a:	4613      	mov	r3, r2
 800673c:	803b      	strh	r3, [r7, #0]
	u16 t; 
	int xerr=0,yerr=0,delta_x,delta_y,distance; 
 800673e:	2300      	movs	r3, #0
 8006740:	62bb      	str	r3, [r7, #40]	; 0x28
 8006742:	2300      	movs	r3, #0
 8006744:	627b      	str	r3, [r7, #36]	; 0x24
	int incx,incy,uRow,uCol; 
	delta_x=x2-x1; //������������ 
 8006746:	887a      	ldrh	r2, [r7, #2]
 8006748:	88fb      	ldrh	r3, [r7, #6]
 800674a:	1ad3      	subs	r3, r2, r3
 800674c:	623b      	str	r3, [r7, #32]
	delta_y=y2-y1; 
 800674e:	883a      	ldrh	r2, [r7, #0]
 8006750:	88bb      	ldrh	r3, [r7, #4]
 8006752:	1ad3      	subs	r3, r2, r3
 8006754:	61fb      	str	r3, [r7, #28]
	uRow=x1; 
 8006756:	88fb      	ldrh	r3, [r7, #6]
 8006758:	60fb      	str	r3, [r7, #12]
	uCol=y1; 
 800675a:	88bb      	ldrh	r3, [r7, #4]
 800675c:	60bb      	str	r3, [r7, #8]
	if(delta_x>0)incx=1; //���õ������� 
 800675e:	6a3b      	ldr	r3, [r7, #32]
 8006760:	2b00      	cmp	r3, #0
 8006762:	dd02      	ble.n	800676a <LCD_DrawLine+0x4a>
 8006764:	2301      	movs	r3, #1
 8006766:	617b      	str	r3, [r7, #20]
 8006768:	e00b      	b.n	8006782 <LCD_DrawLine+0x62>
	else if(delta_x==0)incx=0;//��ֱ�� 
 800676a:	6a3b      	ldr	r3, [r7, #32]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d102      	bne.n	8006776 <LCD_DrawLine+0x56>
 8006770:	2300      	movs	r3, #0
 8006772:	617b      	str	r3, [r7, #20]
 8006774:	e005      	b.n	8006782 <LCD_DrawLine+0x62>
	else {incx=-1;delta_x=-delta_x;} 
 8006776:	f04f 33ff 	mov.w	r3, #4294967295
 800677a:	617b      	str	r3, [r7, #20]
 800677c:	6a3b      	ldr	r3, [r7, #32]
 800677e:	425b      	negs	r3, r3
 8006780:	623b      	str	r3, [r7, #32]
	if(delta_y>0)incy=1; 
 8006782:	69fb      	ldr	r3, [r7, #28]
 8006784:	2b00      	cmp	r3, #0
 8006786:	dd02      	ble.n	800678e <LCD_DrawLine+0x6e>
 8006788:	2301      	movs	r3, #1
 800678a:	613b      	str	r3, [r7, #16]
 800678c:	e00b      	b.n	80067a6 <LCD_DrawLine+0x86>
	else if(delta_y==0)incy=0;//ˮƽ�� 
 800678e:	69fb      	ldr	r3, [r7, #28]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d102      	bne.n	800679a <LCD_DrawLine+0x7a>
 8006794:	2300      	movs	r3, #0
 8006796:	613b      	str	r3, [r7, #16]
 8006798:	e005      	b.n	80067a6 <LCD_DrawLine+0x86>
	else{incy=-1;delta_y=-delta_y;} 
 800679a:	f04f 33ff 	mov.w	r3, #4294967295
 800679e:	613b      	str	r3, [r7, #16]
 80067a0:	69fb      	ldr	r3, [r7, #28]
 80067a2:	425b      	negs	r3, r3
 80067a4:	61fb      	str	r3, [r7, #28]
	if( delta_x>delta_y)distance=delta_x; //ѡȡ�������������� 
 80067a6:	6a3a      	ldr	r2, [r7, #32]
 80067a8:	69fb      	ldr	r3, [r7, #28]
 80067aa:	429a      	cmp	r2, r3
 80067ac:	dd02      	ble.n	80067b4 <LCD_DrawLine+0x94>
 80067ae:	6a3b      	ldr	r3, [r7, #32]
 80067b0:	61bb      	str	r3, [r7, #24]
 80067b2:	e001      	b.n	80067b8 <LCD_DrawLine+0x98>
	else distance=delta_y; 
 80067b4:	69fb      	ldr	r3, [r7, #28]
 80067b6:	61bb      	str	r3, [r7, #24]
	for(t=0;t<=distance+1;t++ )//������� 
 80067b8:	2300      	movs	r3, #0
 80067ba:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80067bc:	e02a      	b.n	8006814 <LCD_DrawLine+0xf4>
	{  
		LCD_DrawPoint(uRow,uCol);//���� 
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	68ba      	ldr	r2, [r7, #8]
 80067c4:	b292      	uxth	r2, r2
 80067c6:	4611      	mov	r1, r2
 80067c8:	4618      	mov	r0, r3
 80067ca:	f7fb faff 	bl	8001dcc <LCD_DrawPoint>
		xerr+=delta_x ; 
 80067ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067d0:	6a3b      	ldr	r3, [r7, #32]
 80067d2:	4413      	add	r3, r2
 80067d4:	62bb      	str	r3, [r7, #40]	; 0x28
		yerr+=delta_y ; 
 80067d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067d8:	69fb      	ldr	r3, [r7, #28]
 80067da:	4413      	add	r3, r2
 80067dc:	627b      	str	r3, [r7, #36]	; 0x24
		if(xerr>distance) 
 80067de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067e0:	69bb      	ldr	r3, [r7, #24]
 80067e2:	429a      	cmp	r2, r3
 80067e4:	dd07      	ble.n	80067f6 <LCD_DrawLine+0xd6>
		{ 
			xerr-=distance; 
 80067e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067e8:	69bb      	ldr	r3, [r7, #24]
 80067ea:	1ad3      	subs	r3, r2, r3
 80067ec:	62bb      	str	r3, [r7, #40]	; 0x28
			uRow+=incx; 
 80067ee:	68fa      	ldr	r2, [r7, #12]
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	4413      	add	r3, r2
 80067f4:	60fb      	str	r3, [r7, #12]
		} 
		if(yerr>distance) 
 80067f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067f8:	69bb      	ldr	r3, [r7, #24]
 80067fa:	429a      	cmp	r2, r3
 80067fc:	dd07      	ble.n	800680e <LCD_DrawLine+0xee>
		{ 
			yerr-=distance; 
 80067fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006800:	69bb      	ldr	r3, [r7, #24]
 8006802:	1ad3      	subs	r3, r2, r3
 8006804:	627b      	str	r3, [r7, #36]	; 0x24
			uCol+=incy; 
 8006806:	68ba      	ldr	r2, [r7, #8]
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	4413      	add	r3, r2
 800680c:	60bb      	str	r3, [r7, #8]
	for(t=0;t<=distance+1;t++ )//������� 
 800680e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006810:	3301      	adds	r3, #1
 8006812:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006814:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006816:	69bb      	ldr	r3, [r7, #24]
 8006818:	3301      	adds	r3, #1
 800681a:	429a      	cmp	r2, r3
 800681c:	ddcf      	ble.n	80067be <LCD_DrawLine+0x9e>
		} 
	}  
}    
 800681e:	bf00      	nop
 8006820:	3734      	adds	r7, #52	; 0x34
 8006822:	46bd      	mov	sp, r7
 8006824:	bd90      	pop	{r4, r7, pc}

08006826 <LCD_DrawRectangle>:
//������	  
//(x1,y1),(x2,y2):���εĶԽ�����
void LCD_DrawRectangle(u16 x1, u16 y1, u16 x2, u16 y2)
{
 8006826:	b590      	push	{r4, r7, lr}
 8006828:	b083      	sub	sp, #12
 800682a:	af00      	add	r7, sp, #0
 800682c:	4604      	mov	r4, r0
 800682e:	4608      	mov	r0, r1
 8006830:	4611      	mov	r1, r2
 8006832:	461a      	mov	r2, r3
 8006834:	4623      	mov	r3, r4
 8006836:	80fb      	strh	r3, [r7, #6]
 8006838:	4603      	mov	r3, r0
 800683a:	80bb      	strh	r3, [r7, #4]
 800683c:	460b      	mov	r3, r1
 800683e:	807b      	strh	r3, [r7, #2]
 8006840:	4613      	mov	r3, r2
 8006842:	803b      	strh	r3, [r7, #0]
	LCD_DrawLine(x1,y1,x2,y1);
 8006844:	88bb      	ldrh	r3, [r7, #4]
 8006846:	887a      	ldrh	r2, [r7, #2]
 8006848:	88b9      	ldrh	r1, [r7, #4]
 800684a:	88f8      	ldrh	r0, [r7, #6]
 800684c:	f7ff ff68 	bl	8006720 <LCD_DrawLine>
	LCD_DrawLine(x1,y1,x1,y2);
 8006850:	883b      	ldrh	r3, [r7, #0]
 8006852:	88fa      	ldrh	r2, [r7, #6]
 8006854:	88b9      	ldrh	r1, [r7, #4]
 8006856:	88f8      	ldrh	r0, [r7, #6]
 8006858:	f7ff ff62 	bl	8006720 <LCD_DrawLine>
	LCD_DrawLine(x1,y2,x2,y2);
 800685c:	883b      	ldrh	r3, [r7, #0]
 800685e:	887a      	ldrh	r2, [r7, #2]
 8006860:	8839      	ldrh	r1, [r7, #0]
 8006862:	88f8      	ldrh	r0, [r7, #6]
 8006864:	f7ff ff5c 	bl	8006720 <LCD_DrawLine>
	LCD_DrawLine(x2,y1,x2,y2);
 8006868:	883b      	ldrh	r3, [r7, #0]
 800686a:	887a      	ldrh	r2, [r7, #2]
 800686c:	88b9      	ldrh	r1, [r7, #4]
 800686e:	8878      	ldrh	r0, [r7, #2]
 8006870:	f7ff ff56 	bl	8006720 <LCD_DrawLine>
}
 8006874:	bf00      	nop
 8006876:	370c      	adds	r7, #12
 8006878:	46bd      	mov	sp, r7
 800687a:	bd90      	pop	{r4, r7, pc}

0800687c <LCD_ShowChar>:
//x,y:��ʼ����
//num:Ҫ��ʾ���ַ�:" "--->"~"
//size:�����С 12/16/24
//mode:���ӷ�ʽ(1)���Ƿǵ��ӷ�ʽ(0)
void LCD_ShowChar(u16 x,u16 y,u8 num,u8 size,u8 mode)
{  							  
 800687c:	b590      	push	{r4, r7, lr}
 800687e:	b085      	sub	sp, #20
 8006880:	af00      	add	r7, sp, #0
 8006882:	4604      	mov	r4, r0
 8006884:	4608      	mov	r0, r1
 8006886:	4611      	mov	r1, r2
 8006888:	461a      	mov	r2, r3
 800688a:	4623      	mov	r3, r4
 800688c:	80fb      	strh	r3, [r7, #6]
 800688e:	4603      	mov	r3, r0
 8006890:	80bb      	strh	r3, [r7, #4]
 8006892:	460b      	mov	r3, r1
 8006894:	70fb      	strb	r3, [r7, #3]
 8006896:	4613      	mov	r3, r2
 8006898:	70bb      	strb	r3, [r7, #2]
    u8 temp,t1,t;
	u16 y0=y;
 800689a:	88bb      	ldrh	r3, [r7, #4]
 800689c:	817b      	strh	r3, [r7, #10]
	u8 csize=(size/8+((size%8)?1:0))*(size/2);		//�õ�����һ���ַ���Ӧ������ռ���ֽ���	
 800689e:	78bb      	ldrb	r3, [r7, #2]
 80068a0:	08db      	lsrs	r3, r3, #3
 80068a2:	b2db      	uxtb	r3, r3
 80068a4:	461a      	mov	r2, r3
 80068a6:	78bb      	ldrb	r3, [r7, #2]
 80068a8:	f003 0307 	and.w	r3, r3, #7
 80068ac:	b2db      	uxtb	r3, r3
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	bf14      	ite	ne
 80068b2:	2301      	movne	r3, #1
 80068b4:	2300      	moveq	r3, #0
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	4413      	add	r3, r2
 80068ba:	b2db      	uxtb	r3, r3
 80068bc:	78ba      	ldrb	r2, [r7, #2]
 80068be:	0852      	lsrs	r2, r2, #1
 80068c0:	b2d2      	uxtb	r2, r2
 80068c2:	fb02 f303 	mul.w	r3, r2, r3
 80068c6:	727b      	strb	r3, [r7, #9]
 	num=num-' ';//�õ�ƫ�ƺ��ֵ��ASCII�ֿ��Ǵӿո�ʼȡģ������-' '���Ƕ�Ӧ�ַ����ֿ⣩
 80068c8:	78fb      	ldrb	r3, [r7, #3]
 80068ca:	3b20      	subs	r3, #32
 80068cc:	70fb      	strb	r3, [r7, #3]
	for(t=0;t<csize;t++)
 80068ce:	2300      	movs	r3, #0
 80068d0:	737b      	strb	r3, [r7, #13]
 80068d2:	e069      	b.n	80069a8 <LCD_ShowChar+0x12c>
	{   
		if(size==12)temp=asc2_1206[num][t]; 	 	//����1206����
 80068d4:	78bb      	ldrb	r3, [r7, #2]
 80068d6:	2b0c      	cmp	r3, #12
 80068d8:	d10b      	bne.n	80068f2 <LCD_ShowChar+0x76>
 80068da:	78fa      	ldrb	r2, [r7, #3]
 80068dc:	7b79      	ldrb	r1, [r7, #13]
 80068de:	4838      	ldr	r0, [pc, #224]	; (80069c0 <LCD_ShowChar+0x144>)
 80068e0:	4613      	mov	r3, r2
 80068e2:	005b      	lsls	r3, r3, #1
 80068e4:	4413      	add	r3, r2
 80068e6:	009b      	lsls	r3, r3, #2
 80068e8:	4403      	add	r3, r0
 80068ea:	440b      	add	r3, r1
 80068ec:	781b      	ldrb	r3, [r3, #0]
 80068ee:	73fb      	strb	r3, [r7, #15]
 80068f0:	e019      	b.n	8006926 <LCD_ShowChar+0xaa>
		else if(size==16)temp=asc2_1608[num][t];	//����1608����
 80068f2:	78bb      	ldrb	r3, [r7, #2]
 80068f4:	2b10      	cmp	r3, #16
 80068f6:	d108      	bne.n	800690a <LCD_ShowChar+0x8e>
 80068f8:	78fa      	ldrb	r2, [r7, #3]
 80068fa:	7b7b      	ldrb	r3, [r7, #13]
 80068fc:	4931      	ldr	r1, [pc, #196]	; (80069c4 <LCD_ShowChar+0x148>)
 80068fe:	0112      	lsls	r2, r2, #4
 8006900:	440a      	add	r2, r1
 8006902:	4413      	add	r3, r2
 8006904:	781b      	ldrb	r3, [r3, #0]
 8006906:	73fb      	strb	r3, [r7, #15]
 8006908:	e00d      	b.n	8006926 <LCD_ShowChar+0xaa>
		else if(size==24)temp=asc2_2412[num][t];	//����2412����
 800690a:	78bb      	ldrb	r3, [r7, #2]
 800690c:	2b18      	cmp	r3, #24
 800690e:	d150      	bne.n	80069b2 <LCD_ShowChar+0x136>
 8006910:	78fa      	ldrb	r2, [r7, #3]
 8006912:	7b79      	ldrb	r1, [r7, #13]
 8006914:	482c      	ldr	r0, [pc, #176]	; (80069c8 <LCD_ShowChar+0x14c>)
 8006916:	4613      	mov	r3, r2
 8006918:	00db      	lsls	r3, r3, #3
 800691a:	4413      	add	r3, r2
 800691c:	009b      	lsls	r3, r3, #2
 800691e:	4403      	add	r3, r0
 8006920:	440b      	add	r3, r1
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	73fb      	strb	r3, [r7, #15]
		else return;								//û�е��ֿ�
		for(t1=0;t1<8;t1++)
 8006926:	2300      	movs	r3, #0
 8006928:	73bb      	strb	r3, [r7, #14]
 800692a:	e035      	b.n	8006998 <LCD_ShowChar+0x11c>
		{			    
			if(temp&0x80)LCD_Fast_DrawPoint(x,y,POINT_COLOR);
 800692c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006930:	2b00      	cmp	r3, #0
 8006932:	da07      	bge.n	8006944 <LCD_ShowChar+0xc8>
 8006934:	4b25      	ldr	r3, [pc, #148]	; (80069cc <LCD_ShowChar+0x150>)
 8006936:	881a      	ldrh	r2, [r3, #0]
 8006938:	88b9      	ldrh	r1, [r7, #4]
 800693a:	88fb      	ldrh	r3, [r7, #6]
 800693c:	4618      	mov	r0, r3
 800693e:	f7fb fa75 	bl	8001e2c <LCD_Fast_DrawPoint>
 8006942:	e00a      	b.n	800695a <LCD_ShowChar+0xde>
			else if(mode==0)LCD_Fast_DrawPoint(x,y,BACK_COLOR);
 8006944:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d106      	bne.n	800695a <LCD_ShowChar+0xde>
 800694c:	4b20      	ldr	r3, [pc, #128]	; (80069d0 <LCD_ShowChar+0x154>)
 800694e:	881a      	ldrh	r2, [r3, #0]
 8006950:	88b9      	ldrh	r1, [r7, #4]
 8006952:	88fb      	ldrh	r3, [r7, #6]
 8006954:	4618      	mov	r0, r3
 8006956:	f7fb fa69 	bl	8001e2c <LCD_Fast_DrawPoint>
			temp<<=1;
 800695a:	7bfb      	ldrb	r3, [r7, #15]
 800695c:	005b      	lsls	r3, r3, #1
 800695e:	73fb      	strb	r3, [r7, #15]
			y++;
 8006960:	88bb      	ldrh	r3, [r7, #4]
 8006962:	3301      	adds	r3, #1
 8006964:	80bb      	strh	r3, [r7, #4]
			if(y>=lcddev.height)return;		//��������
 8006966:	4b1b      	ldr	r3, [pc, #108]	; (80069d4 <LCD_ShowChar+0x158>)
 8006968:	885b      	ldrh	r3, [r3, #2]
 800696a:	88ba      	ldrh	r2, [r7, #4]
 800696c:	429a      	cmp	r2, r3
 800696e:	d222      	bcs.n	80069b6 <LCD_ShowChar+0x13a>
			if((y-y0)==size)
 8006970:	88ba      	ldrh	r2, [r7, #4]
 8006972:	897b      	ldrh	r3, [r7, #10]
 8006974:	1ad2      	subs	r2, r2, r3
 8006976:	78bb      	ldrb	r3, [r7, #2]
 8006978:	429a      	cmp	r2, r3
 800697a:	d10a      	bne.n	8006992 <LCD_ShowChar+0x116>
			{
				y=y0;
 800697c:	897b      	ldrh	r3, [r7, #10]
 800697e:	80bb      	strh	r3, [r7, #4]
				x++;
 8006980:	88fb      	ldrh	r3, [r7, #6]
 8006982:	3301      	adds	r3, #1
 8006984:	80fb      	strh	r3, [r7, #6]
				if(x>=lcddev.width)return;	//��������
 8006986:	4b13      	ldr	r3, [pc, #76]	; (80069d4 <LCD_ShowChar+0x158>)
 8006988:	881b      	ldrh	r3, [r3, #0]
 800698a:	88fa      	ldrh	r2, [r7, #6]
 800698c:	429a      	cmp	r2, r3
 800698e:	d307      	bcc.n	80069a0 <LCD_ShowChar+0x124>
 8006990:	e012      	b.n	80069b8 <LCD_ShowChar+0x13c>
		for(t1=0;t1<8;t1++)
 8006992:	7bbb      	ldrb	r3, [r7, #14]
 8006994:	3301      	adds	r3, #1
 8006996:	73bb      	strb	r3, [r7, #14]
 8006998:	7bbb      	ldrb	r3, [r7, #14]
 800699a:	2b07      	cmp	r3, #7
 800699c:	d9c6      	bls.n	800692c <LCD_ShowChar+0xb0>
 800699e:	e000      	b.n	80069a2 <LCD_ShowChar+0x126>
				break;
 80069a0:	bf00      	nop
	for(t=0;t<csize;t++)
 80069a2:	7b7b      	ldrb	r3, [r7, #13]
 80069a4:	3301      	adds	r3, #1
 80069a6:	737b      	strb	r3, [r7, #13]
 80069a8:	7b7a      	ldrb	r2, [r7, #13]
 80069aa:	7a7b      	ldrb	r3, [r7, #9]
 80069ac:	429a      	cmp	r2, r3
 80069ae:	d391      	bcc.n	80068d4 <LCD_ShowChar+0x58>
 80069b0:	e002      	b.n	80069b8 <LCD_ShowChar+0x13c>
		else return;								//û�е��ֿ�
 80069b2:	bf00      	nop
 80069b4:	e000      	b.n	80069b8 <LCD_ShowChar+0x13c>
			if(y>=lcddev.height)return;		//��������
 80069b6:	bf00      	nop
			}
		}  	 
	}  	    	   	 	  
}   
 80069b8:	3714      	adds	r7, #20
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd90      	pop	{r4, r7, pc}
 80069be:	bf00      	nop
 80069c0:	0800abd0 	.word	0x0800abd0
 80069c4:	0800b044 	.word	0x0800b044
 80069c8:	0800b634 	.word	0x0800b634
 80069cc:	200000b8 	.word	0x200000b8
 80069d0:	20000002 	.word	0x20000002
 80069d4:	200024f8 	.word	0x200024f8

080069d8 <LCD_ShowString>:
//x,y:�������
//width,height:�����С  
//size:�����С
//*p:�ַ�����ʼ��ַ		  
void LCD_ShowString(u16 x,u16 y,u16 width,u16 height,u8 size,u8 *p)
{         
 80069d8:	b590      	push	{r4, r7, lr}
 80069da:	b087      	sub	sp, #28
 80069dc:	af02      	add	r7, sp, #8
 80069de:	4604      	mov	r4, r0
 80069e0:	4608      	mov	r0, r1
 80069e2:	4611      	mov	r1, r2
 80069e4:	461a      	mov	r2, r3
 80069e6:	4623      	mov	r3, r4
 80069e8:	80fb      	strh	r3, [r7, #6]
 80069ea:	4603      	mov	r3, r0
 80069ec:	80bb      	strh	r3, [r7, #4]
 80069ee:	460b      	mov	r3, r1
 80069f0:	807b      	strh	r3, [r7, #2]
 80069f2:	4613      	mov	r3, r2
 80069f4:	803b      	strh	r3, [r7, #0]
	u8 x0=x;
 80069f6:	88fb      	ldrh	r3, [r7, #6]
 80069f8:	73fb      	strb	r3, [r7, #15]
	width+=x;
 80069fa:	887a      	ldrh	r2, [r7, #2]
 80069fc:	88fb      	ldrh	r3, [r7, #6]
 80069fe:	4413      	add	r3, r2
 8006a00:	807b      	strh	r3, [r7, #2]
	height+=y;
 8006a02:	883a      	ldrh	r2, [r7, #0]
 8006a04:	88bb      	ldrh	r3, [r7, #4]
 8006a06:	4413      	add	r3, r2
 8006a08:	803b      	strh	r3, [r7, #0]
    while((*p<='~')&&(*p>=' '))//�ж��ǲ��ǷǷ��ַ�!
 8006a0a:	e025      	b.n	8006a58 <LCD_ShowString+0x80>
    {       
        if(x>=width){x=x0;y+=size;}
 8006a0c:	88fa      	ldrh	r2, [r7, #6]
 8006a0e:	887b      	ldrh	r3, [r7, #2]
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d307      	bcc.n	8006a24 <LCD_ShowString+0x4c>
 8006a14:	7bfb      	ldrb	r3, [r7, #15]
 8006a16:	80fb      	strh	r3, [r7, #6]
 8006a18:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006a1c:	b29a      	uxth	r2, r3
 8006a1e:	88bb      	ldrh	r3, [r7, #4]
 8006a20:	4413      	add	r3, r2
 8006a22:	80bb      	strh	r3, [r7, #4]
        if(y>=height)break;//�˳�
 8006a24:	88ba      	ldrh	r2, [r7, #4]
 8006a26:	883b      	ldrh	r3, [r7, #0]
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d21e      	bcs.n	8006a6a <LCD_ShowString+0x92>
        LCD_ShowChar(x,y,*p,size,0);
 8006a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a2e:	781a      	ldrb	r2, [r3, #0]
 8006a30:	f897 4020 	ldrb.w	r4, [r7, #32]
 8006a34:	88b9      	ldrh	r1, [r7, #4]
 8006a36:	88f8      	ldrh	r0, [r7, #6]
 8006a38:	2300      	movs	r3, #0
 8006a3a:	9300      	str	r3, [sp, #0]
 8006a3c:	4623      	mov	r3, r4
 8006a3e:	f7ff ff1d 	bl	800687c <LCD_ShowChar>
        x+=size/2;
 8006a42:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006a46:	085b      	lsrs	r3, r3, #1
 8006a48:	b2db      	uxtb	r3, r3
 8006a4a:	b29a      	uxth	r2, r3
 8006a4c:	88fb      	ldrh	r3, [r7, #6]
 8006a4e:	4413      	add	r3, r2
 8006a50:	80fb      	strh	r3, [r7, #6]
        p++;
 8006a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a54:	3301      	adds	r3, #1
 8006a56:	627b      	str	r3, [r7, #36]	; 0x24
    while((*p<='~')&&(*p>=' '))//�ж��ǲ��ǷǷ��ַ�!
 8006a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	2b7e      	cmp	r3, #126	; 0x7e
 8006a5e:	d805      	bhi.n	8006a6c <LCD_ShowString+0x94>
 8006a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	2b1f      	cmp	r3, #31
 8006a66:	d8d1      	bhi.n	8006a0c <LCD_ShowString+0x34>
    }  
}
 8006a68:	e000      	b.n	8006a6c <LCD_ShowString+0x94>
        if(y>=height)break;//�˳�
 8006a6a:	bf00      	nop
}
 8006a6c:	bf00      	nop
 8006a6e:	3714      	adds	r7, #20
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd90      	pop	{r4, r7, pc}

08006a74 <LED_Init>:
//All rights reserved									  
////////////////////////////////////////////////////////////////////////////////// 	
  
//LED IO初始化
void LED_Init(void)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b086      	sub	sp, #24
 8006a78:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_Initure;

    __HAL_RCC_GPIOA_CLK_ENABLE();           	//开启GPIOA时钟
 8006a7a:	4b1f      	ldr	r3, [pc, #124]	; (8006af8 <LED_Init+0x84>)
 8006a7c:	699b      	ldr	r3, [r3, #24]
 8006a7e:	4a1e      	ldr	r2, [pc, #120]	; (8006af8 <LED_Init+0x84>)
 8006a80:	f043 0304 	orr.w	r3, r3, #4
 8006a84:	6193      	str	r3, [r2, #24]
 8006a86:	4b1c      	ldr	r3, [pc, #112]	; (8006af8 <LED_Init+0x84>)
 8006a88:	699b      	ldr	r3, [r3, #24]
 8006a8a:	f003 0304 	and.w	r3, r3, #4
 8006a8e:	607b      	str	r3, [r7, #4]
 8006a90:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();           	//开启GPIOD时钟
 8006a92:	4b19      	ldr	r3, [pc, #100]	; (8006af8 <LED_Init+0x84>)
 8006a94:	699b      	ldr	r3, [r3, #24]
 8006a96:	4a18      	ldr	r2, [pc, #96]	; (8006af8 <LED_Init+0x84>)
 8006a98:	f043 0320 	orr.w	r3, r3, #32
 8006a9c:	6193      	str	r3, [r2, #24]
 8006a9e:	4b16      	ldr	r3, [pc, #88]	; (8006af8 <LED_Init+0x84>)
 8006aa0:	699b      	ldr	r3, [r3, #24]
 8006aa2:	f003 0320 	and.w	r3, r3, #32
 8006aa6:	603b      	str	r3, [r7, #0]
 8006aa8:	683b      	ldr	r3, [r7, #0]
	
    GPIO_Initure.Pin=GPIO_PIN_8; 				//PB8
 8006aaa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006aae:	60bb      	str	r3, [r7, #8]
    GPIO_Initure.Mode=GPIO_MODE_OUTPUT_PP;  	//推挽输出
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	60fb      	str	r3, [r7, #12]
    GPIO_Initure.Pull=GPIO_PULLUP;          	//上拉
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	613b      	str	r3, [r7, #16]
    GPIO_Initure.Speed=GPIO_SPEED_FREQ_HIGH;    //高速
 8006ab8:	2303      	movs	r3, #3
 8006aba:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA,&GPIO_Initure);
 8006abc:	f107 0308 	add.w	r3, r7, #8
 8006ac0:	4619      	mov	r1, r3
 8006ac2:	480e      	ldr	r0, [pc, #56]	; (8006afc <LED_Init+0x88>)
 8006ac4:	f001 fc4e 	bl	8008364 <HAL_GPIO_Init>

	GPIO_Initure.Pin=GPIO_PIN_2; 				//PD2
 8006ac8:	2304      	movs	r3, #4
 8006aca:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOD,&GPIO_Initure);
 8006acc:	f107 0308 	add.w	r3, r7, #8
 8006ad0:	4619      	mov	r1, r3
 8006ad2:	480b      	ldr	r0, [pc, #44]	; (8006b00 <LED_Init+0x8c>)
 8006ad4:	f001 fc46 	bl	8008364 <HAL_GPIO_Init>
	
    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);	//PA8置1，默认初始化后灯灭
 8006ad8:	2201      	movs	r2, #1
 8006ada:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006ade:	4807      	ldr	r0, [pc, #28]	; (8006afc <LED_Init+0x88>)
 8006ae0:	f001 fdc1 	bl	8008666 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD,GPIO_PIN_2,GPIO_PIN_SET);	//PD2置1，默认初始化后灯灭
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	2104      	movs	r1, #4
 8006ae8:	4805      	ldr	r0, [pc, #20]	; (8006b00 <LED_Init+0x8c>)
 8006aea:	f001 fdbc 	bl	8008666 <HAL_GPIO_WritePin>
}
 8006aee:	bf00      	nop
 8006af0:	3718      	adds	r7, #24
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}
 8006af6:	bf00      	nop
 8006af8:	40021000 	.word	0x40021000
 8006afc:	40010800 	.word	0x40010800
 8006b00:	40011400 	.word	0x40011400

08006b04 <diaplay_power_icon>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//display power icon
int diaplay_power_icon(on){
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b084      	sub	sp, #16
 8006b08:	af02      	add	r7, sp, #8
 8006b0a:	6078      	str	r0, [r7, #4]
	POINT_COLOR = BLACK;
 8006b0c:	4b21      	ldr	r3, [pc, #132]	; (8006b94 <diaplay_power_icon+0x90>)
 8006b0e:	2200      	movs	r2, #0
 8006b10:	801a      	strh	r2, [r3, #0]
	LCD_ShowString(display_frame_right-64,10, 36, 24, 24, "PWR");
 8006b12:	4b21      	ldr	r3, [pc, #132]	; (8006b98 <diaplay_power_icon+0x94>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	3b40      	subs	r3, #64	; 0x40
 8006b1a:	b298      	uxth	r0, r3
 8006b1c:	4b1f      	ldr	r3, [pc, #124]	; (8006b9c <diaplay_power_icon+0x98>)
 8006b1e:	9301      	str	r3, [sp, #4]
 8006b20:	2318      	movs	r3, #24
 8006b22:	9300      	str	r3, [sp, #0]
 8006b24:	2318      	movs	r3, #24
 8006b26:	2224      	movs	r2, #36	; 0x24
 8006b28:	210a      	movs	r1, #10
 8006b2a:	f7ff ff55 	bl	80069d8 <LCD_ShowString>

	if (on == 1){
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d10f      	bne.n	8006b54 <diaplay_power_icon+0x50>
		LCD_Fill(display_frame_right-24,10,display_frame_right,10+24,GREEN);
 8006b34:	4b18      	ldr	r3, [pc, #96]	; (8006b98 <diaplay_power_icon+0x94>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	3b18      	subs	r3, #24
 8006b3c:	b298      	uxth	r0, r3
 8006b3e:	4b16      	ldr	r3, [pc, #88]	; (8006b98 <diaplay_power_icon+0x94>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	b29a      	uxth	r2, r3
 8006b44:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006b48:	9300      	str	r3, [sp, #0]
 8006b4a:	2322      	movs	r3, #34	; 0x22
 8006b4c:	210a      	movs	r1, #10
 8006b4e:	f7ff fd5b 	bl	8006608 <LCD_Fill>
 8006b52:	e00e      	b.n	8006b72 <diaplay_power_icon+0x6e>
	} else{
		LCD_Fill(display_frame_right-24,10,display_frame_right,10+24,RED);
 8006b54:	4b10      	ldr	r3, [pc, #64]	; (8006b98 <diaplay_power_icon+0x94>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	b29b      	uxth	r3, r3
 8006b5a:	3b18      	subs	r3, #24
 8006b5c:	b298      	uxth	r0, r3
 8006b5e:	4b0e      	ldr	r3, [pc, #56]	; (8006b98 <diaplay_power_icon+0x94>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	b29a      	uxth	r2, r3
 8006b64:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006b68:	9300      	str	r3, [sp, #0]
 8006b6a:	2322      	movs	r3, #34	; 0x22
 8006b6c:	210a      	movs	r1, #10
 8006b6e:	f7ff fd4b 	bl	8006608 <LCD_Fill>
	}
	LCD_DrawRectangle(display_frame_right-24,10,display_frame_right,10+24);
 8006b72:	4b09      	ldr	r3, [pc, #36]	; (8006b98 <diaplay_power_icon+0x94>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	b29b      	uxth	r3, r3
 8006b78:	3b18      	subs	r3, #24
 8006b7a:	b298      	uxth	r0, r3
 8006b7c:	4b06      	ldr	r3, [pc, #24]	; (8006b98 <diaplay_power_icon+0x94>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	b29a      	uxth	r2, r3
 8006b82:	2322      	movs	r3, #34	; 0x22
 8006b84:	210a      	movs	r1, #10
 8006b86:	f7ff fe4e 	bl	8006826 <LCD_DrawRectangle>
}
 8006b8a:	bf00      	nop
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3708      	adds	r7, #8
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}
 8006b94:	200000b8 	.word	0x200000b8
 8006b98:	20000024 	.word	0x20000024
 8006b9c:	0800ab44 	.word	0x0800ab44

08006ba0 <diaplay_nrf24_status>:

int diaplay_nrf24_status(on){
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b084      	sub	sp, #16
 8006ba4:	af02      	add	r7, sp, #8
 8006ba6:	6078      	str	r0, [r7, #4]
	POINT_COLOR = BLACK;
 8006ba8:	4b21      	ldr	r3, [pc, #132]	; (8006c30 <diaplay_nrf24_status+0x90>)
 8006baa:	2200      	movs	r2, #0
 8006bac:	801a      	strh	r2, [r3, #0]
	LCD_ShowString(display_frame_right-90 ,40, 78, 24, 24, "NRF24");
 8006bae:	4b21      	ldr	r3, [pc, #132]	; (8006c34 <diaplay_nrf24_status+0x94>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	3b5a      	subs	r3, #90	; 0x5a
 8006bb6:	b298      	uxth	r0, r3
 8006bb8:	4b1f      	ldr	r3, [pc, #124]	; (8006c38 <diaplay_nrf24_status+0x98>)
 8006bba:	9301      	str	r3, [sp, #4]
 8006bbc:	2318      	movs	r3, #24
 8006bbe:	9300      	str	r3, [sp, #0]
 8006bc0:	2318      	movs	r3, #24
 8006bc2:	224e      	movs	r2, #78	; 0x4e
 8006bc4:	2128      	movs	r1, #40	; 0x28
 8006bc6:	f7ff ff07 	bl	80069d8 <LCD_ShowString>
	if (on == 1){
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d10f      	bne.n	8006bf0 <diaplay_nrf24_status+0x50>
		LCD_Fill(display_frame_right-24,40,display_frame_right,40+24,GREEN);
 8006bd0:	4b18      	ldr	r3, [pc, #96]	; (8006c34 <diaplay_nrf24_status+0x94>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	3b18      	subs	r3, #24
 8006bd8:	b298      	uxth	r0, r3
 8006bda:	4b16      	ldr	r3, [pc, #88]	; (8006c34 <diaplay_nrf24_status+0x94>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	b29a      	uxth	r2, r3
 8006be0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006be4:	9300      	str	r3, [sp, #0]
 8006be6:	2340      	movs	r3, #64	; 0x40
 8006be8:	2128      	movs	r1, #40	; 0x28
 8006bea:	f7ff fd0d 	bl	8006608 <LCD_Fill>
 8006bee:	e00e      	b.n	8006c0e <diaplay_nrf24_status+0x6e>
	} else{
		LCD_Fill(display_frame_right-24,40,display_frame_right,40+24,RED);
 8006bf0:	4b10      	ldr	r3, [pc, #64]	; (8006c34 <diaplay_nrf24_status+0x94>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	3b18      	subs	r3, #24
 8006bf8:	b298      	uxth	r0, r3
 8006bfa:	4b0e      	ldr	r3, [pc, #56]	; (8006c34 <diaplay_nrf24_status+0x94>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	b29a      	uxth	r2, r3
 8006c00:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006c04:	9300      	str	r3, [sp, #0]
 8006c06:	2340      	movs	r3, #64	; 0x40
 8006c08:	2128      	movs	r1, #40	; 0x28
 8006c0a:	f7ff fcfd 	bl	8006608 <LCD_Fill>
	}
	LCD_DrawRectangle(display_frame_right-24,40,display_frame_right,40+24);
 8006c0e:	4b09      	ldr	r3, [pc, #36]	; (8006c34 <diaplay_nrf24_status+0x94>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	3b18      	subs	r3, #24
 8006c16:	b298      	uxth	r0, r3
 8006c18:	4b06      	ldr	r3, [pc, #24]	; (8006c34 <diaplay_nrf24_status+0x94>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	b29a      	uxth	r2, r3
 8006c1e:	2340      	movs	r3, #64	; 0x40
 8006c20:	2128      	movs	r1, #40	; 0x28
 8006c22:	f7ff fe00 	bl	8006826 <LCD_DrawRectangle>
}
 8006c26:	bf00      	nop
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3708      	adds	r7, #8
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}
 8006c30:	200000b8 	.word	0x200000b8
 8006c34:	20000024 	.word	0x20000024
 8006c38:	0800ab48 	.word	0x0800ab48

08006c3c <diaplay_connection_status>:

int diaplay_connection_status(on){
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b084      	sub	sp, #16
 8006c40:	af02      	add	r7, sp, #8
 8006c42:	6078      	str	r0, [r7, #4]
	POINT_COLOR = BLACK;
 8006c44:	4b2b      	ldr	r3, [pc, #172]	; (8006cf4 <diaplay_connection_status+0xb8>)
 8006c46:	2200      	movs	r2, #0
 8006c48:	801a      	strh	r2, [r3, #0]
	LCD_ShowString(display_frame_right-78 ,40+6+24, 78, 24, 24, "PAIR");
 8006c4a:	4b2b      	ldr	r3, [pc, #172]	; (8006cf8 <diaplay_connection_status+0xbc>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	b29b      	uxth	r3, r3
 8006c50:	3b4e      	subs	r3, #78	; 0x4e
 8006c52:	b298      	uxth	r0, r3
 8006c54:	4b29      	ldr	r3, [pc, #164]	; (8006cfc <diaplay_connection_status+0xc0>)
 8006c56:	9301      	str	r3, [sp, #4]
 8006c58:	2318      	movs	r3, #24
 8006c5a:	9300      	str	r3, [sp, #0]
 8006c5c:	2318      	movs	r3, #24
 8006c5e:	224e      	movs	r2, #78	; 0x4e
 8006c60:	2146      	movs	r1, #70	; 0x46
 8006c62:	f7ff feb9 	bl	80069d8 <LCD_ShowString>
	if (on == 1){
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d10f      	bne.n	8006c8c <diaplay_connection_status+0x50>
		//LCD_ShowString(30, 70, 200, 16, 16, "NRF24L01 STATUS: 1234567");
		LCD_Fill(display_frame_right-24,40+6+24,display_frame_right,40+24+6+24,GREEN);
 8006c6c:	4b22      	ldr	r3, [pc, #136]	; (8006cf8 <diaplay_connection_status+0xbc>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	3b18      	subs	r3, #24
 8006c74:	b298      	uxth	r0, r3
 8006c76:	4b20      	ldr	r3, [pc, #128]	; (8006cf8 <diaplay_connection_status+0xbc>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	b29a      	uxth	r2, r3
 8006c7c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006c80:	9300      	str	r3, [sp, #0]
 8006c82:	235e      	movs	r3, #94	; 0x5e
 8006c84:	2146      	movs	r1, #70	; 0x46
 8006c86:	f7ff fcbf 	bl	8006608 <LCD_Fill>
 8006c8a:	e021      	b.n	8006cd0 <diaplay_connection_status+0x94>
	} else if (on ==0){
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d10f      	bne.n	8006cb2 <diaplay_connection_status+0x76>
		LCD_Fill(display_frame_right-24,40+6+24,display_frame_right,40+24+6+24,RED);
 8006c92:	4b19      	ldr	r3, [pc, #100]	; (8006cf8 <diaplay_connection_status+0xbc>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	b29b      	uxth	r3, r3
 8006c98:	3b18      	subs	r3, #24
 8006c9a:	b298      	uxth	r0, r3
 8006c9c:	4b16      	ldr	r3, [pc, #88]	; (8006cf8 <diaplay_connection_status+0xbc>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	b29a      	uxth	r2, r3
 8006ca2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006ca6:	9300      	str	r3, [sp, #0]
 8006ca8:	235e      	movs	r3, #94	; 0x5e
 8006caa:	2146      	movs	r1, #70	; 0x46
 8006cac:	f7ff fcac 	bl	8006608 <LCD_Fill>
 8006cb0:	e00e      	b.n	8006cd0 <diaplay_connection_status+0x94>
	} else {
		LCD_Fill(display_frame_right-24,40+6+24,display_frame_right,40+24+6+24,YELLOW);
 8006cb2:	4b11      	ldr	r3, [pc, #68]	; (8006cf8 <diaplay_connection_status+0xbc>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	3b18      	subs	r3, #24
 8006cba:	b298      	uxth	r0, r3
 8006cbc:	4b0e      	ldr	r3, [pc, #56]	; (8006cf8 <diaplay_connection_status+0xbc>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	b29a      	uxth	r2, r3
 8006cc2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8006cc6:	9300      	str	r3, [sp, #0]
 8006cc8:	235e      	movs	r3, #94	; 0x5e
 8006cca:	2146      	movs	r1, #70	; 0x46
 8006ccc:	f7ff fc9c 	bl	8006608 <LCD_Fill>
	}
	LCD_DrawRectangle(display_frame_right-24,40+6+24,display_frame_right,40+24+6+24);
 8006cd0:	4b09      	ldr	r3, [pc, #36]	; (8006cf8 <diaplay_connection_status+0xbc>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	3b18      	subs	r3, #24
 8006cd8:	b298      	uxth	r0, r3
 8006cda:	4b07      	ldr	r3, [pc, #28]	; (8006cf8 <diaplay_connection_status+0xbc>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	b29a      	uxth	r2, r3
 8006ce0:	235e      	movs	r3, #94	; 0x5e
 8006ce2:	2146      	movs	r1, #70	; 0x46
 8006ce4:	f7ff fd9f 	bl	8006826 <LCD_DrawRectangle>
}
 8006ce8:	bf00      	nop
 8006cea:	4618      	mov	r0, r3
 8006cec:	3708      	adds	r7, #8
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}
 8006cf2:	bf00      	nop
 8006cf4:	200000b8 	.word	0x200000b8
 8006cf8:	20000024 	.word	0x20000024
 8006cfc:	0800ab50 	.word	0x0800ab50

08006d00 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b082      	sub	sp, #8
 8006d04:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8006d06:	f001 f899 	bl	8007e3c <HAL_Init>

	/* USER CODE BEGIN Init */
	delay_init(72);
 8006d0a:	2048      	movs	r0, #72	; 0x48
 8006d0c:	f7fa f890 	bl	8000e30 <delay_init>
	LED_Init();
 8006d10:	f7ff feb0 	bl	8006a74 <LED_Init>
	KEY_Init();
 8006d14:	f7fa f8f4 	bl	8000f00 <KEY_Init>
	LCD_Init();
 8006d18:	f7fb fcce 	bl	80026b8 <LCD_Init>
	NRF24L01_Init();
 8006d1c:	f7f9 fe92 	bl	8000a44 <NRF24L01_Init>
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8006d20:	f000 f8c6 	bl	8006eb0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8006d24:	f000 f96a 	bl	8006ffc <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8006d28:	f000 f93e 	bl	8006fa8 <MX_USART1_UART_Init>
	MX_SPI1_Init();
 8006d2c:	f000 f906 	bl	8006f3c <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart1, (uint8_t*) rxBuffer, 1);
 8006d30:	2201      	movs	r2, #1
 8006d32:	4952      	ldr	r1, [pc, #328]	; (8006e7c <main+0x17c>)
 8006d34:	4852      	ldr	r0, [pc, #328]	; (8006e80 <main+0x180>)
 8006d36:	f002 fc76 	bl	8009626 <HAL_UART_Receive_IT>

	POINT_COLOR = BLACK;
 8006d3a:	4b52      	ldr	r3, [pc, #328]	; (8006e84 <main+0x184>)
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	801a      	strh	r2, [r3, #0]
	LCD_ShowString(display_frame_left, display_frame_upper-30, 200, 24, 24, "STM32gram");
 8006d40:	4b51      	ldr	r3, [pc, #324]	; (8006e88 <main+0x188>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	b298      	uxth	r0, r3
 8006d46:	4b51      	ldr	r3, [pc, #324]	; (8006e8c <main+0x18c>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	3b1e      	subs	r3, #30
 8006d4e:	b299      	uxth	r1, r3
 8006d50:	4b4f      	ldr	r3, [pc, #316]	; (8006e90 <main+0x190>)
 8006d52:	9301      	str	r3, [sp, #4]
 8006d54:	2318      	movs	r3, #24
 8006d56:	9300      	str	r3, [sp, #0]
 8006d58:	2318      	movs	r3, #24
 8006d5a:	22c8      	movs	r2, #200	; 0xc8
 8006d5c:	f7ff fe3c 	bl	80069d8 <LCD_ShowString>
	//pwr status
	LCD_DrawRectangle(display_frame_right-24,10,display_frame_right,10+24);
 8006d60:	4b4c      	ldr	r3, [pc, #304]	; (8006e94 <main+0x194>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	3b18      	subs	r3, #24
 8006d68:	b298      	uxth	r0, r3
 8006d6a:	4b4a      	ldr	r3, [pc, #296]	; (8006e94 <main+0x194>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	b29a      	uxth	r2, r3
 8006d70:	2322      	movs	r3, #34	; 0x22
 8006d72:	210a      	movs	r1, #10
 8006d74:	f7ff fd57 	bl	8006826 <LCD_DrawRectangle>
	LCD_DrawRectangle(display_frame_left, display_frame_upper, display_frame_right, display_frame_lower);
 8006d78:	4b43      	ldr	r3, [pc, #268]	; (8006e88 <main+0x188>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	b298      	uxth	r0, r3
 8006d7e:	4b43      	ldr	r3, [pc, #268]	; (8006e8c <main+0x18c>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	b299      	uxth	r1, r3
 8006d84:	4b43      	ldr	r3, [pc, #268]	; (8006e94 <main+0x194>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	b29a      	uxth	r2, r3
 8006d8a:	4b43      	ldr	r3, [pc, #268]	; (8006e98 <main+0x198>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	f7ff fd49 	bl	8006826 <LCD_DrawRectangle>
	diaplay_connection_status(-1);
 8006d94:	f04f 30ff 	mov.w	r0, #4294967295
 8006d98:	f7ff ff50 	bl	8006c3c <diaplay_connection_status>
//	test[3]='T';
//	test[4]=0;



	POINT_COLOR = RED;
 8006d9c:	4b39      	ldr	r3, [pc, #228]	; (8006e84 <main+0x184>)
 8006d9e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8006da2:	801a      	strh	r2, [r3, #0]
	while (NRF24L01_Check()) {
 8006da4:	e002      	b.n	8006dac <main+0xac>
		//LCD_ShowString(30, 70, 200, 16, 16, "NRF24L01 STATUS: Error");
		diaplay_nrf24_status(0);
 8006da6:	2000      	movs	r0, #0
 8006da8:	f7ff fefa 	bl	8006ba0 <diaplay_nrf24_status>
	while (NRF24L01_Check()) {
 8006dac:	f7f9 feb2 	bl	8000b14 <NRF24L01_Check>
 8006db0:	4603      	mov	r3, r0
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d1f7      	bne.n	8006da6 <main+0xa6>
		//delay_ms(200);
		//LCD_Fill(30, 70, 239, 70 + 16, WHITE);
		//delay_ms(200);
	}
	POINT_COLOR = BLACK;
 8006db6:	4b33      	ldr	r3, [pc, #204]	; (8006e84 <main+0x184>)
 8006db8:	2200      	movs	r2, #0
 8006dba:	801a      	strh	r2, [r3, #0]
	diaplay_nrf24_status(1);
 8006dbc:	2001      	movs	r0, #1
 8006dbe:	f7ff feef 	bl	8006ba0 <diaplay_nrf24_status>
	diaplay_power_icon(0);
 8006dc2:	2000      	movs	r0, #0
 8006dc4:	f7ff fe9e 	bl	8006b04 <diaplay_power_icon>
	NRF24L01_TX_Mode();
 8006dc8:	f7fa f800 	bl	8000dcc <NRF24L01_TX_Mode>
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		onAndOff();
 8006dcc:	f000 fcb4 	bl	8007738 <onAndOff>
		if(isOn){
 8006dd0:	4b32      	ldr	r3, [pc, #200]	; (8006e9c <main+0x19c>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d0f9      	beq.n	8006dcc <main+0xcc>
			if(isChanged){
 8006dd8:	4b31      	ldr	r3, [pc, #196]	; (8006ea0 <main+0x1a0>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d017      	beq.n	8006e10 <main+0x110>
				NRF24L01_TX_Mode();
 8006de0:	f7f9 fff4 	bl	8000dcc <NRF24L01_TX_Mode>
				LED1=!LED1;
 8006de4:	4b2f      	ldr	r3, [pc, #188]	; (8006ea4 <main+0x1a4>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	bf0c      	ite	eq
 8006dec:	2301      	moveq	r3, #1
 8006dee:	2300      	movne	r3, #0
 8006df0:	b2da      	uxtb	r2, r3
 8006df2:	4b2c      	ldr	r3, [pc, #176]	; (8006ea4 <main+0x1a4>)
 8006df4:	601a      	str	r2, [r3, #0]
				send();
 8006df6:	f000 fc41 	bl	800767c <send>
				LED1=!LED1;
 8006dfa:	4b2a      	ldr	r3, [pc, #168]	; (8006ea4 <main+0x1a4>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	bf0c      	ite	eq
 8006e02:	2301      	moveq	r3, #1
 8006e04:	2300      	movne	r3, #0
 8006e06:	b2da      	uxtb	r2, r3
 8006e08:	4b26      	ldr	r3, [pc, #152]	; (8006ea4 <main+0x1a4>)
 8006e0a:	601a      	str	r2, [r3, #0]
				NRF24L01_RX_Mode();
 8006e0c:	f7f9 ffb2 	bl	8000d74 <NRF24L01_RX_Mode>
			}
			receive();
 8006e10:	f000 fc78 	bl	8007704 <receive>

			t++;
 8006e14:	4b24      	ldr	r3, [pc, #144]	; (8006ea8 <main+0x1a8>)
 8006e16:	881b      	ldrh	r3, [r3, #0]
 8006e18:	3301      	adds	r3, #1
 8006e1a:	b29a      	uxth	r2, r3
 8006e1c:	4b22      	ldr	r3, [pc, #136]	; (8006ea8 <main+0x1a8>)
 8006e1e:	801a      	strh	r2, [r3, #0]
			if (t == 60000){
 8006e20:	4b21      	ldr	r3, [pc, #132]	; (8006ea8 <main+0x1a8>)
 8006e22:	881b      	ldrh	r3, [r3, #0]
 8006e24:	f64e 2260 	movw	r2, #60000	; 0xea60
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d1cf      	bne.n	8006dcc <main+0xcc>
				NRF24L01_TX_Mode();
 8006e2c:	f7f9 ffce 	bl	8000dcc <NRF24L01_TX_Mode>
				LED1=!LED1;
 8006e30:	4b1c      	ldr	r3, [pc, #112]	; (8006ea4 <main+0x1a4>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	bf0c      	ite	eq
 8006e38:	2301      	moveq	r3, #1
 8006e3a:	2300      	movne	r3, #0
 8006e3c:	b2da      	uxtb	r2, r3
 8006e3e:	4b19      	ldr	r3, [pc, #100]	; (8006ea4 <main+0x1a4>)
 8006e40:	601a      	str	r2, [r3, #0]
				if(NRF24L01_TxPacket(test) != TX_OK){
 8006e42:	481a      	ldr	r0, [pc, #104]	; (8006eac <main+0x1ac>)
 8006e44:	f7f9 ff34 	bl	8000cb0 <NRF24L01_TxPacket>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	2b20      	cmp	r3, #32
 8006e4c:	d003      	beq.n	8006e56 <main+0x156>

					diaplay_connection_status(0);
 8006e4e:	2000      	movs	r0, #0
 8006e50:	f7ff fef4 	bl	8006c3c <diaplay_connection_status>
 8006e54:	e002      	b.n	8006e5c <main+0x15c>
				}else{

					diaplay_connection_status(1);
 8006e56:	2001      	movs	r0, #1
 8006e58:	f7ff fef0 	bl	8006c3c <diaplay_connection_status>
				}
				LED1=!LED1;
 8006e5c:	4b11      	ldr	r3, [pc, #68]	; (8006ea4 <main+0x1a4>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	bf0c      	ite	eq
 8006e64:	2301      	moveq	r3, #1
 8006e66:	2300      	movne	r3, #0
 8006e68:	b2da      	uxtb	r2, r3
 8006e6a:	4b0e      	ldr	r3, [pc, #56]	; (8006ea4 <main+0x1a4>)
 8006e6c:	601a      	str	r2, [r3, #0]
				NRF24L01_RX_Mode();
 8006e6e:	f7f9 ff81 	bl	8000d74 <NRF24L01_RX_Mode>
				t = 0;
 8006e72:	4b0d      	ldr	r3, [pc, #52]	; (8006ea8 <main+0x1a8>)
 8006e74:	2200      	movs	r2, #0
 8006e76:	801a      	strh	r2, [r3, #0]
		onAndOff();
 8006e78:	e7a8      	b.n	8006dcc <main+0xcc>
 8006e7a:	bf00      	nop
 8006e7c:	2000294c 	.word	0x2000294c
 8006e80:	2000250c 	.word	0x2000250c
 8006e84:	200000b8 	.word	0x200000b8
 8006e88:	20000020 	.word	0x20000020
 8006e8c:	20000018 	.word	0x20000018
 8006e90:	0800ab58 	.word	0x0800ab58
 8006e94:	20000024 	.word	0x20000024
 8006e98:	2000001c 	.word	0x2000001c
 8006e9c:	200000c0 	.word	0x200000c0
 8006ea0:	200000bc 	.word	0x200000bc
 8006ea4:	42228188 	.word	0x42228188
 8006ea8:	200000ba 	.word	0x200000ba
 8006eac:	20000004 	.word	0x20000004

08006eb0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b090      	sub	sp, #64	; 0x40
 8006eb4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8006eb6:	f107 0318 	add.w	r3, r7, #24
 8006eba:	2228      	movs	r2, #40	; 0x28
 8006ebc:	2100      	movs	r1, #0
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f002 ff32 	bl	8009d28 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8006ec4:	1d3b      	adds	r3, r7, #4
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	601a      	str	r2, [r3, #0]
 8006eca:	605a      	str	r2, [r3, #4]
 8006ecc:	609a      	str	r2, [r3, #8]
 8006ece:	60da      	str	r2, [r3, #12]
 8006ed0:	611a      	str	r2, [r3, #16]

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006ed6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006eda:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8006edc:	2300      	movs	r3, #0
 8006ede:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006ee4:	2302      	movs	r3, #2
 8006ee6:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006ee8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006eec:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8006eee:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8006ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8006ef4:	f107 0318 	add.w	r3, r7, #24
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f001 fbcd 	bl	8008698 <HAL_RCC_OscConfig>
 8006efe:	4603      	mov	r3, r0
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d001      	beq.n	8006f08 <SystemClock_Config+0x58>
		Error_Handler();
 8006f04:	f000 fd60 	bl	80079c8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8006f08:	230f      	movs	r3, #15
 8006f0a:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006f0c:	2302      	movs	r3, #2
 8006f0e:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006f10:	2300      	movs	r3, #0
 8006f12:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006f14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f18:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8006f1e:	1d3b      	adds	r3, r7, #4
 8006f20:	2102      	movs	r1, #2
 8006f22:	4618      	mov	r0, r3
 8006f24:	f001 fe38 	bl	8008b98 <HAL_RCC_ClockConfig>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d001      	beq.n	8006f32 <SystemClock_Config+0x82>
		Error_Handler();
 8006f2e:	f000 fd4b 	bl	80079c8 <Error_Handler>
	}
}
 8006f32:	bf00      	nop
 8006f34:	3740      	adds	r7, #64	; 0x40
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}
	...

08006f3c <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8006f40:	4b17      	ldr	r3, [pc, #92]	; (8006fa0 <MX_SPI1_Init+0x64>)
 8006f42:	4a18      	ldr	r2, [pc, #96]	; (8006fa4 <MX_SPI1_Init+0x68>)
 8006f44:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8006f46:	4b16      	ldr	r3, [pc, #88]	; (8006fa0 <MX_SPI1_Init+0x64>)
 8006f48:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006f4c:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8006f4e:	4b14      	ldr	r3, [pc, #80]	; (8006fa0 <MX_SPI1_Init+0x64>)
 8006f50:	2200      	movs	r2, #0
 8006f52:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8006f54:	4b12      	ldr	r3, [pc, #72]	; (8006fa0 <MX_SPI1_Init+0x64>)
 8006f56:	2200      	movs	r2, #0
 8006f58:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006f5a:	4b11      	ldr	r3, [pc, #68]	; (8006fa0 <MX_SPI1_Init+0x64>)
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006f60:	4b0f      	ldr	r3, [pc, #60]	; (8006fa0 <MX_SPI1_Init+0x64>)
 8006f62:	2200      	movs	r2, #0
 8006f64:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8006f66:	4b0e      	ldr	r3, [pc, #56]	; (8006fa0 <MX_SPI1_Init+0x64>)
 8006f68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f6c:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8006f6e:	4b0c      	ldr	r3, [pc, #48]	; (8006fa0 <MX_SPI1_Init+0x64>)
 8006f70:	2210      	movs	r2, #16
 8006f72:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006f74:	4b0a      	ldr	r3, [pc, #40]	; (8006fa0 <MX_SPI1_Init+0x64>)
 8006f76:	2200      	movs	r2, #0
 8006f78:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8006f7a:	4b09      	ldr	r3, [pc, #36]	; (8006fa0 <MX_SPI1_Init+0x64>)
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f80:	4b07      	ldr	r3, [pc, #28]	; (8006fa0 <MX_SPI1_Init+0x64>)
 8006f82:	2200      	movs	r2, #0
 8006f84:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8006f86:	4b06      	ldr	r3, [pc, #24]	; (8006fa0 <MX_SPI1_Init+0x64>)
 8006f88:	220a      	movs	r2, #10
 8006f8a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8006f8c:	4804      	ldr	r0, [pc, #16]	; (8006fa0 <MX_SPI1_Init+0x64>)
 8006f8e:	f001 ff9f 	bl	8008ed0 <HAL_SPI_Init>
 8006f92:	4603      	mov	r3, r0
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d001      	beq.n	8006f9c <MX_SPI1_Init+0x60>
		Error_Handler();
 8006f98:	f000 fd16 	bl	80079c8 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8006f9c:	bf00      	nop
 8006f9e:	bd80      	pop	{r7, pc}
 8006fa0:	20002964 	.word	0x20002964
 8006fa4:	40013000 	.word	0x40013000

08006fa8 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8006fac:	4b11      	ldr	r3, [pc, #68]	; (8006ff4 <MX_USART1_UART_Init+0x4c>)
 8006fae:	4a12      	ldr	r2, [pc, #72]	; (8006ff8 <MX_USART1_UART_Init+0x50>)
 8006fb0:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8006fb2:	4b10      	ldr	r3, [pc, #64]	; (8006ff4 <MX_USART1_UART_Init+0x4c>)
 8006fb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006fb8:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006fba:	4b0e      	ldr	r3, [pc, #56]	; (8006ff4 <MX_USART1_UART_Init+0x4c>)
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8006fc0:	4b0c      	ldr	r3, [pc, #48]	; (8006ff4 <MX_USART1_UART_Init+0x4c>)
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8006fc6:	4b0b      	ldr	r3, [pc, #44]	; (8006ff4 <MX_USART1_UART_Init+0x4c>)
 8006fc8:	2200      	movs	r2, #0
 8006fca:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8006fcc:	4b09      	ldr	r3, [pc, #36]	; (8006ff4 <MX_USART1_UART_Init+0x4c>)
 8006fce:	220c      	movs	r2, #12
 8006fd0:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006fd2:	4b08      	ldr	r3, [pc, #32]	; (8006ff4 <MX_USART1_UART_Init+0x4c>)
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006fd8:	4b06      	ldr	r3, [pc, #24]	; (8006ff4 <MX_USART1_UART_Init+0x4c>)
 8006fda:	2200      	movs	r2, #0
 8006fdc:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8006fde:	4805      	ldr	r0, [pc, #20]	; (8006ff4 <MX_USART1_UART_Init+0x4c>)
 8006fe0:	f002 fa42 	bl	8009468 <HAL_UART_Init>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d001      	beq.n	8006fee <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8006fea:	f000 fced 	bl	80079c8 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8006fee:	bf00      	nop
 8006ff0:	bd80      	pop	{r7, pc}
 8006ff2:	bf00      	nop
 8006ff4:	2000250c 	.word	0x2000250c
 8006ff8:	40013800 	.word	0x40013800

08006ffc <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8006ffc:	b480      	push	{r7}
 8006ffe:	b083      	sub	sp, #12
 8007000:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8007002:	4b0e      	ldr	r3, [pc, #56]	; (800703c <MX_GPIO_Init+0x40>)
 8007004:	699b      	ldr	r3, [r3, #24]
 8007006:	4a0d      	ldr	r2, [pc, #52]	; (800703c <MX_GPIO_Init+0x40>)
 8007008:	f043 0320 	orr.w	r3, r3, #32
 800700c:	6193      	str	r3, [r2, #24]
 800700e:	4b0b      	ldr	r3, [pc, #44]	; (800703c <MX_GPIO_Init+0x40>)
 8007010:	699b      	ldr	r3, [r3, #24]
 8007012:	f003 0320 	and.w	r3, r3, #32
 8007016:	607b      	str	r3, [r7, #4]
 8007018:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800701a:	4b08      	ldr	r3, [pc, #32]	; (800703c <MX_GPIO_Init+0x40>)
 800701c:	699b      	ldr	r3, [r3, #24]
 800701e:	4a07      	ldr	r2, [pc, #28]	; (800703c <MX_GPIO_Init+0x40>)
 8007020:	f043 0304 	orr.w	r3, r3, #4
 8007024:	6193      	str	r3, [r2, #24]
 8007026:	4b05      	ldr	r3, [pc, #20]	; (800703c <MX_GPIO_Init+0x40>)
 8007028:	699b      	ldr	r3, [r3, #24]
 800702a:	f003 0304 	and.w	r3, r3, #4
 800702e:	603b      	str	r3, [r7, #0]
 8007030:	683b      	ldr	r3, [r7, #0]

}
 8007032:	bf00      	nop
 8007034:	370c      	adds	r7, #12
 8007036:	46bd      	mov	sp, r7
 8007038:	bc80      	pop	{r7}
 800703a:	4770      	bx	lr
 800703c:	40021000 	.word	0x40021000

08007040 <reload>:
char data[8][1024] = {{0},{0},{0},{0},{0},{0},{0},{0}};
int len[8] = {0};
int fir = 0;

//display the received data
void reload(u8* input,int isSend){
 8007040:	b590      	push	{r4, r7, lr}
 8007042:	b089      	sub	sp, #36	; 0x24
 8007044:	af02      	add	r7, sp, #8
 8007046:	6078      	str	r0, [r7, #4]
 8007048:	6039      	str	r1, [r7, #0]
	//LCD_Fill(30, 295, 230, 295 + 16, WHITE);//NOTE clean
	//LCD_Fill(35, 135, 205, 291, WHITE);//content clean
	LCD_Fill(display_frame_left+1, display_frame_upper+1, display_frame_right-1, display_frame_lower-1, WHITE);//NOTE clean
 800704a:	4b79      	ldr	r3, [pc, #484]	; (8007230 <reload+0x1f0>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	b29b      	uxth	r3, r3
 8007050:	3301      	adds	r3, #1
 8007052:	b298      	uxth	r0, r3
 8007054:	4b77      	ldr	r3, [pc, #476]	; (8007234 <reload+0x1f4>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	b29b      	uxth	r3, r3
 800705a:	3301      	adds	r3, #1
 800705c:	b299      	uxth	r1, r3
 800705e:	4b76      	ldr	r3, [pc, #472]	; (8007238 <reload+0x1f8>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	b29b      	uxth	r3, r3
 8007064:	3b01      	subs	r3, #1
 8007066:	b29a      	uxth	r2, r3
 8007068:	4b74      	ldr	r3, [pc, #464]	; (800723c <reload+0x1fc>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	b29b      	uxth	r3, r3
 800706e:	3b01      	subs	r3, #1
 8007070:	b29c      	uxth	r4, r3
 8007072:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007076:	9300      	str	r3, [sp, #0]
 8007078:	4623      	mov	r3, r4
 800707a:	f7ff fac5 	bl	8006608 <LCD_Fill>
	int ptr1 = 2;// 0
 800707e:	2302      	movs	r3, #2
 8007080:	617b      	str	r3, [r7, #20]
	int ptr2 = 0;
 8007082:	2300      	movs	r3, #0
 8007084:	613b      	str	r3, [r7, #16]
	while(input[ptr1]){
 8007086:	e02f      	b.n	80070e8 <reload+0xa8>
		data[fir][ptr2]=input[ptr1];
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	687a      	ldr	r2, [r7, #4]
 800708c:	441a      	add	r2, r3
 800708e:	4b6c      	ldr	r3, [pc, #432]	; (8007240 <reload+0x200>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	7811      	ldrb	r1, [r2, #0]
 8007094:	4a6b      	ldr	r2, [pc, #428]	; (8007244 <reload+0x204>)
 8007096:	029b      	lsls	r3, r3, #10
 8007098:	441a      	add	r2, r3
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	4413      	add	r3, r2
 800709e:	460a      	mov	r2, r1
 80070a0:	701a      	strb	r2, [r3, #0]
		ptr1++;
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	3301      	adds	r3, #1
 80070a6:	617b      	str	r3, [r7, #20]
		ptr2++;
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	3301      	adds	r3, #1
 80070ac:	613b      	str	r3, [r7, #16]
		if(ptr2==21){
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	2b15      	cmp	r3, #21
 80070b2:	d119      	bne.n	80070e8 <reload+0xa8>
			len[fir]=isSend*22;//if isSend. length == 22, receive length == -2
 80070b4:	4b62      	ldr	r3, [pc, #392]	; (8007240 <reload+0x200>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	683a      	ldr	r2, [r7, #0]
 80070ba:	2116      	movs	r1, #22
 80070bc:	fb01 f202 	mul.w	r2, r1, r2
 80070c0:	4961      	ldr	r1, [pc, #388]	; (8007248 <reload+0x208>)
 80070c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			fir = (fir+1)%9;
 80070c6:	4b5e      	ldr	r3, [pc, #376]	; (8007240 <reload+0x200>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	1c59      	adds	r1, r3, #1
 80070cc:	4b5f      	ldr	r3, [pc, #380]	; (800724c <reload+0x20c>)
 80070ce:	fb83 2301 	smull	r2, r3, r3, r1
 80070d2:	105a      	asrs	r2, r3, #1
 80070d4:	17cb      	asrs	r3, r1, #31
 80070d6:	1ad2      	subs	r2, r2, r3
 80070d8:	4613      	mov	r3, r2
 80070da:	00db      	lsls	r3, r3, #3
 80070dc:	4413      	add	r3, r2
 80070de:	1aca      	subs	r2, r1, r3
 80070e0:	4b57      	ldr	r3, [pc, #348]	; (8007240 <reload+0x200>)
 80070e2:	601a      	str	r2, [r3, #0]
			ptr2 = 0;
 80070e4:	2300      	movs	r3, #0
 80070e6:	613b      	str	r3, [r7, #16]
	while(input[ptr1]){
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	687a      	ldr	r2, [r7, #4]
 80070ec:	4413      	add	r3, r2
 80070ee:	781b      	ldrb	r3, [r3, #0]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d1c9      	bne.n	8007088 <reload+0x48>
		}
	}
	len[fir]=isSend*ptr2;
 80070f4:	4b52      	ldr	r3, [pc, #328]	; (8007240 <reload+0x200>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	683a      	ldr	r2, [r7, #0]
 80070fa:	6939      	ldr	r1, [r7, #16]
 80070fc:	fb01 f202 	mul.w	r2, r1, r2
 8007100:	4951      	ldr	r1, [pc, #324]	; (8007248 <reload+0x208>)
 8007102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	fir = (fir+1)%8;
 8007106:	4b4e      	ldr	r3, [pc, #312]	; (8007240 <reload+0x200>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	3301      	adds	r3, #1
 800710c:	425a      	negs	r2, r3
 800710e:	f003 0307 	and.w	r3, r3, #7
 8007112:	f002 0207 	and.w	r2, r2, #7
 8007116:	bf58      	it	pl
 8007118:	4253      	negpl	r3, r2
 800711a:	4a49      	ldr	r2, [pc, #292]	; (8007240 <reload+0x200>)
 800711c:	6013      	str	r3, [r2, #0]

	for(int i = 0;i<8;i++){
 800711e:	2300      	movs	r3, #0
 8007120:	60fb      	str	r3, [r7, #12]
 8007122:	e07d      	b.n	8007220 <reload+0x1e0>
		if(len[(fir+i)%8]>0){
 8007124:	4b46      	ldr	r3, [pc, #280]	; (8007240 <reload+0x200>)
 8007126:	681a      	ldr	r2, [r3, #0]
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	4413      	add	r3, r2
 800712c:	425a      	negs	r2, r3
 800712e:	f003 0307 	and.w	r3, r3, #7
 8007132:	f002 0207 	and.w	r2, r2, #7
 8007136:	bf58      	it	pl
 8007138:	4253      	negpl	r3, r2
 800713a:	4a43      	ldr	r2, [pc, #268]	; (8007248 <reload+0x208>)
 800713c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007140:	2b00      	cmp	r3, #0
 8007142:	dd3f      	ble.n	80071c4 <reload+0x184>
			POINT_COLOR = GREEN;
 8007144:	4b42      	ldr	r3, [pc, #264]	; (8007250 <reload+0x210>)
 8007146:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800714a:	801a      	strh	r2, [r3, #0]
			LCD_ShowString(display_frame_right-5-8*len[(fir+i)%8], display_frame_upper+5+i*20, 200, 16, 16, (uint8_t*) data[(fir+i)%8]);
 800714c:	4b3a      	ldr	r3, [pc, #232]	; (8007238 <reload+0x1f8>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	b29a      	uxth	r2, r3
 8007152:	4b3b      	ldr	r3, [pc, #236]	; (8007240 <reload+0x200>)
 8007154:	6819      	ldr	r1, [r3, #0]
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	440b      	add	r3, r1
 800715a:	4259      	negs	r1, r3
 800715c:	f003 0307 	and.w	r3, r3, #7
 8007160:	f001 0107 	and.w	r1, r1, #7
 8007164:	bf58      	it	pl
 8007166:	424b      	negpl	r3, r1
 8007168:	4937      	ldr	r1, [pc, #220]	; (8007248 <reload+0x208>)
 800716a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800716e:	b29b      	uxth	r3, r3
 8007170:	00db      	lsls	r3, r3, #3
 8007172:	b29b      	uxth	r3, r3
 8007174:	1ad3      	subs	r3, r2, r3
 8007176:	b29b      	uxth	r3, r3
 8007178:	3b05      	subs	r3, #5
 800717a:	b298      	uxth	r0, r3
 800717c:	4b2d      	ldr	r3, [pc, #180]	; (8007234 <reload+0x1f4>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	b29a      	uxth	r2, r3
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	b29b      	uxth	r3, r3
 8007186:	4619      	mov	r1, r3
 8007188:	0089      	lsls	r1, r1, #2
 800718a:	440b      	add	r3, r1
 800718c:	009b      	lsls	r3, r3, #2
 800718e:	b29b      	uxth	r3, r3
 8007190:	4413      	add	r3, r2
 8007192:	b29b      	uxth	r3, r3
 8007194:	3305      	adds	r3, #5
 8007196:	b299      	uxth	r1, r3
 8007198:	4b29      	ldr	r3, [pc, #164]	; (8007240 <reload+0x200>)
 800719a:	681a      	ldr	r2, [r3, #0]
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	4413      	add	r3, r2
 80071a0:	425a      	negs	r2, r3
 80071a2:	f003 0307 	and.w	r3, r3, #7
 80071a6:	f002 0207 	and.w	r2, r2, #7
 80071aa:	bf58      	it	pl
 80071ac:	4253      	negpl	r3, r2
 80071ae:	029b      	lsls	r3, r3, #10
 80071b0:	4a24      	ldr	r2, [pc, #144]	; (8007244 <reload+0x204>)
 80071b2:	4413      	add	r3, r2
 80071b4:	9301      	str	r3, [sp, #4]
 80071b6:	2310      	movs	r3, #16
 80071b8:	9300      	str	r3, [sp, #0]
 80071ba:	2310      	movs	r3, #16
 80071bc:	22c8      	movs	r2, #200	; 0xc8
 80071be:	f7ff fc0b 	bl	80069d8 <LCD_ShowString>
 80071c2:	e02a      	b.n	800721a <reload+0x1da>
		}else{
			POINT_COLOR = BLUE;
 80071c4:	4b22      	ldr	r3, [pc, #136]	; (8007250 <reload+0x210>)
 80071c6:	221f      	movs	r2, #31
 80071c8:	801a      	strh	r2, [r3, #0]
			LCD_ShowString(display_frame_left + 10, display_frame_upper+5+i*20, 200, 16, 16, (uint8_t*) data[(fir+i)%8]);
 80071ca:	4b19      	ldr	r3, [pc, #100]	; (8007230 <reload+0x1f0>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	330a      	adds	r3, #10
 80071d2:	b298      	uxth	r0, r3
 80071d4:	4b17      	ldr	r3, [pc, #92]	; (8007234 <reload+0x1f4>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	b29a      	uxth	r2, r3
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	b29b      	uxth	r3, r3
 80071de:	4619      	mov	r1, r3
 80071e0:	0089      	lsls	r1, r1, #2
 80071e2:	440b      	add	r3, r1
 80071e4:	009b      	lsls	r3, r3, #2
 80071e6:	b29b      	uxth	r3, r3
 80071e8:	4413      	add	r3, r2
 80071ea:	b29b      	uxth	r3, r3
 80071ec:	3305      	adds	r3, #5
 80071ee:	b299      	uxth	r1, r3
 80071f0:	4b13      	ldr	r3, [pc, #76]	; (8007240 <reload+0x200>)
 80071f2:	681a      	ldr	r2, [r3, #0]
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	4413      	add	r3, r2
 80071f8:	425a      	negs	r2, r3
 80071fa:	f003 0307 	and.w	r3, r3, #7
 80071fe:	f002 0207 	and.w	r2, r2, #7
 8007202:	bf58      	it	pl
 8007204:	4253      	negpl	r3, r2
 8007206:	029b      	lsls	r3, r3, #10
 8007208:	4a0e      	ldr	r2, [pc, #56]	; (8007244 <reload+0x204>)
 800720a:	4413      	add	r3, r2
 800720c:	9301      	str	r3, [sp, #4]
 800720e:	2310      	movs	r3, #16
 8007210:	9300      	str	r3, [sp, #0]
 8007212:	2310      	movs	r3, #16
 8007214:	22c8      	movs	r2, #200	; 0xc8
 8007216:	f7ff fbdf 	bl	80069d8 <LCD_ShowString>
	for(int i = 0;i<8;i++){
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	3301      	adds	r3, #1
 800721e:	60fb      	str	r3, [r7, #12]
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2b07      	cmp	r3, #7
 8007224:	f77f af7e 	ble.w	8007124 <reload+0xe4>
		}
	}

}
 8007228:	bf00      	nop
 800722a:	371c      	adds	r7, #28
 800722c:	46bd      	mov	sp, r7
 800722e:	bd90      	pop	{r4, r7, pc}
 8007230:	20000020 	.word	0x20000020
 8007234:	20000018 	.word	0x20000018
 8007238:	20000024 	.word	0x20000024
 800723c:	2000001c 	.word	0x2000001c
 8007240:	200020e4 	.word	0x200020e4
 8007244:	200000c4 	.word	0x200000c4
 8007248:	200020c4 	.word	0x200020c4
 800724c:	38e38e39 	.word	0x38e38e39
 8007250:	200000b8 	.word	0x200000b8

08007254 <getCommand>:

int getCommand(char* input, int length){
 8007254:	b590      	push	{r4, r7, lr}
 8007256:	b087      	sub	sp, #28
 8007258:	af02      	add	r7, sp, #8
 800725a:	6078      	str	r0, [r7, #4]
 800725c:	6039      	str	r1, [r7, #0]
	if(length==3&&input[0]=='O'&&input[1]=='N'){
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	2b03      	cmp	r3, #3
 8007262:	d158      	bne.n	8007316 <getCommand+0xc2>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	781b      	ldrb	r3, [r3, #0]
 8007268:	2b4f      	cmp	r3, #79	; 0x4f
 800726a:	d154      	bne.n	8007316 <getCommand+0xc2>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	3301      	adds	r3, #1
 8007270:	781b      	ldrb	r3, [r3, #0]
 8007272:	2b4e      	cmp	r3, #78	; 0x4e
 8007274:	d14f      	bne.n	8007316 <getCommand+0xc2>
		if(!isOn){//already connect
 8007276:	4b9c      	ldr	r3, [pc, #624]	; (80074e8 <getCommand+0x294>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d12f      	bne.n	80072de <getCommand+0x8a>
			isOn = 1;
 800727e:	4b9a      	ldr	r3, [pc, #616]	; (80074e8 <getCommand+0x294>)
 8007280:	2201      	movs	r2, #1
 8007282:	601a      	str	r2, [r3, #0]
			LED0 = !LED0;
 8007284:	4b99      	ldr	r3, [pc, #612]	; (80074ec <getCommand+0x298>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	2b00      	cmp	r3, #0
 800728a:	bf0c      	ite	eq
 800728c:	2301      	moveq	r3, #1
 800728e:	2300      	movne	r3, #0
 8007290:	b2da      	uxtb	r2, r3
 8007292:	4b96      	ldr	r3, [pc, #600]	; (80074ec <getCommand+0x298>)
 8007294:	601a      	str	r2, [r3, #0]
			POINT_COLOR = BLACK;
 8007296:	4b96      	ldr	r3, [pc, #600]	; (80074f0 <getCommand+0x29c>)
 8007298:	2200      	movs	r2, #0
 800729a:	801a      	strh	r2, [r3, #0]
			LCD_Fill(display_frame_left+1, display_frame_upper+1, display_frame_right-1, display_frame_lower-1, WHITE);//NOTE clean
 800729c:	4b95      	ldr	r3, [pc, #596]	; (80074f4 <getCommand+0x2a0>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	b29b      	uxth	r3, r3
 80072a2:	3301      	adds	r3, #1
 80072a4:	b298      	uxth	r0, r3
 80072a6:	4b94      	ldr	r3, [pc, #592]	; (80074f8 <getCommand+0x2a4>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	3301      	adds	r3, #1
 80072ae:	b299      	uxth	r1, r3
 80072b0:	4b92      	ldr	r3, [pc, #584]	; (80074fc <getCommand+0x2a8>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	3b01      	subs	r3, #1
 80072b8:	b29a      	uxth	r2, r3
 80072ba:	4b91      	ldr	r3, [pc, #580]	; (8007500 <getCommand+0x2ac>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	b29b      	uxth	r3, r3
 80072c0:	3b01      	subs	r3, #1
 80072c2:	b29c      	uxth	r4, r3
 80072c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80072c8:	9300      	str	r3, [sp, #0]
 80072ca:	4623      	mov	r3, r4
 80072cc:	f7ff f99c 	bl	8006608 <LCD_Fill>
			diaplay_power_icon(1);
 80072d0:	2001      	movs	r0, #1
 80072d2:	f7ff fc17 	bl	8006b04 <diaplay_power_icon>
			NRF24L01_RX_Mode();
 80072d6:	f7f9 fd4d 	bl	8000d74 <NRF24L01_RX_Mode>
			return 1;
 80072da:	2301      	movs	r3, #1
 80072dc:	e100      	b.n	80074e0 <getCommand+0x28c>
		}else{
			POINT_COLOR = RED;
 80072de:	4b84      	ldr	r3, [pc, #528]	; (80074f0 <getCommand+0x29c>)
 80072e0:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80072e4:	801a      	strh	r2, [r3, #0]
			LCD_Fill(30, 295, 230, 295 + 16, WHITE);//lower banner clean
 80072e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80072ea:	9300      	str	r3, [sp, #0]
 80072ec:	f240 1337 	movw	r3, #311	; 0x137
 80072f0:	22e6      	movs	r2, #230	; 0xe6
 80072f2:	f240 1127 	movw	r1, #295	; 0x127
 80072f6:	201e      	movs	r0, #30
 80072f8:	f7ff f986 	bl	8006608 <LCD_Fill>
			LCD_ShowString(30, 295, 200, 16, 16, "Already ON");
 80072fc:	4b81      	ldr	r3, [pc, #516]	; (8007504 <getCommand+0x2b0>)
 80072fe:	9301      	str	r3, [sp, #4]
 8007300:	2310      	movs	r3, #16
 8007302:	9300      	str	r3, [sp, #0]
 8007304:	2310      	movs	r3, #16
 8007306:	22c8      	movs	r2, #200	; 0xc8
 8007308:	f240 1127 	movw	r1, #295	; 0x127
 800730c:	201e      	movs	r0, #30
 800730e:	f7ff fb63 	bl	80069d8 <LCD_ShowString>
			return 2;//succesfully connect
 8007312:	2302      	movs	r3, #2
 8007314:	e0e4      	b.n	80074e0 <getCommand+0x28c>
		}
	}else if(length == 4&&input[0]=='O'&&input[1]=='F'&&input[2]=='F'){
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	2b04      	cmp	r3, #4
 800731a:	f040 8092 	bne.w	8007442 <getCommand+0x1ee>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	781b      	ldrb	r3, [r3, #0]
 8007322:	2b4f      	cmp	r3, #79	; 0x4f
 8007324:	f040 808d 	bne.w	8007442 <getCommand+0x1ee>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	3301      	adds	r3, #1
 800732c:	781b      	ldrb	r3, [r3, #0]
 800732e:	2b46      	cmp	r3, #70	; 0x46
 8007330:	f040 8087 	bne.w	8007442 <getCommand+0x1ee>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	3302      	adds	r3, #2
 8007338:	781b      	ldrb	r3, [r3, #0]
 800733a:	2b46      	cmp	r3, #70	; 0x46
 800733c:	f040 8081 	bne.w	8007442 <getCommand+0x1ee>
		if(isOn){
 8007340:	4b69      	ldr	r3, [pc, #420]	; (80074e8 <getCommand+0x294>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d060      	beq.n	800740a <getCommand+0x1b6>
			isOn = 0;
 8007348:	4b67      	ldr	r3, [pc, #412]	; (80074e8 <getCommand+0x294>)
 800734a:	2200      	movs	r2, #0
 800734c:	601a      	str	r2, [r3, #0]
			LED0 = !LED0;
 800734e:	4b67      	ldr	r3, [pc, #412]	; (80074ec <getCommand+0x298>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	2b00      	cmp	r3, #0
 8007354:	bf0c      	ite	eq
 8007356:	2301      	moveq	r3, #1
 8007358:	2300      	movne	r3, #0
 800735a:	b2da      	uxtb	r2, r3
 800735c:	4b63      	ldr	r3, [pc, #396]	; (80074ec <getCommand+0x298>)
 800735e:	601a      	str	r2, [r3, #0]
			POINT_COLOR = BLACK;
 8007360:	4b63      	ldr	r3, [pc, #396]	; (80074f0 <getCommand+0x29c>)
 8007362:	2200      	movs	r2, #0
 8007364:	801a      	strh	r2, [r3, #0]
			LCD_Fill(display_frame_left+1, display_frame_upper+1, display_frame_right-1, display_frame_lower-1, WHITE);//NOTE clean
 8007366:	4b63      	ldr	r3, [pc, #396]	; (80074f4 <getCommand+0x2a0>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	b29b      	uxth	r3, r3
 800736c:	3301      	adds	r3, #1
 800736e:	b298      	uxth	r0, r3
 8007370:	4b61      	ldr	r3, [pc, #388]	; (80074f8 <getCommand+0x2a4>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	b29b      	uxth	r3, r3
 8007376:	3301      	adds	r3, #1
 8007378:	b299      	uxth	r1, r3
 800737a:	4b60      	ldr	r3, [pc, #384]	; (80074fc <getCommand+0x2a8>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	b29b      	uxth	r3, r3
 8007380:	3b01      	subs	r3, #1
 8007382:	b29a      	uxth	r2, r3
 8007384:	4b5e      	ldr	r3, [pc, #376]	; (8007500 <getCommand+0x2ac>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	b29b      	uxth	r3, r3
 800738a:	3b01      	subs	r3, #1
 800738c:	b29c      	uxth	r4, r3
 800738e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007392:	9300      	str	r3, [sp, #0]
 8007394:	4623      	mov	r3, r4
 8007396:	f7ff f937 	bl	8006608 <LCD_Fill>
			//LCD_Fill(30, 110, 230, 110 + 16, WHITE);//connection status
			diaplay_power_icon(0);
 800739a:	2000      	movs	r0, #0
 800739c:	f7ff fbb2 	bl	8006b04 <diaplay_power_icon>
			NRF24L01_TX_Mode();
 80073a0:	f7f9 fd14 	bl	8000dcc <NRF24L01_TX_Mode>
			LCD_Fill(display_frame_left+1, display_frame_upper+1, display_frame_right-1, display_frame_lower-1, WHITE);//NOTE clean
 80073a4:	4b53      	ldr	r3, [pc, #332]	; (80074f4 <getCommand+0x2a0>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	b29b      	uxth	r3, r3
 80073aa:	3301      	adds	r3, #1
 80073ac:	b298      	uxth	r0, r3
 80073ae:	4b52      	ldr	r3, [pc, #328]	; (80074f8 <getCommand+0x2a4>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	b29b      	uxth	r3, r3
 80073b4:	3301      	adds	r3, #1
 80073b6:	b299      	uxth	r1, r3
 80073b8:	4b50      	ldr	r3, [pc, #320]	; (80074fc <getCommand+0x2a8>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	b29b      	uxth	r3, r3
 80073be:	3b01      	subs	r3, #1
 80073c0:	b29a      	uxth	r2, r3
 80073c2:	4b4f      	ldr	r3, [pc, #316]	; (8007500 <getCommand+0x2ac>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	3b01      	subs	r3, #1
 80073ca:	b29c      	uxth	r4, r3
 80073cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80073d0:	9300      	str	r3, [sp, #0]
 80073d2:	4623      	mov	r3, r4
 80073d4:	f7ff f918 	bl	8006608 <LCD_Fill>
			fir = 0;
 80073d8:	4b4b      	ldr	r3, [pc, #300]	; (8007508 <getCommand+0x2b4>)
 80073da:	2200      	movs	r2, #0
 80073dc:	601a      	str	r2, [r3, #0]
			for(int i =0;i<8;i++){
 80073de:	2300      	movs	r3, #0
 80073e0:	60fb      	str	r3, [r7, #12]
 80073e2:	e00d      	b.n	8007400 <getCommand+0x1ac>
				len[i]=0;
 80073e4:	4a49      	ldr	r2, [pc, #292]	; (800750c <getCommand+0x2b8>)
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2100      	movs	r1, #0
 80073ea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				data[i][0]=0;
 80073ee:	4a48      	ldr	r2, [pc, #288]	; (8007510 <getCommand+0x2bc>)
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	029b      	lsls	r3, r3, #10
 80073f4:	4413      	add	r3, r2
 80073f6:	2200      	movs	r2, #0
 80073f8:	701a      	strb	r2, [r3, #0]
			for(int i =0;i<8;i++){
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	3301      	adds	r3, #1
 80073fe:	60fb      	str	r3, [r7, #12]
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2b07      	cmp	r3, #7
 8007404:	ddee      	ble.n	80073e4 <getCommand+0x190>
			}
			return 3;//successfully disconnect
 8007406:	2303      	movs	r3, #3
 8007408:	e06a      	b.n	80074e0 <getCommand+0x28c>
		}else{
			POINT_COLOR = RED;
 800740a:	4b39      	ldr	r3, [pc, #228]	; (80074f0 <getCommand+0x29c>)
 800740c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8007410:	801a      	strh	r2, [r3, #0]
			LCD_Fill(30, 295, 230, 295 + 16, WHITE);
 8007412:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007416:	9300      	str	r3, [sp, #0]
 8007418:	f240 1337 	movw	r3, #311	; 0x137
 800741c:	22e6      	movs	r2, #230	; 0xe6
 800741e:	f240 1127 	movw	r1, #295	; 0x127
 8007422:	201e      	movs	r0, #30
 8007424:	f7ff f8f0 	bl	8006608 <LCD_Fill>
			LCD_ShowString(30, 295, 200, 16, 16, "Already OFF");
 8007428:	4b3a      	ldr	r3, [pc, #232]	; (8007514 <getCommand+0x2c0>)
 800742a:	9301      	str	r3, [sp, #4]
 800742c:	2310      	movs	r3, #16
 800742e:	9300      	str	r3, [sp, #0]
 8007430:	2310      	movs	r3, #16
 8007432:	22c8      	movs	r2, #200	; 0xc8
 8007434:	f240 1127 	movw	r1, #295	; 0x127
 8007438:	201e      	movs	r0, #30
 800743a:	f7ff facd 	bl	80069d8 <LCD_ShowString>
			return 4;//already disconnect
 800743e:	2304      	movs	r3, #4
 8007440:	e04e      	b.n	80074e0 <getCommand+0x28c>
		}
	}else if(length == 6&&input[0]=='C'&&input[1]=='L'&&input[2]=='E'&&input[3]=='A'&&input[4]=='R'){
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	2b06      	cmp	r3, #6
 8007446:	d14a      	bne.n	80074de <getCommand+0x28a>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	781b      	ldrb	r3, [r3, #0]
 800744c:	2b43      	cmp	r3, #67	; 0x43
 800744e:	d146      	bne.n	80074de <getCommand+0x28a>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	3301      	adds	r3, #1
 8007454:	781b      	ldrb	r3, [r3, #0]
 8007456:	2b4c      	cmp	r3, #76	; 0x4c
 8007458:	d141      	bne.n	80074de <getCommand+0x28a>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	3302      	adds	r3, #2
 800745e:	781b      	ldrb	r3, [r3, #0]
 8007460:	2b45      	cmp	r3, #69	; 0x45
 8007462:	d13c      	bne.n	80074de <getCommand+0x28a>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	3303      	adds	r3, #3
 8007468:	781b      	ldrb	r3, [r3, #0]
 800746a:	2b41      	cmp	r3, #65	; 0x41
 800746c:	d137      	bne.n	80074de <getCommand+0x28a>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	3304      	adds	r3, #4
 8007472:	781b      	ldrb	r3, [r3, #0]
 8007474:	2b52      	cmp	r3, #82	; 0x52
 8007476:	d132      	bne.n	80074de <getCommand+0x28a>
		//LCD_Fill(35, 135, 205, 291, WHITE);
		LCD_Fill(display_frame_left+1, display_frame_upper+1, display_frame_right-1, display_frame_lower-1, WHITE);//NOTE clean
 8007478:	4b1e      	ldr	r3, [pc, #120]	; (80074f4 <getCommand+0x2a0>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	b29b      	uxth	r3, r3
 800747e:	3301      	adds	r3, #1
 8007480:	b298      	uxth	r0, r3
 8007482:	4b1d      	ldr	r3, [pc, #116]	; (80074f8 <getCommand+0x2a4>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	b29b      	uxth	r3, r3
 8007488:	3301      	adds	r3, #1
 800748a:	b299      	uxth	r1, r3
 800748c:	4b1b      	ldr	r3, [pc, #108]	; (80074fc <getCommand+0x2a8>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	b29b      	uxth	r3, r3
 8007492:	3b01      	subs	r3, #1
 8007494:	b29a      	uxth	r2, r3
 8007496:	4b1a      	ldr	r3, [pc, #104]	; (8007500 <getCommand+0x2ac>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	b29b      	uxth	r3, r3
 800749c:	3b01      	subs	r3, #1
 800749e:	b29c      	uxth	r4, r3
 80074a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80074a4:	9300      	str	r3, [sp, #0]
 80074a6:	4623      	mov	r3, r4
 80074a8:	f7ff f8ae 	bl	8006608 <LCD_Fill>
		fir = 0;
 80074ac:	4b16      	ldr	r3, [pc, #88]	; (8007508 <getCommand+0x2b4>)
 80074ae:	2200      	movs	r2, #0
 80074b0:	601a      	str	r2, [r3, #0]
		for(int i =0;i<8;i++){
 80074b2:	2300      	movs	r3, #0
 80074b4:	60bb      	str	r3, [r7, #8]
 80074b6:	e00d      	b.n	80074d4 <getCommand+0x280>
		len[i]=0;
 80074b8:	4a14      	ldr	r2, [pc, #80]	; (800750c <getCommand+0x2b8>)
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	2100      	movs	r1, #0
 80074be:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		data[i][0]=0;
 80074c2:	4a13      	ldr	r2, [pc, #76]	; (8007510 <getCommand+0x2bc>)
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	029b      	lsls	r3, r3, #10
 80074c8:	4413      	add	r3, r2
 80074ca:	2200      	movs	r2, #0
 80074cc:	701a      	strb	r2, [r3, #0]
		for(int i =0;i<8;i++){
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	3301      	adds	r3, #1
 80074d2:	60bb      	str	r3, [r7, #8]
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	2b07      	cmp	r3, #7
 80074d8:	ddee      	ble.n	80074b8 <getCommand+0x264>
		}
		return 5;
 80074da:	2305      	movs	r3, #5
 80074dc:	e000      	b.n	80074e0 <getCommand+0x28c>
	}
	return 0;
 80074de:	2300      	movs	r3, #0
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3714      	adds	r7, #20
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd90      	pop	{r4, r7, pc}
 80074e8:	200000c0 	.word	0x200000c0
 80074ec:	422101a0 	.word	0x422101a0
 80074f0:	200000b8 	.word	0x200000b8
 80074f4:	20000020 	.word	0x20000020
 80074f8:	20000018 	.word	0x20000018
 80074fc:	20000024 	.word	0x20000024
 8007500:	2000001c 	.word	0x2000001c
 8007504:	0800ab64 	.word	0x0800ab64
 8007508:	200020e4 	.word	0x200020e4
 800750c:	200020c4 	.word	0x200020c4
 8007510:	200000c4 	.word	0x200000c4
 8007514:	0800ab70 	.word	0x0800ab70

08007518 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8007518:	b580      	push	{r7, lr}
 800751a:	b086      	sub	sp, #24
 800751c:	af02      	add	r7, sp, #8
 800751e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4a4a      	ldr	r2, [pc, #296]	; (8007650 <HAL_UART_RxCpltCallback+0x138>)
 8007526:	4293      	cmp	r3, r2
 8007528:	f040 808d 	bne.w	8007646 <HAL_UART_RxCpltCallback+0x12e>
		static unsigned char uRx_Data[1024] = { 0 };
		static unsigned char uLength = 0;
		if (rxBuffer[0] == '\n') {
 800752c:	4b49      	ldr	r3, [pc, #292]	; (8007654 <HAL_UART_RxCpltCallback+0x13c>)
 800752e:	781b      	ldrb	r3, [r3, #0]
 8007530:	2b0a      	cmp	r3, #10
 8007532:	d17b      	bne.n	800762c <HAL_UART_RxCpltCallback+0x114>
			HAL_UART_Transmit(&huart1, uRx_Data, uLength, 0xffff);
 8007534:	4b48      	ldr	r3, [pc, #288]	; (8007658 <HAL_UART_RxCpltCallback+0x140>)
 8007536:	781b      	ldrb	r3, [r3, #0]
 8007538:	b29a      	uxth	r2, r3
 800753a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800753e:	4947      	ldr	r1, [pc, #284]	; (800765c <HAL_UART_RxCpltCallback+0x144>)
 8007540:	4847      	ldr	r0, [pc, #284]	; (8007660 <HAL_UART_RxCpltCallback+0x148>)
 8007542:	f001 ffde 	bl	8009502 <HAL_UART_Transmit>
			if(getCommand(uRx_Data,uLength)==0){
 8007546:	4b44      	ldr	r3, [pc, #272]	; (8007658 <HAL_UART_RxCpltCallback+0x140>)
 8007548:	781b      	ldrb	r3, [r3, #0]
 800754a:	4619      	mov	r1, r3
 800754c:	4843      	ldr	r0, [pc, #268]	; (800765c <HAL_UART_RxCpltCallback+0x144>)
 800754e:	f7ff fe81 	bl	8007254 <getCommand>
 8007552:	4603      	mov	r3, r0
 8007554:	2b00      	cmp	r3, #0
 8007556:	d165      	bne.n	8007624 <HAL_UART_RxCpltCallback+0x10c>
				if(!isOn){
 8007558:	4b42      	ldr	r3, [pc, #264]	; (8007664 <HAL_UART_RxCpltCallback+0x14c>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d11a      	bne.n	8007596 <HAL_UART_RxCpltCallback+0x7e>
					POINT_COLOR = RED;
 8007560:	4b41      	ldr	r3, [pc, #260]	; (8007668 <HAL_UART_RxCpltCallback+0x150>)
 8007562:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8007566:	801a      	strh	r2, [r3, #0]
					LCD_Fill(30, 295, 230, 295 + 16, WHITE);
 8007568:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800756c:	9300      	str	r3, [sp, #0]
 800756e:	f240 1337 	movw	r3, #311	; 0x137
 8007572:	22e6      	movs	r2, #230	; 0xe6
 8007574:	f240 1127 	movw	r1, #295	; 0x127
 8007578:	201e      	movs	r0, #30
 800757a:	f7ff f845 	bl	8006608 <LCD_Fill>
					LCD_ShowString(30, 295, 200, 16, 16, "Turn on first!");
 800757e:	4b3b      	ldr	r3, [pc, #236]	; (800766c <HAL_UART_RxCpltCallback+0x154>)
 8007580:	9301      	str	r3, [sp, #4]
 8007582:	2310      	movs	r3, #16
 8007584:	9300      	str	r3, [sp, #0]
 8007586:	2310      	movs	r3, #16
 8007588:	22c8      	movs	r2, #200	; 0xc8
 800758a:	f240 1127 	movw	r1, #295	; 0x127
 800758e:	201e      	movs	r0, #30
 8007590:	f7ff fa22 	bl	80069d8 <LCD_ShowString>
 8007594:	e046      	b.n	8007624 <HAL_UART_RxCpltCallback+0x10c>
				}else{
					if(uLength + 2 > TX_PLOAD_WIDTH){
 8007596:	4b30      	ldr	r3, [pc, #192]	; (8007658 <HAL_UART_RxCpltCallback+0x140>)
 8007598:	781b      	ldrb	r3, [r3, #0]
 800759a:	3302      	adds	r3, #2
 800759c:	2b20      	cmp	r3, #32
 800759e:	dd1a      	ble.n	80075d6 <HAL_UART_RxCpltCallback+0xbe>
						POINT_COLOR = RED;
 80075a0:	4b31      	ldr	r3, [pc, #196]	; (8007668 <HAL_UART_RxCpltCallback+0x150>)
 80075a2:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80075a6:	801a      	strh	r2, [r3, #0]
						LCD_Fill(30, 295, 230, 295 + 16, WHITE);
 80075a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80075ac:	9300      	str	r3, [sp, #0]
 80075ae:	f240 1337 	movw	r3, #311	; 0x137
 80075b2:	22e6      	movs	r2, #230	; 0xe6
 80075b4:	f240 1127 	movw	r1, #295	; 0x127
 80075b8:	201e      	movs	r0, #30
 80075ba:	f7ff f825 	bl	8006608 <LCD_Fill>
						LCD_ShowString(30, 295, 200, 16, 16, "Input <= 32!");
 80075be:	4b2c      	ldr	r3, [pc, #176]	; (8007670 <HAL_UART_RxCpltCallback+0x158>)
 80075c0:	9301      	str	r3, [sp, #4]
 80075c2:	2310      	movs	r3, #16
 80075c4:	9300      	str	r3, [sp, #0]
 80075c6:	2310      	movs	r3, #16
 80075c8:	22c8      	movs	r2, #200	; 0xc8
 80075ca:	f240 1127 	movw	r1, #295	; 0x127
 80075ce:	201e      	movs	r0, #30
 80075d0:	f7ff fa02 	bl	80069d8 <LCD_ShowString>
 80075d4:	e026      	b.n	8007624 <HAL_UART_RxCpltCallback+0x10c>
					}else{
						send_buf[0] = PAYLOAD;
 80075d6:	4b27      	ldr	r3, [pc, #156]	; (8007674 <HAL_UART_RxCpltCallback+0x15c>)
 80075d8:	2242      	movs	r2, #66	; 0x42
 80075da:	701a      	strb	r2, [r3, #0]
						send_buf[1] = LAST;
 80075dc:	4b25      	ldr	r3, [pc, #148]	; (8007674 <HAL_UART_RxCpltCallback+0x15c>)
 80075de:	2243      	movs	r2, #67	; 0x43
 80075e0:	705a      	strb	r2, [r3, #1]
						for(int i = 0;i<1024;i++){
 80075e2:	2300      	movs	r3, #0
 80075e4:	60fb      	str	r3, [r7, #12]
 80075e6:	e016      	b.n	8007616 <HAL_UART_RxCpltCallback+0xfe>
							if(i==uLength) {
 80075e8:	4b1b      	ldr	r3, [pc, #108]	; (8007658 <HAL_UART_RxCpltCallback+0x140>)
 80075ea:	781b      	ldrb	r3, [r3, #0]
 80075ec:	461a      	mov	r2, r3
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d105      	bne.n	8007600 <HAL_UART_RxCpltCallback+0xe8>
								send_buf[i + 2]=0;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	3302      	adds	r3, #2
 80075f8:	4a1e      	ldr	r2, [pc, #120]	; (8007674 <HAL_UART_RxCpltCallback+0x15c>)
 80075fa:	2100      	movs	r1, #0
 80075fc:	54d1      	strb	r1, [r2, r3]
								break;
 80075fe:	e00e      	b.n	800761e <HAL_UART_RxCpltCallback+0x106>
							}
							send_buf[i + 2]=uRx_Data[i];
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	3302      	adds	r3, #2
 8007604:	4915      	ldr	r1, [pc, #84]	; (800765c <HAL_UART_RxCpltCallback+0x144>)
 8007606:	68fa      	ldr	r2, [r7, #12]
 8007608:	440a      	add	r2, r1
 800760a:	7811      	ldrb	r1, [r2, #0]
 800760c:	4a19      	ldr	r2, [pc, #100]	; (8007674 <HAL_UART_RxCpltCallback+0x15c>)
 800760e:	54d1      	strb	r1, [r2, r3]
						for(int i = 0;i<1024;i++){
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	3301      	adds	r3, #1
 8007614:	60fb      	str	r3, [r7, #12]
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800761c:	dbe4      	blt.n	80075e8 <HAL_UART_RxCpltCallback+0xd0>
						}
						isChanged = 1;
 800761e:	4b16      	ldr	r3, [pc, #88]	; (8007678 <HAL_UART_RxCpltCallback+0x160>)
 8007620:	2201      	movs	r2, #1
 8007622:	601a      	str	r2, [r3, #0]
					}
//					LCD_ShowString(30, 190, 200, 16, 16, "isChanged is 1");
				}
			}
			uLength = 0;
 8007624:	4b0c      	ldr	r3, [pc, #48]	; (8007658 <HAL_UART_RxCpltCallback+0x140>)
 8007626:	2200      	movs	r2, #0
 8007628:	701a      	strb	r2, [r3, #0]
		} else {
			uRx_Data[uLength] = rxBuffer[0];
			uLength++;
		}
	}
}
 800762a:	e00c      	b.n	8007646 <HAL_UART_RxCpltCallback+0x12e>
			uRx_Data[uLength] = rxBuffer[0];
 800762c:	4b0a      	ldr	r3, [pc, #40]	; (8007658 <HAL_UART_RxCpltCallback+0x140>)
 800762e:	781b      	ldrb	r3, [r3, #0]
 8007630:	461a      	mov	r2, r3
 8007632:	4b08      	ldr	r3, [pc, #32]	; (8007654 <HAL_UART_RxCpltCallback+0x13c>)
 8007634:	7819      	ldrb	r1, [r3, #0]
 8007636:	4b09      	ldr	r3, [pc, #36]	; (800765c <HAL_UART_RxCpltCallback+0x144>)
 8007638:	5499      	strb	r1, [r3, r2]
			uLength++;
 800763a:	4b07      	ldr	r3, [pc, #28]	; (8007658 <HAL_UART_RxCpltCallback+0x140>)
 800763c:	781b      	ldrb	r3, [r3, #0]
 800763e:	3301      	adds	r3, #1
 8007640:	b2da      	uxtb	r2, r3
 8007642:	4b05      	ldr	r3, [pc, #20]	; (8007658 <HAL_UART_RxCpltCallback+0x140>)
 8007644:	701a      	strb	r2, [r3, #0]
}
 8007646:	bf00      	nop
 8007648:	3710      	adds	r7, #16
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}
 800764e:	bf00      	nop
 8007650:	40013800 	.word	0x40013800
 8007654:	2000294c 	.word	0x2000294c
 8007658:	200020e8 	.word	0x200020e8
 800765c:	200020ec 	.word	0x200020ec
 8007660:	2000250c 	.word	0x2000250c
 8007664:	200000c0 	.word	0x200000c0
 8007668:	200000b8 	.word	0x200000b8
 800766c:	0800ab7c 	.word	0x0800ab7c
 8007670:	0800ab8c 	.word	0x0800ab8c
 8007674:	200029bc 	.word	0x200029bc
 8007678:	200000bc 	.word	0x200000bc

0800767c <send>:
void send() {
 800767c:	b580      	push	{r7, lr}
 800767e:	b082      	sub	sp, #8
 8007680:	af02      	add	r7, sp, #8
	if (NRF24L01_TxPacket(send_buf) == TX_OK) {
 8007682:	481b      	ldr	r0, [pc, #108]	; (80076f0 <send+0x74>)
 8007684:	f7f9 fb14 	bl	8000cb0 <NRF24L01_TxPacket>
 8007688:	4603      	mov	r3, r0
 800768a:	2b20      	cmp	r3, #32
 800768c:	d10b      	bne.n	80076a6 <send+0x2a>
		if(isChanged){
 800768e:	4b19      	ldr	r3, [pc, #100]	; (80076f4 <send+0x78>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d028      	beq.n	80076e8 <send+0x6c>
			isChanged = 0;
 8007696:	4b17      	ldr	r3, [pc, #92]	; (80076f4 <send+0x78>)
 8007698:	2200      	movs	r2, #0
 800769a:	601a      	str	r2, [r3, #0]
			reload(&send_buf,1);
 800769c:	2101      	movs	r1, #1
 800769e:	4814      	ldr	r0, [pc, #80]	; (80076f0 <send+0x74>)
 80076a0:	f7ff fcce 	bl	8007040 <reload>
		POINT_COLOR = RED;
		LCD_Fill(30, 295, lcddev.width, 295 + 16 * 3, WHITE); //清空显示
		LCD_ShowString(30, 295, lcddev.width - 1, 32, 16, "Send Failed!");
		isChanged = 0;
	};
}
 80076a4:	e020      	b.n	80076e8 <send+0x6c>
		POINT_COLOR = RED;
 80076a6:	4b14      	ldr	r3, [pc, #80]	; (80076f8 <send+0x7c>)
 80076a8:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80076ac:	801a      	strh	r2, [r3, #0]
		LCD_Fill(30, 295, lcddev.width, 295 + 16 * 3, WHITE); //清空显示
 80076ae:	4b13      	ldr	r3, [pc, #76]	; (80076fc <send+0x80>)
 80076b0:	881a      	ldrh	r2, [r3, #0]
 80076b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80076b6:	9300      	str	r3, [sp, #0]
 80076b8:	f240 1357 	movw	r3, #343	; 0x157
 80076bc:	f240 1127 	movw	r1, #295	; 0x127
 80076c0:	201e      	movs	r0, #30
 80076c2:	f7fe ffa1 	bl	8006608 <LCD_Fill>
		LCD_ShowString(30, 295, lcddev.width - 1, 32, 16, "Send Failed!");
 80076c6:	4b0d      	ldr	r3, [pc, #52]	; (80076fc <send+0x80>)
 80076c8:	881b      	ldrh	r3, [r3, #0]
 80076ca:	3b01      	subs	r3, #1
 80076cc:	b29a      	uxth	r2, r3
 80076ce:	4b0c      	ldr	r3, [pc, #48]	; (8007700 <send+0x84>)
 80076d0:	9301      	str	r3, [sp, #4]
 80076d2:	2310      	movs	r3, #16
 80076d4:	9300      	str	r3, [sp, #0]
 80076d6:	2320      	movs	r3, #32
 80076d8:	f240 1127 	movw	r1, #295	; 0x127
 80076dc:	201e      	movs	r0, #30
 80076de:	f7ff f97b 	bl	80069d8 <LCD_ShowString>
		isChanged = 0;
 80076e2:	4b04      	ldr	r3, [pc, #16]	; (80076f4 <send+0x78>)
 80076e4:	2200      	movs	r2, #0
 80076e6:	601a      	str	r2, [r3, #0]
}
 80076e8:	bf00      	nop
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}
 80076ee:	bf00      	nop
 80076f0:	200029bc 	.word	0x200029bc
 80076f4:	200000bc 	.word	0x200000bc
 80076f8:	200000b8 	.word	0x200000b8
 80076fc:	200024f8 	.word	0x200024f8
 8007700:	0800ab9c 	.word	0x0800ab9c

08007704 <receive>:
void receive(){
 8007704:	b580      	push	{r7, lr}
 8007706:	af00      	add	r7, sp, #0
	if (NRF24L01_RxPacket(rev_buf) == 0) //收到信息,则显示出
 8007708:	480a      	ldr	r0, [pc, #40]	; (8007734 <receive+0x30>)
 800770a:	f7f9 fb0d 	bl	8000d28 <NRF24L01_RxPacket>
 800770e:	4603      	mov	r3, r0
 8007710:	2b00      	cmp	r3, #0
 8007712:	d10e      	bne.n	8007732 <receive+0x2e>
	{
		if(rev_buf[0] == HEART_BEAT) {
 8007714:	4b07      	ldr	r3, [pc, #28]	; (8007734 <receive+0x30>)
 8007716:	781b      	ldrb	r3, [r3, #0]
 8007718:	2b41      	cmp	r3, #65	; 0x41
 800771a:	d009      	beq.n	8007730 <receive+0x2c>
			return;
		}
//		if(rev_buf[0]==test[0]&&rev_buf[1]==test[1]&&rev_buf[2]==test[2]&&rev_buf[3]==test[3]&&rev_buf[4] == test[4]){
//			return;
//		}
		rev_buf[1023] = 0; //加入字符串结束符
 800771c:	4b05      	ldr	r3, [pc, #20]	; (8007734 <receive+0x30>)
 800771e:	2200      	movs	r2, #0
 8007720:	f883 23ff 	strb.w	r2, [r3, #1023]	; 0x3ff
		reload(&rev_buf,-1);
 8007724:	f04f 31ff 	mov.w	r1, #4294967295
 8007728:	4802      	ldr	r0, [pc, #8]	; (8007734 <receive+0x30>)
 800772a:	f7ff fc89 	bl	8007040 <reload>
 800772e:	e000      	b.n	8007732 <receive+0x2e>
			return;
 8007730:	bf00      	nop
	}
}
 8007732:	bd80      	pop	{r7, pc}
 8007734:	2000254c 	.word	0x2000254c

08007738 <onAndOff>:
int onAndOff(){
 8007738:	b590      	push	{r4, r7, lr}
 800773a:	b085      	sub	sp, #20
 800773c:	af02      	add	r7, sp, #8
	key = KEY_Scan(0);
 800773e:	2000      	movs	r0, #0
 8007740:	f7f9 fc26 	bl	8000f90 <KEY_Scan>
 8007744:	4603      	mov	r3, r0
 8007746:	461a      	mov	r2, r3
 8007748:	4b92      	ldr	r3, [pc, #584]	; (8007994 <onAndOff+0x25c>)
 800774a:	701a      	strb	r2, [r3, #0]
	if (key == KEY0_PRES && !isOn) {
 800774c:	4b91      	ldr	r3, [pc, #580]	; (8007994 <onAndOff+0x25c>)
 800774e:	781b      	ldrb	r3, [r3, #0]
 8007750:	2b01      	cmp	r3, #1
 8007752:	d133      	bne.n	80077bc <onAndOff+0x84>
 8007754:	4b90      	ldr	r3, [pc, #576]	; (8007998 <onAndOff+0x260>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d12f      	bne.n	80077bc <onAndOff+0x84>
		isOn = 1;
 800775c:	4b8e      	ldr	r3, [pc, #568]	; (8007998 <onAndOff+0x260>)
 800775e:	2201      	movs	r2, #1
 8007760:	601a      	str	r2, [r3, #0]
		LED0 = !LED0;
 8007762:	4b8e      	ldr	r3, [pc, #568]	; (800799c <onAndOff+0x264>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	2b00      	cmp	r3, #0
 8007768:	bf0c      	ite	eq
 800776a:	2301      	moveq	r3, #1
 800776c:	2300      	movne	r3, #0
 800776e:	b2da      	uxtb	r2, r3
 8007770:	4b8a      	ldr	r3, [pc, #552]	; (800799c <onAndOff+0x264>)
 8007772:	601a      	str	r2, [r3, #0]
		POINT_COLOR = BLACK;
 8007774:	4b8a      	ldr	r3, [pc, #552]	; (80079a0 <onAndOff+0x268>)
 8007776:	2200      	movs	r2, #0
 8007778:	801a      	strh	r2, [r3, #0]
		LCD_Fill(display_frame_left+1, display_frame_upper+1, display_frame_right-1, display_frame_lower-1, WHITE);//NOTE clean
 800777a:	4b8a      	ldr	r3, [pc, #552]	; (80079a4 <onAndOff+0x26c>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	b29b      	uxth	r3, r3
 8007780:	3301      	adds	r3, #1
 8007782:	b298      	uxth	r0, r3
 8007784:	4b88      	ldr	r3, [pc, #544]	; (80079a8 <onAndOff+0x270>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	b29b      	uxth	r3, r3
 800778a:	3301      	adds	r3, #1
 800778c:	b299      	uxth	r1, r3
 800778e:	4b87      	ldr	r3, [pc, #540]	; (80079ac <onAndOff+0x274>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	b29b      	uxth	r3, r3
 8007794:	3b01      	subs	r3, #1
 8007796:	b29a      	uxth	r2, r3
 8007798:	4b85      	ldr	r3, [pc, #532]	; (80079b0 <onAndOff+0x278>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	b29b      	uxth	r3, r3
 800779e:	3b01      	subs	r3, #1
 80077a0:	b29c      	uxth	r4, r3
 80077a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80077a6:	9300      	str	r3, [sp, #0]
 80077a8:	4623      	mov	r3, r4
 80077aa:	f7fe ff2d 	bl	8006608 <LCD_Fill>

		diaplay_power_icon(1);
 80077ae:	2001      	movs	r0, #1
 80077b0:	f7ff f9a8 	bl	8006b04 <diaplay_power_icon>
		NRF24L01_RX_Mode();
 80077b4:	f7f9 fade 	bl	8000d74 <NRF24L01_RX_Mode>
		return 1;//on
 80077b8:	2301      	movs	r3, #1
 80077ba:	e0e6      	b.n	800798a <onAndOff+0x252>
	}else if(key == KEY0_PRES && isOn){
 80077bc:	4b75      	ldr	r3, [pc, #468]	; (8007994 <onAndOff+0x25c>)
 80077be:	781b      	ldrb	r3, [r3, #0]
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d11f      	bne.n	8007804 <onAndOff+0xcc>
 80077c4:	4b74      	ldr	r3, [pc, #464]	; (8007998 <onAndOff+0x260>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d01b      	beq.n	8007804 <onAndOff+0xcc>
		POINT_COLOR = RED;
 80077cc:	4b74      	ldr	r3, [pc, #464]	; (80079a0 <onAndOff+0x268>)
 80077ce:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80077d2:	801a      	strh	r2, [r3, #0]
		LCD_Fill(30, 295, 230, 295 + 16, WHITE);
 80077d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80077d8:	9300      	str	r3, [sp, #0]
 80077da:	f240 1337 	movw	r3, #311	; 0x137
 80077de:	22e6      	movs	r2, #230	; 0xe6
 80077e0:	f240 1127 	movw	r1, #295	; 0x127
 80077e4:	201e      	movs	r0, #30
 80077e6:	f7fe ff0f 	bl	8006608 <LCD_Fill>
		LCD_ShowString(30, 295, 200, 16, 16, "Already ON");
 80077ea:	4b72      	ldr	r3, [pc, #456]	; (80079b4 <onAndOff+0x27c>)
 80077ec:	9301      	str	r3, [sp, #4]
 80077ee:	2310      	movs	r3, #16
 80077f0:	9300      	str	r3, [sp, #0]
 80077f2:	2310      	movs	r3, #16
 80077f4:	22c8      	movs	r2, #200	; 0xc8
 80077f6:	f240 1127 	movw	r1, #295	; 0x127
 80077fa:	201e      	movs	r0, #30
 80077fc:	f7ff f8ec 	bl	80069d8 <LCD_ShowString>
		return 2;// already on
 8007800:	2302      	movs	r3, #2
 8007802:	e0c2      	b.n	800798a <onAndOff+0x252>
	}else if (key == KEY1_PRES && isOn) {
 8007804:	4b63      	ldr	r3, [pc, #396]	; (8007994 <onAndOff+0x25c>)
 8007806:	781b      	ldrb	r3, [r3, #0]
 8007808:	2b02      	cmp	r3, #2
 800780a:	d164      	bne.n	80078d6 <onAndOff+0x19e>
 800780c:	4b62      	ldr	r3, [pc, #392]	; (8007998 <onAndOff+0x260>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d060      	beq.n	80078d6 <onAndOff+0x19e>
		isOn = 0;
 8007814:	4b60      	ldr	r3, [pc, #384]	; (8007998 <onAndOff+0x260>)
 8007816:	2200      	movs	r2, #0
 8007818:	601a      	str	r2, [r3, #0]
		LED0 = !LED0;
 800781a:	4b60      	ldr	r3, [pc, #384]	; (800799c <onAndOff+0x264>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	2b00      	cmp	r3, #0
 8007820:	bf0c      	ite	eq
 8007822:	2301      	moveq	r3, #1
 8007824:	2300      	movne	r3, #0
 8007826:	b2da      	uxtb	r2, r3
 8007828:	4b5c      	ldr	r3, [pc, #368]	; (800799c <onAndOff+0x264>)
 800782a:	601a      	str	r2, [r3, #0]
		POINT_COLOR = BLACK;
 800782c:	4b5c      	ldr	r3, [pc, #368]	; (80079a0 <onAndOff+0x268>)
 800782e:	2200      	movs	r2, #0
 8007830:	801a      	strh	r2, [r3, #0]
		LCD_Fill(display_frame_left+1, display_frame_upper+1, display_frame_right-1, display_frame_lower-1, WHITE);//NOTE clean
 8007832:	4b5c      	ldr	r3, [pc, #368]	; (80079a4 <onAndOff+0x26c>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	b29b      	uxth	r3, r3
 8007838:	3301      	adds	r3, #1
 800783a:	b298      	uxth	r0, r3
 800783c:	4b5a      	ldr	r3, [pc, #360]	; (80079a8 <onAndOff+0x270>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	b29b      	uxth	r3, r3
 8007842:	3301      	adds	r3, #1
 8007844:	b299      	uxth	r1, r3
 8007846:	4b59      	ldr	r3, [pc, #356]	; (80079ac <onAndOff+0x274>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	b29b      	uxth	r3, r3
 800784c:	3b01      	subs	r3, #1
 800784e:	b29a      	uxth	r2, r3
 8007850:	4b57      	ldr	r3, [pc, #348]	; (80079b0 <onAndOff+0x278>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	b29b      	uxth	r3, r3
 8007856:	3b01      	subs	r3, #1
 8007858:	b29c      	uxth	r4, r3
 800785a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800785e:	9300      	str	r3, [sp, #0]
 8007860:	4623      	mov	r3, r4
 8007862:	f7fe fed1 	bl	8006608 <LCD_Fill>


		diaplay_power_icon(0);
 8007866:	2000      	movs	r0, #0
 8007868:	f7ff f94c 	bl	8006b04 <diaplay_power_icon>
		NRF24L01_TX_Mode();
 800786c:	f7f9 faae 	bl	8000dcc <NRF24L01_TX_Mode>
		LCD_Fill(display_frame_left+1, display_frame_upper+1, display_frame_right-1, display_frame_lower-1, WHITE);//NOTE clean
 8007870:	4b4c      	ldr	r3, [pc, #304]	; (80079a4 <onAndOff+0x26c>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	b29b      	uxth	r3, r3
 8007876:	3301      	adds	r3, #1
 8007878:	b298      	uxth	r0, r3
 800787a:	4b4b      	ldr	r3, [pc, #300]	; (80079a8 <onAndOff+0x270>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	b29b      	uxth	r3, r3
 8007880:	3301      	adds	r3, #1
 8007882:	b299      	uxth	r1, r3
 8007884:	4b49      	ldr	r3, [pc, #292]	; (80079ac <onAndOff+0x274>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	b29b      	uxth	r3, r3
 800788a:	3b01      	subs	r3, #1
 800788c:	b29a      	uxth	r2, r3
 800788e:	4b48      	ldr	r3, [pc, #288]	; (80079b0 <onAndOff+0x278>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	b29b      	uxth	r3, r3
 8007894:	3b01      	subs	r3, #1
 8007896:	b29c      	uxth	r4, r3
 8007898:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800789c:	9300      	str	r3, [sp, #0]
 800789e:	4623      	mov	r3, r4
 80078a0:	f7fe feb2 	bl	8006608 <LCD_Fill>
		fir = 0;
 80078a4:	4b44      	ldr	r3, [pc, #272]	; (80079b8 <onAndOff+0x280>)
 80078a6:	2200      	movs	r2, #0
 80078a8:	601a      	str	r2, [r3, #0]
		for(int i =0;i<8;i++){
 80078aa:	2300      	movs	r3, #0
 80078ac:	607b      	str	r3, [r7, #4]
 80078ae:	e00d      	b.n	80078cc <onAndOff+0x194>
			len[i]=0;
 80078b0:	4a42      	ldr	r2, [pc, #264]	; (80079bc <onAndOff+0x284>)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2100      	movs	r1, #0
 80078b6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			data[i][0]=0;
 80078ba:	4a41      	ldr	r2, [pc, #260]	; (80079c0 <onAndOff+0x288>)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	029b      	lsls	r3, r3, #10
 80078c0:	4413      	add	r3, r2
 80078c2:	2200      	movs	r2, #0
 80078c4:	701a      	strb	r2, [r3, #0]
		for(int i =0;i<8;i++){
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	3301      	adds	r3, #1
 80078ca:	607b      	str	r3, [r7, #4]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2b07      	cmp	r3, #7
 80078d0:	ddee      	ble.n	80078b0 <onAndOff+0x178>
		}
//		LCD_Fill(30, 170, 239, 170 + 16, WHITE);
		return 3;// off
 80078d2:	2303      	movs	r3, #3
 80078d4:	e059      	b.n	800798a <onAndOff+0x252>
	}else if(key == KEY1_PRES && !isOn){
 80078d6:	4b2f      	ldr	r3, [pc, #188]	; (8007994 <onAndOff+0x25c>)
 80078d8:	781b      	ldrb	r3, [r3, #0]
 80078da:	2b02      	cmp	r3, #2
 80078dc:	d11f      	bne.n	800791e <onAndOff+0x1e6>
 80078de:	4b2e      	ldr	r3, [pc, #184]	; (8007998 <onAndOff+0x260>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d11b      	bne.n	800791e <onAndOff+0x1e6>
		POINT_COLOR = RED;
 80078e6:	4b2e      	ldr	r3, [pc, #184]	; (80079a0 <onAndOff+0x268>)
 80078e8:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80078ec:	801a      	strh	r2, [r3, #0]
		LCD_Fill(30, 295, 230, 295 + 16, WHITE);
 80078ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80078f2:	9300      	str	r3, [sp, #0]
 80078f4:	f240 1337 	movw	r3, #311	; 0x137
 80078f8:	22e6      	movs	r2, #230	; 0xe6
 80078fa:	f240 1127 	movw	r1, #295	; 0x127
 80078fe:	201e      	movs	r0, #30
 8007900:	f7fe fe82 	bl	8006608 <LCD_Fill>
		LCD_ShowString(30, 295, 200, 16, 16, "Already OFF");
 8007904:	4b2f      	ldr	r3, [pc, #188]	; (80079c4 <onAndOff+0x28c>)
 8007906:	9301      	str	r3, [sp, #4]
 8007908:	2310      	movs	r3, #16
 800790a:	9300      	str	r3, [sp, #0]
 800790c:	2310      	movs	r3, #16
 800790e:	22c8      	movs	r2, #200	; 0xc8
 8007910:	f240 1127 	movw	r1, #295	; 0x127
 8007914:	201e      	movs	r0, #30
 8007916:	f7ff f85f 	bl	80069d8 <LCD_ShowString>
		return 4;//already off
 800791a:	2304      	movs	r3, #4
 800791c:	e035      	b.n	800798a <onAndOff+0x252>
	}else if(key == WKUP_PRES){
 800791e:	4b1d      	ldr	r3, [pc, #116]	; (8007994 <onAndOff+0x25c>)
 8007920:	781b      	ldrb	r3, [r3, #0]
 8007922:	2b03      	cmp	r3, #3
 8007924:	d130      	bne.n	8007988 <onAndOff+0x250>
		LCD_Fill(display_frame_left+1, display_frame_upper+1, display_frame_right-1, display_frame_lower-1, WHITE);//NOTE clean
 8007926:	4b1f      	ldr	r3, [pc, #124]	; (80079a4 <onAndOff+0x26c>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	b29b      	uxth	r3, r3
 800792c:	3301      	adds	r3, #1
 800792e:	b298      	uxth	r0, r3
 8007930:	4b1d      	ldr	r3, [pc, #116]	; (80079a8 <onAndOff+0x270>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	b29b      	uxth	r3, r3
 8007936:	3301      	adds	r3, #1
 8007938:	b299      	uxth	r1, r3
 800793a:	4b1c      	ldr	r3, [pc, #112]	; (80079ac <onAndOff+0x274>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	b29b      	uxth	r3, r3
 8007940:	3b01      	subs	r3, #1
 8007942:	b29a      	uxth	r2, r3
 8007944:	4b1a      	ldr	r3, [pc, #104]	; (80079b0 <onAndOff+0x278>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	b29b      	uxth	r3, r3
 800794a:	3b01      	subs	r3, #1
 800794c:	b29c      	uxth	r4, r3
 800794e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007952:	9300      	str	r3, [sp, #0]
 8007954:	4623      	mov	r3, r4
 8007956:	f7fe fe57 	bl	8006608 <LCD_Fill>
		fir = 0;
 800795a:	4b17      	ldr	r3, [pc, #92]	; (80079b8 <onAndOff+0x280>)
 800795c:	2200      	movs	r2, #0
 800795e:	601a      	str	r2, [r3, #0]
		for(int i =0;i<8;i++){
 8007960:	2300      	movs	r3, #0
 8007962:	603b      	str	r3, [r7, #0]
 8007964:	e00d      	b.n	8007982 <onAndOff+0x24a>
			len[i]=0;
 8007966:	4a15      	ldr	r2, [pc, #84]	; (80079bc <onAndOff+0x284>)
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	2100      	movs	r1, #0
 800796c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			data[i][0]=0;
 8007970:	4a13      	ldr	r2, [pc, #76]	; (80079c0 <onAndOff+0x288>)
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	029b      	lsls	r3, r3, #10
 8007976:	4413      	add	r3, r2
 8007978:	2200      	movs	r2, #0
 800797a:	701a      	strb	r2, [r3, #0]
		for(int i =0;i<8;i++){
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	3301      	adds	r3, #1
 8007980:	603b      	str	r3, [r7, #0]
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	2b07      	cmp	r3, #7
 8007986:	ddee      	ble.n	8007966 <onAndOff+0x22e>
		}
	}
	return 0;
 8007988:	2300      	movs	r3, #0
}
 800798a:	4618      	mov	r0, r3
 800798c:	370c      	adds	r7, #12
 800798e:	46bd      	mov	sp, r7
 8007990:	bd90      	pop	{r4, r7, pc}
 8007992:	bf00      	nop
 8007994:	20002960 	.word	0x20002960
 8007998:	200000c0 	.word	0x200000c0
 800799c:	422101a0 	.word	0x422101a0
 80079a0:	200000b8 	.word	0x200000b8
 80079a4:	20000020 	.word	0x20000020
 80079a8:	20000018 	.word	0x20000018
 80079ac:	20000024 	.word	0x20000024
 80079b0:	2000001c 	.word	0x2000001c
 80079b4:	0800ab64 	.word	0x0800ab64
 80079b8:	200020e4 	.word	0x200020e4
 80079bc:	200020c4 	.word	0x200020c4
 80079c0:	200000c4 	.word	0x200000c4
 80079c4:	0800ab70 	.word	0x0800ab70

080079c8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80079c8:	b480      	push	{r7}
 80079ca:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80079cc:	bf00      	nop
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bc80      	pop	{r7}
 80079d2:	4770      	bx	lr

080079d4 <SPI1_Init>:

//以下是SPI模块的初始化代码，配置成主机模式 						  
//SPI口初始化
//这里针是对SPI1的初始化
void SPI1_Init(void)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	af00      	add	r7, sp, #0
    SPI1_Handler.Instance=SPI1;                         //SPI1
 80079d8:	4b1a      	ldr	r3, [pc, #104]	; (8007a44 <SPI1_Init+0x70>)
 80079da:	4a1b      	ldr	r2, [pc, #108]	; (8007a48 <SPI1_Init+0x74>)
 80079dc:	601a      	str	r2, [r3, #0]
    SPI1_Handler.Init.Mode=SPI_MODE_MASTER;             //设置SPI工作模式，设置为主模式
 80079de:	4b19      	ldr	r3, [pc, #100]	; (8007a44 <SPI1_Init+0x70>)
 80079e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80079e4:	605a      	str	r2, [r3, #4]
    SPI1_Handler.Init.Direction=SPI_DIRECTION_2LINES;   //设置SPI单向或者双向的数据模式:SPI设置为双线模式
 80079e6:	4b17      	ldr	r3, [pc, #92]	; (8007a44 <SPI1_Init+0x70>)
 80079e8:	2200      	movs	r2, #0
 80079ea:	609a      	str	r2, [r3, #8]
    SPI1_Handler.Init.DataSize=SPI_DATASIZE_8BIT;       //设置SPI的数据大小:SPI发送接收8位帧结构
 80079ec:	4b15      	ldr	r3, [pc, #84]	; (8007a44 <SPI1_Init+0x70>)
 80079ee:	2200      	movs	r2, #0
 80079f0:	60da      	str	r2, [r3, #12]
    SPI1_Handler.Init.CLKPolarity=SPI_POLARITY_HIGH;    //串行同步时钟的空闲状态为高电平
 80079f2:	4b14      	ldr	r3, [pc, #80]	; (8007a44 <SPI1_Init+0x70>)
 80079f4:	2202      	movs	r2, #2
 80079f6:	611a      	str	r2, [r3, #16]
    SPI1_Handler.Init.CLKPhase=SPI_PHASE_2EDGE;         //串行同步时钟的第二个跳变沿（上升或下降）数据被采样
 80079f8:	4b12      	ldr	r3, [pc, #72]	; (8007a44 <SPI1_Init+0x70>)
 80079fa:	2201      	movs	r2, #1
 80079fc:	615a      	str	r2, [r3, #20]
    SPI1_Handler.Init.NSS=SPI_NSS_SOFT;                 //NSS信号由硬件（NSS管脚）还是软件（使用SSI位）管理:内部NSS信号有SSI位控制
 80079fe:	4b11      	ldr	r3, [pc, #68]	; (8007a44 <SPI1_Init+0x70>)
 8007a00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a04:	619a      	str	r2, [r3, #24]
    SPI1_Handler.Init.BaudRatePrescaler=SPI_BAUDRATEPRESCALER_256;//定义波特率预分频的值:波特率预分频值为256
 8007a06:	4b0f      	ldr	r3, [pc, #60]	; (8007a44 <SPI1_Init+0x70>)
 8007a08:	2238      	movs	r2, #56	; 0x38
 8007a0a:	61da      	str	r2, [r3, #28]
    SPI1_Handler.Init.FirstBit=SPI_FIRSTBIT_MSB;        //指定数据传输从MSB位还是LSB位开始:数据传输从MSB位开始
 8007a0c:	4b0d      	ldr	r3, [pc, #52]	; (8007a44 <SPI1_Init+0x70>)
 8007a0e:	2200      	movs	r2, #0
 8007a10:	621a      	str	r2, [r3, #32]
    SPI1_Handler.Init.TIMode=SPI_TIMODE_DISABLE;        //关闭TI模式
 8007a12:	4b0c      	ldr	r3, [pc, #48]	; (8007a44 <SPI1_Init+0x70>)
 8007a14:	2200      	movs	r2, #0
 8007a16:	625a      	str	r2, [r3, #36]	; 0x24
    SPI1_Handler.Init.CRCCalculation=SPI_CRCCALCULATION_DISABLE;//关闭硬件CRC校验
 8007a18:	4b0a      	ldr	r3, [pc, #40]	; (8007a44 <SPI1_Init+0x70>)
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	629a      	str	r2, [r3, #40]	; 0x28
    SPI1_Handler.Init.CRCPolynomial=7;                  //CRC值计算的多项式
 8007a1e:	4b09      	ldr	r3, [pc, #36]	; (8007a44 <SPI1_Init+0x70>)
 8007a20:	2207      	movs	r2, #7
 8007a22:	62da      	str	r2, [r3, #44]	; 0x2c
    HAL_SPI_Init(&SPI1_Handler);//初始化
 8007a24:	4807      	ldr	r0, [pc, #28]	; (8007a44 <SPI1_Init+0x70>)
 8007a26:	f001 fa53 	bl	8008ed0 <HAL_SPI_Init>
    
    __HAL_SPI_ENABLE(&SPI1_Handler);                    //使能SPI1
 8007a2a:	4b06      	ldr	r3, [pc, #24]	; (8007a44 <SPI1_Init+0x70>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	681a      	ldr	r2, [r3, #0]
 8007a30:	4b04      	ldr	r3, [pc, #16]	; (8007a44 <SPI1_Init+0x70>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a38:	601a      	str	r2, [r3, #0]
	
    SPI1_ReadWriteByte(0Xff);                           //启动传输
 8007a3a:	20ff      	movs	r0, #255	; 0xff
 8007a3c:	f000 f866 	bl	8007b0c <SPI1_ReadWriteByte>
}
 8007a40:	bf00      	nop
 8007a42:	bd80      	pop	{r7, pc}
 8007a44:	20002dbc 	.word	0x20002dbc
 8007a48:	40013000 	.word	0x40013000

08007a4c <HAL_SPI_MspInit>:

//SPI5底层驱动，时钟使能，引脚配置
//此函数会被HAL_SPI_Init()调用
//hspi:SPI句柄
void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b088      	sub	sp, #32
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_Initure;
    
    __HAL_RCC_GPIOA_CLK_ENABLE();       //使能GPIOA时钟
 8007a54:	4b14      	ldr	r3, [pc, #80]	; (8007aa8 <HAL_SPI_MspInit+0x5c>)
 8007a56:	699b      	ldr	r3, [r3, #24]
 8007a58:	4a13      	ldr	r2, [pc, #76]	; (8007aa8 <HAL_SPI_MspInit+0x5c>)
 8007a5a:	f043 0304 	orr.w	r3, r3, #4
 8007a5e:	6193      	str	r3, [r2, #24]
 8007a60:	4b11      	ldr	r3, [pc, #68]	; (8007aa8 <HAL_SPI_MspInit+0x5c>)
 8007a62:	699b      	ldr	r3, [r3, #24]
 8007a64:	f003 0304 	and.w	r3, r3, #4
 8007a68:	60fb      	str	r3, [r7, #12]
 8007a6a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_SPI1_CLK_ENABLE();        //使能SPI1时钟
 8007a6c:	4b0e      	ldr	r3, [pc, #56]	; (8007aa8 <HAL_SPI_MspInit+0x5c>)
 8007a6e:	699b      	ldr	r3, [r3, #24]
 8007a70:	4a0d      	ldr	r2, [pc, #52]	; (8007aa8 <HAL_SPI_MspInit+0x5c>)
 8007a72:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007a76:	6193      	str	r3, [r2, #24]
 8007a78:	4b0b      	ldr	r3, [pc, #44]	; (8007aa8 <HAL_SPI_MspInit+0x5c>)
 8007a7a:	699b      	ldr	r3, [r3, #24]
 8007a7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007a80:	60bb      	str	r3, [r7, #8]
 8007a82:	68bb      	ldr	r3, [r7, #8]
    
    //PA5,6,7
    GPIO_Initure.Pin=GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8007a84:	23e0      	movs	r3, #224	; 0xe0
 8007a86:	613b      	str	r3, [r7, #16]
    GPIO_Initure.Mode=GPIO_MODE_AF_PP;              //复用推挽输出
 8007a88:	2302      	movs	r3, #2
 8007a8a:	617b      	str	r3, [r7, #20]
    GPIO_Initure.Pull=GPIO_PULLUP;                  //上拉
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	61bb      	str	r3, [r7, #24]
    GPIO_Initure.Speed=GPIO_SPEED_FREQ_HIGH;        //快速            
 8007a90:	2303      	movs	r3, #3
 8007a92:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA,&GPIO_Initure);
 8007a94:	f107 0310 	add.w	r3, r7, #16
 8007a98:	4619      	mov	r1, r3
 8007a9a:	4804      	ldr	r0, [pc, #16]	; (8007aac <HAL_SPI_MspInit+0x60>)
 8007a9c:	f000 fc62 	bl	8008364 <HAL_GPIO_Init>
}
 8007aa0:	bf00      	nop
 8007aa2:	3720      	adds	r7, #32
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}
 8007aa8:	40021000 	.word	0x40021000
 8007aac:	40010800 	.word	0x40010800

08007ab0 <SPI1_SetSpeed>:
//SPI速度设置函数
//SPI速度=fAPB1/分频系数
//@ref SPI_BaudRate_Prescaler:SPI_BAUDRATEPRESCALER_2~SPI_BAUDRATEPRESCALER_2 256
//fAPB1时钟一般为42Mhz：
void SPI1_SetSpeed(u8 SPI_BaudRatePrescaler)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b083      	sub	sp, #12
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	71fb      	strb	r3, [r7, #7]
    assert_param(IS_SPI_BAUDRATE_PRESCALER(SPI_BaudRatePrescaler));//判断有效性
    __HAL_SPI_DISABLE(&SPI1_Handler);            //关闭SPI
 8007aba:	4b13      	ldr	r3, [pc, #76]	; (8007b08 <SPI1_SetSpeed+0x58>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	681a      	ldr	r2, [r3, #0]
 8007ac0:	4b11      	ldr	r3, [pc, #68]	; (8007b08 <SPI1_SetSpeed+0x58>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ac8:	601a      	str	r2, [r3, #0]
    SPI1_Handler.Instance->CR1&=0XFFC7;          //位3-5清零，用来设置波特率
 8007aca:	4b0f      	ldr	r3, [pc, #60]	; (8007b08 <SPI1_SetSpeed+0x58>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	6819      	ldr	r1, [r3, #0]
 8007ad0:	4b0d      	ldr	r3, [pc, #52]	; (8007b08 <SPI1_SetSpeed+0x58>)
 8007ad2:	681a      	ldr	r2, [r3, #0]
 8007ad4:	f64f 73c7 	movw	r3, #65479	; 0xffc7
 8007ad8:	400b      	ands	r3, r1
 8007ada:	6013      	str	r3, [r2, #0]
    SPI1_Handler.Instance->CR1|=SPI_BaudRatePrescaler;//设置SPI速度
 8007adc:	4b0a      	ldr	r3, [pc, #40]	; (8007b08 <SPI1_SetSpeed+0x58>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	6819      	ldr	r1, [r3, #0]
 8007ae2:	79fa      	ldrb	r2, [r7, #7]
 8007ae4:	4b08      	ldr	r3, [pc, #32]	; (8007b08 <SPI1_SetSpeed+0x58>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	430a      	orrs	r2, r1
 8007aea:	601a      	str	r2, [r3, #0]
    __HAL_SPI_ENABLE(&SPI1_Handler);             //使能SPI
 8007aec:	4b06      	ldr	r3, [pc, #24]	; (8007b08 <SPI1_SetSpeed+0x58>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	681a      	ldr	r2, [r3, #0]
 8007af2:	4b05      	ldr	r3, [pc, #20]	; (8007b08 <SPI1_SetSpeed+0x58>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007afa:	601a      	str	r2, [r3, #0]
    
}
 8007afc:	bf00      	nop
 8007afe:	370c      	adds	r7, #12
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bc80      	pop	{r7}
 8007b04:	4770      	bx	lr
 8007b06:	bf00      	nop
 8007b08:	20002dbc 	.word	0x20002dbc

08007b0c <SPI1_ReadWriteByte>:

//SPI1 读写一个字节
//TxData:要写入的字节
//返回值:读取到的字节
u8 SPI1_ReadWriteByte(u8 TxData)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b086      	sub	sp, #24
 8007b10:	af02      	add	r7, sp, #8
 8007b12:	4603      	mov	r3, r0
 8007b14:	71fb      	strb	r3, [r7, #7]
    u8 Rxdata;
    HAL_SPI_TransmitReceive(&SPI1_Handler,&TxData,&Rxdata,1, 1000);       
 8007b16:	f107 020f 	add.w	r2, r7, #15
 8007b1a:	1df9      	adds	r1, r7, #7
 8007b1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007b20:	9300      	str	r3, [sp, #0]
 8007b22:	2301      	movs	r3, #1
 8007b24:	4803      	ldr	r0, [pc, #12]	; (8007b34 <SPI1_ReadWriteByte+0x28>)
 8007b26:	f001 fa57 	bl	8008fd8 <HAL_SPI_TransmitReceive>
 	return Rxdata;          		    //返回收到的数据		
 8007b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3710      	adds	r7, #16
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}
 8007b34:	20002dbc 	.word	0x20002dbc

08007b38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b085      	sub	sp, #20
 8007b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8007b3e:	4b15      	ldr	r3, [pc, #84]	; (8007b94 <HAL_MspInit+0x5c>)
 8007b40:	699b      	ldr	r3, [r3, #24]
 8007b42:	4a14      	ldr	r2, [pc, #80]	; (8007b94 <HAL_MspInit+0x5c>)
 8007b44:	f043 0301 	orr.w	r3, r3, #1
 8007b48:	6193      	str	r3, [r2, #24]
 8007b4a:	4b12      	ldr	r3, [pc, #72]	; (8007b94 <HAL_MspInit+0x5c>)
 8007b4c:	699b      	ldr	r3, [r3, #24]
 8007b4e:	f003 0301 	and.w	r3, r3, #1
 8007b52:	60bb      	str	r3, [r7, #8]
 8007b54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007b56:	4b0f      	ldr	r3, [pc, #60]	; (8007b94 <HAL_MspInit+0x5c>)
 8007b58:	69db      	ldr	r3, [r3, #28]
 8007b5a:	4a0e      	ldr	r2, [pc, #56]	; (8007b94 <HAL_MspInit+0x5c>)
 8007b5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b60:	61d3      	str	r3, [r2, #28]
 8007b62:	4b0c      	ldr	r3, [pc, #48]	; (8007b94 <HAL_MspInit+0x5c>)
 8007b64:	69db      	ldr	r3, [r3, #28]
 8007b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b6a:	607b      	str	r3, [r7, #4]
 8007b6c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8007b6e:	4b0a      	ldr	r3, [pc, #40]	; (8007b98 <HAL_MspInit+0x60>)
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	60fb      	str	r3, [r7, #12]
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8007b7a:	60fb      	str	r3, [r7, #12]
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007b82:	60fb      	str	r3, [r7, #12]
 8007b84:	4a04      	ldr	r2, [pc, #16]	; (8007b98 <HAL_MspInit+0x60>)
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007b8a:	bf00      	nop
 8007b8c:	3714      	adds	r7, #20
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bc80      	pop	{r7}
 8007b92:	4770      	bx	lr
 8007b94:	40021000 	.word	0x40021000
 8007b98:	40010000 	.word	0x40010000

08007b9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b088      	sub	sp, #32
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ba4:	f107 0310 	add.w	r3, r7, #16
 8007ba8:	2200      	movs	r2, #0
 8007baa:	601a      	str	r2, [r3, #0]
 8007bac:	605a      	str	r2, [r3, #4]
 8007bae:	609a      	str	r2, [r3, #8]
 8007bb0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4a20      	ldr	r2, [pc, #128]	; (8007c38 <HAL_UART_MspInit+0x9c>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d139      	bne.n	8007c30 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007bbc:	4b1f      	ldr	r3, [pc, #124]	; (8007c3c <HAL_UART_MspInit+0xa0>)
 8007bbe:	699b      	ldr	r3, [r3, #24]
 8007bc0:	4a1e      	ldr	r2, [pc, #120]	; (8007c3c <HAL_UART_MspInit+0xa0>)
 8007bc2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007bc6:	6193      	str	r3, [r2, #24]
 8007bc8:	4b1c      	ldr	r3, [pc, #112]	; (8007c3c <HAL_UART_MspInit+0xa0>)
 8007bca:	699b      	ldr	r3, [r3, #24]
 8007bcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007bd0:	60fb      	str	r3, [r7, #12]
 8007bd2:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007bd4:	4b19      	ldr	r3, [pc, #100]	; (8007c3c <HAL_UART_MspInit+0xa0>)
 8007bd6:	699b      	ldr	r3, [r3, #24]
 8007bd8:	4a18      	ldr	r2, [pc, #96]	; (8007c3c <HAL_UART_MspInit+0xa0>)
 8007bda:	f043 0304 	orr.w	r3, r3, #4
 8007bde:	6193      	str	r3, [r2, #24]
 8007be0:	4b16      	ldr	r3, [pc, #88]	; (8007c3c <HAL_UART_MspInit+0xa0>)
 8007be2:	699b      	ldr	r3, [r3, #24]
 8007be4:	f003 0304 	and.w	r3, r3, #4
 8007be8:	60bb      	str	r3, [r7, #8]
 8007bea:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007bec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007bf0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007bf2:	2302      	movs	r3, #2
 8007bf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007bf6:	2303      	movs	r3, #3
 8007bf8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007bfa:	f107 0310 	add.w	r3, r7, #16
 8007bfe:	4619      	mov	r1, r3
 8007c00:	480f      	ldr	r0, [pc, #60]	; (8007c40 <HAL_UART_MspInit+0xa4>)
 8007c02:	f000 fbaf 	bl	8008364 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8007c06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c10:	2300      	movs	r3, #0
 8007c12:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007c14:	f107 0310 	add.w	r3, r7, #16
 8007c18:	4619      	mov	r1, r3
 8007c1a:	4809      	ldr	r0, [pc, #36]	; (8007c40 <HAL_UART_MspInit+0xa4>)
 8007c1c:	f000 fba2 	bl	8008364 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8007c20:	2200      	movs	r2, #0
 8007c22:	2100      	movs	r1, #0
 8007c24:	2025      	movs	r0, #37	; 0x25
 8007c26:	f000 fa42 	bl	80080ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8007c2a:	2025      	movs	r0, #37	; 0x25
 8007c2c:	f000 fa5b 	bl	80080e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8007c30:	bf00      	nop
 8007c32:	3720      	adds	r7, #32
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}
 8007c38:	40013800 	.word	0x40013800
 8007c3c:	40021000 	.word	0x40021000
 8007c40:	40010800 	.word	0x40010800

08007c44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007c44:	b480      	push	{r7}
 8007c46:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007c48:	bf00      	nop
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bc80      	pop	{r7}
 8007c4e:	4770      	bx	lr

08007c50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007c50:	b480      	push	{r7}
 8007c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007c54:	e7fe      	b.n	8007c54 <HardFault_Handler+0x4>

08007c56 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007c56:	b480      	push	{r7}
 8007c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007c5a:	e7fe      	b.n	8007c5a <MemManage_Handler+0x4>

08007c5c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007c60:	e7fe      	b.n	8007c60 <BusFault_Handler+0x4>

08007c62 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007c62:	b480      	push	{r7}
 8007c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007c66:	e7fe      	b.n	8007c66 <UsageFault_Handler+0x4>

08007c68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007c6c:	bf00      	nop
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bc80      	pop	{r7}
 8007c72:	4770      	bx	lr

08007c74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007c74:	b480      	push	{r7}
 8007c76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007c78:	bf00      	nop
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bc80      	pop	{r7}
 8007c7e:	4770      	bx	lr

08007c80 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007c80:	b480      	push	{r7}
 8007c82:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007c84:	bf00      	nop
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bc80      	pop	{r7}
 8007c8a:	4770      	bx	lr

08007c8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007c90:	f000 f91a 	bl	8007ec8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007c94:	bf00      	nop
 8007c96:	bd80      	pop	{r7, pc}

08007c98 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8007c9c:	4804      	ldr	r0, [pc, #16]	; (8007cb0 <USART1_IRQHandler+0x18>)
 8007c9e:	f001 fd17 	bl	80096d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  HAL_UART_Receive_IT(&huart1, (uint8_t *)rxBuffer, 1);
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	4903      	ldr	r1, [pc, #12]	; (8007cb4 <USART1_IRQHandler+0x1c>)
 8007ca6:	4802      	ldr	r0, [pc, #8]	; (8007cb0 <USART1_IRQHandler+0x18>)
 8007ca8:	f001 fcbd 	bl	8009626 <HAL_UART_Receive_IT>

  /* USER CODE END USART1_IRQn 1 */
}
 8007cac:	bf00      	nop
 8007cae:	bd80      	pop	{r7, pc}
 8007cb0:	2000250c 	.word	0x2000250c
 8007cb4:	2000294c 	.word	0x2000294c

08007cb8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b086      	sub	sp, #24
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	60f8      	str	r0, [r7, #12]
 8007cc0:	60b9      	str	r1, [r7, #8]
 8007cc2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	617b      	str	r3, [r7, #20]
 8007cc8:	e00a      	b.n	8007ce0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8007cca:	f3af 8000 	nop.w
 8007cce:	4601      	mov	r1, r0
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	1c5a      	adds	r2, r3, #1
 8007cd4:	60ba      	str	r2, [r7, #8]
 8007cd6:	b2ca      	uxtb	r2, r1
 8007cd8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	3301      	adds	r3, #1
 8007cde:	617b      	str	r3, [r7, #20]
 8007ce0:	697a      	ldr	r2, [r7, #20]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	dbf0      	blt.n	8007cca <_read+0x12>
	}

return len;
 8007ce8:	687b      	ldr	r3, [r7, #4]
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3718      	adds	r7, #24
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}

08007cf2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007cf2:	b580      	push	{r7, lr}
 8007cf4:	b086      	sub	sp, #24
 8007cf6:	af00      	add	r7, sp, #0
 8007cf8:	60f8      	str	r0, [r7, #12]
 8007cfa:	60b9      	str	r1, [r7, #8]
 8007cfc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007cfe:	2300      	movs	r3, #0
 8007d00:	617b      	str	r3, [r7, #20]
 8007d02:	e009      	b.n	8007d18 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	1c5a      	adds	r2, r3, #1
 8007d08:	60ba      	str	r2, [r7, #8]
 8007d0a:	781b      	ldrb	r3, [r3, #0]
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007d12:	697b      	ldr	r3, [r7, #20]
 8007d14:	3301      	adds	r3, #1
 8007d16:	617b      	str	r3, [r7, #20]
 8007d18:	697a      	ldr	r2, [r7, #20]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	dbf1      	blt.n	8007d04 <_write+0x12>
	}
	return len;
 8007d20:	687b      	ldr	r3, [r7, #4]
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3718      	adds	r7, #24
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}

08007d2a <_close>:

int _close(int file)
{
 8007d2a:	b480      	push	{r7}
 8007d2c:	b083      	sub	sp, #12
 8007d2e:	af00      	add	r7, sp, #0
 8007d30:	6078      	str	r0, [r7, #4]
	return -1;
 8007d32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	370c      	adds	r7, #12
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bc80      	pop	{r7}
 8007d3e:	4770      	bx	lr

08007d40 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b083      	sub	sp, #12
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
 8007d48:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007d50:	605a      	str	r2, [r3, #4]
	return 0;
 8007d52:	2300      	movs	r3, #0
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	370c      	adds	r7, #12
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bc80      	pop	{r7}
 8007d5c:	4770      	bx	lr

08007d5e <_isatty>:

int _isatty(int file)
{
 8007d5e:	b480      	push	{r7}
 8007d60:	b083      	sub	sp, #12
 8007d62:	af00      	add	r7, sp, #0
 8007d64:	6078      	str	r0, [r7, #4]
	return 1;
 8007d66:	2301      	movs	r3, #1
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	370c      	adds	r7, #12
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bc80      	pop	{r7}
 8007d70:	4770      	bx	lr

08007d72 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007d72:	b480      	push	{r7}
 8007d74:	b085      	sub	sp, #20
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	60f8      	str	r0, [r7, #12]
 8007d7a:	60b9      	str	r1, [r7, #8]
 8007d7c:	607a      	str	r2, [r7, #4]
	return 0;
 8007d7e:	2300      	movs	r3, #0
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	3714      	adds	r7, #20
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bc80      	pop	{r7}
 8007d88:	4770      	bx	lr
	...

08007d8c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b084      	sub	sp, #16
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007d94:	4b11      	ldr	r3, [pc, #68]	; (8007ddc <_sbrk+0x50>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d102      	bne.n	8007da2 <_sbrk+0x16>
		heap_end = &end;
 8007d9c:	4b0f      	ldr	r3, [pc, #60]	; (8007ddc <_sbrk+0x50>)
 8007d9e:	4a10      	ldr	r2, [pc, #64]	; (8007de0 <_sbrk+0x54>)
 8007da0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8007da2:	4b0e      	ldr	r3, [pc, #56]	; (8007ddc <_sbrk+0x50>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8007da8:	4b0c      	ldr	r3, [pc, #48]	; (8007ddc <_sbrk+0x50>)
 8007daa:	681a      	ldr	r2, [r3, #0]
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	4413      	add	r3, r2
 8007db0:	466a      	mov	r2, sp
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d907      	bls.n	8007dc6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8007db6:	f001 ff8d 	bl	8009cd4 <__errno>
 8007dba:	4602      	mov	r2, r0
 8007dbc:	230c      	movs	r3, #12
 8007dbe:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8007dc0:	f04f 33ff 	mov.w	r3, #4294967295
 8007dc4:	e006      	b.n	8007dd4 <_sbrk+0x48>
	}

	heap_end += incr;
 8007dc6:	4b05      	ldr	r3, [pc, #20]	; (8007ddc <_sbrk+0x50>)
 8007dc8:	681a      	ldr	r2, [r3, #0]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	4413      	add	r3, r2
 8007dce:	4a03      	ldr	r2, [pc, #12]	; (8007ddc <_sbrk+0x50>)
 8007dd0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3710      	adds	r7, #16
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}
 8007ddc:	200024ec 	.word	0x200024ec
 8007de0:	20002e20 	.word	0x20002e20

08007de4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8007de4:	b480      	push	{r7}
 8007de6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007de8:	bf00      	nop
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bc80      	pop	{r7}
 8007dee:	4770      	bx	lr

08007df0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8007df0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8007df2:	e003      	b.n	8007dfc <LoopCopyDataInit>

08007df4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8007df4:	4b0b      	ldr	r3, [pc, #44]	; (8007e24 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8007df6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8007df8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8007dfa:	3104      	adds	r1, #4

08007dfc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8007dfc:	480a      	ldr	r0, [pc, #40]	; (8007e28 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8007dfe:	4b0b      	ldr	r3, [pc, #44]	; (8007e2c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8007e00:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8007e02:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8007e04:	d3f6      	bcc.n	8007df4 <CopyDataInit>
  ldr r2, =_sbss
 8007e06:	4a0a      	ldr	r2, [pc, #40]	; (8007e30 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8007e08:	e002      	b.n	8007e10 <LoopFillZerobss>

08007e0a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8007e0a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8007e0c:	f842 3b04 	str.w	r3, [r2], #4

08007e10 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8007e10:	4b08      	ldr	r3, [pc, #32]	; (8007e34 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8007e12:	429a      	cmp	r2, r3
  bcc FillZerobss
 8007e14:	d3f9      	bcc.n	8007e0a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8007e16:	f7ff ffe5 	bl	8007de4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007e1a:	f001 ff61 	bl	8009ce0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8007e1e:	f7fe ff6f 	bl	8006d00 <main>
  bx lr
 8007e22:	4770      	bx	lr
  ldr r3, =_sidata
 8007e24:	0800c448 	.word	0x0800c448
  ldr r0, =_sdata
 8007e28:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8007e2c:	20000098 	.word	0x20000098
  ldr r2, =_sbss
 8007e30:	20000098 	.word	0x20000098
  ldr r3, = _ebss
 8007e34:	20002e1c 	.word	0x20002e1c

08007e38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007e38:	e7fe      	b.n	8007e38 <ADC1_2_IRQHandler>
	...

08007e3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007e40:	4b08      	ldr	r3, [pc, #32]	; (8007e64 <HAL_Init+0x28>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4a07      	ldr	r2, [pc, #28]	; (8007e64 <HAL_Init+0x28>)
 8007e46:	f043 0310 	orr.w	r3, r3, #16
 8007e4a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007e4c:	2003      	movs	r0, #3
 8007e4e:	f000 f923 	bl	8008098 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007e52:	2000      	movs	r0, #0
 8007e54:	f000 f808 	bl	8007e68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007e58:	f7ff fe6e 	bl	8007b38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007e5c:	2300      	movs	r3, #0
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	bd80      	pop	{r7, pc}
 8007e62:	bf00      	nop
 8007e64:	40022000 	.word	0x40022000

08007e68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b082      	sub	sp, #8
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007e70:	4b12      	ldr	r3, [pc, #72]	; (8007ebc <HAL_InitTick+0x54>)
 8007e72:	681a      	ldr	r2, [r3, #0]
 8007e74:	4b12      	ldr	r3, [pc, #72]	; (8007ec0 <HAL_InitTick+0x58>)
 8007e76:	781b      	ldrb	r3, [r3, #0]
 8007e78:	4619      	mov	r1, r3
 8007e7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007e7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e86:	4618      	mov	r0, r3
 8007e88:	f000 f93b 	bl	8008102 <HAL_SYSTICK_Config>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d001      	beq.n	8007e96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007e92:	2301      	movs	r3, #1
 8007e94:	e00e      	b.n	8007eb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2b0f      	cmp	r3, #15
 8007e9a:	d80a      	bhi.n	8007eb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	6879      	ldr	r1, [r7, #4]
 8007ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ea4:	f000 f903 	bl	80080ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007ea8:	4a06      	ldr	r2, [pc, #24]	; (8007ec4 <HAL_InitTick+0x5c>)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	e000      	b.n	8007eb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007eb2:	2301      	movs	r3, #1
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3708      	adds	r7, #8
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}
 8007ebc:	20000028 	.word	0x20000028
 8007ec0:	20000030 	.word	0x20000030
 8007ec4:	2000002c 	.word	0x2000002c

08007ec8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007ecc:	4b05      	ldr	r3, [pc, #20]	; (8007ee4 <HAL_IncTick+0x1c>)
 8007ece:	781b      	ldrb	r3, [r3, #0]
 8007ed0:	461a      	mov	r2, r3
 8007ed2:	4b05      	ldr	r3, [pc, #20]	; (8007ee8 <HAL_IncTick+0x20>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4413      	add	r3, r2
 8007ed8:	4a03      	ldr	r2, [pc, #12]	; (8007ee8 <HAL_IncTick+0x20>)
 8007eda:	6013      	str	r3, [r2, #0]
}
 8007edc:	bf00      	nop
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bc80      	pop	{r7}
 8007ee2:	4770      	bx	lr
 8007ee4:	20000030 	.word	0x20000030
 8007ee8:	20002e14 	.word	0x20002e14

08007eec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007eec:	b480      	push	{r7}
 8007eee:	af00      	add	r7, sp, #0
  return uwTick;
 8007ef0:	4b02      	ldr	r3, [pc, #8]	; (8007efc <HAL_GetTick+0x10>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bc80      	pop	{r7}
 8007efa:	4770      	bx	lr
 8007efc:	20002e14 	.word	0x20002e14

08007f00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b085      	sub	sp, #20
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f003 0307 	and.w	r3, r3, #7
 8007f0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007f10:	4b0c      	ldr	r3, [pc, #48]	; (8007f44 <__NVIC_SetPriorityGrouping+0x44>)
 8007f12:	68db      	ldr	r3, [r3, #12]
 8007f14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007f16:	68ba      	ldr	r2, [r7, #8]
 8007f18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007f1c:	4013      	ands	r3, r2
 8007f1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007f28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007f2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007f32:	4a04      	ldr	r2, [pc, #16]	; (8007f44 <__NVIC_SetPriorityGrouping+0x44>)
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	60d3      	str	r3, [r2, #12]
}
 8007f38:	bf00      	nop
 8007f3a:	3714      	adds	r7, #20
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bc80      	pop	{r7}
 8007f40:	4770      	bx	lr
 8007f42:	bf00      	nop
 8007f44:	e000ed00 	.word	0xe000ed00

08007f48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007f4c:	4b04      	ldr	r3, [pc, #16]	; (8007f60 <__NVIC_GetPriorityGrouping+0x18>)
 8007f4e:	68db      	ldr	r3, [r3, #12]
 8007f50:	0a1b      	lsrs	r3, r3, #8
 8007f52:	f003 0307 	and.w	r3, r3, #7
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bc80      	pop	{r7}
 8007f5c:	4770      	bx	lr
 8007f5e:	bf00      	nop
 8007f60:	e000ed00 	.word	0xe000ed00

08007f64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007f64:	b480      	push	{r7}
 8007f66:	b083      	sub	sp, #12
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	db0b      	blt.n	8007f8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007f76:	79fb      	ldrb	r3, [r7, #7]
 8007f78:	f003 021f 	and.w	r2, r3, #31
 8007f7c:	4906      	ldr	r1, [pc, #24]	; (8007f98 <__NVIC_EnableIRQ+0x34>)
 8007f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f82:	095b      	lsrs	r3, r3, #5
 8007f84:	2001      	movs	r0, #1
 8007f86:	fa00 f202 	lsl.w	r2, r0, r2
 8007f8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007f8e:	bf00      	nop
 8007f90:	370c      	adds	r7, #12
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bc80      	pop	{r7}
 8007f96:	4770      	bx	lr
 8007f98:	e000e100 	.word	0xe000e100

08007f9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b083      	sub	sp, #12
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	6039      	str	r1, [r7, #0]
 8007fa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	db0a      	blt.n	8007fc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	b2da      	uxtb	r2, r3
 8007fb4:	490c      	ldr	r1, [pc, #48]	; (8007fe8 <__NVIC_SetPriority+0x4c>)
 8007fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007fba:	0112      	lsls	r2, r2, #4
 8007fbc:	b2d2      	uxtb	r2, r2
 8007fbe:	440b      	add	r3, r1
 8007fc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007fc4:	e00a      	b.n	8007fdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	b2da      	uxtb	r2, r3
 8007fca:	4908      	ldr	r1, [pc, #32]	; (8007fec <__NVIC_SetPriority+0x50>)
 8007fcc:	79fb      	ldrb	r3, [r7, #7]
 8007fce:	f003 030f 	and.w	r3, r3, #15
 8007fd2:	3b04      	subs	r3, #4
 8007fd4:	0112      	lsls	r2, r2, #4
 8007fd6:	b2d2      	uxtb	r2, r2
 8007fd8:	440b      	add	r3, r1
 8007fda:	761a      	strb	r2, [r3, #24]
}
 8007fdc:	bf00      	nop
 8007fde:	370c      	adds	r7, #12
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bc80      	pop	{r7}
 8007fe4:	4770      	bx	lr
 8007fe6:	bf00      	nop
 8007fe8:	e000e100 	.word	0xe000e100
 8007fec:	e000ed00 	.word	0xe000ed00

08007ff0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b089      	sub	sp, #36	; 0x24
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	60f8      	str	r0, [r7, #12]
 8007ff8:	60b9      	str	r1, [r7, #8]
 8007ffa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	f003 0307 	and.w	r3, r3, #7
 8008002:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008004:	69fb      	ldr	r3, [r7, #28]
 8008006:	f1c3 0307 	rsb	r3, r3, #7
 800800a:	2b04      	cmp	r3, #4
 800800c:	bf28      	it	cs
 800800e:	2304      	movcs	r3, #4
 8008010:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008012:	69fb      	ldr	r3, [r7, #28]
 8008014:	3304      	adds	r3, #4
 8008016:	2b06      	cmp	r3, #6
 8008018:	d902      	bls.n	8008020 <NVIC_EncodePriority+0x30>
 800801a:	69fb      	ldr	r3, [r7, #28]
 800801c:	3b03      	subs	r3, #3
 800801e:	e000      	b.n	8008022 <NVIC_EncodePriority+0x32>
 8008020:	2300      	movs	r3, #0
 8008022:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008024:	f04f 32ff 	mov.w	r2, #4294967295
 8008028:	69bb      	ldr	r3, [r7, #24]
 800802a:	fa02 f303 	lsl.w	r3, r2, r3
 800802e:	43da      	mvns	r2, r3
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	401a      	ands	r2, r3
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008038:	f04f 31ff 	mov.w	r1, #4294967295
 800803c:	697b      	ldr	r3, [r7, #20]
 800803e:	fa01 f303 	lsl.w	r3, r1, r3
 8008042:	43d9      	mvns	r1, r3
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008048:	4313      	orrs	r3, r2
         );
}
 800804a:	4618      	mov	r0, r3
 800804c:	3724      	adds	r7, #36	; 0x24
 800804e:	46bd      	mov	sp, r7
 8008050:	bc80      	pop	{r7}
 8008052:	4770      	bx	lr

08008054 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b082      	sub	sp, #8
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	3b01      	subs	r3, #1
 8008060:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008064:	d301      	bcc.n	800806a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008066:	2301      	movs	r3, #1
 8008068:	e00f      	b.n	800808a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800806a:	4a0a      	ldr	r2, [pc, #40]	; (8008094 <SysTick_Config+0x40>)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	3b01      	subs	r3, #1
 8008070:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008072:	210f      	movs	r1, #15
 8008074:	f04f 30ff 	mov.w	r0, #4294967295
 8008078:	f7ff ff90 	bl	8007f9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800807c:	4b05      	ldr	r3, [pc, #20]	; (8008094 <SysTick_Config+0x40>)
 800807e:	2200      	movs	r2, #0
 8008080:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008082:	4b04      	ldr	r3, [pc, #16]	; (8008094 <SysTick_Config+0x40>)
 8008084:	2207      	movs	r2, #7
 8008086:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008088:	2300      	movs	r3, #0
}
 800808a:	4618      	mov	r0, r3
 800808c:	3708      	adds	r7, #8
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}
 8008092:	bf00      	nop
 8008094:	e000e010 	.word	0xe000e010

08008098 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b082      	sub	sp, #8
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f7ff ff2d 	bl	8007f00 <__NVIC_SetPriorityGrouping>
}
 80080a6:	bf00      	nop
 80080a8:	3708      	adds	r7, #8
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}

080080ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80080ae:	b580      	push	{r7, lr}
 80080b0:	b086      	sub	sp, #24
 80080b2:	af00      	add	r7, sp, #0
 80080b4:	4603      	mov	r3, r0
 80080b6:	60b9      	str	r1, [r7, #8]
 80080b8:	607a      	str	r2, [r7, #4]
 80080ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80080bc:	2300      	movs	r3, #0
 80080be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80080c0:	f7ff ff42 	bl	8007f48 <__NVIC_GetPriorityGrouping>
 80080c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80080c6:	687a      	ldr	r2, [r7, #4]
 80080c8:	68b9      	ldr	r1, [r7, #8]
 80080ca:	6978      	ldr	r0, [r7, #20]
 80080cc:	f7ff ff90 	bl	8007ff0 <NVIC_EncodePriority>
 80080d0:	4602      	mov	r2, r0
 80080d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080d6:	4611      	mov	r1, r2
 80080d8:	4618      	mov	r0, r3
 80080da:	f7ff ff5f 	bl	8007f9c <__NVIC_SetPriority>
}
 80080de:	bf00      	nop
 80080e0:	3718      	adds	r7, #24
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}

080080e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80080e6:	b580      	push	{r7, lr}
 80080e8:	b082      	sub	sp, #8
 80080ea:	af00      	add	r7, sp, #0
 80080ec:	4603      	mov	r3, r0
 80080ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80080f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080f4:	4618      	mov	r0, r3
 80080f6:	f7ff ff35 	bl	8007f64 <__NVIC_EnableIRQ>
}
 80080fa:	bf00      	nop
 80080fc:	3708      	adds	r7, #8
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}

08008102 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008102:	b580      	push	{r7, lr}
 8008104:	b082      	sub	sp, #8
 8008106:	af00      	add	r7, sp, #0
 8008108:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f7ff ffa2 	bl	8008054 <SysTick_Config>
 8008110:	4603      	mov	r3, r0
}
 8008112:	4618      	mov	r0, r3
 8008114:	3708      	adds	r7, #8
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}
	...

0800811c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800811c:	b480      	push	{r7}
 800811e:	b083      	sub	sp, #12
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2b04      	cmp	r3, #4
 8008128:	d106      	bne.n	8008138 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800812a:	4b09      	ldr	r3, [pc, #36]	; (8008150 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	4a08      	ldr	r2, [pc, #32]	; (8008150 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8008130:	f043 0304 	orr.w	r3, r3, #4
 8008134:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8008136:	e005      	b.n	8008144 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8008138:	4b05      	ldr	r3, [pc, #20]	; (8008150 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4a04      	ldr	r2, [pc, #16]	; (8008150 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800813e:	f023 0304 	bic.w	r3, r3, #4
 8008142:	6013      	str	r3, [r2, #0]
}
 8008144:	bf00      	nop
 8008146:	370c      	adds	r7, #12
 8008148:	46bd      	mov	sp, r7
 800814a:	bc80      	pop	{r7}
 800814c:	4770      	bx	lr
 800814e:	bf00      	nop
 8008150:	e000e010 	.word	0xe000e010

08008154 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8008154:	b580      	push	{r7, lr}
 8008156:	b084      	sub	sp, #16
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800815c:	2300      	movs	r3, #0
 800815e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008166:	2b02      	cmp	r3, #2
 8008168:	d005      	beq.n	8008176 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2204      	movs	r2, #4
 800816e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8008170:	2301      	movs	r3, #1
 8008172:	73fb      	strb	r3, [r7, #15]
 8008174:	e0d6      	b.n	8008324 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	681a      	ldr	r2, [r3, #0]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f022 020e 	bic.w	r2, r2, #14
 8008184:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	681a      	ldr	r2, [r3, #0]
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f022 0201 	bic.w	r2, r2, #1
 8008194:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	461a      	mov	r2, r3
 800819c:	4b64      	ldr	r3, [pc, #400]	; (8008330 <HAL_DMA_Abort_IT+0x1dc>)
 800819e:	429a      	cmp	r2, r3
 80081a0:	d958      	bls.n	8008254 <HAL_DMA_Abort_IT+0x100>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	4a63      	ldr	r2, [pc, #396]	; (8008334 <HAL_DMA_Abort_IT+0x1e0>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d04f      	beq.n	800824c <HAL_DMA_Abort_IT+0xf8>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4a61      	ldr	r2, [pc, #388]	; (8008338 <HAL_DMA_Abort_IT+0x1e4>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d048      	beq.n	8008248 <HAL_DMA_Abort_IT+0xf4>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4a60      	ldr	r2, [pc, #384]	; (800833c <HAL_DMA_Abort_IT+0x1e8>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d040      	beq.n	8008242 <HAL_DMA_Abort_IT+0xee>
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4a5e      	ldr	r2, [pc, #376]	; (8008340 <HAL_DMA_Abort_IT+0x1ec>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d038      	beq.n	800823c <HAL_DMA_Abort_IT+0xe8>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	4a5d      	ldr	r2, [pc, #372]	; (8008344 <HAL_DMA_Abort_IT+0x1f0>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d030      	beq.n	8008236 <HAL_DMA_Abort_IT+0xe2>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	4a5b      	ldr	r2, [pc, #364]	; (8008348 <HAL_DMA_Abort_IT+0x1f4>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d028      	beq.n	8008230 <HAL_DMA_Abort_IT+0xdc>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4a53      	ldr	r2, [pc, #332]	; (8008330 <HAL_DMA_Abort_IT+0x1dc>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d020      	beq.n	800822a <HAL_DMA_Abort_IT+0xd6>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4a57      	ldr	r2, [pc, #348]	; (800834c <HAL_DMA_Abort_IT+0x1f8>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d019      	beq.n	8008226 <HAL_DMA_Abort_IT+0xd2>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4a56      	ldr	r2, [pc, #344]	; (8008350 <HAL_DMA_Abort_IT+0x1fc>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d012      	beq.n	8008222 <HAL_DMA_Abort_IT+0xce>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4a54      	ldr	r2, [pc, #336]	; (8008354 <HAL_DMA_Abort_IT+0x200>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d00a      	beq.n	800821c <HAL_DMA_Abort_IT+0xc8>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4a53      	ldr	r2, [pc, #332]	; (8008358 <HAL_DMA_Abort_IT+0x204>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d102      	bne.n	8008216 <HAL_DMA_Abort_IT+0xc2>
 8008210:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008214:	e01b      	b.n	800824e <HAL_DMA_Abort_IT+0xfa>
 8008216:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800821a:	e018      	b.n	800824e <HAL_DMA_Abort_IT+0xfa>
 800821c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008220:	e015      	b.n	800824e <HAL_DMA_Abort_IT+0xfa>
 8008222:	2310      	movs	r3, #16
 8008224:	e013      	b.n	800824e <HAL_DMA_Abort_IT+0xfa>
 8008226:	2301      	movs	r3, #1
 8008228:	e011      	b.n	800824e <HAL_DMA_Abort_IT+0xfa>
 800822a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800822e:	e00e      	b.n	800824e <HAL_DMA_Abort_IT+0xfa>
 8008230:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008234:	e00b      	b.n	800824e <HAL_DMA_Abort_IT+0xfa>
 8008236:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800823a:	e008      	b.n	800824e <HAL_DMA_Abort_IT+0xfa>
 800823c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008240:	e005      	b.n	800824e <HAL_DMA_Abort_IT+0xfa>
 8008242:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008246:	e002      	b.n	800824e <HAL_DMA_Abort_IT+0xfa>
 8008248:	2310      	movs	r3, #16
 800824a:	e000      	b.n	800824e <HAL_DMA_Abort_IT+0xfa>
 800824c:	2301      	movs	r3, #1
 800824e:	4a43      	ldr	r2, [pc, #268]	; (800835c <HAL_DMA_Abort_IT+0x208>)
 8008250:	6053      	str	r3, [r2, #4]
 8008252:	e057      	b.n	8008304 <HAL_DMA_Abort_IT+0x1b0>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4a36      	ldr	r2, [pc, #216]	; (8008334 <HAL_DMA_Abort_IT+0x1e0>)
 800825a:	4293      	cmp	r3, r2
 800825c:	d04f      	beq.n	80082fe <HAL_DMA_Abort_IT+0x1aa>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	4a35      	ldr	r2, [pc, #212]	; (8008338 <HAL_DMA_Abort_IT+0x1e4>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d048      	beq.n	80082fa <HAL_DMA_Abort_IT+0x1a6>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4a33      	ldr	r2, [pc, #204]	; (800833c <HAL_DMA_Abort_IT+0x1e8>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d040      	beq.n	80082f4 <HAL_DMA_Abort_IT+0x1a0>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	4a32      	ldr	r2, [pc, #200]	; (8008340 <HAL_DMA_Abort_IT+0x1ec>)
 8008278:	4293      	cmp	r3, r2
 800827a:	d038      	beq.n	80082ee <HAL_DMA_Abort_IT+0x19a>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4a30      	ldr	r2, [pc, #192]	; (8008344 <HAL_DMA_Abort_IT+0x1f0>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d030      	beq.n	80082e8 <HAL_DMA_Abort_IT+0x194>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4a2f      	ldr	r2, [pc, #188]	; (8008348 <HAL_DMA_Abort_IT+0x1f4>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d028      	beq.n	80082e2 <HAL_DMA_Abort_IT+0x18e>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	4a26      	ldr	r2, [pc, #152]	; (8008330 <HAL_DMA_Abort_IT+0x1dc>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d020      	beq.n	80082dc <HAL_DMA_Abort_IT+0x188>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	4a2b      	ldr	r2, [pc, #172]	; (800834c <HAL_DMA_Abort_IT+0x1f8>)
 80082a0:	4293      	cmp	r3, r2
 80082a2:	d019      	beq.n	80082d8 <HAL_DMA_Abort_IT+0x184>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	4a29      	ldr	r2, [pc, #164]	; (8008350 <HAL_DMA_Abort_IT+0x1fc>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d012      	beq.n	80082d4 <HAL_DMA_Abort_IT+0x180>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4a28      	ldr	r2, [pc, #160]	; (8008354 <HAL_DMA_Abort_IT+0x200>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d00a      	beq.n	80082ce <HAL_DMA_Abort_IT+0x17a>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	4a26      	ldr	r2, [pc, #152]	; (8008358 <HAL_DMA_Abort_IT+0x204>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d102      	bne.n	80082c8 <HAL_DMA_Abort_IT+0x174>
 80082c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80082c6:	e01b      	b.n	8008300 <HAL_DMA_Abort_IT+0x1ac>
 80082c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80082cc:	e018      	b.n	8008300 <HAL_DMA_Abort_IT+0x1ac>
 80082ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80082d2:	e015      	b.n	8008300 <HAL_DMA_Abort_IT+0x1ac>
 80082d4:	2310      	movs	r3, #16
 80082d6:	e013      	b.n	8008300 <HAL_DMA_Abort_IT+0x1ac>
 80082d8:	2301      	movs	r3, #1
 80082da:	e011      	b.n	8008300 <HAL_DMA_Abort_IT+0x1ac>
 80082dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80082e0:	e00e      	b.n	8008300 <HAL_DMA_Abort_IT+0x1ac>
 80082e2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80082e6:	e00b      	b.n	8008300 <HAL_DMA_Abort_IT+0x1ac>
 80082e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80082ec:	e008      	b.n	8008300 <HAL_DMA_Abort_IT+0x1ac>
 80082ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80082f2:	e005      	b.n	8008300 <HAL_DMA_Abort_IT+0x1ac>
 80082f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80082f8:	e002      	b.n	8008300 <HAL_DMA_Abort_IT+0x1ac>
 80082fa:	2310      	movs	r3, #16
 80082fc:	e000      	b.n	8008300 <HAL_DMA_Abort_IT+0x1ac>
 80082fe:	2301      	movs	r3, #1
 8008300:	4a17      	ldr	r2, [pc, #92]	; (8008360 <HAL_DMA_Abort_IT+0x20c>)
 8008302:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2201      	movs	r2, #1
 8008308:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2200      	movs	r2, #0
 8008310:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008318:	2b00      	cmp	r3, #0
 800831a:	d003      	beq.n	8008324 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	4798      	blx	r3
    } 
  }
  return status;
 8008324:	7bfb      	ldrb	r3, [r7, #15]
}
 8008326:	4618      	mov	r0, r3
 8008328:	3710      	adds	r7, #16
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}
 800832e:	bf00      	nop
 8008330:	40020080 	.word	0x40020080
 8008334:	40020008 	.word	0x40020008
 8008338:	4002001c 	.word	0x4002001c
 800833c:	40020030 	.word	0x40020030
 8008340:	40020044 	.word	0x40020044
 8008344:	40020058 	.word	0x40020058
 8008348:	4002006c 	.word	0x4002006c
 800834c:	40020408 	.word	0x40020408
 8008350:	4002041c 	.word	0x4002041c
 8008354:	40020430 	.word	0x40020430
 8008358:	40020444 	.word	0x40020444
 800835c:	40020400 	.word	0x40020400
 8008360:	40020000 	.word	0x40020000

08008364 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008364:	b480      	push	{r7}
 8008366:	b08b      	sub	sp, #44	; 0x2c
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
 800836c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800836e:	2300      	movs	r3, #0
 8008370:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8008372:	2300      	movs	r3, #0
 8008374:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008376:	e133      	b.n	80085e0 <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8008378:	2201      	movs	r2, #1
 800837a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800837c:	fa02 f303 	lsl.w	r3, r2, r3
 8008380:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	69fa      	ldr	r2, [r7, #28]
 8008388:	4013      	ands	r3, r2
 800838a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800838c:	69ba      	ldr	r2, [r7, #24]
 800838e:	69fb      	ldr	r3, [r7, #28]
 8008390:	429a      	cmp	r2, r3
 8008392:	f040 8122 	bne.w	80085da <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	685b      	ldr	r3, [r3, #4]
 800839a:	2b12      	cmp	r3, #18
 800839c:	d034      	beq.n	8008408 <HAL_GPIO_Init+0xa4>
 800839e:	2b12      	cmp	r3, #18
 80083a0:	d80d      	bhi.n	80083be <HAL_GPIO_Init+0x5a>
 80083a2:	2b02      	cmp	r3, #2
 80083a4:	d02b      	beq.n	80083fe <HAL_GPIO_Init+0x9a>
 80083a6:	2b02      	cmp	r3, #2
 80083a8:	d804      	bhi.n	80083b4 <HAL_GPIO_Init+0x50>
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d031      	beq.n	8008412 <HAL_GPIO_Init+0xae>
 80083ae:	2b01      	cmp	r3, #1
 80083b0:	d01c      	beq.n	80083ec <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80083b2:	e048      	b.n	8008446 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80083b4:	2b03      	cmp	r3, #3
 80083b6:	d043      	beq.n	8008440 <HAL_GPIO_Init+0xdc>
 80083b8:	2b11      	cmp	r3, #17
 80083ba:	d01b      	beq.n	80083f4 <HAL_GPIO_Init+0x90>
          break;
 80083bc:	e043      	b.n	8008446 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80083be:	4a8f      	ldr	r2, [pc, #572]	; (80085fc <HAL_GPIO_Init+0x298>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d026      	beq.n	8008412 <HAL_GPIO_Init+0xae>
 80083c4:	4a8d      	ldr	r2, [pc, #564]	; (80085fc <HAL_GPIO_Init+0x298>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d806      	bhi.n	80083d8 <HAL_GPIO_Init+0x74>
 80083ca:	4a8d      	ldr	r2, [pc, #564]	; (8008600 <HAL_GPIO_Init+0x29c>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d020      	beq.n	8008412 <HAL_GPIO_Init+0xae>
 80083d0:	4a8c      	ldr	r2, [pc, #560]	; (8008604 <HAL_GPIO_Init+0x2a0>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d01d      	beq.n	8008412 <HAL_GPIO_Init+0xae>
          break;
 80083d6:	e036      	b.n	8008446 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80083d8:	4a8b      	ldr	r2, [pc, #556]	; (8008608 <HAL_GPIO_Init+0x2a4>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d019      	beq.n	8008412 <HAL_GPIO_Init+0xae>
 80083de:	4a8b      	ldr	r2, [pc, #556]	; (800860c <HAL_GPIO_Init+0x2a8>)
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d016      	beq.n	8008412 <HAL_GPIO_Init+0xae>
 80083e4:	4a8a      	ldr	r2, [pc, #552]	; (8008610 <HAL_GPIO_Init+0x2ac>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d013      	beq.n	8008412 <HAL_GPIO_Init+0xae>
          break;
 80083ea:	e02c      	b.n	8008446 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	68db      	ldr	r3, [r3, #12]
 80083f0:	623b      	str	r3, [r7, #32]
          break;
 80083f2:	e028      	b.n	8008446 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	68db      	ldr	r3, [r3, #12]
 80083f8:	3304      	adds	r3, #4
 80083fa:	623b      	str	r3, [r7, #32]
          break;
 80083fc:	e023      	b.n	8008446 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	68db      	ldr	r3, [r3, #12]
 8008402:	3308      	adds	r3, #8
 8008404:	623b      	str	r3, [r7, #32]
          break;
 8008406:	e01e      	b.n	8008446 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	68db      	ldr	r3, [r3, #12]
 800840c:	330c      	adds	r3, #12
 800840e:	623b      	str	r3, [r7, #32]
          break;
 8008410:	e019      	b.n	8008446 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	689b      	ldr	r3, [r3, #8]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d102      	bne.n	8008420 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800841a:	2304      	movs	r3, #4
 800841c:	623b      	str	r3, [r7, #32]
          break;
 800841e:	e012      	b.n	8008446 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	689b      	ldr	r3, [r3, #8]
 8008424:	2b01      	cmp	r3, #1
 8008426:	d105      	bne.n	8008434 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008428:	2308      	movs	r3, #8
 800842a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	69fa      	ldr	r2, [r7, #28]
 8008430:	611a      	str	r2, [r3, #16]
          break;
 8008432:	e008      	b.n	8008446 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008434:	2308      	movs	r3, #8
 8008436:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	69fa      	ldr	r2, [r7, #28]
 800843c:	615a      	str	r2, [r3, #20]
          break;
 800843e:	e002      	b.n	8008446 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8008440:	2300      	movs	r3, #0
 8008442:	623b      	str	r3, [r7, #32]
          break;
 8008444:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008446:	69bb      	ldr	r3, [r7, #24]
 8008448:	2bff      	cmp	r3, #255	; 0xff
 800844a:	d801      	bhi.n	8008450 <HAL_GPIO_Init+0xec>
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	e001      	b.n	8008454 <HAL_GPIO_Init+0xf0>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	3304      	adds	r3, #4
 8008454:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008456:	69bb      	ldr	r3, [r7, #24]
 8008458:	2bff      	cmp	r3, #255	; 0xff
 800845a:	d802      	bhi.n	8008462 <HAL_GPIO_Init+0xfe>
 800845c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800845e:	009b      	lsls	r3, r3, #2
 8008460:	e002      	b.n	8008468 <HAL_GPIO_Init+0x104>
 8008462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008464:	3b08      	subs	r3, #8
 8008466:	009b      	lsls	r3, r3, #2
 8008468:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800846a:	697b      	ldr	r3, [r7, #20]
 800846c:	681a      	ldr	r2, [r3, #0]
 800846e:	210f      	movs	r1, #15
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	fa01 f303 	lsl.w	r3, r1, r3
 8008476:	43db      	mvns	r3, r3
 8008478:	401a      	ands	r2, r3
 800847a:	6a39      	ldr	r1, [r7, #32]
 800847c:	693b      	ldr	r3, [r7, #16]
 800847e:	fa01 f303 	lsl.w	r3, r1, r3
 8008482:	431a      	orrs	r2, r3
 8008484:	697b      	ldr	r3, [r7, #20]
 8008486:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	685b      	ldr	r3, [r3, #4]
 800848c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008490:	2b00      	cmp	r3, #0
 8008492:	f000 80a2 	beq.w	80085da <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8008496:	4b5f      	ldr	r3, [pc, #380]	; (8008614 <HAL_GPIO_Init+0x2b0>)
 8008498:	699b      	ldr	r3, [r3, #24]
 800849a:	4a5e      	ldr	r2, [pc, #376]	; (8008614 <HAL_GPIO_Init+0x2b0>)
 800849c:	f043 0301 	orr.w	r3, r3, #1
 80084a0:	6193      	str	r3, [r2, #24]
 80084a2:	4b5c      	ldr	r3, [pc, #368]	; (8008614 <HAL_GPIO_Init+0x2b0>)
 80084a4:	699b      	ldr	r3, [r3, #24]
 80084a6:	f003 0301 	and.w	r3, r3, #1
 80084aa:	60bb      	str	r3, [r7, #8]
 80084ac:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80084ae:	4a5a      	ldr	r2, [pc, #360]	; (8008618 <HAL_GPIO_Init+0x2b4>)
 80084b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b2:	089b      	lsrs	r3, r3, #2
 80084b4:	3302      	adds	r3, #2
 80084b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084ba:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80084bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084be:	f003 0303 	and.w	r3, r3, #3
 80084c2:	009b      	lsls	r3, r3, #2
 80084c4:	220f      	movs	r2, #15
 80084c6:	fa02 f303 	lsl.w	r3, r2, r3
 80084ca:	43db      	mvns	r3, r3
 80084cc:	68fa      	ldr	r2, [r7, #12]
 80084ce:	4013      	ands	r3, r2
 80084d0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	4a51      	ldr	r2, [pc, #324]	; (800861c <HAL_GPIO_Init+0x2b8>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d01f      	beq.n	800851a <HAL_GPIO_Init+0x1b6>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	4a50      	ldr	r2, [pc, #320]	; (8008620 <HAL_GPIO_Init+0x2bc>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d019      	beq.n	8008516 <HAL_GPIO_Init+0x1b2>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	4a4f      	ldr	r2, [pc, #316]	; (8008624 <HAL_GPIO_Init+0x2c0>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d013      	beq.n	8008512 <HAL_GPIO_Init+0x1ae>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	4a4e      	ldr	r2, [pc, #312]	; (8008628 <HAL_GPIO_Init+0x2c4>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d00d      	beq.n	800850e <HAL_GPIO_Init+0x1aa>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	4a4d      	ldr	r2, [pc, #308]	; (800862c <HAL_GPIO_Init+0x2c8>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d007      	beq.n	800850a <HAL_GPIO_Init+0x1a6>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	4a4c      	ldr	r2, [pc, #304]	; (8008630 <HAL_GPIO_Init+0x2cc>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d101      	bne.n	8008506 <HAL_GPIO_Init+0x1a2>
 8008502:	2305      	movs	r3, #5
 8008504:	e00a      	b.n	800851c <HAL_GPIO_Init+0x1b8>
 8008506:	2306      	movs	r3, #6
 8008508:	e008      	b.n	800851c <HAL_GPIO_Init+0x1b8>
 800850a:	2304      	movs	r3, #4
 800850c:	e006      	b.n	800851c <HAL_GPIO_Init+0x1b8>
 800850e:	2303      	movs	r3, #3
 8008510:	e004      	b.n	800851c <HAL_GPIO_Init+0x1b8>
 8008512:	2302      	movs	r3, #2
 8008514:	e002      	b.n	800851c <HAL_GPIO_Init+0x1b8>
 8008516:	2301      	movs	r3, #1
 8008518:	e000      	b.n	800851c <HAL_GPIO_Init+0x1b8>
 800851a:	2300      	movs	r3, #0
 800851c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800851e:	f002 0203 	and.w	r2, r2, #3
 8008522:	0092      	lsls	r2, r2, #2
 8008524:	4093      	lsls	r3, r2
 8008526:	68fa      	ldr	r2, [r7, #12]
 8008528:	4313      	orrs	r3, r2
 800852a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800852c:	493a      	ldr	r1, [pc, #232]	; (8008618 <HAL_GPIO_Init+0x2b4>)
 800852e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008530:	089b      	lsrs	r3, r3, #2
 8008532:	3302      	adds	r3, #2
 8008534:	68fa      	ldr	r2, [r7, #12]
 8008536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	685b      	ldr	r3, [r3, #4]
 800853e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008542:	2b00      	cmp	r3, #0
 8008544:	d006      	beq.n	8008554 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8008546:	4b3b      	ldr	r3, [pc, #236]	; (8008634 <HAL_GPIO_Init+0x2d0>)
 8008548:	681a      	ldr	r2, [r3, #0]
 800854a:	493a      	ldr	r1, [pc, #232]	; (8008634 <HAL_GPIO_Init+0x2d0>)
 800854c:	69bb      	ldr	r3, [r7, #24]
 800854e:	4313      	orrs	r3, r2
 8008550:	600b      	str	r3, [r1, #0]
 8008552:	e006      	b.n	8008562 <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8008554:	4b37      	ldr	r3, [pc, #220]	; (8008634 <HAL_GPIO_Init+0x2d0>)
 8008556:	681a      	ldr	r2, [r3, #0]
 8008558:	69bb      	ldr	r3, [r7, #24]
 800855a:	43db      	mvns	r3, r3
 800855c:	4935      	ldr	r1, [pc, #212]	; (8008634 <HAL_GPIO_Init+0x2d0>)
 800855e:	4013      	ands	r3, r2
 8008560:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	685b      	ldr	r3, [r3, #4]
 8008566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800856a:	2b00      	cmp	r3, #0
 800856c:	d006      	beq.n	800857c <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800856e:	4b31      	ldr	r3, [pc, #196]	; (8008634 <HAL_GPIO_Init+0x2d0>)
 8008570:	685a      	ldr	r2, [r3, #4]
 8008572:	4930      	ldr	r1, [pc, #192]	; (8008634 <HAL_GPIO_Init+0x2d0>)
 8008574:	69bb      	ldr	r3, [r7, #24]
 8008576:	4313      	orrs	r3, r2
 8008578:	604b      	str	r3, [r1, #4]
 800857a:	e006      	b.n	800858a <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800857c:	4b2d      	ldr	r3, [pc, #180]	; (8008634 <HAL_GPIO_Init+0x2d0>)
 800857e:	685a      	ldr	r2, [r3, #4]
 8008580:	69bb      	ldr	r3, [r7, #24]
 8008582:	43db      	mvns	r3, r3
 8008584:	492b      	ldr	r1, [pc, #172]	; (8008634 <HAL_GPIO_Init+0x2d0>)
 8008586:	4013      	ands	r3, r2
 8008588:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	685b      	ldr	r3, [r3, #4]
 800858e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008592:	2b00      	cmp	r3, #0
 8008594:	d006      	beq.n	80085a4 <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8008596:	4b27      	ldr	r3, [pc, #156]	; (8008634 <HAL_GPIO_Init+0x2d0>)
 8008598:	689a      	ldr	r2, [r3, #8]
 800859a:	4926      	ldr	r1, [pc, #152]	; (8008634 <HAL_GPIO_Init+0x2d0>)
 800859c:	69bb      	ldr	r3, [r7, #24]
 800859e:	4313      	orrs	r3, r2
 80085a0:	608b      	str	r3, [r1, #8]
 80085a2:	e006      	b.n	80085b2 <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80085a4:	4b23      	ldr	r3, [pc, #140]	; (8008634 <HAL_GPIO_Init+0x2d0>)
 80085a6:	689a      	ldr	r2, [r3, #8]
 80085a8:	69bb      	ldr	r3, [r7, #24]
 80085aa:	43db      	mvns	r3, r3
 80085ac:	4921      	ldr	r1, [pc, #132]	; (8008634 <HAL_GPIO_Init+0x2d0>)
 80085ae:	4013      	ands	r3, r2
 80085b0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	685b      	ldr	r3, [r3, #4]
 80085b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d006      	beq.n	80085cc <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80085be:	4b1d      	ldr	r3, [pc, #116]	; (8008634 <HAL_GPIO_Init+0x2d0>)
 80085c0:	68da      	ldr	r2, [r3, #12]
 80085c2:	491c      	ldr	r1, [pc, #112]	; (8008634 <HAL_GPIO_Init+0x2d0>)
 80085c4:	69bb      	ldr	r3, [r7, #24]
 80085c6:	4313      	orrs	r3, r2
 80085c8:	60cb      	str	r3, [r1, #12]
 80085ca:	e006      	b.n	80085da <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80085cc:	4b19      	ldr	r3, [pc, #100]	; (8008634 <HAL_GPIO_Init+0x2d0>)
 80085ce:	68da      	ldr	r2, [r3, #12]
 80085d0:	69bb      	ldr	r3, [r7, #24]
 80085d2:	43db      	mvns	r3, r3
 80085d4:	4917      	ldr	r1, [pc, #92]	; (8008634 <HAL_GPIO_Init+0x2d0>)
 80085d6:	4013      	ands	r3, r2
 80085d8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80085da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085dc:	3301      	adds	r3, #1
 80085de:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	681a      	ldr	r2, [r3, #0]
 80085e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e6:	fa22 f303 	lsr.w	r3, r2, r3
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	f47f aec4 	bne.w	8008378 <HAL_GPIO_Init+0x14>
  }
}
 80085f0:	bf00      	nop
 80085f2:	372c      	adds	r7, #44	; 0x2c
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bc80      	pop	{r7}
 80085f8:	4770      	bx	lr
 80085fa:	bf00      	nop
 80085fc:	10210000 	.word	0x10210000
 8008600:	10110000 	.word	0x10110000
 8008604:	10120000 	.word	0x10120000
 8008608:	10310000 	.word	0x10310000
 800860c:	10320000 	.word	0x10320000
 8008610:	10220000 	.word	0x10220000
 8008614:	40021000 	.word	0x40021000
 8008618:	40010000 	.word	0x40010000
 800861c:	40010800 	.word	0x40010800
 8008620:	40010c00 	.word	0x40010c00
 8008624:	40011000 	.word	0x40011000
 8008628:	40011400 	.word	0x40011400
 800862c:	40011800 	.word	0x40011800
 8008630:	40011c00 	.word	0x40011c00
 8008634:	40010400 	.word	0x40010400

08008638 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008638:	b480      	push	{r7}
 800863a:	b085      	sub	sp, #20
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
 8008640:	460b      	mov	r3, r1
 8008642:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	689a      	ldr	r2, [r3, #8]
 8008648:	887b      	ldrh	r3, [r7, #2]
 800864a:	4013      	ands	r3, r2
 800864c:	2b00      	cmp	r3, #0
 800864e:	d002      	beq.n	8008656 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008650:	2301      	movs	r3, #1
 8008652:	73fb      	strb	r3, [r7, #15]
 8008654:	e001      	b.n	800865a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008656:	2300      	movs	r3, #0
 8008658:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800865a:	7bfb      	ldrb	r3, [r7, #15]
}
 800865c:	4618      	mov	r0, r3
 800865e:	3714      	adds	r7, #20
 8008660:	46bd      	mov	sp, r7
 8008662:	bc80      	pop	{r7}
 8008664:	4770      	bx	lr

08008666 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008666:	b480      	push	{r7}
 8008668:	b083      	sub	sp, #12
 800866a:	af00      	add	r7, sp, #0
 800866c:	6078      	str	r0, [r7, #4]
 800866e:	460b      	mov	r3, r1
 8008670:	807b      	strh	r3, [r7, #2]
 8008672:	4613      	mov	r3, r2
 8008674:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008676:	787b      	ldrb	r3, [r7, #1]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d003      	beq.n	8008684 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800867c:	887a      	ldrh	r2, [r7, #2]
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8008682:	e003      	b.n	800868c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8008684:	887b      	ldrh	r3, [r7, #2]
 8008686:	041a      	lsls	r2, r3, #16
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	611a      	str	r2, [r3, #16]
}
 800868c:	bf00      	nop
 800868e:	370c      	adds	r7, #12
 8008690:	46bd      	mov	sp, r7
 8008692:	bc80      	pop	{r7}
 8008694:	4770      	bx	lr
	...

08008698 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b086      	sub	sp, #24
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d101      	bne.n	80086aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80086a6:	2301      	movs	r3, #1
 80086a8:	e26c      	b.n	8008b84 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f003 0301 	and.w	r3, r3, #1
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	f000 8087 	beq.w	80087c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80086b8:	4b92      	ldr	r3, [pc, #584]	; (8008904 <HAL_RCC_OscConfig+0x26c>)
 80086ba:	685b      	ldr	r3, [r3, #4]
 80086bc:	f003 030c 	and.w	r3, r3, #12
 80086c0:	2b04      	cmp	r3, #4
 80086c2:	d00c      	beq.n	80086de <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80086c4:	4b8f      	ldr	r3, [pc, #572]	; (8008904 <HAL_RCC_OscConfig+0x26c>)
 80086c6:	685b      	ldr	r3, [r3, #4]
 80086c8:	f003 030c 	and.w	r3, r3, #12
 80086cc:	2b08      	cmp	r3, #8
 80086ce:	d112      	bne.n	80086f6 <HAL_RCC_OscConfig+0x5e>
 80086d0:	4b8c      	ldr	r3, [pc, #560]	; (8008904 <HAL_RCC_OscConfig+0x26c>)
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80086d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086dc:	d10b      	bne.n	80086f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80086de:	4b89      	ldr	r3, [pc, #548]	; (8008904 <HAL_RCC_OscConfig+0x26c>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d06c      	beq.n	80087c4 <HAL_RCC_OscConfig+0x12c>
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	685b      	ldr	r3, [r3, #4]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d168      	bne.n	80087c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80086f2:	2301      	movs	r3, #1
 80086f4:	e246      	b.n	8008b84 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	685b      	ldr	r3, [r3, #4]
 80086fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086fe:	d106      	bne.n	800870e <HAL_RCC_OscConfig+0x76>
 8008700:	4b80      	ldr	r3, [pc, #512]	; (8008904 <HAL_RCC_OscConfig+0x26c>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	4a7f      	ldr	r2, [pc, #508]	; (8008904 <HAL_RCC_OscConfig+0x26c>)
 8008706:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800870a:	6013      	str	r3, [r2, #0]
 800870c:	e02e      	b.n	800876c <HAL_RCC_OscConfig+0xd4>
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	685b      	ldr	r3, [r3, #4]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d10c      	bne.n	8008730 <HAL_RCC_OscConfig+0x98>
 8008716:	4b7b      	ldr	r3, [pc, #492]	; (8008904 <HAL_RCC_OscConfig+0x26c>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4a7a      	ldr	r2, [pc, #488]	; (8008904 <HAL_RCC_OscConfig+0x26c>)
 800871c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008720:	6013      	str	r3, [r2, #0]
 8008722:	4b78      	ldr	r3, [pc, #480]	; (8008904 <HAL_RCC_OscConfig+0x26c>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	4a77      	ldr	r2, [pc, #476]	; (8008904 <HAL_RCC_OscConfig+0x26c>)
 8008728:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800872c:	6013      	str	r3, [r2, #0]
 800872e:	e01d      	b.n	800876c <HAL_RCC_OscConfig+0xd4>
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008738:	d10c      	bne.n	8008754 <HAL_RCC_OscConfig+0xbc>
 800873a:	4b72      	ldr	r3, [pc, #456]	; (8008904 <HAL_RCC_OscConfig+0x26c>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	4a71      	ldr	r2, [pc, #452]	; (8008904 <HAL_RCC_OscConfig+0x26c>)
 8008740:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008744:	6013      	str	r3, [r2, #0]
 8008746:	4b6f      	ldr	r3, [pc, #444]	; (8008904 <HAL_RCC_OscConfig+0x26c>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4a6e      	ldr	r2, [pc, #440]	; (8008904 <HAL_RCC_OscConfig+0x26c>)
 800874c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008750:	6013      	str	r3, [r2, #0]
 8008752:	e00b      	b.n	800876c <HAL_RCC_OscConfig+0xd4>
 8008754:	4b6b      	ldr	r3, [pc, #428]	; (8008904 <HAL_RCC_OscConfig+0x26c>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4a6a      	ldr	r2, [pc, #424]	; (8008904 <HAL_RCC_OscConfig+0x26c>)
 800875a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800875e:	6013      	str	r3, [r2, #0]
 8008760:	4b68      	ldr	r3, [pc, #416]	; (8008904 <HAL_RCC_OscConfig+0x26c>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	4a67      	ldr	r2, [pc, #412]	; (8008904 <HAL_RCC_OscConfig+0x26c>)
 8008766:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800876a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	685b      	ldr	r3, [r3, #4]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d013      	beq.n	800879c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008774:	f7ff fbba 	bl	8007eec <HAL_GetTick>
 8008778:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800877a:	e008      	b.n	800878e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800877c:	f7ff fbb6 	bl	8007eec <HAL_GetTick>
 8008780:	4602      	mov	r2, r0
 8008782:	693b      	ldr	r3, [r7, #16]
 8008784:	1ad3      	subs	r3, r2, r3
 8008786:	2b64      	cmp	r3, #100	; 0x64
 8008788:	d901      	bls.n	800878e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800878a:	2303      	movs	r3, #3
 800878c:	e1fa      	b.n	8008b84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800878e:	4b5d      	ldr	r3, [pc, #372]	; (8008904 <HAL_RCC_OscConfig+0x26c>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008796:	2b00      	cmp	r3, #0
 8008798:	d0f0      	beq.n	800877c <HAL_RCC_OscConfig+0xe4>
 800879a:	e014      	b.n	80087c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800879c:	f7ff fba6 	bl	8007eec <HAL_GetTick>
 80087a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80087a2:	e008      	b.n	80087b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80087a4:	f7ff fba2 	bl	8007eec <HAL_GetTick>
 80087a8:	4602      	mov	r2, r0
 80087aa:	693b      	ldr	r3, [r7, #16]
 80087ac:	1ad3      	subs	r3, r2, r3
 80087ae:	2b64      	cmp	r3, #100	; 0x64
 80087b0:	d901      	bls.n	80087b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80087b2:	2303      	movs	r3, #3
 80087b4:	e1e6      	b.n	8008b84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80087b6:	4b53      	ldr	r3, [pc, #332]	; (8008904 <HAL_RCC_OscConfig+0x26c>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d1f0      	bne.n	80087a4 <HAL_RCC_OscConfig+0x10c>
 80087c2:	e000      	b.n	80087c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80087c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f003 0302 	and.w	r3, r3, #2
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d063      	beq.n	800889a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80087d2:	4b4c      	ldr	r3, [pc, #304]	; (8008904 <HAL_RCC_OscConfig+0x26c>)
 80087d4:	685b      	ldr	r3, [r3, #4]
 80087d6:	f003 030c 	and.w	r3, r3, #12
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d00b      	beq.n	80087f6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80087de:	4b49      	ldr	r3, [pc, #292]	; (8008904 <HAL_RCC_OscConfig+0x26c>)
 80087e0:	685b      	ldr	r3, [r3, #4]
 80087e2:	f003 030c 	and.w	r3, r3, #12
 80087e6:	2b08      	cmp	r3, #8
 80087e8:	d11c      	bne.n	8008824 <HAL_RCC_OscConfig+0x18c>
 80087ea:	4b46      	ldr	r3, [pc, #280]	; (8008904 <HAL_RCC_OscConfig+0x26c>)
 80087ec:	685b      	ldr	r3, [r3, #4]
 80087ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d116      	bne.n	8008824 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80087f6:	4b43      	ldr	r3, [pc, #268]	; (8008904 <HAL_RCC_OscConfig+0x26c>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f003 0302 	and.w	r3, r3, #2
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d005      	beq.n	800880e <HAL_RCC_OscConfig+0x176>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	691b      	ldr	r3, [r3, #16]
 8008806:	2b01      	cmp	r3, #1
 8008808:	d001      	beq.n	800880e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800880a:	2301      	movs	r3, #1
 800880c:	e1ba      	b.n	8008b84 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800880e:	4b3d      	ldr	r3, [pc, #244]	; (8008904 <HAL_RCC_OscConfig+0x26c>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	695b      	ldr	r3, [r3, #20]
 800881a:	00db      	lsls	r3, r3, #3
 800881c:	4939      	ldr	r1, [pc, #228]	; (8008904 <HAL_RCC_OscConfig+0x26c>)
 800881e:	4313      	orrs	r3, r2
 8008820:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008822:	e03a      	b.n	800889a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	691b      	ldr	r3, [r3, #16]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d020      	beq.n	800886e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800882c:	4b36      	ldr	r3, [pc, #216]	; (8008908 <HAL_RCC_OscConfig+0x270>)
 800882e:	2201      	movs	r2, #1
 8008830:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008832:	f7ff fb5b 	bl	8007eec <HAL_GetTick>
 8008836:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008838:	e008      	b.n	800884c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800883a:	f7ff fb57 	bl	8007eec <HAL_GetTick>
 800883e:	4602      	mov	r2, r0
 8008840:	693b      	ldr	r3, [r7, #16]
 8008842:	1ad3      	subs	r3, r2, r3
 8008844:	2b02      	cmp	r3, #2
 8008846:	d901      	bls.n	800884c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8008848:	2303      	movs	r3, #3
 800884a:	e19b      	b.n	8008b84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800884c:	4b2d      	ldr	r3, [pc, #180]	; (8008904 <HAL_RCC_OscConfig+0x26c>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f003 0302 	and.w	r3, r3, #2
 8008854:	2b00      	cmp	r3, #0
 8008856:	d0f0      	beq.n	800883a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008858:	4b2a      	ldr	r3, [pc, #168]	; (8008904 <HAL_RCC_OscConfig+0x26c>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	695b      	ldr	r3, [r3, #20]
 8008864:	00db      	lsls	r3, r3, #3
 8008866:	4927      	ldr	r1, [pc, #156]	; (8008904 <HAL_RCC_OscConfig+0x26c>)
 8008868:	4313      	orrs	r3, r2
 800886a:	600b      	str	r3, [r1, #0]
 800886c:	e015      	b.n	800889a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800886e:	4b26      	ldr	r3, [pc, #152]	; (8008908 <HAL_RCC_OscConfig+0x270>)
 8008870:	2200      	movs	r2, #0
 8008872:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008874:	f7ff fb3a 	bl	8007eec <HAL_GetTick>
 8008878:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800887a:	e008      	b.n	800888e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800887c:	f7ff fb36 	bl	8007eec <HAL_GetTick>
 8008880:	4602      	mov	r2, r0
 8008882:	693b      	ldr	r3, [r7, #16]
 8008884:	1ad3      	subs	r3, r2, r3
 8008886:	2b02      	cmp	r3, #2
 8008888:	d901      	bls.n	800888e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800888a:	2303      	movs	r3, #3
 800888c:	e17a      	b.n	8008b84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800888e:	4b1d      	ldr	r3, [pc, #116]	; (8008904 <HAL_RCC_OscConfig+0x26c>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f003 0302 	and.w	r3, r3, #2
 8008896:	2b00      	cmp	r3, #0
 8008898:	d1f0      	bne.n	800887c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f003 0308 	and.w	r3, r3, #8
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d03a      	beq.n	800891c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	699b      	ldr	r3, [r3, #24]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d019      	beq.n	80088e2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80088ae:	4b17      	ldr	r3, [pc, #92]	; (800890c <HAL_RCC_OscConfig+0x274>)
 80088b0:	2201      	movs	r2, #1
 80088b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80088b4:	f7ff fb1a 	bl	8007eec <HAL_GetTick>
 80088b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80088ba:	e008      	b.n	80088ce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80088bc:	f7ff fb16 	bl	8007eec <HAL_GetTick>
 80088c0:	4602      	mov	r2, r0
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	1ad3      	subs	r3, r2, r3
 80088c6:	2b02      	cmp	r3, #2
 80088c8:	d901      	bls.n	80088ce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80088ca:	2303      	movs	r3, #3
 80088cc:	e15a      	b.n	8008b84 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80088ce:	4b0d      	ldr	r3, [pc, #52]	; (8008904 <HAL_RCC_OscConfig+0x26c>)
 80088d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088d2:	f003 0302 	and.w	r3, r3, #2
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d0f0      	beq.n	80088bc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80088da:	2001      	movs	r0, #1
 80088dc:	f000 fada 	bl	8008e94 <RCC_Delay>
 80088e0:	e01c      	b.n	800891c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80088e2:	4b0a      	ldr	r3, [pc, #40]	; (800890c <HAL_RCC_OscConfig+0x274>)
 80088e4:	2200      	movs	r2, #0
 80088e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80088e8:	f7ff fb00 	bl	8007eec <HAL_GetTick>
 80088ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80088ee:	e00f      	b.n	8008910 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80088f0:	f7ff fafc 	bl	8007eec <HAL_GetTick>
 80088f4:	4602      	mov	r2, r0
 80088f6:	693b      	ldr	r3, [r7, #16]
 80088f8:	1ad3      	subs	r3, r2, r3
 80088fa:	2b02      	cmp	r3, #2
 80088fc:	d908      	bls.n	8008910 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80088fe:	2303      	movs	r3, #3
 8008900:	e140      	b.n	8008b84 <HAL_RCC_OscConfig+0x4ec>
 8008902:	bf00      	nop
 8008904:	40021000 	.word	0x40021000
 8008908:	42420000 	.word	0x42420000
 800890c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008910:	4b9e      	ldr	r3, [pc, #632]	; (8008b8c <HAL_RCC_OscConfig+0x4f4>)
 8008912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008914:	f003 0302 	and.w	r3, r3, #2
 8008918:	2b00      	cmp	r3, #0
 800891a:	d1e9      	bne.n	80088f0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f003 0304 	and.w	r3, r3, #4
 8008924:	2b00      	cmp	r3, #0
 8008926:	f000 80a6 	beq.w	8008a76 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800892a:	2300      	movs	r3, #0
 800892c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800892e:	4b97      	ldr	r3, [pc, #604]	; (8008b8c <HAL_RCC_OscConfig+0x4f4>)
 8008930:	69db      	ldr	r3, [r3, #28]
 8008932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008936:	2b00      	cmp	r3, #0
 8008938:	d10d      	bne.n	8008956 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800893a:	4b94      	ldr	r3, [pc, #592]	; (8008b8c <HAL_RCC_OscConfig+0x4f4>)
 800893c:	69db      	ldr	r3, [r3, #28]
 800893e:	4a93      	ldr	r2, [pc, #588]	; (8008b8c <HAL_RCC_OscConfig+0x4f4>)
 8008940:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008944:	61d3      	str	r3, [r2, #28]
 8008946:	4b91      	ldr	r3, [pc, #580]	; (8008b8c <HAL_RCC_OscConfig+0x4f4>)
 8008948:	69db      	ldr	r3, [r3, #28]
 800894a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800894e:	60bb      	str	r3, [r7, #8]
 8008950:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008952:	2301      	movs	r3, #1
 8008954:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008956:	4b8e      	ldr	r3, [pc, #568]	; (8008b90 <HAL_RCC_OscConfig+0x4f8>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800895e:	2b00      	cmp	r3, #0
 8008960:	d118      	bne.n	8008994 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008962:	4b8b      	ldr	r3, [pc, #556]	; (8008b90 <HAL_RCC_OscConfig+0x4f8>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	4a8a      	ldr	r2, [pc, #552]	; (8008b90 <HAL_RCC_OscConfig+0x4f8>)
 8008968:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800896c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800896e:	f7ff fabd 	bl	8007eec <HAL_GetTick>
 8008972:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008974:	e008      	b.n	8008988 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008976:	f7ff fab9 	bl	8007eec <HAL_GetTick>
 800897a:	4602      	mov	r2, r0
 800897c:	693b      	ldr	r3, [r7, #16]
 800897e:	1ad3      	subs	r3, r2, r3
 8008980:	2b64      	cmp	r3, #100	; 0x64
 8008982:	d901      	bls.n	8008988 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8008984:	2303      	movs	r3, #3
 8008986:	e0fd      	b.n	8008b84 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008988:	4b81      	ldr	r3, [pc, #516]	; (8008b90 <HAL_RCC_OscConfig+0x4f8>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008990:	2b00      	cmp	r3, #0
 8008992:	d0f0      	beq.n	8008976 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	68db      	ldr	r3, [r3, #12]
 8008998:	2b01      	cmp	r3, #1
 800899a:	d106      	bne.n	80089aa <HAL_RCC_OscConfig+0x312>
 800899c:	4b7b      	ldr	r3, [pc, #492]	; (8008b8c <HAL_RCC_OscConfig+0x4f4>)
 800899e:	6a1b      	ldr	r3, [r3, #32]
 80089a0:	4a7a      	ldr	r2, [pc, #488]	; (8008b8c <HAL_RCC_OscConfig+0x4f4>)
 80089a2:	f043 0301 	orr.w	r3, r3, #1
 80089a6:	6213      	str	r3, [r2, #32]
 80089a8:	e02d      	b.n	8008a06 <HAL_RCC_OscConfig+0x36e>
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	68db      	ldr	r3, [r3, #12]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d10c      	bne.n	80089cc <HAL_RCC_OscConfig+0x334>
 80089b2:	4b76      	ldr	r3, [pc, #472]	; (8008b8c <HAL_RCC_OscConfig+0x4f4>)
 80089b4:	6a1b      	ldr	r3, [r3, #32]
 80089b6:	4a75      	ldr	r2, [pc, #468]	; (8008b8c <HAL_RCC_OscConfig+0x4f4>)
 80089b8:	f023 0301 	bic.w	r3, r3, #1
 80089bc:	6213      	str	r3, [r2, #32]
 80089be:	4b73      	ldr	r3, [pc, #460]	; (8008b8c <HAL_RCC_OscConfig+0x4f4>)
 80089c0:	6a1b      	ldr	r3, [r3, #32]
 80089c2:	4a72      	ldr	r2, [pc, #456]	; (8008b8c <HAL_RCC_OscConfig+0x4f4>)
 80089c4:	f023 0304 	bic.w	r3, r3, #4
 80089c8:	6213      	str	r3, [r2, #32]
 80089ca:	e01c      	b.n	8008a06 <HAL_RCC_OscConfig+0x36e>
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	68db      	ldr	r3, [r3, #12]
 80089d0:	2b05      	cmp	r3, #5
 80089d2:	d10c      	bne.n	80089ee <HAL_RCC_OscConfig+0x356>
 80089d4:	4b6d      	ldr	r3, [pc, #436]	; (8008b8c <HAL_RCC_OscConfig+0x4f4>)
 80089d6:	6a1b      	ldr	r3, [r3, #32]
 80089d8:	4a6c      	ldr	r2, [pc, #432]	; (8008b8c <HAL_RCC_OscConfig+0x4f4>)
 80089da:	f043 0304 	orr.w	r3, r3, #4
 80089de:	6213      	str	r3, [r2, #32]
 80089e0:	4b6a      	ldr	r3, [pc, #424]	; (8008b8c <HAL_RCC_OscConfig+0x4f4>)
 80089e2:	6a1b      	ldr	r3, [r3, #32]
 80089e4:	4a69      	ldr	r2, [pc, #420]	; (8008b8c <HAL_RCC_OscConfig+0x4f4>)
 80089e6:	f043 0301 	orr.w	r3, r3, #1
 80089ea:	6213      	str	r3, [r2, #32]
 80089ec:	e00b      	b.n	8008a06 <HAL_RCC_OscConfig+0x36e>
 80089ee:	4b67      	ldr	r3, [pc, #412]	; (8008b8c <HAL_RCC_OscConfig+0x4f4>)
 80089f0:	6a1b      	ldr	r3, [r3, #32]
 80089f2:	4a66      	ldr	r2, [pc, #408]	; (8008b8c <HAL_RCC_OscConfig+0x4f4>)
 80089f4:	f023 0301 	bic.w	r3, r3, #1
 80089f8:	6213      	str	r3, [r2, #32]
 80089fa:	4b64      	ldr	r3, [pc, #400]	; (8008b8c <HAL_RCC_OscConfig+0x4f4>)
 80089fc:	6a1b      	ldr	r3, [r3, #32]
 80089fe:	4a63      	ldr	r2, [pc, #396]	; (8008b8c <HAL_RCC_OscConfig+0x4f4>)
 8008a00:	f023 0304 	bic.w	r3, r3, #4
 8008a04:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	68db      	ldr	r3, [r3, #12]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d015      	beq.n	8008a3a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008a0e:	f7ff fa6d 	bl	8007eec <HAL_GetTick>
 8008a12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008a14:	e00a      	b.n	8008a2c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a16:	f7ff fa69 	bl	8007eec <HAL_GetTick>
 8008a1a:	4602      	mov	r2, r0
 8008a1c:	693b      	ldr	r3, [r7, #16]
 8008a1e:	1ad3      	subs	r3, r2, r3
 8008a20:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a24:	4293      	cmp	r3, r2
 8008a26:	d901      	bls.n	8008a2c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8008a28:	2303      	movs	r3, #3
 8008a2a:	e0ab      	b.n	8008b84 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008a2c:	4b57      	ldr	r3, [pc, #348]	; (8008b8c <HAL_RCC_OscConfig+0x4f4>)
 8008a2e:	6a1b      	ldr	r3, [r3, #32]
 8008a30:	f003 0302 	and.w	r3, r3, #2
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d0ee      	beq.n	8008a16 <HAL_RCC_OscConfig+0x37e>
 8008a38:	e014      	b.n	8008a64 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008a3a:	f7ff fa57 	bl	8007eec <HAL_GetTick>
 8008a3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008a40:	e00a      	b.n	8008a58 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a42:	f7ff fa53 	bl	8007eec <HAL_GetTick>
 8008a46:	4602      	mov	r2, r0
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	1ad3      	subs	r3, r2, r3
 8008a4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d901      	bls.n	8008a58 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8008a54:	2303      	movs	r3, #3
 8008a56:	e095      	b.n	8008b84 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008a58:	4b4c      	ldr	r3, [pc, #304]	; (8008b8c <HAL_RCC_OscConfig+0x4f4>)
 8008a5a:	6a1b      	ldr	r3, [r3, #32]
 8008a5c:	f003 0302 	and.w	r3, r3, #2
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d1ee      	bne.n	8008a42 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8008a64:	7dfb      	ldrb	r3, [r7, #23]
 8008a66:	2b01      	cmp	r3, #1
 8008a68:	d105      	bne.n	8008a76 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008a6a:	4b48      	ldr	r3, [pc, #288]	; (8008b8c <HAL_RCC_OscConfig+0x4f4>)
 8008a6c:	69db      	ldr	r3, [r3, #28]
 8008a6e:	4a47      	ldr	r2, [pc, #284]	; (8008b8c <HAL_RCC_OscConfig+0x4f4>)
 8008a70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a74:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	69db      	ldr	r3, [r3, #28]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	f000 8081 	beq.w	8008b82 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008a80:	4b42      	ldr	r3, [pc, #264]	; (8008b8c <HAL_RCC_OscConfig+0x4f4>)
 8008a82:	685b      	ldr	r3, [r3, #4]
 8008a84:	f003 030c 	and.w	r3, r3, #12
 8008a88:	2b08      	cmp	r3, #8
 8008a8a:	d061      	beq.n	8008b50 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	69db      	ldr	r3, [r3, #28]
 8008a90:	2b02      	cmp	r3, #2
 8008a92:	d146      	bne.n	8008b22 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a94:	4b3f      	ldr	r3, [pc, #252]	; (8008b94 <HAL_RCC_OscConfig+0x4fc>)
 8008a96:	2200      	movs	r2, #0
 8008a98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a9a:	f7ff fa27 	bl	8007eec <HAL_GetTick>
 8008a9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008aa0:	e008      	b.n	8008ab4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008aa2:	f7ff fa23 	bl	8007eec <HAL_GetTick>
 8008aa6:	4602      	mov	r2, r0
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	1ad3      	subs	r3, r2, r3
 8008aac:	2b02      	cmp	r3, #2
 8008aae:	d901      	bls.n	8008ab4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8008ab0:	2303      	movs	r3, #3
 8008ab2:	e067      	b.n	8008b84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008ab4:	4b35      	ldr	r3, [pc, #212]	; (8008b8c <HAL_RCC_OscConfig+0x4f4>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d1f0      	bne.n	8008aa2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6a1b      	ldr	r3, [r3, #32]
 8008ac4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ac8:	d108      	bne.n	8008adc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8008aca:	4b30      	ldr	r3, [pc, #192]	; (8008b8c <HAL_RCC_OscConfig+0x4f4>)
 8008acc:	685b      	ldr	r3, [r3, #4]
 8008ace:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	689b      	ldr	r3, [r3, #8]
 8008ad6:	492d      	ldr	r1, [pc, #180]	; (8008b8c <HAL_RCC_OscConfig+0x4f4>)
 8008ad8:	4313      	orrs	r3, r2
 8008ada:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008adc:	4b2b      	ldr	r3, [pc, #172]	; (8008b8c <HAL_RCC_OscConfig+0x4f4>)
 8008ade:	685b      	ldr	r3, [r3, #4]
 8008ae0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6a19      	ldr	r1, [r3, #32]
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aec:	430b      	orrs	r3, r1
 8008aee:	4927      	ldr	r1, [pc, #156]	; (8008b8c <HAL_RCC_OscConfig+0x4f4>)
 8008af0:	4313      	orrs	r3, r2
 8008af2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008af4:	4b27      	ldr	r3, [pc, #156]	; (8008b94 <HAL_RCC_OscConfig+0x4fc>)
 8008af6:	2201      	movs	r2, #1
 8008af8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008afa:	f7ff f9f7 	bl	8007eec <HAL_GetTick>
 8008afe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008b00:	e008      	b.n	8008b14 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b02:	f7ff f9f3 	bl	8007eec <HAL_GetTick>
 8008b06:	4602      	mov	r2, r0
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	1ad3      	subs	r3, r2, r3
 8008b0c:	2b02      	cmp	r3, #2
 8008b0e:	d901      	bls.n	8008b14 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8008b10:	2303      	movs	r3, #3
 8008b12:	e037      	b.n	8008b84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008b14:	4b1d      	ldr	r3, [pc, #116]	; (8008b8c <HAL_RCC_OscConfig+0x4f4>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d0f0      	beq.n	8008b02 <HAL_RCC_OscConfig+0x46a>
 8008b20:	e02f      	b.n	8008b82 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b22:	4b1c      	ldr	r3, [pc, #112]	; (8008b94 <HAL_RCC_OscConfig+0x4fc>)
 8008b24:	2200      	movs	r2, #0
 8008b26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b28:	f7ff f9e0 	bl	8007eec <HAL_GetTick>
 8008b2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008b2e:	e008      	b.n	8008b42 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b30:	f7ff f9dc 	bl	8007eec <HAL_GetTick>
 8008b34:	4602      	mov	r2, r0
 8008b36:	693b      	ldr	r3, [r7, #16]
 8008b38:	1ad3      	subs	r3, r2, r3
 8008b3a:	2b02      	cmp	r3, #2
 8008b3c:	d901      	bls.n	8008b42 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8008b3e:	2303      	movs	r3, #3
 8008b40:	e020      	b.n	8008b84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008b42:	4b12      	ldr	r3, [pc, #72]	; (8008b8c <HAL_RCC_OscConfig+0x4f4>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d1f0      	bne.n	8008b30 <HAL_RCC_OscConfig+0x498>
 8008b4e:	e018      	b.n	8008b82 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	69db      	ldr	r3, [r3, #28]
 8008b54:	2b01      	cmp	r3, #1
 8008b56:	d101      	bne.n	8008b5c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8008b58:	2301      	movs	r3, #1
 8008b5a:	e013      	b.n	8008b84 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008b5c:	4b0b      	ldr	r3, [pc, #44]	; (8008b8c <HAL_RCC_OscConfig+0x4f4>)
 8008b5e:	685b      	ldr	r3, [r3, #4]
 8008b60:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6a1b      	ldr	r3, [r3, #32]
 8008b6c:	429a      	cmp	r2, r3
 8008b6e:	d106      	bne.n	8008b7e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b7a:	429a      	cmp	r2, r3
 8008b7c:	d001      	beq.n	8008b82 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8008b7e:	2301      	movs	r3, #1
 8008b80:	e000      	b.n	8008b84 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8008b82:	2300      	movs	r3, #0
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	3718      	adds	r7, #24
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}
 8008b8c:	40021000 	.word	0x40021000
 8008b90:	40007000 	.word	0x40007000
 8008b94:	42420060 	.word	0x42420060

08008b98 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b084      	sub	sp, #16
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
 8008ba0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d101      	bne.n	8008bac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008ba8:	2301      	movs	r3, #1
 8008baa:	e0d0      	b.n	8008d4e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008bac:	4b6a      	ldr	r3, [pc, #424]	; (8008d58 <HAL_RCC_ClockConfig+0x1c0>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f003 0307 	and.w	r3, r3, #7
 8008bb4:	683a      	ldr	r2, [r7, #0]
 8008bb6:	429a      	cmp	r2, r3
 8008bb8:	d910      	bls.n	8008bdc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008bba:	4b67      	ldr	r3, [pc, #412]	; (8008d58 <HAL_RCC_ClockConfig+0x1c0>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f023 0207 	bic.w	r2, r3, #7
 8008bc2:	4965      	ldr	r1, [pc, #404]	; (8008d58 <HAL_RCC_ClockConfig+0x1c0>)
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	4313      	orrs	r3, r2
 8008bc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008bca:	4b63      	ldr	r3, [pc, #396]	; (8008d58 <HAL_RCC_ClockConfig+0x1c0>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f003 0307 	and.w	r3, r3, #7
 8008bd2:	683a      	ldr	r2, [r7, #0]
 8008bd4:	429a      	cmp	r2, r3
 8008bd6:	d001      	beq.n	8008bdc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8008bd8:	2301      	movs	r3, #1
 8008bda:	e0b8      	b.n	8008d4e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f003 0302 	and.w	r3, r3, #2
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d020      	beq.n	8008c2a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f003 0304 	and.w	r3, r3, #4
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d005      	beq.n	8008c00 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008bf4:	4b59      	ldr	r3, [pc, #356]	; (8008d5c <HAL_RCC_ClockConfig+0x1c4>)
 8008bf6:	685b      	ldr	r3, [r3, #4]
 8008bf8:	4a58      	ldr	r2, [pc, #352]	; (8008d5c <HAL_RCC_ClockConfig+0x1c4>)
 8008bfa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008bfe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f003 0308 	and.w	r3, r3, #8
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d005      	beq.n	8008c18 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008c0c:	4b53      	ldr	r3, [pc, #332]	; (8008d5c <HAL_RCC_ClockConfig+0x1c4>)
 8008c0e:	685b      	ldr	r3, [r3, #4]
 8008c10:	4a52      	ldr	r2, [pc, #328]	; (8008d5c <HAL_RCC_ClockConfig+0x1c4>)
 8008c12:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8008c16:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008c18:	4b50      	ldr	r3, [pc, #320]	; (8008d5c <HAL_RCC_ClockConfig+0x1c4>)
 8008c1a:	685b      	ldr	r3, [r3, #4]
 8008c1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	689b      	ldr	r3, [r3, #8]
 8008c24:	494d      	ldr	r1, [pc, #308]	; (8008d5c <HAL_RCC_ClockConfig+0x1c4>)
 8008c26:	4313      	orrs	r3, r2
 8008c28:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f003 0301 	and.w	r3, r3, #1
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d040      	beq.n	8008cb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	685b      	ldr	r3, [r3, #4]
 8008c3a:	2b01      	cmp	r3, #1
 8008c3c:	d107      	bne.n	8008c4e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008c3e:	4b47      	ldr	r3, [pc, #284]	; (8008d5c <HAL_RCC_ClockConfig+0x1c4>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d115      	bne.n	8008c76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	e07f      	b.n	8008d4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	685b      	ldr	r3, [r3, #4]
 8008c52:	2b02      	cmp	r3, #2
 8008c54:	d107      	bne.n	8008c66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008c56:	4b41      	ldr	r3, [pc, #260]	; (8008d5c <HAL_RCC_ClockConfig+0x1c4>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d109      	bne.n	8008c76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008c62:	2301      	movs	r3, #1
 8008c64:	e073      	b.n	8008d4e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008c66:	4b3d      	ldr	r3, [pc, #244]	; (8008d5c <HAL_RCC_ClockConfig+0x1c4>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f003 0302 	and.w	r3, r3, #2
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d101      	bne.n	8008c76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008c72:	2301      	movs	r3, #1
 8008c74:	e06b      	b.n	8008d4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008c76:	4b39      	ldr	r3, [pc, #228]	; (8008d5c <HAL_RCC_ClockConfig+0x1c4>)
 8008c78:	685b      	ldr	r3, [r3, #4]
 8008c7a:	f023 0203 	bic.w	r2, r3, #3
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	685b      	ldr	r3, [r3, #4]
 8008c82:	4936      	ldr	r1, [pc, #216]	; (8008d5c <HAL_RCC_ClockConfig+0x1c4>)
 8008c84:	4313      	orrs	r3, r2
 8008c86:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008c88:	f7ff f930 	bl	8007eec <HAL_GetTick>
 8008c8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c8e:	e00a      	b.n	8008ca6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008c90:	f7ff f92c 	bl	8007eec <HAL_GetTick>
 8008c94:	4602      	mov	r2, r0
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	1ad3      	subs	r3, r2, r3
 8008c9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d901      	bls.n	8008ca6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008ca2:	2303      	movs	r3, #3
 8008ca4:	e053      	b.n	8008d4e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ca6:	4b2d      	ldr	r3, [pc, #180]	; (8008d5c <HAL_RCC_ClockConfig+0x1c4>)
 8008ca8:	685b      	ldr	r3, [r3, #4]
 8008caa:	f003 020c 	and.w	r2, r3, #12
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	685b      	ldr	r3, [r3, #4]
 8008cb2:	009b      	lsls	r3, r3, #2
 8008cb4:	429a      	cmp	r2, r3
 8008cb6:	d1eb      	bne.n	8008c90 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008cb8:	4b27      	ldr	r3, [pc, #156]	; (8008d58 <HAL_RCC_ClockConfig+0x1c0>)
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f003 0307 	and.w	r3, r3, #7
 8008cc0:	683a      	ldr	r2, [r7, #0]
 8008cc2:	429a      	cmp	r2, r3
 8008cc4:	d210      	bcs.n	8008ce8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008cc6:	4b24      	ldr	r3, [pc, #144]	; (8008d58 <HAL_RCC_ClockConfig+0x1c0>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f023 0207 	bic.w	r2, r3, #7
 8008cce:	4922      	ldr	r1, [pc, #136]	; (8008d58 <HAL_RCC_ClockConfig+0x1c0>)
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	4313      	orrs	r3, r2
 8008cd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008cd6:	4b20      	ldr	r3, [pc, #128]	; (8008d58 <HAL_RCC_ClockConfig+0x1c0>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f003 0307 	and.w	r3, r3, #7
 8008cde:	683a      	ldr	r2, [r7, #0]
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	d001      	beq.n	8008ce8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	e032      	b.n	8008d4e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f003 0304 	and.w	r3, r3, #4
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d008      	beq.n	8008d06 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008cf4:	4b19      	ldr	r3, [pc, #100]	; (8008d5c <HAL_RCC_ClockConfig+0x1c4>)
 8008cf6:	685b      	ldr	r3, [r3, #4]
 8008cf8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	68db      	ldr	r3, [r3, #12]
 8008d00:	4916      	ldr	r1, [pc, #88]	; (8008d5c <HAL_RCC_ClockConfig+0x1c4>)
 8008d02:	4313      	orrs	r3, r2
 8008d04:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f003 0308 	and.w	r3, r3, #8
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d009      	beq.n	8008d26 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008d12:	4b12      	ldr	r3, [pc, #72]	; (8008d5c <HAL_RCC_ClockConfig+0x1c4>)
 8008d14:	685b      	ldr	r3, [r3, #4]
 8008d16:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	691b      	ldr	r3, [r3, #16]
 8008d1e:	00db      	lsls	r3, r3, #3
 8008d20:	490e      	ldr	r1, [pc, #56]	; (8008d5c <HAL_RCC_ClockConfig+0x1c4>)
 8008d22:	4313      	orrs	r3, r2
 8008d24:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008d26:	f000 f821 	bl	8008d6c <HAL_RCC_GetSysClockFreq>
 8008d2a:	4601      	mov	r1, r0
 8008d2c:	4b0b      	ldr	r3, [pc, #44]	; (8008d5c <HAL_RCC_ClockConfig+0x1c4>)
 8008d2e:	685b      	ldr	r3, [r3, #4]
 8008d30:	091b      	lsrs	r3, r3, #4
 8008d32:	f003 030f 	and.w	r3, r3, #15
 8008d36:	4a0a      	ldr	r2, [pc, #40]	; (8008d60 <HAL_RCC_ClockConfig+0x1c8>)
 8008d38:	5cd3      	ldrb	r3, [r2, r3]
 8008d3a:	fa21 f303 	lsr.w	r3, r1, r3
 8008d3e:	4a09      	ldr	r2, [pc, #36]	; (8008d64 <HAL_RCC_ClockConfig+0x1cc>)
 8008d40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008d42:	4b09      	ldr	r3, [pc, #36]	; (8008d68 <HAL_RCC_ClockConfig+0x1d0>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	4618      	mov	r0, r3
 8008d48:	f7ff f88e 	bl	8007e68 <HAL_InitTick>

  return HAL_OK;
 8008d4c:	2300      	movs	r3, #0
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	3710      	adds	r7, #16
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}
 8008d56:	bf00      	nop
 8008d58:	40022000 	.word	0x40022000
 8008d5c:	40021000 	.word	0x40021000
 8008d60:	0800c390 	.word	0x0800c390
 8008d64:	20000028 	.word	0x20000028
 8008d68:	2000002c 	.word	0x2000002c

08008d6c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008d6c:	b490      	push	{r4, r7}
 8008d6e:	b08a      	sub	sp, #40	; 0x28
 8008d70:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8008d72:	4b2a      	ldr	r3, [pc, #168]	; (8008e1c <HAL_RCC_GetSysClockFreq+0xb0>)
 8008d74:	1d3c      	adds	r4, r7, #4
 8008d76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008d78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8008d7c:	4b28      	ldr	r3, [pc, #160]	; (8008e20 <HAL_RCC_GetSysClockFreq+0xb4>)
 8008d7e:	881b      	ldrh	r3, [r3, #0]
 8008d80:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8008d82:	2300      	movs	r3, #0
 8008d84:	61fb      	str	r3, [r7, #28]
 8008d86:	2300      	movs	r3, #0
 8008d88:	61bb      	str	r3, [r7, #24]
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	627b      	str	r3, [r7, #36]	; 0x24
 8008d8e:	2300      	movs	r3, #0
 8008d90:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8008d92:	2300      	movs	r3, #0
 8008d94:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8008d96:	4b23      	ldr	r3, [pc, #140]	; (8008e24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008d98:	685b      	ldr	r3, [r3, #4]
 8008d9a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008d9c:	69fb      	ldr	r3, [r7, #28]
 8008d9e:	f003 030c 	and.w	r3, r3, #12
 8008da2:	2b04      	cmp	r3, #4
 8008da4:	d002      	beq.n	8008dac <HAL_RCC_GetSysClockFreq+0x40>
 8008da6:	2b08      	cmp	r3, #8
 8008da8:	d003      	beq.n	8008db2 <HAL_RCC_GetSysClockFreq+0x46>
 8008daa:	e02d      	b.n	8008e08 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008dac:	4b1e      	ldr	r3, [pc, #120]	; (8008e28 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008dae:	623b      	str	r3, [r7, #32]
      break;
 8008db0:	e02d      	b.n	8008e0e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008db2:	69fb      	ldr	r3, [r7, #28]
 8008db4:	0c9b      	lsrs	r3, r3, #18
 8008db6:	f003 030f 	and.w	r3, r3, #15
 8008dba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008dbe:	4413      	add	r3, r2
 8008dc0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8008dc4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008dc6:	69fb      	ldr	r3, [r7, #28]
 8008dc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d013      	beq.n	8008df8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008dd0:	4b14      	ldr	r3, [pc, #80]	; (8008e24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008dd2:	685b      	ldr	r3, [r3, #4]
 8008dd4:	0c5b      	lsrs	r3, r3, #17
 8008dd6:	f003 0301 	and.w	r3, r3, #1
 8008dda:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008dde:	4413      	add	r3, r2
 8008de0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8008de4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8008de6:	697b      	ldr	r3, [r7, #20]
 8008de8:	4a0f      	ldr	r2, [pc, #60]	; (8008e28 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008dea:	fb02 f203 	mul.w	r2, r2, r3
 8008dee:	69bb      	ldr	r3, [r7, #24]
 8008df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008df4:	627b      	str	r3, [r7, #36]	; 0x24
 8008df6:	e004      	b.n	8008e02 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008df8:	697b      	ldr	r3, [r7, #20]
 8008dfa:	4a0c      	ldr	r2, [pc, #48]	; (8008e2c <HAL_RCC_GetSysClockFreq+0xc0>)
 8008dfc:	fb02 f303 	mul.w	r3, r2, r3
 8008e00:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8008e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e04:	623b      	str	r3, [r7, #32]
      break;
 8008e06:	e002      	b.n	8008e0e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008e08:	4b07      	ldr	r3, [pc, #28]	; (8008e28 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008e0a:	623b      	str	r3, [r7, #32]
      break;
 8008e0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008e0e:	6a3b      	ldr	r3, [r7, #32]
}
 8008e10:	4618      	mov	r0, r3
 8008e12:	3728      	adds	r7, #40	; 0x28
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bc90      	pop	{r4, r7}
 8008e18:	4770      	bx	lr
 8008e1a:	bf00      	nop
 8008e1c:	0800abac 	.word	0x0800abac
 8008e20:	0800abbc 	.word	0x0800abbc
 8008e24:	40021000 	.word	0x40021000
 8008e28:	007a1200 	.word	0x007a1200
 8008e2c:	003d0900 	.word	0x003d0900

08008e30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008e30:	b480      	push	{r7}
 8008e32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008e34:	4b02      	ldr	r3, [pc, #8]	; (8008e40 <HAL_RCC_GetHCLKFreq+0x10>)
 8008e36:	681b      	ldr	r3, [r3, #0]
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bc80      	pop	{r7}
 8008e3e:	4770      	bx	lr
 8008e40:	20000028 	.word	0x20000028

08008e44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008e48:	f7ff fff2 	bl	8008e30 <HAL_RCC_GetHCLKFreq>
 8008e4c:	4601      	mov	r1, r0
 8008e4e:	4b05      	ldr	r3, [pc, #20]	; (8008e64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008e50:	685b      	ldr	r3, [r3, #4]
 8008e52:	0a1b      	lsrs	r3, r3, #8
 8008e54:	f003 0307 	and.w	r3, r3, #7
 8008e58:	4a03      	ldr	r2, [pc, #12]	; (8008e68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008e5a:	5cd3      	ldrb	r3, [r2, r3]
 8008e5c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	bd80      	pop	{r7, pc}
 8008e64:	40021000 	.word	0x40021000
 8008e68:	0800c3a0 	.word	0x0800c3a0

08008e6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008e70:	f7ff ffde 	bl	8008e30 <HAL_RCC_GetHCLKFreq>
 8008e74:	4601      	mov	r1, r0
 8008e76:	4b05      	ldr	r3, [pc, #20]	; (8008e8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008e78:	685b      	ldr	r3, [r3, #4]
 8008e7a:	0adb      	lsrs	r3, r3, #11
 8008e7c:	f003 0307 	and.w	r3, r3, #7
 8008e80:	4a03      	ldr	r2, [pc, #12]	; (8008e90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008e82:	5cd3      	ldrb	r3, [r2, r3]
 8008e84:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	bd80      	pop	{r7, pc}
 8008e8c:	40021000 	.word	0x40021000
 8008e90:	0800c3a0 	.word	0x0800c3a0

08008e94 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8008e94:	b480      	push	{r7}
 8008e96:	b085      	sub	sp, #20
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008e9c:	4b0a      	ldr	r3, [pc, #40]	; (8008ec8 <RCC_Delay+0x34>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	4a0a      	ldr	r2, [pc, #40]	; (8008ecc <RCC_Delay+0x38>)
 8008ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ea6:	0a5b      	lsrs	r3, r3, #9
 8008ea8:	687a      	ldr	r2, [r7, #4]
 8008eaa:	fb02 f303 	mul.w	r3, r2, r3
 8008eae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8008eb0:	bf00      	nop
  }
  while (Delay --);
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	1e5a      	subs	r2, r3, #1
 8008eb6:	60fa      	str	r2, [r7, #12]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d1f9      	bne.n	8008eb0 <RCC_Delay+0x1c>
}
 8008ebc:	bf00      	nop
 8008ebe:	3714      	adds	r7, #20
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bc80      	pop	{r7}
 8008ec4:	4770      	bx	lr
 8008ec6:	bf00      	nop
 8008ec8:	20000028 	.word	0x20000028
 8008ecc:	10624dd3 	.word	0x10624dd3

08008ed0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b082      	sub	sp, #8
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d101      	bne.n	8008ee2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008ede:	2301      	movs	r3, #1
 8008ee0:	e076      	b.n	8008fd0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d108      	bne.n	8008efc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	685b      	ldr	r3, [r3, #4]
 8008eee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008ef2:	d009      	beq.n	8008f08 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	61da      	str	r2, [r3, #28]
 8008efa:	e005      	b.n	8008f08 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2200      	movs	r2, #0
 8008f00:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2200      	movs	r2, #0
 8008f06:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008f14:	b2db      	uxtb	r3, r3
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d106      	bne.n	8008f28 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f7fe fd92 	bl	8007a4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2202      	movs	r2, #2
 8008f2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	681a      	ldr	r2, [r3, #0]
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f3e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	685b      	ldr	r3, [r3, #4]
 8008f44:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	689b      	ldr	r3, [r3, #8]
 8008f4c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008f50:	431a      	orrs	r2, r3
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	68db      	ldr	r3, [r3, #12]
 8008f56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f5a:	431a      	orrs	r2, r3
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	691b      	ldr	r3, [r3, #16]
 8008f60:	f003 0302 	and.w	r3, r3, #2
 8008f64:	431a      	orrs	r2, r3
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	695b      	ldr	r3, [r3, #20]
 8008f6a:	f003 0301 	and.w	r3, r3, #1
 8008f6e:	431a      	orrs	r2, r3
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	699b      	ldr	r3, [r3, #24]
 8008f74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008f78:	431a      	orrs	r2, r3
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	69db      	ldr	r3, [r3, #28]
 8008f7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008f82:	431a      	orrs	r2, r3
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6a1b      	ldr	r3, [r3, #32]
 8008f88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f8c:	ea42 0103 	orr.w	r1, r2, r3
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f94:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	430a      	orrs	r2, r1
 8008f9e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	699b      	ldr	r3, [r3, #24]
 8008fa4:	0c1a      	lsrs	r2, r3, #16
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f002 0204 	and.w	r2, r2, #4
 8008fae:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	69da      	ldr	r2, [r3, #28]
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008fbe:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2201      	movs	r2, #1
 8008fca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008fce:	2300      	movs	r3, #0
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	3708      	adds	r7, #8
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}

08008fd8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b08c      	sub	sp, #48	; 0x30
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	60f8      	str	r0, [r7, #12]
 8008fe0:	60b9      	str	r1, [r7, #8]
 8008fe2:	607a      	str	r2, [r7, #4]
 8008fe4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008fe6:	2301      	movs	r3, #1
 8008fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008fea:	2300      	movs	r3, #0
 8008fec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008ff6:	2b01      	cmp	r3, #1
 8008ff8:	d101      	bne.n	8008ffe <HAL_SPI_TransmitReceive+0x26>
 8008ffa:	2302      	movs	r3, #2
 8008ffc:	e18a      	b.n	8009314 <HAL_SPI_TransmitReceive+0x33c>
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	2201      	movs	r2, #1
 8009002:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009006:	f7fe ff71 	bl	8007eec <HAL_GetTick>
 800900a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009012:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	685b      	ldr	r3, [r3, #4]
 800901a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800901c:	887b      	ldrh	r3, [r7, #2]
 800901e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009020:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009024:	2b01      	cmp	r3, #1
 8009026:	d00f      	beq.n	8009048 <HAL_SPI_TransmitReceive+0x70>
 8009028:	69fb      	ldr	r3, [r7, #28]
 800902a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800902e:	d107      	bne.n	8009040 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	689b      	ldr	r3, [r3, #8]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d103      	bne.n	8009040 <HAL_SPI_TransmitReceive+0x68>
 8009038:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800903c:	2b04      	cmp	r3, #4
 800903e:	d003      	beq.n	8009048 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8009040:	2302      	movs	r3, #2
 8009042:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009046:	e15b      	b.n	8009300 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d005      	beq.n	800905a <HAL_SPI_TransmitReceive+0x82>
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d002      	beq.n	800905a <HAL_SPI_TransmitReceive+0x82>
 8009054:	887b      	ldrh	r3, [r7, #2]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d103      	bne.n	8009062 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800905a:	2301      	movs	r3, #1
 800905c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009060:	e14e      	b.n	8009300 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009068:	b2db      	uxtb	r3, r3
 800906a:	2b04      	cmp	r3, #4
 800906c:	d003      	beq.n	8009076 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	2205      	movs	r2, #5
 8009072:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	2200      	movs	r2, #0
 800907a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	687a      	ldr	r2, [r7, #4]
 8009080:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	887a      	ldrh	r2, [r7, #2]
 8009086:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	887a      	ldrh	r2, [r7, #2]
 800908c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	68ba      	ldr	r2, [r7, #8]
 8009092:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	887a      	ldrh	r2, [r7, #2]
 8009098:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	887a      	ldrh	r2, [r7, #2]
 800909e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	2200      	movs	r2, #0
 80090a4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	2200      	movs	r2, #0
 80090aa:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090b6:	2b40      	cmp	r3, #64	; 0x40
 80090b8:	d007      	beq.n	80090ca <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	681a      	ldr	r2, [r3, #0]
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80090c8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	68db      	ldr	r3, [r3, #12]
 80090ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80090d2:	d178      	bne.n	80091c6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	685b      	ldr	r3, [r3, #4]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d002      	beq.n	80090e2 <HAL_SPI_TransmitReceive+0x10a>
 80090dc:	8b7b      	ldrh	r3, [r7, #26]
 80090de:	2b01      	cmp	r3, #1
 80090e0:	d166      	bne.n	80091b0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090e6:	881a      	ldrh	r2, [r3, #0]
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090f2:	1c9a      	adds	r2, r3, #2
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80090fc:	b29b      	uxth	r3, r3
 80090fe:	3b01      	subs	r3, #1
 8009100:	b29a      	uxth	r2, r3
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009106:	e053      	b.n	80091b0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	689b      	ldr	r3, [r3, #8]
 800910e:	f003 0302 	and.w	r3, r3, #2
 8009112:	2b02      	cmp	r3, #2
 8009114:	d11b      	bne.n	800914e <HAL_SPI_TransmitReceive+0x176>
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800911a:	b29b      	uxth	r3, r3
 800911c:	2b00      	cmp	r3, #0
 800911e:	d016      	beq.n	800914e <HAL_SPI_TransmitReceive+0x176>
 8009120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009122:	2b01      	cmp	r3, #1
 8009124:	d113      	bne.n	800914e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800912a:	881a      	ldrh	r2, [r3, #0]
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009136:	1c9a      	adds	r2, r3, #2
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009140:	b29b      	uxth	r3, r3
 8009142:	3b01      	subs	r3, #1
 8009144:	b29a      	uxth	r2, r3
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800914a:	2300      	movs	r3, #0
 800914c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	689b      	ldr	r3, [r3, #8]
 8009154:	f003 0301 	and.w	r3, r3, #1
 8009158:	2b01      	cmp	r3, #1
 800915a:	d119      	bne.n	8009190 <HAL_SPI_TransmitReceive+0x1b8>
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009160:	b29b      	uxth	r3, r3
 8009162:	2b00      	cmp	r3, #0
 8009164:	d014      	beq.n	8009190 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	68da      	ldr	r2, [r3, #12]
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009170:	b292      	uxth	r2, r2
 8009172:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009178:	1c9a      	adds	r2, r3, #2
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009182:	b29b      	uxth	r3, r3
 8009184:	3b01      	subs	r3, #1
 8009186:	b29a      	uxth	r2, r3
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800918c:	2301      	movs	r3, #1
 800918e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009190:	f7fe feac 	bl	8007eec <HAL_GetTick>
 8009194:	4602      	mov	r2, r0
 8009196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009198:	1ad3      	subs	r3, r2, r3
 800919a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800919c:	429a      	cmp	r2, r3
 800919e:	d807      	bhi.n	80091b0 <HAL_SPI_TransmitReceive+0x1d8>
 80091a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091a6:	d003      	beq.n	80091b0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80091a8:	2303      	movs	r3, #3
 80091aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80091ae:	e0a7      	b.n	8009300 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80091b4:	b29b      	uxth	r3, r3
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d1a6      	bne.n	8009108 <HAL_SPI_TransmitReceive+0x130>
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80091be:	b29b      	uxth	r3, r3
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d1a1      	bne.n	8009108 <HAL_SPI_TransmitReceive+0x130>
 80091c4:	e07c      	b.n	80092c0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	685b      	ldr	r3, [r3, #4]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d002      	beq.n	80091d4 <HAL_SPI_TransmitReceive+0x1fc>
 80091ce:	8b7b      	ldrh	r3, [r7, #26]
 80091d0:	2b01      	cmp	r3, #1
 80091d2:	d16b      	bne.n	80092ac <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	330c      	adds	r3, #12
 80091de:	7812      	ldrb	r2, [r2, #0]
 80091e0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091e6:	1c5a      	adds	r2, r3, #1
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80091f0:	b29b      	uxth	r3, r3
 80091f2:	3b01      	subs	r3, #1
 80091f4:	b29a      	uxth	r2, r3
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80091fa:	e057      	b.n	80092ac <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	689b      	ldr	r3, [r3, #8]
 8009202:	f003 0302 	and.w	r3, r3, #2
 8009206:	2b02      	cmp	r3, #2
 8009208:	d11c      	bne.n	8009244 <HAL_SPI_TransmitReceive+0x26c>
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800920e:	b29b      	uxth	r3, r3
 8009210:	2b00      	cmp	r3, #0
 8009212:	d017      	beq.n	8009244 <HAL_SPI_TransmitReceive+0x26c>
 8009214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009216:	2b01      	cmp	r3, #1
 8009218:	d114      	bne.n	8009244 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	330c      	adds	r3, #12
 8009224:	7812      	ldrb	r2, [r2, #0]
 8009226:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800922c:	1c5a      	adds	r2, r3, #1
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009236:	b29b      	uxth	r3, r3
 8009238:	3b01      	subs	r3, #1
 800923a:	b29a      	uxth	r2, r3
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009240:	2300      	movs	r3, #0
 8009242:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	689b      	ldr	r3, [r3, #8]
 800924a:	f003 0301 	and.w	r3, r3, #1
 800924e:	2b01      	cmp	r3, #1
 8009250:	d119      	bne.n	8009286 <HAL_SPI_TransmitReceive+0x2ae>
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009256:	b29b      	uxth	r3, r3
 8009258:	2b00      	cmp	r3, #0
 800925a:	d014      	beq.n	8009286 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	68da      	ldr	r2, [r3, #12]
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009266:	b2d2      	uxtb	r2, r2
 8009268:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800926e:	1c5a      	adds	r2, r3, #1
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009278:	b29b      	uxth	r3, r3
 800927a:	3b01      	subs	r3, #1
 800927c:	b29a      	uxth	r2, r3
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009282:	2301      	movs	r3, #1
 8009284:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009286:	f7fe fe31 	bl	8007eec <HAL_GetTick>
 800928a:	4602      	mov	r2, r0
 800928c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800928e:	1ad3      	subs	r3, r2, r3
 8009290:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009292:	429a      	cmp	r2, r3
 8009294:	d803      	bhi.n	800929e <HAL_SPI_TransmitReceive+0x2c6>
 8009296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800929c:	d102      	bne.n	80092a4 <HAL_SPI_TransmitReceive+0x2cc>
 800929e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d103      	bne.n	80092ac <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80092a4:	2303      	movs	r3, #3
 80092a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80092aa:	e029      	b.n	8009300 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80092b0:	b29b      	uxth	r3, r3
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d1a2      	bne.n	80091fc <HAL_SPI_TransmitReceive+0x224>
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80092ba:	b29b      	uxth	r3, r3
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d19d      	bne.n	80091fc <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80092c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092c2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80092c4:	68f8      	ldr	r0, [r7, #12]
 80092c6:	f000 f8b1 	bl	800942c <SPI_EndRxTxTransaction>
 80092ca:	4603      	mov	r3, r0
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d006      	beq.n	80092de <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80092d0:	2301      	movs	r3, #1
 80092d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	2220      	movs	r2, #32
 80092da:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80092dc:	e010      	b.n	8009300 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	689b      	ldr	r3, [r3, #8]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d10b      	bne.n	80092fe <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80092e6:	2300      	movs	r3, #0
 80092e8:	617b      	str	r3, [r7, #20]
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	68db      	ldr	r3, [r3, #12]
 80092f0:	617b      	str	r3, [r7, #20]
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	689b      	ldr	r3, [r3, #8]
 80092f8:	617b      	str	r3, [r7, #20]
 80092fa:	697b      	ldr	r3, [r7, #20]
 80092fc:	e000      	b.n	8009300 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80092fe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	2201      	movs	r2, #1
 8009304:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	2200      	movs	r2, #0
 800930c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009310:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009314:	4618      	mov	r0, r3
 8009316:	3730      	adds	r7, #48	; 0x30
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}

0800931c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b088      	sub	sp, #32
 8009320:	af00      	add	r7, sp, #0
 8009322:	60f8      	str	r0, [r7, #12]
 8009324:	60b9      	str	r1, [r7, #8]
 8009326:	603b      	str	r3, [r7, #0]
 8009328:	4613      	mov	r3, r2
 800932a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800932c:	f7fe fdde 	bl	8007eec <HAL_GetTick>
 8009330:	4602      	mov	r2, r0
 8009332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009334:	1a9b      	subs	r3, r3, r2
 8009336:	683a      	ldr	r2, [r7, #0]
 8009338:	4413      	add	r3, r2
 800933a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800933c:	f7fe fdd6 	bl	8007eec <HAL_GetTick>
 8009340:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009342:	4b39      	ldr	r3, [pc, #228]	; (8009428 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	015b      	lsls	r3, r3, #5
 8009348:	0d1b      	lsrs	r3, r3, #20
 800934a:	69fa      	ldr	r2, [r7, #28]
 800934c:	fb02 f303 	mul.w	r3, r2, r3
 8009350:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009352:	e054      	b.n	80093fe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800935a:	d050      	beq.n	80093fe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800935c:	f7fe fdc6 	bl	8007eec <HAL_GetTick>
 8009360:	4602      	mov	r2, r0
 8009362:	69bb      	ldr	r3, [r7, #24]
 8009364:	1ad3      	subs	r3, r2, r3
 8009366:	69fa      	ldr	r2, [r7, #28]
 8009368:	429a      	cmp	r2, r3
 800936a:	d902      	bls.n	8009372 <SPI_WaitFlagStateUntilTimeout+0x56>
 800936c:	69fb      	ldr	r3, [r7, #28]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d13d      	bne.n	80093ee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	685a      	ldr	r2, [r3, #4]
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009380:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	685b      	ldr	r3, [r3, #4]
 8009386:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800938a:	d111      	bne.n	80093b0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	689b      	ldr	r3, [r3, #8]
 8009390:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009394:	d004      	beq.n	80093a0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	689b      	ldr	r3, [r3, #8]
 800939a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800939e:	d107      	bne.n	80093b0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	681a      	ldr	r2, [r3, #0]
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80093ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80093b8:	d10f      	bne.n	80093da <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	681a      	ldr	r2, [r3, #0]
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80093c8:	601a      	str	r2, [r3, #0]
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	681a      	ldr	r2, [r3, #0]
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80093d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	2201      	movs	r2, #1
 80093de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	2200      	movs	r2, #0
 80093e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80093ea:	2303      	movs	r3, #3
 80093ec:	e017      	b.n	800941e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80093ee:	697b      	ldr	r3, [r7, #20]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d101      	bne.n	80093f8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80093f4:	2300      	movs	r3, #0
 80093f6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80093f8:	697b      	ldr	r3, [r7, #20]
 80093fa:	3b01      	subs	r3, #1
 80093fc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	689a      	ldr	r2, [r3, #8]
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	4013      	ands	r3, r2
 8009408:	68ba      	ldr	r2, [r7, #8]
 800940a:	429a      	cmp	r2, r3
 800940c:	bf0c      	ite	eq
 800940e:	2301      	moveq	r3, #1
 8009410:	2300      	movne	r3, #0
 8009412:	b2db      	uxtb	r3, r3
 8009414:	461a      	mov	r2, r3
 8009416:	79fb      	ldrb	r3, [r7, #7]
 8009418:	429a      	cmp	r2, r3
 800941a:	d19b      	bne.n	8009354 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800941c:	2300      	movs	r3, #0
}
 800941e:	4618      	mov	r0, r3
 8009420:	3720      	adds	r7, #32
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}
 8009426:	bf00      	nop
 8009428:	20000028 	.word	0x20000028

0800942c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b086      	sub	sp, #24
 8009430:	af02      	add	r7, sp, #8
 8009432:	60f8      	str	r0, [r7, #12]
 8009434:	60b9      	str	r1, [r7, #8]
 8009436:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	9300      	str	r3, [sp, #0]
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	2200      	movs	r2, #0
 8009440:	2180      	movs	r1, #128	; 0x80
 8009442:	68f8      	ldr	r0, [r7, #12]
 8009444:	f7ff ff6a 	bl	800931c <SPI_WaitFlagStateUntilTimeout>
 8009448:	4603      	mov	r3, r0
 800944a:	2b00      	cmp	r3, #0
 800944c:	d007      	beq.n	800945e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009452:	f043 0220 	orr.w	r2, r3, #32
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800945a:	2303      	movs	r3, #3
 800945c:	e000      	b.n	8009460 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800945e:	2300      	movs	r3, #0
}
 8009460:	4618      	mov	r0, r3
 8009462:	3710      	adds	r7, #16
 8009464:	46bd      	mov	sp, r7
 8009466:	bd80      	pop	{r7, pc}

08009468 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b082      	sub	sp, #8
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d101      	bne.n	800947a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009476:	2301      	movs	r3, #1
 8009478:	e03f      	b.n	80094fa <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009480:	b2db      	uxtb	r3, r3
 8009482:	2b00      	cmp	r3, #0
 8009484:	d106      	bne.n	8009494 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2200      	movs	r2, #0
 800948a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f7fe fb84 	bl	8007b9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2224      	movs	r2, #36	; 0x24
 8009498:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	68da      	ldr	r2, [r3, #12]
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80094aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	f000 fb83 	bl	8009bb8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	691a      	ldr	r2, [r3, #16]
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80094c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	695a      	ldr	r2, [r3, #20]
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80094d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	68da      	ldr	r2, [r3, #12]
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80094e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2200      	movs	r2, #0
 80094e6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2220      	movs	r2, #32
 80094ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2220      	movs	r2, #32
 80094f4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80094f8:	2300      	movs	r3, #0
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	3708      	adds	r7, #8
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}

08009502 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009502:	b580      	push	{r7, lr}
 8009504:	b08a      	sub	sp, #40	; 0x28
 8009506:	af02      	add	r7, sp, #8
 8009508:	60f8      	str	r0, [r7, #12]
 800950a:	60b9      	str	r1, [r7, #8]
 800950c:	603b      	str	r3, [r7, #0]
 800950e:	4613      	mov	r3, r2
 8009510:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009512:	2300      	movs	r3, #0
 8009514:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800951c:	b2db      	uxtb	r3, r3
 800951e:	2b20      	cmp	r3, #32
 8009520:	d17c      	bne.n	800961c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d002      	beq.n	800952e <HAL_UART_Transmit+0x2c>
 8009528:	88fb      	ldrh	r3, [r7, #6]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d101      	bne.n	8009532 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800952e:	2301      	movs	r3, #1
 8009530:	e075      	b.n	800961e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009538:	2b01      	cmp	r3, #1
 800953a:	d101      	bne.n	8009540 <HAL_UART_Transmit+0x3e>
 800953c:	2302      	movs	r3, #2
 800953e:	e06e      	b.n	800961e <HAL_UART_Transmit+0x11c>
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	2201      	movs	r2, #1
 8009544:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	2200      	movs	r2, #0
 800954c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	2221      	movs	r2, #33	; 0x21
 8009552:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8009556:	f7fe fcc9 	bl	8007eec <HAL_GetTick>
 800955a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	88fa      	ldrh	r2, [r7, #6]
 8009560:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	88fa      	ldrh	r2, [r7, #6]
 8009566:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	689b      	ldr	r3, [r3, #8]
 800956c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009570:	d108      	bne.n	8009584 <HAL_UART_Transmit+0x82>
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	691b      	ldr	r3, [r3, #16]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d104      	bne.n	8009584 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800957a:	2300      	movs	r3, #0
 800957c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800957e:	68bb      	ldr	r3, [r7, #8]
 8009580:	61bb      	str	r3, [r7, #24]
 8009582:	e003      	b.n	800958c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009588:	2300      	movs	r3, #0
 800958a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	2200      	movs	r2, #0
 8009590:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8009594:	e02a      	b.n	80095ec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	9300      	str	r3, [sp, #0]
 800959a:	697b      	ldr	r3, [r7, #20]
 800959c:	2200      	movs	r2, #0
 800959e:	2180      	movs	r1, #128	; 0x80
 80095a0:	68f8      	ldr	r0, [r7, #12]
 80095a2:	f000 f9a7 	bl	80098f4 <UART_WaitOnFlagUntilTimeout>
 80095a6:	4603      	mov	r3, r0
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d001      	beq.n	80095b0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80095ac:	2303      	movs	r3, #3
 80095ae:	e036      	b.n	800961e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80095b0:	69fb      	ldr	r3, [r7, #28]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d10b      	bne.n	80095ce <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80095b6:	69bb      	ldr	r3, [r7, #24]
 80095b8:	881b      	ldrh	r3, [r3, #0]
 80095ba:	461a      	mov	r2, r3
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80095c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80095c6:	69bb      	ldr	r3, [r7, #24]
 80095c8:	3302      	adds	r3, #2
 80095ca:	61bb      	str	r3, [r7, #24]
 80095cc:	e007      	b.n	80095de <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80095ce:	69fb      	ldr	r3, [r7, #28]
 80095d0:	781a      	ldrb	r2, [r3, #0]
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80095d8:	69fb      	ldr	r3, [r7, #28]
 80095da:	3301      	adds	r3, #1
 80095dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80095e2:	b29b      	uxth	r3, r3
 80095e4:	3b01      	subs	r3, #1
 80095e6:	b29a      	uxth	r2, r3
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80095f0:	b29b      	uxth	r3, r3
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d1cf      	bne.n	8009596 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	9300      	str	r3, [sp, #0]
 80095fa:	697b      	ldr	r3, [r7, #20]
 80095fc:	2200      	movs	r2, #0
 80095fe:	2140      	movs	r1, #64	; 0x40
 8009600:	68f8      	ldr	r0, [r7, #12]
 8009602:	f000 f977 	bl	80098f4 <UART_WaitOnFlagUntilTimeout>
 8009606:	4603      	mov	r3, r0
 8009608:	2b00      	cmp	r3, #0
 800960a:	d001      	beq.n	8009610 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800960c:	2303      	movs	r3, #3
 800960e:	e006      	b.n	800961e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	2220      	movs	r2, #32
 8009614:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8009618:	2300      	movs	r3, #0
 800961a:	e000      	b.n	800961e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800961c:	2302      	movs	r3, #2
  }
}
 800961e:	4618      	mov	r0, r3
 8009620:	3720      	adds	r7, #32
 8009622:	46bd      	mov	sp, r7
 8009624:	bd80      	pop	{r7, pc}

08009626 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009626:	b480      	push	{r7}
 8009628:	b085      	sub	sp, #20
 800962a:	af00      	add	r7, sp, #0
 800962c:	60f8      	str	r0, [r7, #12]
 800962e:	60b9      	str	r1, [r7, #8]
 8009630:	4613      	mov	r3, r2
 8009632:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800963a:	b2db      	uxtb	r3, r3
 800963c:	2b20      	cmp	r3, #32
 800963e:	d140      	bne.n	80096c2 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d002      	beq.n	800964c <HAL_UART_Receive_IT+0x26>
 8009646:	88fb      	ldrh	r3, [r7, #6]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d101      	bne.n	8009650 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800964c:	2301      	movs	r3, #1
 800964e:	e039      	b.n	80096c4 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009656:	2b01      	cmp	r3, #1
 8009658:	d101      	bne.n	800965e <HAL_UART_Receive_IT+0x38>
 800965a:	2302      	movs	r3, #2
 800965c:	e032      	b.n	80096c4 <HAL_UART_Receive_IT+0x9e>
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	2201      	movs	r2, #1
 8009662:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	68ba      	ldr	r2, [r7, #8]
 800966a:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	88fa      	ldrh	r2, [r7, #6]
 8009670:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	88fa      	ldrh	r2, [r7, #6]
 8009676:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	2200      	movs	r2, #0
 800967c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	2222      	movs	r2, #34	; 0x22
 8009682:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	2200      	movs	r2, #0
 800968a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	68da      	ldr	r2, [r3, #12]
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800969c:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	695a      	ldr	r2, [r3, #20]
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f042 0201 	orr.w	r2, r2, #1
 80096ac:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	68da      	ldr	r2, [r3, #12]
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f042 0220 	orr.w	r2, r2, #32
 80096bc:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80096be:	2300      	movs	r3, #0
 80096c0:	e000      	b.n	80096c4 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80096c2:	2302      	movs	r3, #2
  }
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	3714      	adds	r7, #20
 80096c8:	46bd      	mov	sp, r7
 80096ca:	bc80      	pop	{r7}
 80096cc:	4770      	bx	lr
	...

080096d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b088      	sub	sp, #32
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	68db      	ldr	r3, [r3, #12]
 80096e6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	695b      	ldr	r3, [r3, #20]
 80096ee:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80096f0:	2300      	movs	r3, #0
 80096f2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80096f4:	2300      	movs	r3, #0
 80096f6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80096f8:	69fb      	ldr	r3, [r7, #28]
 80096fa:	f003 030f 	and.w	r3, r3, #15
 80096fe:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8009700:	693b      	ldr	r3, [r7, #16]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d10d      	bne.n	8009722 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009706:	69fb      	ldr	r3, [r7, #28]
 8009708:	f003 0320 	and.w	r3, r3, #32
 800970c:	2b00      	cmp	r3, #0
 800970e:	d008      	beq.n	8009722 <HAL_UART_IRQHandler+0x52>
 8009710:	69bb      	ldr	r3, [r7, #24]
 8009712:	f003 0320 	and.w	r3, r3, #32
 8009716:	2b00      	cmp	r3, #0
 8009718:	d003      	beq.n	8009722 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800971a:	6878      	ldr	r0, [r7, #4]
 800971c:	f000 f9cc 	bl	8009ab8 <UART_Receive_IT>
      return;
 8009720:	e0d1      	b.n	80098c6 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009722:	693b      	ldr	r3, [r7, #16]
 8009724:	2b00      	cmp	r3, #0
 8009726:	f000 80b0 	beq.w	800988a <HAL_UART_IRQHandler+0x1ba>
 800972a:	697b      	ldr	r3, [r7, #20]
 800972c:	f003 0301 	and.w	r3, r3, #1
 8009730:	2b00      	cmp	r3, #0
 8009732:	d105      	bne.n	8009740 <HAL_UART_IRQHandler+0x70>
 8009734:	69bb      	ldr	r3, [r7, #24]
 8009736:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800973a:	2b00      	cmp	r3, #0
 800973c:	f000 80a5 	beq.w	800988a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009740:	69fb      	ldr	r3, [r7, #28]
 8009742:	f003 0301 	and.w	r3, r3, #1
 8009746:	2b00      	cmp	r3, #0
 8009748:	d00a      	beq.n	8009760 <HAL_UART_IRQHandler+0x90>
 800974a:	69bb      	ldr	r3, [r7, #24]
 800974c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009750:	2b00      	cmp	r3, #0
 8009752:	d005      	beq.n	8009760 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009758:	f043 0201 	orr.w	r2, r3, #1
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009760:	69fb      	ldr	r3, [r7, #28]
 8009762:	f003 0304 	and.w	r3, r3, #4
 8009766:	2b00      	cmp	r3, #0
 8009768:	d00a      	beq.n	8009780 <HAL_UART_IRQHandler+0xb0>
 800976a:	697b      	ldr	r3, [r7, #20]
 800976c:	f003 0301 	and.w	r3, r3, #1
 8009770:	2b00      	cmp	r3, #0
 8009772:	d005      	beq.n	8009780 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009778:	f043 0202 	orr.w	r2, r3, #2
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009780:	69fb      	ldr	r3, [r7, #28]
 8009782:	f003 0302 	and.w	r3, r3, #2
 8009786:	2b00      	cmp	r3, #0
 8009788:	d00a      	beq.n	80097a0 <HAL_UART_IRQHandler+0xd0>
 800978a:	697b      	ldr	r3, [r7, #20]
 800978c:	f003 0301 	and.w	r3, r3, #1
 8009790:	2b00      	cmp	r3, #0
 8009792:	d005      	beq.n	80097a0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009798:	f043 0204 	orr.w	r2, r3, #4
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80097a0:	69fb      	ldr	r3, [r7, #28]
 80097a2:	f003 0308 	and.w	r3, r3, #8
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d00f      	beq.n	80097ca <HAL_UART_IRQHandler+0xfa>
 80097aa:	69bb      	ldr	r3, [r7, #24]
 80097ac:	f003 0320 	and.w	r3, r3, #32
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d104      	bne.n	80097be <HAL_UART_IRQHandler+0xee>
 80097b4:	697b      	ldr	r3, [r7, #20]
 80097b6:	f003 0301 	and.w	r3, r3, #1
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d005      	beq.n	80097ca <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097c2:	f043 0208 	orr.w	r2, r3, #8
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d078      	beq.n	80098c4 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80097d2:	69fb      	ldr	r3, [r7, #28]
 80097d4:	f003 0320 	and.w	r3, r3, #32
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d007      	beq.n	80097ec <HAL_UART_IRQHandler+0x11c>
 80097dc:	69bb      	ldr	r3, [r7, #24]
 80097de:	f003 0320 	and.w	r3, r3, #32
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d002      	beq.n	80097ec <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f000 f966 	bl	8009ab8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	695b      	ldr	r3, [r3, #20]
 80097f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	bf14      	ite	ne
 80097fa:	2301      	movne	r3, #1
 80097fc:	2300      	moveq	r3, #0
 80097fe:	b2db      	uxtb	r3, r3
 8009800:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009806:	f003 0308 	and.w	r3, r3, #8
 800980a:	2b00      	cmp	r3, #0
 800980c:	d102      	bne.n	8009814 <HAL_UART_IRQHandler+0x144>
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d031      	beq.n	8009878 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009814:	6878      	ldr	r0, [r7, #4]
 8009816:	f000 f8b7 	bl	8009988 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	695b      	ldr	r3, [r3, #20]
 8009820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009824:	2b00      	cmp	r3, #0
 8009826:	d023      	beq.n	8009870 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	695a      	ldr	r2, [r3, #20]
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009836:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800983c:	2b00      	cmp	r3, #0
 800983e:	d013      	beq.n	8009868 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009844:	4a21      	ldr	r2, [pc, #132]	; (80098cc <HAL_UART_IRQHandler+0x1fc>)
 8009846:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800984c:	4618      	mov	r0, r3
 800984e:	f7fe fc81 	bl	8008154 <HAL_DMA_Abort_IT>
 8009852:	4603      	mov	r3, r0
 8009854:	2b00      	cmp	r3, #0
 8009856:	d016      	beq.n	8009886 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800985c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800985e:	687a      	ldr	r2, [r7, #4]
 8009860:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009862:	4610      	mov	r0, r2
 8009864:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009866:	e00e      	b.n	8009886 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009868:	6878      	ldr	r0, [r7, #4]
 800986a:	f000 f83a 	bl	80098e2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800986e:	e00a      	b.n	8009886 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f000 f836 	bl	80098e2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009876:	e006      	b.n	8009886 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	f000 f832 	bl	80098e2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2200      	movs	r2, #0
 8009882:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8009884:	e01e      	b.n	80098c4 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009886:	bf00      	nop
    return;
 8009888:	e01c      	b.n	80098c4 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800988a:	69fb      	ldr	r3, [r7, #28]
 800988c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009890:	2b00      	cmp	r3, #0
 8009892:	d008      	beq.n	80098a6 <HAL_UART_IRQHandler+0x1d6>
 8009894:	69bb      	ldr	r3, [r7, #24]
 8009896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800989a:	2b00      	cmp	r3, #0
 800989c:	d003      	beq.n	80098a6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800989e:	6878      	ldr	r0, [r7, #4]
 80098a0:	f000 f8a3 	bl	80099ea <UART_Transmit_IT>
    return;
 80098a4:	e00f      	b.n	80098c6 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80098a6:	69fb      	ldr	r3, [r7, #28]
 80098a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d00a      	beq.n	80098c6 <HAL_UART_IRQHandler+0x1f6>
 80098b0:	69bb      	ldr	r3, [r7, #24]
 80098b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d005      	beq.n	80098c6 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	f000 f8e4 	bl	8009a88 <UART_EndTransmit_IT>
    return;
 80098c0:	bf00      	nop
 80098c2:	e000      	b.n	80098c6 <HAL_UART_IRQHandler+0x1f6>
    return;
 80098c4:	bf00      	nop
  }
}
 80098c6:	3720      	adds	r7, #32
 80098c8:	46bd      	mov	sp, r7
 80098ca:	bd80      	pop	{r7, pc}
 80098cc:	080099c3 	.word	0x080099c3

080098d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80098d0:	b480      	push	{r7}
 80098d2:	b083      	sub	sp, #12
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80098d8:	bf00      	nop
 80098da:	370c      	adds	r7, #12
 80098dc:	46bd      	mov	sp, r7
 80098de:	bc80      	pop	{r7}
 80098e0:	4770      	bx	lr

080098e2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80098e2:	b480      	push	{r7}
 80098e4:	b083      	sub	sp, #12
 80098e6:	af00      	add	r7, sp, #0
 80098e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80098ea:	bf00      	nop
 80098ec:	370c      	adds	r7, #12
 80098ee:	46bd      	mov	sp, r7
 80098f0:	bc80      	pop	{r7}
 80098f2:	4770      	bx	lr

080098f4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b084      	sub	sp, #16
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	60f8      	str	r0, [r7, #12]
 80098fc:	60b9      	str	r1, [r7, #8]
 80098fe:	603b      	str	r3, [r7, #0]
 8009900:	4613      	mov	r3, r2
 8009902:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009904:	e02c      	b.n	8009960 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009906:	69bb      	ldr	r3, [r7, #24]
 8009908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800990c:	d028      	beq.n	8009960 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800990e:	69bb      	ldr	r3, [r7, #24]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d007      	beq.n	8009924 <UART_WaitOnFlagUntilTimeout+0x30>
 8009914:	f7fe faea 	bl	8007eec <HAL_GetTick>
 8009918:	4602      	mov	r2, r0
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	1ad3      	subs	r3, r2, r3
 800991e:	69ba      	ldr	r2, [r7, #24]
 8009920:	429a      	cmp	r2, r3
 8009922:	d21d      	bcs.n	8009960 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	68da      	ldr	r2, [r3, #12]
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009932:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	695a      	ldr	r2, [r3, #20]
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	f022 0201 	bic.w	r2, r2, #1
 8009942:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	2220      	movs	r2, #32
 8009948:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	2220      	movs	r2, #32
 8009950:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	2200      	movs	r2, #0
 8009958:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800995c:	2303      	movs	r3, #3
 800995e:	e00f      	b.n	8009980 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	681a      	ldr	r2, [r3, #0]
 8009966:	68bb      	ldr	r3, [r7, #8]
 8009968:	4013      	ands	r3, r2
 800996a:	68ba      	ldr	r2, [r7, #8]
 800996c:	429a      	cmp	r2, r3
 800996e:	bf0c      	ite	eq
 8009970:	2301      	moveq	r3, #1
 8009972:	2300      	movne	r3, #0
 8009974:	b2db      	uxtb	r3, r3
 8009976:	461a      	mov	r2, r3
 8009978:	79fb      	ldrb	r3, [r7, #7]
 800997a:	429a      	cmp	r2, r3
 800997c:	d0c3      	beq.n	8009906 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800997e:	2300      	movs	r3, #0
}
 8009980:	4618      	mov	r0, r3
 8009982:	3710      	adds	r7, #16
 8009984:	46bd      	mov	sp, r7
 8009986:	bd80      	pop	{r7, pc}

08009988 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009988:	b480      	push	{r7}
 800998a:	b083      	sub	sp, #12
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	68da      	ldr	r2, [r3, #12]
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800999e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	695a      	ldr	r2, [r3, #20]
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f022 0201 	bic.w	r2, r2, #1
 80099ae:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2220      	movs	r2, #32
 80099b4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80099b8:	bf00      	nop
 80099ba:	370c      	adds	r7, #12
 80099bc:	46bd      	mov	sp, r7
 80099be:	bc80      	pop	{r7}
 80099c0:	4770      	bx	lr

080099c2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80099c2:	b580      	push	{r7, lr}
 80099c4:	b084      	sub	sp, #16
 80099c6:	af00      	add	r7, sp, #0
 80099c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099ce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	2200      	movs	r2, #0
 80099d4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	2200      	movs	r2, #0
 80099da:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80099dc:	68f8      	ldr	r0, [r7, #12]
 80099de:	f7ff ff80 	bl	80098e2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80099e2:	bf00      	nop
 80099e4:	3710      	adds	r7, #16
 80099e6:	46bd      	mov	sp, r7
 80099e8:	bd80      	pop	{r7, pc}

080099ea <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80099ea:	b480      	push	{r7}
 80099ec:	b085      	sub	sp, #20
 80099ee:	af00      	add	r7, sp, #0
 80099f0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80099f8:	b2db      	uxtb	r3, r3
 80099fa:	2b21      	cmp	r3, #33	; 0x21
 80099fc:	d13e      	bne.n	8009a7c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	689b      	ldr	r3, [r3, #8]
 8009a02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a06:	d114      	bne.n	8009a32 <UART_Transmit_IT+0x48>
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	691b      	ldr	r3, [r3, #16]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d110      	bne.n	8009a32 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	6a1b      	ldr	r3, [r3, #32]
 8009a14:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	881b      	ldrh	r3, [r3, #0]
 8009a1a:	461a      	mov	r2, r3
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009a24:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6a1b      	ldr	r3, [r3, #32]
 8009a2a:	1c9a      	adds	r2, r3, #2
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	621a      	str	r2, [r3, #32]
 8009a30:	e008      	b.n	8009a44 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	6a1b      	ldr	r3, [r3, #32]
 8009a36:	1c59      	adds	r1, r3, #1
 8009a38:	687a      	ldr	r2, [r7, #4]
 8009a3a:	6211      	str	r1, [r2, #32]
 8009a3c:	781a      	ldrb	r2, [r3, #0]
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009a48:	b29b      	uxth	r3, r3
 8009a4a:	3b01      	subs	r3, #1
 8009a4c:	b29b      	uxth	r3, r3
 8009a4e:	687a      	ldr	r2, [r7, #4]
 8009a50:	4619      	mov	r1, r3
 8009a52:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d10f      	bne.n	8009a78 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	68da      	ldr	r2, [r3, #12]
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009a66:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	68da      	ldr	r2, [r3, #12]
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009a76:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009a78:	2300      	movs	r3, #0
 8009a7a:	e000      	b.n	8009a7e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009a7c:	2302      	movs	r3, #2
  }
}
 8009a7e:	4618      	mov	r0, r3
 8009a80:	3714      	adds	r7, #20
 8009a82:	46bd      	mov	sp, r7
 8009a84:	bc80      	pop	{r7}
 8009a86:	4770      	bx	lr

08009a88 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b082      	sub	sp, #8
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	68da      	ldr	r2, [r3, #12]
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a9e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2220      	movs	r2, #32
 8009aa4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f7ff ff11 	bl	80098d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009aae:	2300      	movs	r3, #0
}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	3708      	adds	r7, #8
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	bd80      	pop	{r7, pc}

08009ab8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b084      	sub	sp, #16
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009ac6:	b2db      	uxtb	r3, r3
 8009ac8:	2b22      	cmp	r3, #34	; 0x22
 8009aca:	d170      	bne.n	8009bae <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	689b      	ldr	r3, [r3, #8]
 8009ad0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ad4:	d117      	bne.n	8009b06 <UART_Receive_IT+0x4e>
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	691b      	ldr	r3, [r3, #16]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d113      	bne.n	8009b06 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ae6:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	685b      	ldr	r3, [r3, #4]
 8009aee:	b29b      	uxth	r3, r3
 8009af0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009af4:	b29a      	uxth	r2, r3
 8009af6:	68bb      	ldr	r3, [r7, #8]
 8009af8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009afe:	1c9a      	adds	r2, r3, #2
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	629a      	str	r2, [r3, #40]	; 0x28
 8009b04:	e026      	b.n	8009b54 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b0a:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	689b      	ldr	r3, [r3, #8]
 8009b14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b18:	d007      	beq.n	8009b2a <UART_Receive_IT+0x72>
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	689b      	ldr	r3, [r3, #8]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d10a      	bne.n	8009b38 <UART_Receive_IT+0x80>
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	691b      	ldr	r3, [r3, #16]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d106      	bne.n	8009b38 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	685b      	ldr	r3, [r3, #4]
 8009b30:	b2da      	uxtb	r2, r3
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	701a      	strb	r2, [r3, #0]
 8009b36:	e008      	b.n	8009b4a <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	685b      	ldr	r3, [r3, #4]
 8009b3e:	b2db      	uxtb	r3, r3
 8009b40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b44:	b2da      	uxtb	r2, r3
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b4e:	1c5a      	adds	r2, r3, #1
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009b58:	b29b      	uxth	r3, r3
 8009b5a:	3b01      	subs	r3, #1
 8009b5c:	b29b      	uxth	r3, r3
 8009b5e:	687a      	ldr	r2, [r7, #4]
 8009b60:	4619      	mov	r1, r3
 8009b62:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d120      	bne.n	8009baa <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	68da      	ldr	r2, [r3, #12]
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	f022 0220 	bic.w	r2, r2, #32
 8009b76:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	68da      	ldr	r2, [r3, #12]
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009b86:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	695a      	ldr	r2, [r3, #20]
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	f022 0201 	bic.w	r2, r2, #1
 8009b96:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2220      	movs	r2, #32
 8009b9c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8009ba0:	6878      	ldr	r0, [r7, #4]
 8009ba2:	f7fd fcb9 	bl	8007518 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	e002      	b.n	8009bb0 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8009baa:	2300      	movs	r3, #0
 8009bac:	e000      	b.n	8009bb0 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8009bae:	2302      	movs	r3, #2
  }
}
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	3710      	adds	r7, #16
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bd80      	pop	{r7, pc}

08009bb8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b084      	sub	sp, #16
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	691b      	ldr	r3, [r3, #16]
 8009bc6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	68da      	ldr	r2, [r3, #12]
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	430a      	orrs	r2, r1
 8009bd4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	689a      	ldr	r2, [r3, #8]
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	691b      	ldr	r3, [r3, #16]
 8009bde:	431a      	orrs	r2, r3
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	695b      	ldr	r3, [r3, #20]
 8009be4:	4313      	orrs	r3, r2
 8009be6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	68db      	ldr	r3, [r3, #12]
 8009bee:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8009bf2:	f023 030c 	bic.w	r3, r3, #12
 8009bf6:	687a      	ldr	r2, [r7, #4]
 8009bf8:	6812      	ldr	r2, [r2, #0]
 8009bfa:	68b9      	ldr	r1, [r7, #8]
 8009bfc:	430b      	orrs	r3, r1
 8009bfe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	695b      	ldr	r3, [r3, #20]
 8009c06:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	699a      	ldr	r2, [r3, #24]
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	430a      	orrs	r2, r1
 8009c14:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	4a2c      	ldr	r2, [pc, #176]	; (8009ccc <UART_SetConfig+0x114>)
 8009c1c:	4293      	cmp	r3, r2
 8009c1e:	d103      	bne.n	8009c28 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009c20:	f7ff f924 	bl	8008e6c <HAL_RCC_GetPCLK2Freq>
 8009c24:	60f8      	str	r0, [r7, #12]
 8009c26:	e002      	b.n	8009c2e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8009c28:	f7ff f90c 	bl	8008e44 <HAL_RCC_GetPCLK1Freq>
 8009c2c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009c2e:	68fa      	ldr	r2, [r7, #12]
 8009c30:	4613      	mov	r3, r2
 8009c32:	009b      	lsls	r3, r3, #2
 8009c34:	4413      	add	r3, r2
 8009c36:	009a      	lsls	r2, r3, #2
 8009c38:	441a      	add	r2, r3
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	685b      	ldr	r3, [r3, #4]
 8009c3e:	009b      	lsls	r3, r3, #2
 8009c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c44:	4a22      	ldr	r2, [pc, #136]	; (8009cd0 <UART_SetConfig+0x118>)
 8009c46:	fba2 2303 	umull	r2, r3, r2, r3
 8009c4a:	095b      	lsrs	r3, r3, #5
 8009c4c:	0119      	lsls	r1, r3, #4
 8009c4e:	68fa      	ldr	r2, [r7, #12]
 8009c50:	4613      	mov	r3, r2
 8009c52:	009b      	lsls	r3, r3, #2
 8009c54:	4413      	add	r3, r2
 8009c56:	009a      	lsls	r2, r3, #2
 8009c58:	441a      	add	r2, r3
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	685b      	ldr	r3, [r3, #4]
 8009c5e:	009b      	lsls	r3, r3, #2
 8009c60:	fbb2 f2f3 	udiv	r2, r2, r3
 8009c64:	4b1a      	ldr	r3, [pc, #104]	; (8009cd0 <UART_SetConfig+0x118>)
 8009c66:	fba3 0302 	umull	r0, r3, r3, r2
 8009c6a:	095b      	lsrs	r3, r3, #5
 8009c6c:	2064      	movs	r0, #100	; 0x64
 8009c6e:	fb00 f303 	mul.w	r3, r0, r3
 8009c72:	1ad3      	subs	r3, r2, r3
 8009c74:	011b      	lsls	r3, r3, #4
 8009c76:	3332      	adds	r3, #50	; 0x32
 8009c78:	4a15      	ldr	r2, [pc, #84]	; (8009cd0 <UART_SetConfig+0x118>)
 8009c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8009c7e:	095b      	lsrs	r3, r3, #5
 8009c80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009c84:	4419      	add	r1, r3
 8009c86:	68fa      	ldr	r2, [r7, #12]
 8009c88:	4613      	mov	r3, r2
 8009c8a:	009b      	lsls	r3, r3, #2
 8009c8c:	4413      	add	r3, r2
 8009c8e:	009a      	lsls	r2, r3, #2
 8009c90:	441a      	add	r2, r3
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	685b      	ldr	r3, [r3, #4]
 8009c96:	009b      	lsls	r3, r3, #2
 8009c98:	fbb2 f2f3 	udiv	r2, r2, r3
 8009c9c:	4b0c      	ldr	r3, [pc, #48]	; (8009cd0 <UART_SetConfig+0x118>)
 8009c9e:	fba3 0302 	umull	r0, r3, r3, r2
 8009ca2:	095b      	lsrs	r3, r3, #5
 8009ca4:	2064      	movs	r0, #100	; 0x64
 8009ca6:	fb00 f303 	mul.w	r3, r0, r3
 8009caa:	1ad3      	subs	r3, r2, r3
 8009cac:	011b      	lsls	r3, r3, #4
 8009cae:	3332      	adds	r3, #50	; 0x32
 8009cb0:	4a07      	ldr	r2, [pc, #28]	; (8009cd0 <UART_SetConfig+0x118>)
 8009cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8009cb6:	095b      	lsrs	r3, r3, #5
 8009cb8:	f003 020f 	and.w	r2, r3, #15
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	440a      	add	r2, r1
 8009cc2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8009cc4:	bf00      	nop
 8009cc6:	3710      	adds	r7, #16
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	bd80      	pop	{r7, pc}
 8009ccc:	40013800 	.word	0x40013800
 8009cd0:	51eb851f 	.word	0x51eb851f

08009cd4 <__errno>:
 8009cd4:	4b01      	ldr	r3, [pc, #4]	; (8009cdc <__errno+0x8>)
 8009cd6:	6818      	ldr	r0, [r3, #0]
 8009cd8:	4770      	bx	lr
 8009cda:	bf00      	nop
 8009cdc:	20000034 	.word	0x20000034

08009ce0 <__libc_init_array>:
 8009ce0:	b570      	push	{r4, r5, r6, lr}
 8009ce2:	2500      	movs	r5, #0
 8009ce4:	4e0c      	ldr	r6, [pc, #48]	; (8009d18 <__libc_init_array+0x38>)
 8009ce6:	4c0d      	ldr	r4, [pc, #52]	; (8009d1c <__libc_init_array+0x3c>)
 8009ce8:	1ba4      	subs	r4, r4, r6
 8009cea:	10a4      	asrs	r4, r4, #2
 8009cec:	42a5      	cmp	r5, r4
 8009cee:	d109      	bne.n	8009d04 <__libc_init_array+0x24>
 8009cf0:	f000 ff10 	bl	800ab14 <_init>
 8009cf4:	2500      	movs	r5, #0
 8009cf6:	4e0a      	ldr	r6, [pc, #40]	; (8009d20 <__libc_init_array+0x40>)
 8009cf8:	4c0a      	ldr	r4, [pc, #40]	; (8009d24 <__libc_init_array+0x44>)
 8009cfa:	1ba4      	subs	r4, r4, r6
 8009cfc:	10a4      	asrs	r4, r4, #2
 8009cfe:	42a5      	cmp	r5, r4
 8009d00:	d105      	bne.n	8009d0e <__libc_init_array+0x2e>
 8009d02:	bd70      	pop	{r4, r5, r6, pc}
 8009d04:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009d08:	4798      	blx	r3
 8009d0a:	3501      	adds	r5, #1
 8009d0c:	e7ee      	b.n	8009cec <__libc_init_array+0xc>
 8009d0e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009d12:	4798      	blx	r3
 8009d14:	3501      	adds	r5, #1
 8009d16:	e7f2      	b.n	8009cfe <__libc_init_array+0x1e>
 8009d18:	0800c440 	.word	0x0800c440
 8009d1c:	0800c440 	.word	0x0800c440
 8009d20:	0800c440 	.word	0x0800c440
 8009d24:	0800c444 	.word	0x0800c444

08009d28 <memset>:
 8009d28:	4603      	mov	r3, r0
 8009d2a:	4402      	add	r2, r0
 8009d2c:	4293      	cmp	r3, r2
 8009d2e:	d100      	bne.n	8009d32 <memset+0xa>
 8009d30:	4770      	bx	lr
 8009d32:	f803 1b01 	strb.w	r1, [r3], #1
 8009d36:	e7f9      	b.n	8009d2c <memset+0x4>

08009d38 <iprintf>:
 8009d38:	b40f      	push	{r0, r1, r2, r3}
 8009d3a:	4b0a      	ldr	r3, [pc, #40]	; (8009d64 <iprintf+0x2c>)
 8009d3c:	b513      	push	{r0, r1, r4, lr}
 8009d3e:	681c      	ldr	r4, [r3, #0]
 8009d40:	b124      	cbz	r4, 8009d4c <iprintf+0x14>
 8009d42:	69a3      	ldr	r3, [r4, #24]
 8009d44:	b913      	cbnz	r3, 8009d4c <iprintf+0x14>
 8009d46:	4620      	mov	r0, r4
 8009d48:	f000 f84e 	bl	8009de8 <__sinit>
 8009d4c:	ab05      	add	r3, sp, #20
 8009d4e:	9a04      	ldr	r2, [sp, #16]
 8009d50:	68a1      	ldr	r1, [r4, #8]
 8009d52:	4620      	mov	r0, r4
 8009d54:	9301      	str	r3, [sp, #4]
 8009d56:	f000 f953 	bl	800a000 <_vfiprintf_r>
 8009d5a:	b002      	add	sp, #8
 8009d5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d60:	b004      	add	sp, #16
 8009d62:	4770      	bx	lr
 8009d64:	20000034 	.word	0x20000034

08009d68 <std>:
 8009d68:	2300      	movs	r3, #0
 8009d6a:	b510      	push	{r4, lr}
 8009d6c:	4604      	mov	r4, r0
 8009d6e:	e9c0 3300 	strd	r3, r3, [r0]
 8009d72:	6083      	str	r3, [r0, #8]
 8009d74:	8181      	strh	r1, [r0, #12]
 8009d76:	6643      	str	r3, [r0, #100]	; 0x64
 8009d78:	81c2      	strh	r2, [r0, #14]
 8009d7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009d7e:	6183      	str	r3, [r0, #24]
 8009d80:	4619      	mov	r1, r3
 8009d82:	2208      	movs	r2, #8
 8009d84:	305c      	adds	r0, #92	; 0x5c
 8009d86:	f7ff ffcf 	bl	8009d28 <memset>
 8009d8a:	4b05      	ldr	r3, [pc, #20]	; (8009da0 <std+0x38>)
 8009d8c:	6224      	str	r4, [r4, #32]
 8009d8e:	6263      	str	r3, [r4, #36]	; 0x24
 8009d90:	4b04      	ldr	r3, [pc, #16]	; (8009da4 <std+0x3c>)
 8009d92:	62a3      	str	r3, [r4, #40]	; 0x28
 8009d94:	4b04      	ldr	r3, [pc, #16]	; (8009da8 <std+0x40>)
 8009d96:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009d98:	4b04      	ldr	r3, [pc, #16]	; (8009dac <std+0x44>)
 8009d9a:	6323      	str	r3, [r4, #48]	; 0x30
 8009d9c:	bd10      	pop	{r4, pc}
 8009d9e:	bf00      	nop
 8009da0:	0800a55d 	.word	0x0800a55d
 8009da4:	0800a57f 	.word	0x0800a57f
 8009da8:	0800a5b7 	.word	0x0800a5b7
 8009dac:	0800a5db 	.word	0x0800a5db

08009db0 <_cleanup_r>:
 8009db0:	4901      	ldr	r1, [pc, #4]	; (8009db8 <_cleanup_r+0x8>)
 8009db2:	f000 b885 	b.w	8009ec0 <_fwalk_reent>
 8009db6:	bf00      	nop
 8009db8:	0800a8b5 	.word	0x0800a8b5

08009dbc <__sfmoreglue>:
 8009dbc:	b570      	push	{r4, r5, r6, lr}
 8009dbe:	2568      	movs	r5, #104	; 0x68
 8009dc0:	1e4a      	subs	r2, r1, #1
 8009dc2:	4355      	muls	r5, r2
 8009dc4:	460e      	mov	r6, r1
 8009dc6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009dca:	f000 f897 	bl	8009efc <_malloc_r>
 8009dce:	4604      	mov	r4, r0
 8009dd0:	b140      	cbz	r0, 8009de4 <__sfmoreglue+0x28>
 8009dd2:	2100      	movs	r1, #0
 8009dd4:	e9c0 1600 	strd	r1, r6, [r0]
 8009dd8:	300c      	adds	r0, #12
 8009dda:	60a0      	str	r0, [r4, #8]
 8009ddc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009de0:	f7ff ffa2 	bl	8009d28 <memset>
 8009de4:	4620      	mov	r0, r4
 8009de6:	bd70      	pop	{r4, r5, r6, pc}

08009de8 <__sinit>:
 8009de8:	6983      	ldr	r3, [r0, #24]
 8009dea:	b510      	push	{r4, lr}
 8009dec:	4604      	mov	r4, r0
 8009dee:	bb33      	cbnz	r3, 8009e3e <__sinit+0x56>
 8009df0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8009df4:	6503      	str	r3, [r0, #80]	; 0x50
 8009df6:	4b12      	ldr	r3, [pc, #72]	; (8009e40 <__sinit+0x58>)
 8009df8:	4a12      	ldr	r2, [pc, #72]	; (8009e44 <__sinit+0x5c>)
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	6282      	str	r2, [r0, #40]	; 0x28
 8009dfe:	4298      	cmp	r0, r3
 8009e00:	bf04      	itt	eq
 8009e02:	2301      	moveq	r3, #1
 8009e04:	6183      	streq	r3, [r0, #24]
 8009e06:	f000 f81f 	bl	8009e48 <__sfp>
 8009e0a:	6060      	str	r0, [r4, #4]
 8009e0c:	4620      	mov	r0, r4
 8009e0e:	f000 f81b 	bl	8009e48 <__sfp>
 8009e12:	60a0      	str	r0, [r4, #8]
 8009e14:	4620      	mov	r0, r4
 8009e16:	f000 f817 	bl	8009e48 <__sfp>
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	60e0      	str	r0, [r4, #12]
 8009e1e:	2104      	movs	r1, #4
 8009e20:	6860      	ldr	r0, [r4, #4]
 8009e22:	f7ff ffa1 	bl	8009d68 <std>
 8009e26:	2201      	movs	r2, #1
 8009e28:	2109      	movs	r1, #9
 8009e2a:	68a0      	ldr	r0, [r4, #8]
 8009e2c:	f7ff ff9c 	bl	8009d68 <std>
 8009e30:	2202      	movs	r2, #2
 8009e32:	2112      	movs	r1, #18
 8009e34:	68e0      	ldr	r0, [r4, #12]
 8009e36:	f7ff ff97 	bl	8009d68 <std>
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	61a3      	str	r3, [r4, #24]
 8009e3e:	bd10      	pop	{r4, pc}
 8009e40:	0800c3a8 	.word	0x0800c3a8
 8009e44:	08009db1 	.word	0x08009db1

08009e48 <__sfp>:
 8009e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e4a:	4b1b      	ldr	r3, [pc, #108]	; (8009eb8 <__sfp+0x70>)
 8009e4c:	4607      	mov	r7, r0
 8009e4e:	681e      	ldr	r6, [r3, #0]
 8009e50:	69b3      	ldr	r3, [r6, #24]
 8009e52:	b913      	cbnz	r3, 8009e5a <__sfp+0x12>
 8009e54:	4630      	mov	r0, r6
 8009e56:	f7ff ffc7 	bl	8009de8 <__sinit>
 8009e5a:	3648      	adds	r6, #72	; 0x48
 8009e5c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009e60:	3b01      	subs	r3, #1
 8009e62:	d503      	bpl.n	8009e6c <__sfp+0x24>
 8009e64:	6833      	ldr	r3, [r6, #0]
 8009e66:	b133      	cbz	r3, 8009e76 <__sfp+0x2e>
 8009e68:	6836      	ldr	r6, [r6, #0]
 8009e6a:	e7f7      	b.n	8009e5c <__sfp+0x14>
 8009e6c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009e70:	b16d      	cbz	r5, 8009e8e <__sfp+0x46>
 8009e72:	3468      	adds	r4, #104	; 0x68
 8009e74:	e7f4      	b.n	8009e60 <__sfp+0x18>
 8009e76:	2104      	movs	r1, #4
 8009e78:	4638      	mov	r0, r7
 8009e7a:	f7ff ff9f 	bl	8009dbc <__sfmoreglue>
 8009e7e:	6030      	str	r0, [r6, #0]
 8009e80:	2800      	cmp	r0, #0
 8009e82:	d1f1      	bne.n	8009e68 <__sfp+0x20>
 8009e84:	230c      	movs	r3, #12
 8009e86:	4604      	mov	r4, r0
 8009e88:	603b      	str	r3, [r7, #0]
 8009e8a:	4620      	mov	r0, r4
 8009e8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e8e:	4b0b      	ldr	r3, [pc, #44]	; (8009ebc <__sfp+0x74>)
 8009e90:	6665      	str	r5, [r4, #100]	; 0x64
 8009e92:	e9c4 5500 	strd	r5, r5, [r4]
 8009e96:	60a5      	str	r5, [r4, #8]
 8009e98:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8009e9c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8009ea0:	2208      	movs	r2, #8
 8009ea2:	4629      	mov	r1, r5
 8009ea4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009ea8:	f7ff ff3e 	bl	8009d28 <memset>
 8009eac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009eb0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009eb4:	e7e9      	b.n	8009e8a <__sfp+0x42>
 8009eb6:	bf00      	nop
 8009eb8:	0800c3a8 	.word	0x0800c3a8
 8009ebc:	ffff0001 	.word	0xffff0001

08009ec0 <_fwalk_reent>:
 8009ec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ec4:	4680      	mov	r8, r0
 8009ec6:	4689      	mov	r9, r1
 8009ec8:	2600      	movs	r6, #0
 8009eca:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009ece:	b914      	cbnz	r4, 8009ed6 <_fwalk_reent+0x16>
 8009ed0:	4630      	mov	r0, r6
 8009ed2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ed6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8009eda:	3f01      	subs	r7, #1
 8009edc:	d501      	bpl.n	8009ee2 <_fwalk_reent+0x22>
 8009ede:	6824      	ldr	r4, [r4, #0]
 8009ee0:	e7f5      	b.n	8009ece <_fwalk_reent+0xe>
 8009ee2:	89ab      	ldrh	r3, [r5, #12]
 8009ee4:	2b01      	cmp	r3, #1
 8009ee6:	d907      	bls.n	8009ef8 <_fwalk_reent+0x38>
 8009ee8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009eec:	3301      	adds	r3, #1
 8009eee:	d003      	beq.n	8009ef8 <_fwalk_reent+0x38>
 8009ef0:	4629      	mov	r1, r5
 8009ef2:	4640      	mov	r0, r8
 8009ef4:	47c8      	blx	r9
 8009ef6:	4306      	orrs	r6, r0
 8009ef8:	3568      	adds	r5, #104	; 0x68
 8009efa:	e7ee      	b.n	8009eda <_fwalk_reent+0x1a>

08009efc <_malloc_r>:
 8009efc:	b570      	push	{r4, r5, r6, lr}
 8009efe:	1ccd      	adds	r5, r1, #3
 8009f00:	f025 0503 	bic.w	r5, r5, #3
 8009f04:	3508      	adds	r5, #8
 8009f06:	2d0c      	cmp	r5, #12
 8009f08:	bf38      	it	cc
 8009f0a:	250c      	movcc	r5, #12
 8009f0c:	2d00      	cmp	r5, #0
 8009f0e:	4606      	mov	r6, r0
 8009f10:	db01      	blt.n	8009f16 <_malloc_r+0x1a>
 8009f12:	42a9      	cmp	r1, r5
 8009f14:	d903      	bls.n	8009f1e <_malloc_r+0x22>
 8009f16:	230c      	movs	r3, #12
 8009f18:	6033      	str	r3, [r6, #0]
 8009f1a:	2000      	movs	r0, #0
 8009f1c:	bd70      	pop	{r4, r5, r6, pc}
 8009f1e:	f000 fd77 	bl	800aa10 <__malloc_lock>
 8009f22:	4a21      	ldr	r2, [pc, #132]	; (8009fa8 <_malloc_r+0xac>)
 8009f24:	6814      	ldr	r4, [r2, #0]
 8009f26:	4621      	mov	r1, r4
 8009f28:	b991      	cbnz	r1, 8009f50 <_malloc_r+0x54>
 8009f2a:	4c20      	ldr	r4, [pc, #128]	; (8009fac <_malloc_r+0xb0>)
 8009f2c:	6823      	ldr	r3, [r4, #0]
 8009f2e:	b91b      	cbnz	r3, 8009f38 <_malloc_r+0x3c>
 8009f30:	4630      	mov	r0, r6
 8009f32:	f000 fb03 	bl	800a53c <_sbrk_r>
 8009f36:	6020      	str	r0, [r4, #0]
 8009f38:	4629      	mov	r1, r5
 8009f3a:	4630      	mov	r0, r6
 8009f3c:	f000 fafe 	bl	800a53c <_sbrk_r>
 8009f40:	1c43      	adds	r3, r0, #1
 8009f42:	d124      	bne.n	8009f8e <_malloc_r+0x92>
 8009f44:	230c      	movs	r3, #12
 8009f46:	4630      	mov	r0, r6
 8009f48:	6033      	str	r3, [r6, #0]
 8009f4a:	f000 fd62 	bl	800aa12 <__malloc_unlock>
 8009f4e:	e7e4      	b.n	8009f1a <_malloc_r+0x1e>
 8009f50:	680b      	ldr	r3, [r1, #0]
 8009f52:	1b5b      	subs	r3, r3, r5
 8009f54:	d418      	bmi.n	8009f88 <_malloc_r+0x8c>
 8009f56:	2b0b      	cmp	r3, #11
 8009f58:	d90f      	bls.n	8009f7a <_malloc_r+0x7e>
 8009f5a:	600b      	str	r3, [r1, #0]
 8009f5c:	18cc      	adds	r4, r1, r3
 8009f5e:	50cd      	str	r5, [r1, r3]
 8009f60:	4630      	mov	r0, r6
 8009f62:	f000 fd56 	bl	800aa12 <__malloc_unlock>
 8009f66:	f104 000b 	add.w	r0, r4, #11
 8009f6a:	1d23      	adds	r3, r4, #4
 8009f6c:	f020 0007 	bic.w	r0, r0, #7
 8009f70:	1ac3      	subs	r3, r0, r3
 8009f72:	d0d3      	beq.n	8009f1c <_malloc_r+0x20>
 8009f74:	425a      	negs	r2, r3
 8009f76:	50e2      	str	r2, [r4, r3]
 8009f78:	e7d0      	b.n	8009f1c <_malloc_r+0x20>
 8009f7a:	684b      	ldr	r3, [r1, #4]
 8009f7c:	428c      	cmp	r4, r1
 8009f7e:	bf16      	itet	ne
 8009f80:	6063      	strne	r3, [r4, #4]
 8009f82:	6013      	streq	r3, [r2, #0]
 8009f84:	460c      	movne	r4, r1
 8009f86:	e7eb      	b.n	8009f60 <_malloc_r+0x64>
 8009f88:	460c      	mov	r4, r1
 8009f8a:	6849      	ldr	r1, [r1, #4]
 8009f8c:	e7cc      	b.n	8009f28 <_malloc_r+0x2c>
 8009f8e:	1cc4      	adds	r4, r0, #3
 8009f90:	f024 0403 	bic.w	r4, r4, #3
 8009f94:	42a0      	cmp	r0, r4
 8009f96:	d005      	beq.n	8009fa4 <_malloc_r+0xa8>
 8009f98:	1a21      	subs	r1, r4, r0
 8009f9a:	4630      	mov	r0, r6
 8009f9c:	f000 face 	bl	800a53c <_sbrk_r>
 8009fa0:	3001      	adds	r0, #1
 8009fa2:	d0cf      	beq.n	8009f44 <_malloc_r+0x48>
 8009fa4:	6025      	str	r5, [r4, #0]
 8009fa6:	e7db      	b.n	8009f60 <_malloc_r+0x64>
 8009fa8:	200024f0 	.word	0x200024f0
 8009fac:	200024f4 	.word	0x200024f4

08009fb0 <__sfputc_r>:
 8009fb0:	6893      	ldr	r3, [r2, #8]
 8009fb2:	b410      	push	{r4}
 8009fb4:	3b01      	subs	r3, #1
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	6093      	str	r3, [r2, #8]
 8009fba:	da07      	bge.n	8009fcc <__sfputc_r+0x1c>
 8009fbc:	6994      	ldr	r4, [r2, #24]
 8009fbe:	42a3      	cmp	r3, r4
 8009fc0:	db01      	blt.n	8009fc6 <__sfputc_r+0x16>
 8009fc2:	290a      	cmp	r1, #10
 8009fc4:	d102      	bne.n	8009fcc <__sfputc_r+0x1c>
 8009fc6:	bc10      	pop	{r4}
 8009fc8:	f000 bb0c 	b.w	800a5e4 <__swbuf_r>
 8009fcc:	6813      	ldr	r3, [r2, #0]
 8009fce:	1c58      	adds	r0, r3, #1
 8009fd0:	6010      	str	r0, [r2, #0]
 8009fd2:	7019      	strb	r1, [r3, #0]
 8009fd4:	4608      	mov	r0, r1
 8009fd6:	bc10      	pop	{r4}
 8009fd8:	4770      	bx	lr

08009fda <__sfputs_r>:
 8009fda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fdc:	4606      	mov	r6, r0
 8009fde:	460f      	mov	r7, r1
 8009fe0:	4614      	mov	r4, r2
 8009fe2:	18d5      	adds	r5, r2, r3
 8009fe4:	42ac      	cmp	r4, r5
 8009fe6:	d101      	bne.n	8009fec <__sfputs_r+0x12>
 8009fe8:	2000      	movs	r0, #0
 8009fea:	e007      	b.n	8009ffc <__sfputs_r+0x22>
 8009fec:	463a      	mov	r2, r7
 8009fee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ff2:	4630      	mov	r0, r6
 8009ff4:	f7ff ffdc 	bl	8009fb0 <__sfputc_r>
 8009ff8:	1c43      	adds	r3, r0, #1
 8009ffa:	d1f3      	bne.n	8009fe4 <__sfputs_r+0xa>
 8009ffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a000 <_vfiprintf_r>:
 800a000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a004:	460c      	mov	r4, r1
 800a006:	b09d      	sub	sp, #116	; 0x74
 800a008:	4617      	mov	r7, r2
 800a00a:	461d      	mov	r5, r3
 800a00c:	4606      	mov	r6, r0
 800a00e:	b118      	cbz	r0, 800a018 <_vfiprintf_r+0x18>
 800a010:	6983      	ldr	r3, [r0, #24]
 800a012:	b90b      	cbnz	r3, 800a018 <_vfiprintf_r+0x18>
 800a014:	f7ff fee8 	bl	8009de8 <__sinit>
 800a018:	4b7c      	ldr	r3, [pc, #496]	; (800a20c <_vfiprintf_r+0x20c>)
 800a01a:	429c      	cmp	r4, r3
 800a01c:	d158      	bne.n	800a0d0 <_vfiprintf_r+0xd0>
 800a01e:	6874      	ldr	r4, [r6, #4]
 800a020:	89a3      	ldrh	r3, [r4, #12]
 800a022:	0718      	lsls	r0, r3, #28
 800a024:	d55e      	bpl.n	800a0e4 <_vfiprintf_r+0xe4>
 800a026:	6923      	ldr	r3, [r4, #16]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d05b      	beq.n	800a0e4 <_vfiprintf_r+0xe4>
 800a02c:	2300      	movs	r3, #0
 800a02e:	9309      	str	r3, [sp, #36]	; 0x24
 800a030:	2320      	movs	r3, #32
 800a032:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a036:	2330      	movs	r3, #48	; 0x30
 800a038:	f04f 0b01 	mov.w	fp, #1
 800a03c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a040:	9503      	str	r5, [sp, #12]
 800a042:	46b8      	mov	r8, r7
 800a044:	4645      	mov	r5, r8
 800a046:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a04a:	b10b      	cbz	r3, 800a050 <_vfiprintf_r+0x50>
 800a04c:	2b25      	cmp	r3, #37	; 0x25
 800a04e:	d154      	bne.n	800a0fa <_vfiprintf_r+0xfa>
 800a050:	ebb8 0a07 	subs.w	sl, r8, r7
 800a054:	d00b      	beq.n	800a06e <_vfiprintf_r+0x6e>
 800a056:	4653      	mov	r3, sl
 800a058:	463a      	mov	r2, r7
 800a05a:	4621      	mov	r1, r4
 800a05c:	4630      	mov	r0, r6
 800a05e:	f7ff ffbc 	bl	8009fda <__sfputs_r>
 800a062:	3001      	adds	r0, #1
 800a064:	f000 80c2 	beq.w	800a1ec <_vfiprintf_r+0x1ec>
 800a068:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a06a:	4453      	add	r3, sl
 800a06c:	9309      	str	r3, [sp, #36]	; 0x24
 800a06e:	f898 3000 	ldrb.w	r3, [r8]
 800a072:	2b00      	cmp	r3, #0
 800a074:	f000 80ba 	beq.w	800a1ec <_vfiprintf_r+0x1ec>
 800a078:	2300      	movs	r3, #0
 800a07a:	f04f 32ff 	mov.w	r2, #4294967295
 800a07e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a082:	9304      	str	r3, [sp, #16]
 800a084:	9307      	str	r3, [sp, #28]
 800a086:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a08a:	931a      	str	r3, [sp, #104]	; 0x68
 800a08c:	46a8      	mov	r8, r5
 800a08e:	2205      	movs	r2, #5
 800a090:	f818 1b01 	ldrb.w	r1, [r8], #1
 800a094:	485e      	ldr	r0, [pc, #376]	; (800a210 <_vfiprintf_r+0x210>)
 800a096:	f000 fcad 	bl	800a9f4 <memchr>
 800a09a:	9b04      	ldr	r3, [sp, #16]
 800a09c:	bb78      	cbnz	r0, 800a0fe <_vfiprintf_r+0xfe>
 800a09e:	06d9      	lsls	r1, r3, #27
 800a0a0:	bf44      	itt	mi
 800a0a2:	2220      	movmi	r2, #32
 800a0a4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a0a8:	071a      	lsls	r2, r3, #28
 800a0aa:	bf44      	itt	mi
 800a0ac:	222b      	movmi	r2, #43	; 0x2b
 800a0ae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a0b2:	782a      	ldrb	r2, [r5, #0]
 800a0b4:	2a2a      	cmp	r2, #42	; 0x2a
 800a0b6:	d02a      	beq.n	800a10e <_vfiprintf_r+0x10e>
 800a0b8:	46a8      	mov	r8, r5
 800a0ba:	2000      	movs	r0, #0
 800a0bc:	250a      	movs	r5, #10
 800a0be:	9a07      	ldr	r2, [sp, #28]
 800a0c0:	4641      	mov	r1, r8
 800a0c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a0c6:	3b30      	subs	r3, #48	; 0x30
 800a0c8:	2b09      	cmp	r3, #9
 800a0ca:	d969      	bls.n	800a1a0 <_vfiprintf_r+0x1a0>
 800a0cc:	b360      	cbz	r0, 800a128 <_vfiprintf_r+0x128>
 800a0ce:	e024      	b.n	800a11a <_vfiprintf_r+0x11a>
 800a0d0:	4b50      	ldr	r3, [pc, #320]	; (800a214 <_vfiprintf_r+0x214>)
 800a0d2:	429c      	cmp	r4, r3
 800a0d4:	d101      	bne.n	800a0da <_vfiprintf_r+0xda>
 800a0d6:	68b4      	ldr	r4, [r6, #8]
 800a0d8:	e7a2      	b.n	800a020 <_vfiprintf_r+0x20>
 800a0da:	4b4f      	ldr	r3, [pc, #316]	; (800a218 <_vfiprintf_r+0x218>)
 800a0dc:	429c      	cmp	r4, r3
 800a0de:	bf08      	it	eq
 800a0e0:	68f4      	ldreq	r4, [r6, #12]
 800a0e2:	e79d      	b.n	800a020 <_vfiprintf_r+0x20>
 800a0e4:	4621      	mov	r1, r4
 800a0e6:	4630      	mov	r0, r6
 800a0e8:	f000 fae0 	bl	800a6ac <__swsetup_r>
 800a0ec:	2800      	cmp	r0, #0
 800a0ee:	d09d      	beq.n	800a02c <_vfiprintf_r+0x2c>
 800a0f0:	f04f 30ff 	mov.w	r0, #4294967295
 800a0f4:	b01d      	add	sp, #116	; 0x74
 800a0f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0fa:	46a8      	mov	r8, r5
 800a0fc:	e7a2      	b.n	800a044 <_vfiprintf_r+0x44>
 800a0fe:	4a44      	ldr	r2, [pc, #272]	; (800a210 <_vfiprintf_r+0x210>)
 800a100:	4645      	mov	r5, r8
 800a102:	1a80      	subs	r0, r0, r2
 800a104:	fa0b f000 	lsl.w	r0, fp, r0
 800a108:	4318      	orrs	r0, r3
 800a10a:	9004      	str	r0, [sp, #16]
 800a10c:	e7be      	b.n	800a08c <_vfiprintf_r+0x8c>
 800a10e:	9a03      	ldr	r2, [sp, #12]
 800a110:	1d11      	adds	r1, r2, #4
 800a112:	6812      	ldr	r2, [r2, #0]
 800a114:	9103      	str	r1, [sp, #12]
 800a116:	2a00      	cmp	r2, #0
 800a118:	db01      	blt.n	800a11e <_vfiprintf_r+0x11e>
 800a11a:	9207      	str	r2, [sp, #28]
 800a11c:	e004      	b.n	800a128 <_vfiprintf_r+0x128>
 800a11e:	4252      	negs	r2, r2
 800a120:	f043 0302 	orr.w	r3, r3, #2
 800a124:	9207      	str	r2, [sp, #28]
 800a126:	9304      	str	r3, [sp, #16]
 800a128:	f898 3000 	ldrb.w	r3, [r8]
 800a12c:	2b2e      	cmp	r3, #46	; 0x2e
 800a12e:	d10e      	bne.n	800a14e <_vfiprintf_r+0x14e>
 800a130:	f898 3001 	ldrb.w	r3, [r8, #1]
 800a134:	2b2a      	cmp	r3, #42	; 0x2a
 800a136:	d138      	bne.n	800a1aa <_vfiprintf_r+0x1aa>
 800a138:	9b03      	ldr	r3, [sp, #12]
 800a13a:	f108 0802 	add.w	r8, r8, #2
 800a13e:	1d1a      	adds	r2, r3, #4
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	9203      	str	r2, [sp, #12]
 800a144:	2b00      	cmp	r3, #0
 800a146:	bfb8      	it	lt
 800a148:	f04f 33ff 	movlt.w	r3, #4294967295
 800a14c:	9305      	str	r3, [sp, #20]
 800a14e:	4d33      	ldr	r5, [pc, #204]	; (800a21c <_vfiprintf_r+0x21c>)
 800a150:	2203      	movs	r2, #3
 800a152:	f898 1000 	ldrb.w	r1, [r8]
 800a156:	4628      	mov	r0, r5
 800a158:	f000 fc4c 	bl	800a9f4 <memchr>
 800a15c:	b140      	cbz	r0, 800a170 <_vfiprintf_r+0x170>
 800a15e:	2340      	movs	r3, #64	; 0x40
 800a160:	1b40      	subs	r0, r0, r5
 800a162:	fa03 f000 	lsl.w	r0, r3, r0
 800a166:	9b04      	ldr	r3, [sp, #16]
 800a168:	f108 0801 	add.w	r8, r8, #1
 800a16c:	4303      	orrs	r3, r0
 800a16e:	9304      	str	r3, [sp, #16]
 800a170:	f898 1000 	ldrb.w	r1, [r8]
 800a174:	2206      	movs	r2, #6
 800a176:	482a      	ldr	r0, [pc, #168]	; (800a220 <_vfiprintf_r+0x220>)
 800a178:	f108 0701 	add.w	r7, r8, #1
 800a17c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a180:	f000 fc38 	bl	800a9f4 <memchr>
 800a184:	2800      	cmp	r0, #0
 800a186:	d037      	beq.n	800a1f8 <_vfiprintf_r+0x1f8>
 800a188:	4b26      	ldr	r3, [pc, #152]	; (800a224 <_vfiprintf_r+0x224>)
 800a18a:	bb1b      	cbnz	r3, 800a1d4 <_vfiprintf_r+0x1d4>
 800a18c:	9b03      	ldr	r3, [sp, #12]
 800a18e:	3307      	adds	r3, #7
 800a190:	f023 0307 	bic.w	r3, r3, #7
 800a194:	3308      	adds	r3, #8
 800a196:	9303      	str	r3, [sp, #12]
 800a198:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a19a:	444b      	add	r3, r9
 800a19c:	9309      	str	r3, [sp, #36]	; 0x24
 800a19e:	e750      	b.n	800a042 <_vfiprintf_r+0x42>
 800a1a0:	fb05 3202 	mla	r2, r5, r2, r3
 800a1a4:	2001      	movs	r0, #1
 800a1a6:	4688      	mov	r8, r1
 800a1a8:	e78a      	b.n	800a0c0 <_vfiprintf_r+0xc0>
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	250a      	movs	r5, #10
 800a1ae:	4619      	mov	r1, r3
 800a1b0:	f108 0801 	add.w	r8, r8, #1
 800a1b4:	9305      	str	r3, [sp, #20]
 800a1b6:	4640      	mov	r0, r8
 800a1b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1bc:	3a30      	subs	r2, #48	; 0x30
 800a1be:	2a09      	cmp	r2, #9
 800a1c0:	d903      	bls.n	800a1ca <_vfiprintf_r+0x1ca>
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d0c3      	beq.n	800a14e <_vfiprintf_r+0x14e>
 800a1c6:	9105      	str	r1, [sp, #20]
 800a1c8:	e7c1      	b.n	800a14e <_vfiprintf_r+0x14e>
 800a1ca:	fb05 2101 	mla	r1, r5, r1, r2
 800a1ce:	2301      	movs	r3, #1
 800a1d0:	4680      	mov	r8, r0
 800a1d2:	e7f0      	b.n	800a1b6 <_vfiprintf_r+0x1b6>
 800a1d4:	ab03      	add	r3, sp, #12
 800a1d6:	9300      	str	r3, [sp, #0]
 800a1d8:	4622      	mov	r2, r4
 800a1da:	4b13      	ldr	r3, [pc, #76]	; (800a228 <_vfiprintf_r+0x228>)
 800a1dc:	a904      	add	r1, sp, #16
 800a1de:	4630      	mov	r0, r6
 800a1e0:	f3af 8000 	nop.w
 800a1e4:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a1e8:	4681      	mov	r9, r0
 800a1ea:	d1d5      	bne.n	800a198 <_vfiprintf_r+0x198>
 800a1ec:	89a3      	ldrh	r3, [r4, #12]
 800a1ee:	065b      	lsls	r3, r3, #25
 800a1f0:	f53f af7e 	bmi.w	800a0f0 <_vfiprintf_r+0xf0>
 800a1f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a1f6:	e77d      	b.n	800a0f4 <_vfiprintf_r+0xf4>
 800a1f8:	ab03      	add	r3, sp, #12
 800a1fa:	9300      	str	r3, [sp, #0]
 800a1fc:	4622      	mov	r2, r4
 800a1fe:	4b0a      	ldr	r3, [pc, #40]	; (800a228 <_vfiprintf_r+0x228>)
 800a200:	a904      	add	r1, sp, #16
 800a202:	4630      	mov	r0, r6
 800a204:	f000 f888 	bl	800a318 <_printf_i>
 800a208:	e7ec      	b.n	800a1e4 <_vfiprintf_r+0x1e4>
 800a20a:	bf00      	nop
 800a20c:	0800c3cc 	.word	0x0800c3cc
 800a210:	0800c40c 	.word	0x0800c40c
 800a214:	0800c3ec 	.word	0x0800c3ec
 800a218:	0800c3ac 	.word	0x0800c3ac
 800a21c:	0800c412 	.word	0x0800c412
 800a220:	0800c416 	.word	0x0800c416
 800a224:	00000000 	.word	0x00000000
 800a228:	08009fdb 	.word	0x08009fdb

0800a22c <_printf_common>:
 800a22c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a230:	4691      	mov	r9, r2
 800a232:	461f      	mov	r7, r3
 800a234:	688a      	ldr	r2, [r1, #8]
 800a236:	690b      	ldr	r3, [r1, #16]
 800a238:	4606      	mov	r6, r0
 800a23a:	4293      	cmp	r3, r2
 800a23c:	bfb8      	it	lt
 800a23e:	4613      	movlt	r3, r2
 800a240:	f8c9 3000 	str.w	r3, [r9]
 800a244:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a248:	460c      	mov	r4, r1
 800a24a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a24e:	b112      	cbz	r2, 800a256 <_printf_common+0x2a>
 800a250:	3301      	adds	r3, #1
 800a252:	f8c9 3000 	str.w	r3, [r9]
 800a256:	6823      	ldr	r3, [r4, #0]
 800a258:	0699      	lsls	r1, r3, #26
 800a25a:	bf42      	ittt	mi
 800a25c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a260:	3302      	addmi	r3, #2
 800a262:	f8c9 3000 	strmi.w	r3, [r9]
 800a266:	6825      	ldr	r5, [r4, #0]
 800a268:	f015 0506 	ands.w	r5, r5, #6
 800a26c:	d107      	bne.n	800a27e <_printf_common+0x52>
 800a26e:	f104 0a19 	add.w	sl, r4, #25
 800a272:	68e3      	ldr	r3, [r4, #12]
 800a274:	f8d9 2000 	ldr.w	r2, [r9]
 800a278:	1a9b      	subs	r3, r3, r2
 800a27a:	42ab      	cmp	r3, r5
 800a27c:	dc29      	bgt.n	800a2d2 <_printf_common+0xa6>
 800a27e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a282:	6822      	ldr	r2, [r4, #0]
 800a284:	3300      	adds	r3, #0
 800a286:	bf18      	it	ne
 800a288:	2301      	movne	r3, #1
 800a28a:	0692      	lsls	r2, r2, #26
 800a28c:	d42e      	bmi.n	800a2ec <_printf_common+0xc0>
 800a28e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a292:	4639      	mov	r1, r7
 800a294:	4630      	mov	r0, r6
 800a296:	47c0      	blx	r8
 800a298:	3001      	adds	r0, #1
 800a29a:	d021      	beq.n	800a2e0 <_printf_common+0xb4>
 800a29c:	6823      	ldr	r3, [r4, #0]
 800a29e:	68e5      	ldr	r5, [r4, #12]
 800a2a0:	f003 0306 	and.w	r3, r3, #6
 800a2a4:	2b04      	cmp	r3, #4
 800a2a6:	bf18      	it	ne
 800a2a8:	2500      	movne	r5, #0
 800a2aa:	f8d9 2000 	ldr.w	r2, [r9]
 800a2ae:	f04f 0900 	mov.w	r9, #0
 800a2b2:	bf08      	it	eq
 800a2b4:	1aad      	subeq	r5, r5, r2
 800a2b6:	68a3      	ldr	r3, [r4, #8]
 800a2b8:	6922      	ldr	r2, [r4, #16]
 800a2ba:	bf08      	it	eq
 800a2bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a2c0:	4293      	cmp	r3, r2
 800a2c2:	bfc4      	itt	gt
 800a2c4:	1a9b      	subgt	r3, r3, r2
 800a2c6:	18ed      	addgt	r5, r5, r3
 800a2c8:	341a      	adds	r4, #26
 800a2ca:	454d      	cmp	r5, r9
 800a2cc:	d11a      	bne.n	800a304 <_printf_common+0xd8>
 800a2ce:	2000      	movs	r0, #0
 800a2d0:	e008      	b.n	800a2e4 <_printf_common+0xb8>
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	4652      	mov	r2, sl
 800a2d6:	4639      	mov	r1, r7
 800a2d8:	4630      	mov	r0, r6
 800a2da:	47c0      	blx	r8
 800a2dc:	3001      	adds	r0, #1
 800a2de:	d103      	bne.n	800a2e8 <_printf_common+0xbc>
 800a2e0:	f04f 30ff 	mov.w	r0, #4294967295
 800a2e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2e8:	3501      	adds	r5, #1
 800a2ea:	e7c2      	b.n	800a272 <_printf_common+0x46>
 800a2ec:	2030      	movs	r0, #48	; 0x30
 800a2ee:	18e1      	adds	r1, r4, r3
 800a2f0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a2f4:	1c5a      	adds	r2, r3, #1
 800a2f6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a2fa:	4422      	add	r2, r4
 800a2fc:	3302      	adds	r3, #2
 800a2fe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a302:	e7c4      	b.n	800a28e <_printf_common+0x62>
 800a304:	2301      	movs	r3, #1
 800a306:	4622      	mov	r2, r4
 800a308:	4639      	mov	r1, r7
 800a30a:	4630      	mov	r0, r6
 800a30c:	47c0      	blx	r8
 800a30e:	3001      	adds	r0, #1
 800a310:	d0e6      	beq.n	800a2e0 <_printf_common+0xb4>
 800a312:	f109 0901 	add.w	r9, r9, #1
 800a316:	e7d8      	b.n	800a2ca <_printf_common+0x9e>

0800a318 <_printf_i>:
 800a318:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a31c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a320:	460c      	mov	r4, r1
 800a322:	7e09      	ldrb	r1, [r1, #24]
 800a324:	b085      	sub	sp, #20
 800a326:	296e      	cmp	r1, #110	; 0x6e
 800a328:	4617      	mov	r7, r2
 800a32a:	4606      	mov	r6, r0
 800a32c:	4698      	mov	r8, r3
 800a32e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a330:	f000 80b3 	beq.w	800a49a <_printf_i+0x182>
 800a334:	d822      	bhi.n	800a37c <_printf_i+0x64>
 800a336:	2963      	cmp	r1, #99	; 0x63
 800a338:	d036      	beq.n	800a3a8 <_printf_i+0x90>
 800a33a:	d80a      	bhi.n	800a352 <_printf_i+0x3a>
 800a33c:	2900      	cmp	r1, #0
 800a33e:	f000 80b9 	beq.w	800a4b4 <_printf_i+0x19c>
 800a342:	2958      	cmp	r1, #88	; 0x58
 800a344:	f000 8083 	beq.w	800a44e <_printf_i+0x136>
 800a348:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a34c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a350:	e032      	b.n	800a3b8 <_printf_i+0xa0>
 800a352:	2964      	cmp	r1, #100	; 0x64
 800a354:	d001      	beq.n	800a35a <_printf_i+0x42>
 800a356:	2969      	cmp	r1, #105	; 0x69
 800a358:	d1f6      	bne.n	800a348 <_printf_i+0x30>
 800a35a:	6820      	ldr	r0, [r4, #0]
 800a35c:	6813      	ldr	r3, [r2, #0]
 800a35e:	0605      	lsls	r5, r0, #24
 800a360:	f103 0104 	add.w	r1, r3, #4
 800a364:	d52a      	bpl.n	800a3bc <_printf_i+0xa4>
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	6011      	str	r1, [r2, #0]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	da03      	bge.n	800a376 <_printf_i+0x5e>
 800a36e:	222d      	movs	r2, #45	; 0x2d
 800a370:	425b      	negs	r3, r3
 800a372:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a376:	486f      	ldr	r0, [pc, #444]	; (800a534 <_printf_i+0x21c>)
 800a378:	220a      	movs	r2, #10
 800a37a:	e039      	b.n	800a3f0 <_printf_i+0xd8>
 800a37c:	2973      	cmp	r1, #115	; 0x73
 800a37e:	f000 809d 	beq.w	800a4bc <_printf_i+0x1a4>
 800a382:	d808      	bhi.n	800a396 <_printf_i+0x7e>
 800a384:	296f      	cmp	r1, #111	; 0x6f
 800a386:	d020      	beq.n	800a3ca <_printf_i+0xb2>
 800a388:	2970      	cmp	r1, #112	; 0x70
 800a38a:	d1dd      	bne.n	800a348 <_printf_i+0x30>
 800a38c:	6823      	ldr	r3, [r4, #0]
 800a38e:	f043 0320 	orr.w	r3, r3, #32
 800a392:	6023      	str	r3, [r4, #0]
 800a394:	e003      	b.n	800a39e <_printf_i+0x86>
 800a396:	2975      	cmp	r1, #117	; 0x75
 800a398:	d017      	beq.n	800a3ca <_printf_i+0xb2>
 800a39a:	2978      	cmp	r1, #120	; 0x78
 800a39c:	d1d4      	bne.n	800a348 <_printf_i+0x30>
 800a39e:	2378      	movs	r3, #120	; 0x78
 800a3a0:	4865      	ldr	r0, [pc, #404]	; (800a538 <_printf_i+0x220>)
 800a3a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a3a6:	e055      	b.n	800a454 <_printf_i+0x13c>
 800a3a8:	6813      	ldr	r3, [r2, #0]
 800a3aa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a3ae:	1d19      	adds	r1, r3, #4
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	6011      	str	r1, [r2, #0]
 800a3b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a3b8:	2301      	movs	r3, #1
 800a3ba:	e08c      	b.n	800a4d6 <_printf_i+0x1be>
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a3c2:	6011      	str	r1, [r2, #0]
 800a3c4:	bf18      	it	ne
 800a3c6:	b21b      	sxthne	r3, r3
 800a3c8:	e7cf      	b.n	800a36a <_printf_i+0x52>
 800a3ca:	6813      	ldr	r3, [r2, #0]
 800a3cc:	6825      	ldr	r5, [r4, #0]
 800a3ce:	1d18      	adds	r0, r3, #4
 800a3d0:	6010      	str	r0, [r2, #0]
 800a3d2:	0628      	lsls	r0, r5, #24
 800a3d4:	d501      	bpl.n	800a3da <_printf_i+0xc2>
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	e002      	b.n	800a3e0 <_printf_i+0xc8>
 800a3da:	0668      	lsls	r0, r5, #25
 800a3dc:	d5fb      	bpl.n	800a3d6 <_printf_i+0xbe>
 800a3de:	881b      	ldrh	r3, [r3, #0]
 800a3e0:	296f      	cmp	r1, #111	; 0x6f
 800a3e2:	bf14      	ite	ne
 800a3e4:	220a      	movne	r2, #10
 800a3e6:	2208      	moveq	r2, #8
 800a3e8:	4852      	ldr	r0, [pc, #328]	; (800a534 <_printf_i+0x21c>)
 800a3ea:	2100      	movs	r1, #0
 800a3ec:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a3f0:	6865      	ldr	r5, [r4, #4]
 800a3f2:	2d00      	cmp	r5, #0
 800a3f4:	60a5      	str	r5, [r4, #8]
 800a3f6:	f2c0 8095 	blt.w	800a524 <_printf_i+0x20c>
 800a3fa:	6821      	ldr	r1, [r4, #0]
 800a3fc:	f021 0104 	bic.w	r1, r1, #4
 800a400:	6021      	str	r1, [r4, #0]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d13d      	bne.n	800a482 <_printf_i+0x16a>
 800a406:	2d00      	cmp	r5, #0
 800a408:	f040 808e 	bne.w	800a528 <_printf_i+0x210>
 800a40c:	4665      	mov	r5, ip
 800a40e:	2a08      	cmp	r2, #8
 800a410:	d10b      	bne.n	800a42a <_printf_i+0x112>
 800a412:	6823      	ldr	r3, [r4, #0]
 800a414:	07db      	lsls	r3, r3, #31
 800a416:	d508      	bpl.n	800a42a <_printf_i+0x112>
 800a418:	6923      	ldr	r3, [r4, #16]
 800a41a:	6862      	ldr	r2, [r4, #4]
 800a41c:	429a      	cmp	r2, r3
 800a41e:	bfde      	ittt	le
 800a420:	2330      	movle	r3, #48	; 0x30
 800a422:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a426:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a42a:	ebac 0305 	sub.w	r3, ip, r5
 800a42e:	6123      	str	r3, [r4, #16]
 800a430:	f8cd 8000 	str.w	r8, [sp]
 800a434:	463b      	mov	r3, r7
 800a436:	aa03      	add	r2, sp, #12
 800a438:	4621      	mov	r1, r4
 800a43a:	4630      	mov	r0, r6
 800a43c:	f7ff fef6 	bl	800a22c <_printf_common>
 800a440:	3001      	adds	r0, #1
 800a442:	d14d      	bne.n	800a4e0 <_printf_i+0x1c8>
 800a444:	f04f 30ff 	mov.w	r0, #4294967295
 800a448:	b005      	add	sp, #20
 800a44a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a44e:	4839      	ldr	r0, [pc, #228]	; (800a534 <_printf_i+0x21c>)
 800a450:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a454:	6813      	ldr	r3, [r2, #0]
 800a456:	6821      	ldr	r1, [r4, #0]
 800a458:	1d1d      	adds	r5, r3, #4
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	6015      	str	r5, [r2, #0]
 800a45e:	060a      	lsls	r2, r1, #24
 800a460:	d50b      	bpl.n	800a47a <_printf_i+0x162>
 800a462:	07ca      	lsls	r2, r1, #31
 800a464:	bf44      	itt	mi
 800a466:	f041 0120 	orrmi.w	r1, r1, #32
 800a46a:	6021      	strmi	r1, [r4, #0]
 800a46c:	b91b      	cbnz	r3, 800a476 <_printf_i+0x15e>
 800a46e:	6822      	ldr	r2, [r4, #0]
 800a470:	f022 0220 	bic.w	r2, r2, #32
 800a474:	6022      	str	r2, [r4, #0]
 800a476:	2210      	movs	r2, #16
 800a478:	e7b7      	b.n	800a3ea <_printf_i+0xd2>
 800a47a:	064d      	lsls	r5, r1, #25
 800a47c:	bf48      	it	mi
 800a47e:	b29b      	uxthmi	r3, r3
 800a480:	e7ef      	b.n	800a462 <_printf_i+0x14a>
 800a482:	4665      	mov	r5, ip
 800a484:	fbb3 f1f2 	udiv	r1, r3, r2
 800a488:	fb02 3311 	mls	r3, r2, r1, r3
 800a48c:	5cc3      	ldrb	r3, [r0, r3]
 800a48e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a492:	460b      	mov	r3, r1
 800a494:	2900      	cmp	r1, #0
 800a496:	d1f5      	bne.n	800a484 <_printf_i+0x16c>
 800a498:	e7b9      	b.n	800a40e <_printf_i+0xf6>
 800a49a:	6813      	ldr	r3, [r2, #0]
 800a49c:	6825      	ldr	r5, [r4, #0]
 800a49e:	1d18      	adds	r0, r3, #4
 800a4a0:	6961      	ldr	r1, [r4, #20]
 800a4a2:	6010      	str	r0, [r2, #0]
 800a4a4:	0628      	lsls	r0, r5, #24
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	d501      	bpl.n	800a4ae <_printf_i+0x196>
 800a4aa:	6019      	str	r1, [r3, #0]
 800a4ac:	e002      	b.n	800a4b4 <_printf_i+0x19c>
 800a4ae:	066a      	lsls	r2, r5, #25
 800a4b0:	d5fb      	bpl.n	800a4aa <_printf_i+0x192>
 800a4b2:	8019      	strh	r1, [r3, #0]
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	4665      	mov	r5, ip
 800a4b8:	6123      	str	r3, [r4, #16]
 800a4ba:	e7b9      	b.n	800a430 <_printf_i+0x118>
 800a4bc:	6813      	ldr	r3, [r2, #0]
 800a4be:	1d19      	adds	r1, r3, #4
 800a4c0:	6011      	str	r1, [r2, #0]
 800a4c2:	681d      	ldr	r5, [r3, #0]
 800a4c4:	6862      	ldr	r2, [r4, #4]
 800a4c6:	2100      	movs	r1, #0
 800a4c8:	4628      	mov	r0, r5
 800a4ca:	f000 fa93 	bl	800a9f4 <memchr>
 800a4ce:	b108      	cbz	r0, 800a4d4 <_printf_i+0x1bc>
 800a4d0:	1b40      	subs	r0, r0, r5
 800a4d2:	6060      	str	r0, [r4, #4]
 800a4d4:	6863      	ldr	r3, [r4, #4]
 800a4d6:	6123      	str	r3, [r4, #16]
 800a4d8:	2300      	movs	r3, #0
 800a4da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a4de:	e7a7      	b.n	800a430 <_printf_i+0x118>
 800a4e0:	6923      	ldr	r3, [r4, #16]
 800a4e2:	462a      	mov	r2, r5
 800a4e4:	4639      	mov	r1, r7
 800a4e6:	4630      	mov	r0, r6
 800a4e8:	47c0      	blx	r8
 800a4ea:	3001      	adds	r0, #1
 800a4ec:	d0aa      	beq.n	800a444 <_printf_i+0x12c>
 800a4ee:	6823      	ldr	r3, [r4, #0]
 800a4f0:	079b      	lsls	r3, r3, #30
 800a4f2:	d413      	bmi.n	800a51c <_printf_i+0x204>
 800a4f4:	68e0      	ldr	r0, [r4, #12]
 800a4f6:	9b03      	ldr	r3, [sp, #12]
 800a4f8:	4298      	cmp	r0, r3
 800a4fa:	bfb8      	it	lt
 800a4fc:	4618      	movlt	r0, r3
 800a4fe:	e7a3      	b.n	800a448 <_printf_i+0x130>
 800a500:	2301      	movs	r3, #1
 800a502:	464a      	mov	r2, r9
 800a504:	4639      	mov	r1, r7
 800a506:	4630      	mov	r0, r6
 800a508:	47c0      	blx	r8
 800a50a:	3001      	adds	r0, #1
 800a50c:	d09a      	beq.n	800a444 <_printf_i+0x12c>
 800a50e:	3501      	adds	r5, #1
 800a510:	68e3      	ldr	r3, [r4, #12]
 800a512:	9a03      	ldr	r2, [sp, #12]
 800a514:	1a9b      	subs	r3, r3, r2
 800a516:	42ab      	cmp	r3, r5
 800a518:	dcf2      	bgt.n	800a500 <_printf_i+0x1e8>
 800a51a:	e7eb      	b.n	800a4f4 <_printf_i+0x1dc>
 800a51c:	2500      	movs	r5, #0
 800a51e:	f104 0919 	add.w	r9, r4, #25
 800a522:	e7f5      	b.n	800a510 <_printf_i+0x1f8>
 800a524:	2b00      	cmp	r3, #0
 800a526:	d1ac      	bne.n	800a482 <_printf_i+0x16a>
 800a528:	7803      	ldrb	r3, [r0, #0]
 800a52a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a52e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a532:	e76c      	b.n	800a40e <_printf_i+0xf6>
 800a534:	0800c41d 	.word	0x0800c41d
 800a538:	0800c42e 	.word	0x0800c42e

0800a53c <_sbrk_r>:
 800a53c:	b538      	push	{r3, r4, r5, lr}
 800a53e:	2300      	movs	r3, #0
 800a540:	4c05      	ldr	r4, [pc, #20]	; (800a558 <_sbrk_r+0x1c>)
 800a542:	4605      	mov	r5, r0
 800a544:	4608      	mov	r0, r1
 800a546:	6023      	str	r3, [r4, #0]
 800a548:	f7fd fc20 	bl	8007d8c <_sbrk>
 800a54c:	1c43      	adds	r3, r0, #1
 800a54e:	d102      	bne.n	800a556 <_sbrk_r+0x1a>
 800a550:	6823      	ldr	r3, [r4, #0]
 800a552:	b103      	cbz	r3, 800a556 <_sbrk_r+0x1a>
 800a554:	602b      	str	r3, [r5, #0]
 800a556:	bd38      	pop	{r3, r4, r5, pc}
 800a558:	20002e18 	.word	0x20002e18

0800a55c <__sread>:
 800a55c:	b510      	push	{r4, lr}
 800a55e:	460c      	mov	r4, r1
 800a560:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a564:	f000 faa2 	bl	800aaac <_read_r>
 800a568:	2800      	cmp	r0, #0
 800a56a:	bfab      	itete	ge
 800a56c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a56e:	89a3      	ldrhlt	r3, [r4, #12]
 800a570:	181b      	addge	r3, r3, r0
 800a572:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a576:	bfac      	ite	ge
 800a578:	6563      	strge	r3, [r4, #84]	; 0x54
 800a57a:	81a3      	strhlt	r3, [r4, #12]
 800a57c:	bd10      	pop	{r4, pc}

0800a57e <__swrite>:
 800a57e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a582:	461f      	mov	r7, r3
 800a584:	898b      	ldrh	r3, [r1, #12]
 800a586:	4605      	mov	r5, r0
 800a588:	05db      	lsls	r3, r3, #23
 800a58a:	460c      	mov	r4, r1
 800a58c:	4616      	mov	r6, r2
 800a58e:	d505      	bpl.n	800a59c <__swrite+0x1e>
 800a590:	2302      	movs	r3, #2
 800a592:	2200      	movs	r2, #0
 800a594:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a598:	f000 f9b6 	bl	800a908 <_lseek_r>
 800a59c:	89a3      	ldrh	r3, [r4, #12]
 800a59e:	4632      	mov	r2, r6
 800a5a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a5a4:	81a3      	strh	r3, [r4, #12]
 800a5a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a5aa:	463b      	mov	r3, r7
 800a5ac:	4628      	mov	r0, r5
 800a5ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a5b2:	f000 b869 	b.w	800a688 <_write_r>

0800a5b6 <__sseek>:
 800a5b6:	b510      	push	{r4, lr}
 800a5b8:	460c      	mov	r4, r1
 800a5ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5be:	f000 f9a3 	bl	800a908 <_lseek_r>
 800a5c2:	1c43      	adds	r3, r0, #1
 800a5c4:	89a3      	ldrh	r3, [r4, #12]
 800a5c6:	bf15      	itete	ne
 800a5c8:	6560      	strne	r0, [r4, #84]	; 0x54
 800a5ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a5ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a5d2:	81a3      	strheq	r3, [r4, #12]
 800a5d4:	bf18      	it	ne
 800a5d6:	81a3      	strhne	r3, [r4, #12]
 800a5d8:	bd10      	pop	{r4, pc}

0800a5da <__sclose>:
 800a5da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5de:	f000 b8d3 	b.w	800a788 <_close_r>
	...

0800a5e4 <__swbuf_r>:
 800a5e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5e6:	460e      	mov	r6, r1
 800a5e8:	4614      	mov	r4, r2
 800a5ea:	4605      	mov	r5, r0
 800a5ec:	b118      	cbz	r0, 800a5f6 <__swbuf_r+0x12>
 800a5ee:	6983      	ldr	r3, [r0, #24]
 800a5f0:	b90b      	cbnz	r3, 800a5f6 <__swbuf_r+0x12>
 800a5f2:	f7ff fbf9 	bl	8009de8 <__sinit>
 800a5f6:	4b21      	ldr	r3, [pc, #132]	; (800a67c <__swbuf_r+0x98>)
 800a5f8:	429c      	cmp	r4, r3
 800a5fa:	d12a      	bne.n	800a652 <__swbuf_r+0x6e>
 800a5fc:	686c      	ldr	r4, [r5, #4]
 800a5fe:	69a3      	ldr	r3, [r4, #24]
 800a600:	60a3      	str	r3, [r4, #8]
 800a602:	89a3      	ldrh	r3, [r4, #12]
 800a604:	071a      	lsls	r2, r3, #28
 800a606:	d52e      	bpl.n	800a666 <__swbuf_r+0x82>
 800a608:	6923      	ldr	r3, [r4, #16]
 800a60a:	b363      	cbz	r3, 800a666 <__swbuf_r+0x82>
 800a60c:	6923      	ldr	r3, [r4, #16]
 800a60e:	6820      	ldr	r0, [r4, #0]
 800a610:	b2f6      	uxtb	r6, r6
 800a612:	1ac0      	subs	r0, r0, r3
 800a614:	6963      	ldr	r3, [r4, #20]
 800a616:	4637      	mov	r7, r6
 800a618:	4283      	cmp	r3, r0
 800a61a:	dc04      	bgt.n	800a626 <__swbuf_r+0x42>
 800a61c:	4621      	mov	r1, r4
 800a61e:	4628      	mov	r0, r5
 800a620:	f000 f948 	bl	800a8b4 <_fflush_r>
 800a624:	bb28      	cbnz	r0, 800a672 <__swbuf_r+0x8e>
 800a626:	68a3      	ldr	r3, [r4, #8]
 800a628:	3001      	adds	r0, #1
 800a62a:	3b01      	subs	r3, #1
 800a62c:	60a3      	str	r3, [r4, #8]
 800a62e:	6823      	ldr	r3, [r4, #0]
 800a630:	1c5a      	adds	r2, r3, #1
 800a632:	6022      	str	r2, [r4, #0]
 800a634:	701e      	strb	r6, [r3, #0]
 800a636:	6963      	ldr	r3, [r4, #20]
 800a638:	4283      	cmp	r3, r0
 800a63a:	d004      	beq.n	800a646 <__swbuf_r+0x62>
 800a63c:	89a3      	ldrh	r3, [r4, #12]
 800a63e:	07db      	lsls	r3, r3, #31
 800a640:	d519      	bpl.n	800a676 <__swbuf_r+0x92>
 800a642:	2e0a      	cmp	r6, #10
 800a644:	d117      	bne.n	800a676 <__swbuf_r+0x92>
 800a646:	4621      	mov	r1, r4
 800a648:	4628      	mov	r0, r5
 800a64a:	f000 f933 	bl	800a8b4 <_fflush_r>
 800a64e:	b190      	cbz	r0, 800a676 <__swbuf_r+0x92>
 800a650:	e00f      	b.n	800a672 <__swbuf_r+0x8e>
 800a652:	4b0b      	ldr	r3, [pc, #44]	; (800a680 <__swbuf_r+0x9c>)
 800a654:	429c      	cmp	r4, r3
 800a656:	d101      	bne.n	800a65c <__swbuf_r+0x78>
 800a658:	68ac      	ldr	r4, [r5, #8]
 800a65a:	e7d0      	b.n	800a5fe <__swbuf_r+0x1a>
 800a65c:	4b09      	ldr	r3, [pc, #36]	; (800a684 <__swbuf_r+0xa0>)
 800a65e:	429c      	cmp	r4, r3
 800a660:	bf08      	it	eq
 800a662:	68ec      	ldreq	r4, [r5, #12]
 800a664:	e7cb      	b.n	800a5fe <__swbuf_r+0x1a>
 800a666:	4621      	mov	r1, r4
 800a668:	4628      	mov	r0, r5
 800a66a:	f000 f81f 	bl	800a6ac <__swsetup_r>
 800a66e:	2800      	cmp	r0, #0
 800a670:	d0cc      	beq.n	800a60c <__swbuf_r+0x28>
 800a672:	f04f 37ff 	mov.w	r7, #4294967295
 800a676:	4638      	mov	r0, r7
 800a678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a67a:	bf00      	nop
 800a67c:	0800c3cc 	.word	0x0800c3cc
 800a680:	0800c3ec 	.word	0x0800c3ec
 800a684:	0800c3ac 	.word	0x0800c3ac

0800a688 <_write_r>:
 800a688:	b538      	push	{r3, r4, r5, lr}
 800a68a:	4605      	mov	r5, r0
 800a68c:	4608      	mov	r0, r1
 800a68e:	4611      	mov	r1, r2
 800a690:	2200      	movs	r2, #0
 800a692:	4c05      	ldr	r4, [pc, #20]	; (800a6a8 <_write_r+0x20>)
 800a694:	6022      	str	r2, [r4, #0]
 800a696:	461a      	mov	r2, r3
 800a698:	f7fd fb2b 	bl	8007cf2 <_write>
 800a69c:	1c43      	adds	r3, r0, #1
 800a69e:	d102      	bne.n	800a6a6 <_write_r+0x1e>
 800a6a0:	6823      	ldr	r3, [r4, #0]
 800a6a2:	b103      	cbz	r3, 800a6a6 <_write_r+0x1e>
 800a6a4:	602b      	str	r3, [r5, #0]
 800a6a6:	bd38      	pop	{r3, r4, r5, pc}
 800a6a8:	20002e18 	.word	0x20002e18

0800a6ac <__swsetup_r>:
 800a6ac:	4b32      	ldr	r3, [pc, #200]	; (800a778 <__swsetup_r+0xcc>)
 800a6ae:	b570      	push	{r4, r5, r6, lr}
 800a6b0:	681d      	ldr	r5, [r3, #0]
 800a6b2:	4606      	mov	r6, r0
 800a6b4:	460c      	mov	r4, r1
 800a6b6:	b125      	cbz	r5, 800a6c2 <__swsetup_r+0x16>
 800a6b8:	69ab      	ldr	r3, [r5, #24]
 800a6ba:	b913      	cbnz	r3, 800a6c2 <__swsetup_r+0x16>
 800a6bc:	4628      	mov	r0, r5
 800a6be:	f7ff fb93 	bl	8009de8 <__sinit>
 800a6c2:	4b2e      	ldr	r3, [pc, #184]	; (800a77c <__swsetup_r+0xd0>)
 800a6c4:	429c      	cmp	r4, r3
 800a6c6:	d10f      	bne.n	800a6e8 <__swsetup_r+0x3c>
 800a6c8:	686c      	ldr	r4, [r5, #4]
 800a6ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6ce:	b29a      	uxth	r2, r3
 800a6d0:	0715      	lsls	r5, r2, #28
 800a6d2:	d42c      	bmi.n	800a72e <__swsetup_r+0x82>
 800a6d4:	06d0      	lsls	r0, r2, #27
 800a6d6:	d411      	bmi.n	800a6fc <__swsetup_r+0x50>
 800a6d8:	2209      	movs	r2, #9
 800a6da:	6032      	str	r2, [r6, #0]
 800a6dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6e0:	81a3      	strh	r3, [r4, #12]
 800a6e2:	f04f 30ff 	mov.w	r0, #4294967295
 800a6e6:	e03e      	b.n	800a766 <__swsetup_r+0xba>
 800a6e8:	4b25      	ldr	r3, [pc, #148]	; (800a780 <__swsetup_r+0xd4>)
 800a6ea:	429c      	cmp	r4, r3
 800a6ec:	d101      	bne.n	800a6f2 <__swsetup_r+0x46>
 800a6ee:	68ac      	ldr	r4, [r5, #8]
 800a6f0:	e7eb      	b.n	800a6ca <__swsetup_r+0x1e>
 800a6f2:	4b24      	ldr	r3, [pc, #144]	; (800a784 <__swsetup_r+0xd8>)
 800a6f4:	429c      	cmp	r4, r3
 800a6f6:	bf08      	it	eq
 800a6f8:	68ec      	ldreq	r4, [r5, #12]
 800a6fa:	e7e6      	b.n	800a6ca <__swsetup_r+0x1e>
 800a6fc:	0751      	lsls	r1, r2, #29
 800a6fe:	d512      	bpl.n	800a726 <__swsetup_r+0x7a>
 800a700:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a702:	b141      	cbz	r1, 800a716 <__swsetup_r+0x6a>
 800a704:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a708:	4299      	cmp	r1, r3
 800a70a:	d002      	beq.n	800a712 <__swsetup_r+0x66>
 800a70c:	4630      	mov	r0, r6
 800a70e:	f000 f981 	bl	800aa14 <_free_r>
 800a712:	2300      	movs	r3, #0
 800a714:	6363      	str	r3, [r4, #52]	; 0x34
 800a716:	89a3      	ldrh	r3, [r4, #12]
 800a718:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a71c:	81a3      	strh	r3, [r4, #12]
 800a71e:	2300      	movs	r3, #0
 800a720:	6063      	str	r3, [r4, #4]
 800a722:	6923      	ldr	r3, [r4, #16]
 800a724:	6023      	str	r3, [r4, #0]
 800a726:	89a3      	ldrh	r3, [r4, #12]
 800a728:	f043 0308 	orr.w	r3, r3, #8
 800a72c:	81a3      	strh	r3, [r4, #12]
 800a72e:	6923      	ldr	r3, [r4, #16]
 800a730:	b94b      	cbnz	r3, 800a746 <__swsetup_r+0x9a>
 800a732:	89a3      	ldrh	r3, [r4, #12]
 800a734:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a738:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a73c:	d003      	beq.n	800a746 <__swsetup_r+0x9a>
 800a73e:	4621      	mov	r1, r4
 800a740:	4630      	mov	r0, r6
 800a742:	f000 f917 	bl	800a974 <__smakebuf_r>
 800a746:	89a2      	ldrh	r2, [r4, #12]
 800a748:	f012 0301 	ands.w	r3, r2, #1
 800a74c:	d00c      	beq.n	800a768 <__swsetup_r+0xbc>
 800a74e:	2300      	movs	r3, #0
 800a750:	60a3      	str	r3, [r4, #8]
 800a752:	6963      	ldr	r3, [r4, #20]
 800a754:	425b      	negs	r3, r3
 800a756:	61a3      	str	r3, [r4, #24]
 800a758:	6923      	ldr	r3, [r4, #16]
 800a75a:	b953      	cbnz	r3, 800a772 <__swsetup_r+0xc6>
 800a75c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a760:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800a764:	d1ba      	bne.n	800a6dc <__swsetup_r+0x30>
 800a766:	bd70      	pop	{r4, r5, r6, pc}
 800a768:	0792      	lsls	r2, r2, #30
 800a76a:	bf58      	it	pl
 800a76c:	6963      	ldrpl	r3, [r4, #20]
 800a76e:	60a3      	str	r3, [r4, #8]
 800a770:	e7f2      	b.n	800a758 <__swsetup_r+0xac>
 800a772:	2000      	movs	r0, #0
 800a774:	e7f7      	b.n	800a766 <__swsetup_r+0xba>
 800a776:	bf00      	nop
 800a778:	20000034 	.word	0x20000034
 800a77c:	0800c3cc 	.word	0x0800c3cc
 800a780:	0800c3ec 	.word	0x0800c3ec
 800a784:	0800c3ac 	.word	0x0800c3ac

0800a788 <_close_r>:
 800a788:	b538      	push	{r3, r4, r5, lr}
 800a78a:	2300      	movs	r3, #0
 800a78c:	4c05      	ldr	r4, [pc, #20]	; (800a7a4 <_close_r+0x1c>)
 800a78e:	4605      	mov	r5, r0
 800a790:	4608      	mov	r0, r1
 800a792:	6023      	str	r3, [r4, #0]
 800a794:	f7fd fac9 	bl	8007d2a <_close>
 800a798:	1c43      	adds	r3, r0, #1
 800a79a:	d102      	bne.n	800a7a2 <_close_r+0x1a>
 800a79c:	6823      	ldr	r3, [r4, #0]
 800a79e:	b103      	cbz	r3, 800a7a2 <_close_r+0x1a>
 800a7a0:	602b      	str	r3, [r5, #0]
 800a7a2:	bd38      	pop	{r3, r4, r5, pc}
 800a7a4:	20002e18 	.word	0x20002e18

0800a7a8 <__sflush_r>:
 800a7a8:	898a      	ldrh	r2, [r1, #12]
 800a7aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7ae:	4605      	mov	r5, r0
 800a7b0:	0710      	lsls	r0, r2, #28
 800a7b2:	460c      	mov	r4, r1
 800a7b4:	d458      	bmi.n	800a868 <__sflush_r+0xc0>
 800a7b6:	684b      	ldr	r3, [r1, #4]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	dc05      	bgt.n	800a7c8 <__sflush_r+0x20>
 800a7bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	dc02      	bgt.n	800a7c8 <__sflush_r+0x20>
 800a7c2:	2000      	movs	r0, #0
 800a7c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a7ca:	2e00      	cmp	r6, #0
 800a7cc:	d0f9      	beq.n	800a7c2 <__sflush_r+0x1a>
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a7d4:	682f      	ldr	r7, [r5, #0]
 800a7d6:	6a21      	ldr	r1, [r4, #32]
 800a7d8:	602b      	str	r3, [r5, #0]
 800a7da:	d032      	beq.n	800a842 <__sflush_r+0x9a>
 800a7dc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a7de:	89a3      	ldrh	r3, [r4, #12]
 800a7e0:	075a      	lsls	r2, r3, #29
 800a7e2:	d505      	bpl.n	800a7f0 <__sflush_r+0x48>
 800a7e4:	6863      	ldr	r3, [r4, #4]
 800a7e6:	1ac0      	subs	r0, r0, r3
 800a7e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a7ea:	b10b      	cbz	r3, 800a7f0 <__sflush_r+0x48>
 800a7ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a7ee:	1ac0      	subs	r0, r0, r3
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	4602      	mov	r2, r0
 800a7f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a7f6:	6a21      	ldr	r1, [r4, #32]
 800a7f8:	4628      	mov	r0, r5
 800a7fa:	47b0      	blx	r6
 800a7fc:	1c43      	adds	r3, r0, #1
 800a7fe:	89a3      	ldrh	r3, [r4, #12]
 800a800:	d106      	bne.n	800a810 <__sflush_r+0x68>
 800a802:	6829      	ldr	r1, [r5, #0]
 800a804:	291d      	cmp	r1, #29
 800a806:	d848      	bhi.n	800a89a <__sflush_r+0xf2>
 800a808:	4a29      	ldr	r2, [pc, #164]	; (800a8b0 <__sflush_r+0x108>)
 800a80a:	40ca      	lsrs	r2, r1
 800a80c:	07d6      	lsls	r6, r2, #31
 800a80e:	d544      	bpl.n	800a89a <__sflush_r+0xf2>
 800a810:	2200      	movs	r2, #0
 800a812:	6062      	str	r2, [r4, #4]
 800a814:	6922      	ldr	r2, [r4, #16]
 800a816:	04d9      	lsls	r1, r3, #19
 800a818:	6022      	str	r2, [r4, #0]
 800a81a:	d504      	bpl.n	800a826 <__sflush_r+0x7e>
 800a81c:	1c42      	adds	r2, r0, #1
 800a81e:	d101      	bne.n	800a824 <__sflush_r+0x7c>
 800a820:	682b      	ldr	r3, [r5, #0]
 800a822:	b903      	cbnz	r3, 800a826 <__sflush_r+0x7e>
 800a824:	6560      	str	r0, [r4, #84]	; 0x54
 800a826:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a828:	602f      	str	r7, [r5, #0]
 800a82a:	2900      	cmp	r1, #0
 800a82c:	d0c9      	beq.n	800a7c2 <__sflush_r+0x1a>
 800a82e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a832:	4299      	cmp	r1, r3
 800a834:	d002      	beq.n	800a83c <__sflush_r+0x94>
 800a836:	4628      	mov	r0, r5
 800a838:	f000 f8ec 	bl	800aa14 <_free_r>
 800a83c:	2000      	movs	r0, #0
 800a83e:	6360      	str	r0, [r4, #52]	; 0x34
 800a840:	e7c0      	b.n	800a7c4 <__sflush_r+0x1c>
 800a842:	2301      	movs	r3, #1
 800a844:	4628      	mov	r0, r5
 800a846:	47b0      	blx	r6
 800a848:	1c41      	adds	r1, r0, #1
 800a84a:	d1c8      	bne.n	800a7de <__sflush_r+0x36>
 800a84c:	682b      	ldr	r3, [r5, #0]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d0c5      	beq.n	800a7de <__sflush_r+0x36>
 800a852:	2b1d      	cmp	r3, #29
 800a854:	d001      	beq.n	800a85a <__sflush_r+0xb2>
 800a856:	2b16      	cmp	r3, #22
 800a858:	d101      	bne.n	800a85e <__sflush_r+0xb6>
 800a85a:	602f      	str	r7, [r5, #0]
 800a85c:	e7b1      	b.n	800a7c2 <__sflush_r+0x1a>
 800a85e:	89a3      	ldrh	r3, [r4, #12]
 800a860:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a864:	81a3      	strh	r3, [r4, #12]
 800a866:	e7ad      	b.n	800a7c4 <__sflush_r+0x1c>
 800a868:	690f      	ldr	r7, [r1, #16]
 800a86a:	2f00      	cmp	r7, #0
 800a86c:	d0a9      	beq.n	800a7c2 <__sflush_r+0x1a>
 800a86e:	0793      	lsls	r3, r2, #30
 800a870:	bf18      	it	ne
 800a872:	2300      	movne	r3, #0
 800a874:	680e      	ldr	r6, [r1, #0]
 800a876:	bf08      	it	eq
 800a878:	694b      	ldreq	r3, [r1, #20]
 800a87a:	eba6 0807 	sub.w	r8, r6, r7
 800a87e:	600f      	str	r7, [r1, #0]
 800a880:	608b      	str	r3, [r1, #8]
 800a882:	f1b8 0f00 	cmp.w	r8, #0
 800a886:	dd9c      	ble.n	800a7c2 <__sflush_r+0x1a>
 800a888:	4643      	mov	r3, r8
 800a88a:	463a      	mov	r2, r7
 800a88c:	6a21      	ldr	r1, [r4, #32]
 800a88e:	4628      	mov	r0, r5
 800a890:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a892:	47b0      	blx	r6
 800a894:	2800      	cmp	r0, #0
 800a896:	dc06      	bgt.n	800a8a6 <__sflush_r+0xfe>
 800a898:	89a3      	ldrh	r3, [r4, #12]
 800a89a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a89e:	81a3      	strh	r3, [r4, #12]
 800a8a0:	f04f 30ff 	mov.w	r0, #4294967295
 800a8a4:	e78e      	b.n	800a7c4 <__sflush_r+0x1c>
 800a8a6:	4407      	add	r7, r0
 800a8a8:	eba8 0800 	sub.w	r8, r8, r0
 800a8ac:	e7e9      	b.n	800a882 <__sflush_r+0xda>
 800a8ae:	bf00      	nop
 800a8b0:	20400001 	.word	0x20400001

0800a8b4 <_fflush_r>:
 800a8b4:	b538      	push	{r3, r4, r5, lr}
 800a8b6:	690b      	ldr	r3, [r1, #16]
 800a8b8:	4605      	mov	r5, r0
 800a8ba:	460c      	mov	r4, r1
 800a8bc:	b1db      	cbz	r3, 800a8f6 <_fflush_r+0x42>
 800a8be:	b118      	cbz	r0, 800a8c8 <_fflush_r+0x14>
 800a8c0:	6983      	ldr	r3, [r0, #24]
 800a8c2:	b90b      	cbnz	r3, 800a8c8 <_fflush_r+0x14>
 800a8c4:	f7ff fa90 	bl	8009de8 <__sinit>
 800a8c8:	4b0c      	ldr	r3, [pc, #48]	; (800a8fc <_fflush_r+0x48>)
 800a8ca:	429c      	cmp	r4, r3
 800a8cc:	d109      	bne.n	800a8e2 <_fflush_r+0x2e>
 800a8ce:	686c      	ldr	r4, [r5, #4]
 800a8d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8d4:	b17b      	cbz	r3, 800a8f6 <_fflush_r+0x42>
 800a8d6:	4621      	mov	r1, r4
 800a8d8:	4628      	mov	r0, r5
 800a8da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a8de:	f7ff bf63 	b.w	800a7a8 <__sflush_r>
 800a8e2:	4b07      	ldr	r3, [pc, #28]	; (800a900 <_fflush_r+0x4c>)
 800a8e4:	429c      	cmp	r4, r3
 800a8e6:	d101      	bne.n	800a8ec <_fflush_r+0x38>
 800a8e8:	68ac      	ldr	r4, [r5, #8]
 800a8ea:	e7f1      	b.n	800a8d0 <_fflush_r+0x1c>
 800a8ec:	4b05      	ldr	r3, [pc, #20]	; (800a904 <_fflush_r+0x50>)
 800a8ee:	429c      	cmp	r4, r3
 800a8f0:	bf08      	it	eq
 800a8f2:	68ec      	ldreq	r4, [r5, #12]
 800a8f4:	e7ec      	b.n	800a8d0 <_fflush_r+0x1c>
 800a8f6:	2000      	movs	r0, #0
 800a8f8:	bd38      	pop	{r3, r4, r5, pc}
 800a8fa:	bf00      	nop
 800a8fc:	0800c3cc 	.word	0x0800c3cc
 800a900:	0800c3ec 	.word	0x0800c3ec
 800a904:	0800c3ac 	.word	0x0800c3ac

0800a908 <_lseek_r>:
 800a908:	b538      	push	{r3, r4, r5, lr}
 800a90a:	4605      	mov	r5, r0
 800a90c:	4608      	mov	r0, r1
 800a90e:	4611      	mov	r1, r2
 800a910:	2200      	movs	r2, #0
 800a912:	4c05      	ldr	r4, [pc, #20]	; (800a928 <_lseek_r+0x20>)
 800a914:	6022      	str	r2, [r4, #0]
 800a916:	461a      	mov	r2, r3
 800a918:	f7fd fa2b 	bl	8007d72 <_lseek>
 800a91c:	1c43      	adds	r3, r0, #1
 800a91e:	d102      	bne.n	800a926 <_lseek_r+0x1e>
 800a920:	6823      	ldr	r3, [r4, #0]
 800a922:	b103      	cbz	r3, 800a926 <_lseek_r+0x1e>
 800a924:	602b      	str	r3, [r5, #0]
 800a926:	bd38      	pop	{r3, r4, r5, pc}
 800a928:	20002e18 	.word	0x20002e18

0800a92c <__swhatbuf_r>:
 800a92c:	b570      	push	{r4, r5, r6, lr}
 800a92e:	460e      	mov	r6, r1
 800a930:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a934:	b096      	sub	sp, #88	; 0x58
 800a936:	2900      	cmp	r1, #0
 800a938:	4614      	mov	r4, r2
 800a93a:	461d      	mov	r5, r3
 800a93c:	da07      	bge.n	800a94e <__swhatbuf_r+0x22>
 800a93e:	2300      	movs	r3, #0
 800a940:	602b      	str	r3, [r5, #0]
 800a942:	89b3      	ldrh	r3, [r6, #12]
 800a944:	061a      	lsls	r2, r3, #24
 800a946:	d410      	bmi.n	800a96a <__swhatbuf_r+0x3e>
 800a948:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a94c:	e00e      	b.n	800a96c <__swhatbuf_r+0x40>
 800a94e:	466a      	mov	r2, sp
 800a950:	f000 f8be 	bl	800aad0 <_fstat_r>
 800a954:	2800      	cmp	r0, #0
 800a956:	dbf2      	blt.n	800a93e <__swhatbuf_r+0x12>
 800a958:	9a01      	ldr	r2, [sp, #4]
 800a95a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a95e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a962:	425a      	negs	r2, r3
 800a964:	415a      	adcs	r2, r3
 800a966:	602a      	str	r2, [r5, #0]
 800a968:	e7ee      	b.n	800a948 <__swhatbuf_r+0x1c>
 800a96a:	2340      	movs	r3, #64	; 0x40
 800a96c:	2000      	movs	r0, #0
 800a96e:	6023      	str	r3, [r4, #0]
 800a970:	b016      	add	sp, #88	; 0x58
 800a972:	bd70      	pop	{r4, r5, r6, pc}

0800a974 <__smakebuf_r>:
 800a974:	898b      	ldrh	r3, [r1, #12]
 800a976:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a978:	079d      	lsls	r5, r3, #30
 800a97a:	4606      	mov	r6, r0
 800a97c:	460c      	mov	r4, r1
 800a97e:	d507      	bpl.n	800a990 <__smakebuf_r+0x1c>
 800a980:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a984:	6023      	str	r3, [r4, #0]
 800a986:	6123      	str	r3, [r4, #16]
 800a988:	2301      	movs	r3, #1
 800a98a:	6163      	str	r3, [r4, #20]
 800a98c:	b002      	add	sp, #8
 800a98e:	bd70      	pop	{r4, r5, r6, pc}
 800a990:	ab01      	add	r3, sp, #4
 800a992:	466a      	mov	r2, sp
 800a994:	f7ff ffca 	bl	800a92c <__swhatbuf_r>
 800a998:	9900      	ldr	r1, [sp, #0]
 800a99a:	4605      	mov	r5, r0
 800a99c:	4630      	mov	r0, r6
 800a99e:	f7ff faad 	bl	8009efc <_malloc_r>
 800a9a2:	b948      	cbnz	r0, 800a9b8 <__smakebuf_r+0x44>
 800a9a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9a8:	059a      	lsls	r2, r3, #22
 800a9aa:	d4ef      	bmi.n	800a98c <__smakebuf_r+0x18>
 800a9ac:	f023 0303 	bic.w	r3, r3, #3
 800a9b0:	f043 0302 	orr.w	r3, r3, #2
 800a9b4:	81a3      	strh	r3, [r4, #12]
 800a9b6:	e7e3      	b.n	800a980 <__smakebuf_r+0xc>
 800a9b8:	4b0d      	ldr	r3, [pc, #52]	; (800a9f0 <__smakebuf_r+0x7c>)
 800a9ba:	62b3      	str	r3, [r6, #40]	; 0x28
 800a9bc:	89a3      	ldrh	r3, [r4, #12]
 800a9be:	6020      	str	r0, [r4, #0]
 800a9c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9c4:	81a3      	strh	r3, [r4, #12]
 800a9c6:	9b00      	ldr	r3, [sp, #0]
 800a9c8:	6120      	str	r0, [r4, #16]
 800a9ca:	6163      	str	r3, [r4, #20]
 800a9cc:	9b01      	ldr	r3, [sp, #4]
 800a9ce:	b15b      	cbz	r3, 800a9e8 <__smakebuf_r+0x74>
 800a9d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a9d4:	4630      	mov	r0, r6
 800a9d6:	f000 f88d 	bl	800aaf4 <_isatty_r>
 800a9da:	b128      	cbz	r0, 800a9e8 <__smakebuf_r+0x74>
 800a9dc:	89a3      	ldrh	r3, [r4, #12]
 800a9de:	f023 0303 	bic.w	r3, r3, #3
 800a9e2:	f043 0301 	orr.w	r3, r3, #1
 800a9e6:	81a3      	strh	r3, [r4, #12]
 800a9e8:	89a3      	ldrh	r3, [r4, #12]
 800a9ea:	431d      	orrs	r5, r3
 800a9ec:	81a5      	strh	r5, [r4, #12]
 800a9ee:	e7cd      	b.n	800a98c <__smakebuf_r+0x18>
 800a9f0:	08009db1 	.word	0x08009db1

0800a9f4 <memchr>:
 800a9f4:	b510      	push	{r4, lr}
 800a9f6:	b2c9      	uxtb	r1, r1
 800a9f8:	4402      	add	r2, r0
 800a9fa:	4290      	cmp	r0, r2
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	d101      	bne.n	800aa04 <memchr+0x10>
 800aa00:	2300      	movs	r3, #0
 800aa02:	e003      	b.n	800aa0c <memchr+0x18>
 800aa04:	781c      	ldrb	r4, [r3, #0]
 800aa06:	3001      	adds	r0, #1
 800aa08:	428c      	cmp	r4, r1
 800aa0a:	d1f6      	bne.n	800a9fa <memchr+0x6>
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	bd10      	pop	{r4, pc}

0800aa10 <__malloc_lock>:
 800aa10:	4770      	bx	lr

0800aa12 <__malloc_unlock>:
 800aa12:	4770      	bx	lr

0800aa14 <_free_r>:
 800aa14:	b538      	push	{r3, r4, r5, lr}
 800aa16:	4605      	mov	r5, r0
 800aa18:	2900      	cmp	r1, #0
 800aa1a:	d043      	beq.n	800aaa4 <_free_r+0x90>
 800aa1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa20:	1f0c      	subs	r4, r1, #4
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	bfb8      	it	lt
 800aa26:	18e4      	addlt	r4, r4, r3
 800aa28:	f7ff fff2 	bl	800aa10 <__malloc_lock>
 800aa2c:	4a1e      	ldr	r2, [pc, #120]	; (800aaa8 <_free_r+0x94>)
 800aa2e:	6813      	ldr	r3, [r2, #0]
 800aa30:	4610      	mov	r0, r2
 800aa32:	b933      	cbnz	r3, 800aa42 <_free_r+0x2e>
 800aa34:	6063      	str	r3, [r4, #4]
 800aa36:	6014      	str	r4, [r2, #0]
 800aa38:	4628      	mov	r0, r5
 800aa3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aa3e:	f7ff bfe8 	b.w	800aa12 <__malloc_unlock>
 800aa42:	42a3      	cmp	r3, r4
 800aa44:	d90b      	bls.n	800aa5e <_free_r+0x4a>
 800aa46:	6821      	ldr	r1, [r4, #0]
 800aa48:	1862      	adds	r2, r4, r1
 800aa4a:	4293      	cmp	r3, r2
 800aa4c:	bf01      	itttt	eq
 800aa4e:	681a      	ldreq	r2, [r3, #0]
 800aa50:	685b      	ldreq	r3, [r3, #4]
 800aa52:	1852      	addeq	r2, r2, r1
 800aa54:	6022      	streq	r2, [r4, #0]
 800aa56:	6063      	str	r3, [r4, #4]
 800aa58:	6004      	str	r4, [r0, #0]
 800aa5a:	e7ed      	b.n	800aa38 <_free_r+0x24>
 800aa5c:	4613      	mov	r3, r2
 800aa5e:	685a      	ldr	r2, [r3, #4]
 800aa60:	b10a      	cbz	r2, 800aa66 <_free_r+0x52>
 800aa62:	42a2      	cmp	r2, r4
 800aa64:	d9fa      	bls.n	800aa5c <_free_r+0x48>
 800aa66:	6819      	ldr	r1, [r3, #0]
 800aa68:	1858      	adds	r0, r3, r1
 800aa6a:	42a0      	cmp	r0, r4
 800aa6c:	d10b      	bne.n	800aa86 <_free_r+0x72>
 800aa6e:	6820      	ldr	r0, [r4, #0]
 800aa70:	4401      	add	r1, r0
 800aa72:	1858      	adds	r0, r3, r1
 800aa74:	4282      	cmp	r2, r0
 800aa76:	6019      	str	r1, [r3, #0]
 800aa78:	d1de      	bne.n	800aa38 <_free_r+0x24>
 800aa7a:	6810      	ldr	r0, [r2, #0]
 800aa7c:	6852      	ldr	r2, [r2, #4]
 800aa7e:	4401      	add	r1, r0
 800aa80:	6019      	str	r1, [r3, #0]
 800aa82:	605a      	str	r2, [r3, #4]
 800aa84:	e7d8      	b.n	800aa38 <_free_r+0x24>
 800aa86:	d902      	bls.n	800aa8e <_free_r+0x7a>
 800aa88:	230c      	movs	r3, #12
 800aa8a:	602b      	str	r3, [r5, #0]
 800aa8c:	e7d4      	b.n	800aa38 <_free_r+0x24>
 800aa8e:	6820      	ldr	r0, [r4, #0]
 800aa90:	1821      	adds	r1, r4, r0
 800aa92:	428a      	cmp	r2, r1
 800aa94:	bf01      	itttt	eq
 800aa96:	6811      	ldreq	r1, [r2, #0]
 800aa98:	6852      	ldreq	r2, [r2, #4]
 800aa9a:	1809      	addeq	r1, r1, r0
 800aa9c:	6021      	streq	r1, [r4, #0]
 800aa9e:	6062      	str	r2, [r4, #4]
 800aaa0:	605c      	str	r4, [r3, #4]
 800aaa2:	e7c9      	b.n	800aa38 <_free_r+0x24>
 800aaa4:	bd38      	pop	{r3, r4, r5, pc}
 800aaa6:	bf00      	nop
 800aaa8:	200024f0 	.word	0x200024f0

0800aaac <_read_r>:
 800aaac:	b538      	push	{r3, r4, r5, lr}
 800aaae:	4605      	mov	r5, r0
 800aab0:	4608      	mov	r0, r1
 800aab2:	4611      	mov	r1, r2
 800aab4:	2200      	movs	r2, #0
 800aab6:	4c05      	ldr	r4, [pc, #20]	; (800aacc <_read_r+0x20>)
 800aab8:	6022      	str	r2, [r4, #0]
 800aaba:	461a      	mov	r2, r3
 800aabc:	f7fd f8fc 	bl	8007cb8 <_read>
 800aac0:	1c43      	adds	r3, r0, #1
 800aac2:	d102      	bne.n	800aaca <_read_r+0x1e>
 800aac4:	6823      	ldr	r3, [r4, #0]
 800aac6:	b103      	cbz	r3, 800aaca <_read_r+0x1e>
 800aac8:	602b      	str	r3, [r5, #0]
 800aaca:	bd38      	pop	{r3, r4, r5, pc}
 800aacc:	20002e18 	.word	0x20002e18

0800aad0 <_fstat_r>:
 800aad0:	b538      	push	{r3, r4, r5, lr}
 800aad2:	2300      	movs	r3, #0
 800aad4:	4c06      	ldr	r4, [pc, #24]	; (800aaf0 <_fstat_r+0x20>)
 800aad6:	4605      	mov	r5, r0
 800aad8:	4608      	mov	r0, r1
 800aada:	4611      	mov	r1, r2
 800aadc:	6023      	str	r3, [r4, #0]
 800aade:	f7fd f92f 	bl	8007d40 <_fstat>
 800aae2:	1c43      	adds	r3, r0, #1
 800aae4:	d102      	bne.n	800aaec <_fstat_r+0x1c>
 800aae6:	6823      	ldr	r3, [r4, #0]
 800aae8:	b103      	cbz	r3, 800aaec <_fstat_r+0x1c>
 800aaea:	602b      	str	r3, [r5, #0]
 800aaec:	bd38      	pop	{r3, r4, r5, pc}
 800aaee:	bf00      	nop
 800aaf0:	20002e18 	.word	0x20002e18

0800aaf4 <_isatty_r>:
 800aaf4:	b538      	push	{r3, r4, r5, lr}
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	4c05      	ldr	r4, [pc, #20]	; (800ab10 <_isatty_r+0x1c>)
 800aafa:	4605      	mov	r5, r0
 800aafc:	4608      	mov	r0, r1
 800aafe:	6023      	str	r3, [r4, #0]
 800ab00:	f7fd f92d 	bl	8007d5e <_isatty>
 800ab04:	1c43      	adds	r3, r0, #1
 800ab06:	d102      	bne.n	800ab0e <_isatty_r+0x1a>
 800ab08:	6823      	ldr	r3, [r4, #0]
 800ab0a:	b103      	cbz	r3, 800ab0e <_isatty_r+0x1a>
 800ab0c:	602b      	str	r3, [r5, #0]
 800ab0e:	bd38      	pop	{r3, r4, r5, pc}
 800ab10:	20002e18 	.word	0x20002e18

0800ab14 <_init>:
 800ab14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab16:	bf00      	nop
 800ab18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab1a:	bc08      	pop	{r3}
 800ab1c:	469e      	mov	lr, r3
 800ab1e:	4770      	bx	lr

0800ab20 <_fini>:
 800ab20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab22:	bf00      	nop
 800ab24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab26:	bc08      	pop	{r3}
 800ab28:	469e      	mov	lr, r3
 800ab2a:	4770      	bx	lr
